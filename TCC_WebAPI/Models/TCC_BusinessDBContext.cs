using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace TCC_WebAPI.Models
{
    public partial class TCC_BusinessDBContext : DbContext
    {
        public TCC_BusinessDBContext()
        {
        }

        public TCC_BusinessDBContext(DbContextOptions<TCC_BusinessDBContext> options)
            : base(options)
        {
        }

        public virtual DbSet<A> As { get; set; }
        public virtual DbSet<ADemoUpdateTrg> ADemoUpdateTrgs { get; set; }
        public virtual DbSet<ATmpSubjectCode> ATmpSubjectCodes { get; set; }
        public virtual DbSet<Aaa> Aaas { get; set; }
        public virtual DbSet<Aaa4> Aaa4s { get; set; }
        public virtual DbSet<Abc> Abcs { get; set; }
        public virtual DbSet<AbroadSecurity> AbroadSecurities { get; set; }
        public virtual DbSet<AbroadTask> AbroadTasks { get; set; }
        public virtual DbSet<AbroadUser> AbroadUsers { get; set; }
        public virtual DbSet<AbroadVisaValid> AbroadVisaValids { get; set; }
        public virtual DbSet<AbroadWordAtt> AbroadWordAtts { get; set; }
        public virtual DbSet<ApprovedRecord> ApprovedRecords { get; set; }
        public virtual DbSet<ApprovedRecord02> ApprovedRecord02s { get; set; }
        public virtual DbSet<ApprovedRecordDrawingArchiveApply> ApprovedRecordDrawingArchiveApplies { get; set; }
        public virtual DbSet<ApprovedRecordExtend> ApprovedRecordExtends { get; set; }
        public virtual DbSet<Article> Articles { get; set; }
        public virtual DbSet<Astest> Astests { get; set; }
        public virtual DbSet<AteList> AteLists { get; set; }
        public virtual DbSet<AwardMoneyDispenseHistory> AwardMoneyDispenseHistories { get; set; }
        public virtual DbSet<AwardMoneyPartHistory> AwardMoneyPartHistories { get; set; }
        public virtual DbSet<AwardPool> AwardPools { get; set; }
        public virtual DbSet<AwardPool3> AwardPool3s { get; set; }
        public virtual DbSet<AwardPool42> AwardPool42s { get; set; }
        public virtual DbSet<AwardPoolForTest> AwardPoolForTests { get; set; }
        public virtual DbSet<AwardPoolNew> AwardPoolNews { get; set; }
        public virtual DbSet<BSqlCodeType> BSqlCodeTypes { get; set; }
        public virtual DbSet<BSqlConfig> BSqlConfigs { get; set; }
        public virtual DbSet<BaseTable> BaseTables { get; set; }
        public virtual DbSet<Basic> Basics { get; set; }
        public virtual DbSet<Bpmsapplog20180906> Bpmsapplog20180906s { get; set; }
        public virtual DbSet<Budget> Budgets { get; set; }
        public virtual DbSet<Calendar> Calendars { get; set; }
        public virtual DbSet<CheckPaymentCreateVourcherLog> CheckPaymentCreateVourcherLogs { get; set; }
        public virtual DbSet<CheckPaymentVourcherLock> CheckPaymentVourcherLocks { get; set; }
        public virtual DbSet<CommonDic> CommonDics { get; set; }
        public virtual DbSet<CommonDic20181127> CommonDic20181127s { get; set; }
        public virtual DbSet<ConfigAbroadAtt> ConfigAbroadAtts { get; set; }
        public virtual DbSet<ConfigAbroadInsStandard> ConfigAbroadInsStandards { get; set; }
        public virtual DbSet<ConfigAbroadSubCountry> ConfigAbroadSubCountries { get; set; }
        public virtual DbSet<ConfigAbroadTypeInfo> ConfigAbroadTypeInfos { get; set; }
        public virtual DbSet<ConfigAbroadValid> ConfigAbroadValids { get; set; }
        public virtual DbSet<ConfigApproved> ConfigApproveds { get; set; }
        public virtual DbSet<ConfigApprovedExtend> ConfigApprovedExtends { get; set; }
        public virtual DbSet<ConfigApprovedRole> ConfigApprovedRoles { get; set; }
        public virtual DbSet<ConfigAwardControler> ConfigAwardControlers { get; set; }
        public virtual DbSet<ConfigAwardControlerApplyTime> ConfigAwardControlerApplyTimes { get; set; }
        public virtual DbSet<ConfigAwardDispenseType> ConfigAwardDispenseTypes { get; set; }
        public virtual DbSet<ConfigBalanceValidProject> ConfigBalanceValidProjects { get; set; }
        public virtual DbSet<ConfigBasicOption> ConfigBasicOptions { get; set; }
        public virtual DbSet<ConfigBranchOffice> ConfigBranchOffices { get; set; }
        public virtual DbSet<ConfigBudgetApplicationLink> ConfigBudgetApplicationLinks { get; set; }
        public virtual DbSet<ConfigBudgetApplicationLink20160325bak> ConfigBudgetApplicationLink20160325baks { get; set; }
        public virtual DbSet<ConfigBudgetApplicationLink20160415bak> ConfigBudgetApplicationLink20160415baks { get; set; }
        public virtual DbSet<ConfigBudgetApplicationLinkLog> ConfigBudgetApplicationLinkLogs { get; set; }
        public virtual DbSet<ConfigCodeitem> ConfigCodeitems { get; set; }
        public virtual DbSet<ConfigCorrespondenceouPuhua> ConfigCorrespondenceouPuhuas { get; set; }
        public virtual DbSet<ConfigDepartmentAccount> ConfigDepartmentAccounts { get; set; }
        public virtual DbSet<ConfigDeptApplyBySetting> ConfigDeptApplyBySettings { get; set; }
        public virtual DbSet<ConfigDeptPressureCoefficient> ConfigDeptPressureCoefficients { get; set; }
        public virtual DbSet<ConfigGeneralExpensesRuningCost> ConfigGeneralExpensesRuningCosts { get; set; }
        public virtual DbSet<ConfigLeaveInfoStep> ConfigLeaveInfoSteps { get; set; }
        public virtual DbSet<ConfigLeaveTypeInfo> ConfigLeaveTypeInfos { get; set; }
        public virtual DbSet<ConfigMessageSummaryStep> ConfigMessageSummarySteps { get; set; }
        public virtual DbSet<ConfigMessageTemplate> ConfigMessageTemplates { get; set; }
        public virtual DbSet<ConfigMonthlyPlanApplicationInfo> ConfigMonthlyPlanApplicationInfos { get; set; }
        public virtual DbSet<ConfigPageNoPermissionPathsConfiguration> ConfigPageNoPermissionPathsConfigurations { get; set; }
        public virtual DbSet<ConfigPagePermissionsConfiguration> ConfigPagePermissionsConfigurations { get; set; }
        public virtual DbSet<ConfigPaymentCategorySubjectCode> ConfigPaymentCategorySubjectCodes { get; set; }
        public virtual DbSet<ConfigPaymentCategorySubjectCodeForSpecial> ConfigPaymentCategorySubjectCodeForSpecials { get; set; }
        public virtual DbSet<ConfigPaymentCategorySubjectCodeForTaxRate> ConfigPaymentCategorySubjectCodeForTaxRates { get; set; }
        public virtual DbSet<ConfigPaymentProcessValidContract> ConfigPaymentProcessValidContracts { get; set; }
        public virtual DbSet<ConfigPaymentProcessValidContractForProject> ConfigPaymentProcessValidContractForProjects { get; set; }
        public virtual DbSet<ConfigPaymentProcessValidProject> ConfigPaymentProcessValidProjects { get; set; }
        public virtual DbSet<ConfigProcessAutoAbort> ConfigProcessAutoAborts { get; set; }
        public virtual DbSet<ConfigProcessForm> ConfigProcessForms { get; set; }
        public virtual DbSet<ConfigProcessname> ConfigProcessnames { get; set; }
        public virtual DbSet<ConfigPurchaseItemBudget> ConfigPurchaseItemBudgets { get; set; }
        public virtual DbSet<ConfigPurchaseType> ConfigPurchaseTypes { get; set; }
        public virtual DbSet<ConfigReceivedSubjectCode> ConfigReceivedSubjectCodes { get; set; }
        public virtual DbSet<ConfigRiskEstimate> ConfigRiskEstimates { get; set; }
        public virtual DbSet<ConfigSpecialDate> ConfigSpecialDates { get; set; }
        public virtual DbSet<ConfigSpecialDate20190403> ConfigSpecialDate20190403s { get; set; }
        public virtual DbSet<ConfigSpecialProcess> ConfigSpecialProcesses { get; set; }
        public virtual DbSet<ConfigSpecialStandard> ConfigSpecialStandards { get; set; }
        public virtual DbSet<ConfigSubjectRelation> ConfigSubjectRelations { get; set; }
        public virtual DbSet<ConfigSurveyRisk> ConfigSurveyRisks { get; set; }
        public virtual DbSet<ConfigSurveySuggest> ConfigSurveySuggests { get; set; }
        public virtual DbSet<ConfigTaskProcessFormExclude> ConfigTaskProcessFormExcludes { get; set; }
        public virtual DbSet<ConfigTaskProcessFormExcludeAword> ConfigTaskProcessFormExcludeAwords { get; set; }
        public virtual DbSet<ConfigTaxesPayableForDictionary> ConfigTaxesPayableForDictionaries { get; set; }
        public virtual DbSet<ConfigTccPayInfo> ConfigTccPayInfos { get; set; }
        public virtual DbSet<ConfigTransferUrl> ConfigTransferUrls { get; set; }
        public virtual DbSet<ConfigUseCategory> ConfigUseCategories { get; set; }
        public virtual DbSet<ConfigWarningMessageTemplate> ConfigWarningMessageTemplates { get; set; }
        public virtual DbSet<ConfigWarningTime> ConfigWarningTimes { get; set; }
        public virtual DbSet<ConfigWarningUser> ConfigWarningUsers { get; set; }
        public virtual DbSet<CopiedIncident> CopiedIncidents { get; set; }
        public virtual DbSet<CopiedTask> CopiedTasks { get; set; }
        public virtual DbSet<CpDisTask> CpDisTasks { get; set; }
        public virtual DbSet<CpDisTaskLog> CpDisTaskLogs { get; set; }
        public virtual DbSet<CpTask> CpTasks { get; set; }
        public virtual DbSet<CpTaskLog> CpTaskLogs { get; set; }
        public virtual DbSet<CpTaskThirdparty> CpTaskThirdparties { get; set; }
        public virtual DbSet<CpTaskThirdpartyLog> CpTaskThirdpartyLogs { get; set; }
        public virtual DbSet<CyvehicleFareInfo> CyvehicleFareInfos { get; set; }
        public virtual DbSet<D> Ds { get; set; }
        public virtual DbSet<DepartmentWorkPlanCheck> DepartmentWorkPlanChecks { get; set; }
        public virtual DbSet<DepartmentWorkPlanCheckDetail> DepartmentWorkPlanCheckDetails { get; set; }
        public virtual DbSet<DictNotarizeApply> DictNotarizeApplies { get; set; }
        public virtual DbSet<DriverOverStandard> DriverOverStandards { get; set; }
        public virtual DbSet<DriverOverTime> DriverOverTimes { get; set; }
        public virtual DbSet<FinanceAppInfo> FinanceAppInfos { get; set; }
        public virtual DbSet<FinanceProcessStep> FinanceProcessSteps { get; set; }
        public virtual DbSet<FinanceRequestProcess> FinanceRequestProcesses { get; set; }
        public virtual DbSet<FinanceRequestProcessBillsDeleteInfo> FinanceRequestProcessBillsDeleteInfos { get; set; }
        public virtual DbSet<FinanceRequestProcessBillsInfo> FinanceRequestProcessBillsInfos { get; set; }
        public virtual DbSet<FinanceRequestProcessBillsNoProject> FinanceRequestProcessBillsNoProjects { get; set; }
        public virtual DbSet<FinanceRequestProcessContract> FinanceRequestProcessContracts { get; set; }
        public virtual DbSet<FinanceRequestProcessExchangeInfo> FinanceRequestProcessExchangeInfos { get; set; }
        public virtual DbSet<FinanceRequestProcessForPrintDetail> FinanceRequestProcessForPrintDetails { get; set; }
        public virtual DbSet<FinanceRequestProcessForPrintHeader> FinanceRequestProcessForPrintHeaders { get; set; }
        public virtual DbSet<FinanceRequestProcessOfCashier> FinanceRequestProcessOfCashiers { get; set; }
        public virtual DbSet<FinanceRequestProcessOfCashierCargoDetail> FinanceRequestProcessOfCashierCargoDetails { get; set; }
        public virtual DbSet<FinanceRequestProcessOfCashierContract> FinanceRequestProcessOfCashierContracts { get; set; }
        public virtual DbSet<FinanceRequestProcessOfCashierDetail> FinanceRequestProcessOfCashierDetails { get; set; }
        public virtual DbSet<FinanceRequestProcessOfPaymentInfo> FinanceRequestProcessOfPaymentInfos { get; set; }
        public virtual DbSet<FinanceRequestProcessRefundInfo> FinanceRequestProcessRefundInfos { get; set; }
        public virtual DbSet<FinanceRequestProcessRquest> FinanceRequestProcessRquests { get; set; }
        public virtual DbSet<FlowNoticedMessage> FlowNoticedMessages { get; set; }
        public virtual DbSet<FuncItem> FuncItems { get; set; }
        public virtual DbSet<FuncMember> FuncMembers { get; set; }
        public virtual DbSet<Hli> Hlis { get; set; }
        public virtual DbSet<HotfixAward> HotfixAwards { get; set; }
        public virtual DbSet<Hrp2> Hrp2s { get; set; }
        public virtual DbSet<Hrp23> Hrp23s { get; set; }
        public virtual DbSet<Hrp26> Hrp26s { get; set; }
        public virtual DbSet<HrpManagementAward> HrpManagementAwards { get; set; }
        public virtual DbSet<HrpOrg> HrpOrgs { get; set; }
        public virtual DbSet<HrpUsr> HrpUsrs { get; set; }
        public virtual DbSet<HrpVisitRele> HrpVisitReles { get; set; }
        public virtual DbSet<Hrpsk> Hrpsks { get; set; }
        public virtual DbSet<HtLocation> HtLocations { get; set; }
        public virtual DbSet<InformationKd001> InformationKd001s { get; set; }
        public virtual DbSet<JgGeneralBudgetIndividual> JgGeneralBudgetIndividuals { get; set; }
        public virtual DbSet<Kdlog> Kdlogs { get; set; }
        public virtual DbSet<KqgcTest> KqgcTests { get; set; }
        public virtual DbSet<Kqsqtest> Kqsqtests { get; set; }
        public virtual DbSet<LandrayBorrowMoneyInfo> LandrayBorrowMoneyInfos { get; set; }
        public virtual DbSet<LandrayRecDocument> LandrayRecDocuments { get; set; }
        public virtual DbSet<LandraySenDocument> LandraySenDocuments { get; set; }
        public virtual DbSet<LandrayUserAbroadInfo> LandrayUserAbroadInfos { get; set; }
        public virtual DbSet<Log> Logs { get; set; }
        public virtual DbSet<MeetInfo> MeetInfos { get; set; }
        public virtual DbSet<MessageOnTimeSend> MessageOnTimeSends { get; set; }
        public virtual DbSet<MessageSend> MessageSends { get; set; }
        public virtual DbSet<MessageSendMailError> MessageSendMailErrors { get; set; }
        public virtual DbSet<MessageSendRecord> MessageSendRecords { get; set; }
        public virtual DbSet<MessageSendTempNew> MessageSendTempNews { get; set; }
        public virtual DbSet<MessageSendTemporary> MessageSendTemporaries { get; set; }
        public virtual DbSet<MytemptbCarryover> MytemptbCarryovers { get; set; }
        public virtual DbSet<MytemptbCarryoverWage> MytemptbCarryoverWages { get; set; }
        public virtual DbSet<MytemptbPaymentPackage> MytemptbPaymentPackages { get; set; }
        public virtual DbSet<NotHolidayUser> NotHolidayUsers { get; set; }
        public virtual DbSet<OcrTknInfo> OcrTknInfos { get; set; }
        public virtual DbSet<PassPortInfo> PassPortInfos { get; set; }
        public virtual DbSet<RentDriversInfo> RentDriversInfos { get; set; }
        public virtual DbSet<RentVehicle> RentVehicles { get; set; }
        public virtual DbSet<Reta01> Reta01s { get; set; }
        public virtual DbSet<Room> Rooms { get; set; }
        public virtual DbSet<Sbh> Sbhs { get; set; }
        public virtual DbSet<ScheduledAssignedProcess> ScheduledAssignedProcesses { get; set; }
        public virtual DbSet<SecToProject> SecToProjects { get; set; }
        public virtual DbSet<Sheet1> Sheet1s { get; set; }
        public virtual DbSet<SpecialFare> SpecialFares { get; set; }
        public virtual DbSet<SpecialFareStandard> SpecialFareStandards { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
        public virtual DbSet<TableTaskCompleted> TableTaskCompleteds { get; set; }
        public virtual DbSet<TableTaskToDo> TableTaskToDos { get; set; }
        public virtual DbSet<TaskThirdparty> TaskThirdparties { get; set; }
        public virtual DbSet<TaskWarning> TaskWarnings { get; set; }
        public virtual DbSet<TaskWarningTemporary> TaskWarningTemporaries { get; set; }
        public virtual DbSet<Tcc106ServerDboUsrAz8> Tcc106ServerDboUsrAz8s { get; set; }
        public virtual DbSet<Tcc106ServerDboUsrAzv> Tcc106ServerDboUsrAzvs { get; set; }
        public virtual DbSet<TccAbortLeave> TccAbortLeaves { get; set; }
        public virtual DbSet<TccAbroadAbroadRecord> TccAbroadAbroadRecords { get; set; }
        public virtual DbSet<TccAbroadApply> TccAbroadApplies { get; set; }
        public virtual DbSet<TccAbroadApplySubUser> TccAbroadApplySubUsers { get; set; }
        public virtual DbSet<TccAbroadAtt> TccAbroadAtts { get; set; }
        public virtual DbSet<TccAbroadCertiInfoRecord> TccAbroadCertiInfoRecords { get; set; }
        public virtual DbSet<TccAbroadExam> TccAbroadExams { get; set; }
        public virtual DbSet<TccAbroadInsApply> TccAbroadInsApplies { get; set; }
        public virtual DbSet<TccAbroadInsApplyInfo> TccAbroadInsApplyInfos { get; set; }
        public virtual DbSet<TccAbroadInsApplyUser> TccAbroadInsApplyUsers { get; set; }
        public virtual DbSet<TccAbroadMergedAtt> TccAbroadMergedAtts { get; set; }
        public virtual DbSet<TccAbroadMessage> TccAbroadMessages { get; set; }
        public virtual DbSet<TccAbroadTempt> TccAbroadTempts { get; set; }
        public virtual DbSet<TccAbroadWorkVisa> TccAbroadWorkVisas { get; set; }
        public virtual DbSet<TccAbroadWorkVisaInfo> TccAbroadWorkVisaInfos { get; set; }
        public virtual DbSet<TccAbroadWorkVisaRecord> TccAbroadWorkVisaRecords { get; set; }
        public virtual DbSet<TccAbroadWorkVisaUser> TccAbroadWorkVisaUsers { get; set; }
        public virtual DbSet<TccAbroadWorkVisaUserTempt> TccAbroadWorkVisaUserTempts { get; set; }
        public virtual DbSet<TccAccountConfig> TccAccountConfigs { get; set; }
        public virtual DbSet<TccAccountRelation> TccAccountRelations { get; set; }
        public virtual DbSet<TccAccountSubject> TccAccountSubjects { get; set; }
        public virtual DbSet<TccAccountSubjectInit> TccAccountSubjectInits { get; set; }
        public virtual DbSet<TccAccountSubjectLog> TccAccountSubjectLogs { get; set; }
        public virtual DbSet<TccAccountSubjectOwner> TccAccountSubjectOwners { get; set; }
        public virtual DbSet<TccAddNewPaymentInfo> TccAddNewPaymentInfos { get; set; }
        public virtual DbSet<TccAnnualSalaryPayment> TccAnnualSalaryPayments { get; set; }
        public virtual DbSet<TccAnnualSalaryPaymentDetail> TccAnnualSalaryPaymentDetails { get; set; }
        public virtual DbSet<TccApplyBreakSubsidy> TccApplyBreakSubsidies { get; set; }
        public virtual DbSet<TccApplyBreakSubsidyConfig> TccApplyBreakSubsidyConfigs { get; set; }
        public virtual DbSet<TccApplyBreakSubsidyInfo> TccApplyBreakSubsidyInfos { get; set; }
        public virtual DbSet<TccApplyForLeave> TccApplyForLeaves { get; set; }
        public virtual DbSet<TccApplySpecialFare> TccApplySpecialFares { get; set; }
        public virtual DbSet<TccApplyWorkVisa> TccApplyWorkVisas { get; set; }
        public virtual DbSet<TccApproveInfo> TccApproveInfos { get; set; }
        public virtual DbSet<TccApproveMoneyHistroy> TccApproveMoneyHistroys { get; set; }
        public virtual DbSet<TccApprovePreOfferAwardHistroy> TccApprovePreOfferAwardHistroys { get; set; }
        public virtual DbSet<TccArchivesApply> TccArchivesApplies { get; set; }
        public virtual DbSet<TccAreaDivision> TccAreaDivisions { get; set; }
        public virtual DbSet<TccAskForLeave> TccAskForLeaves { get; set; }
        public virtual DbSet<TccAttachment> TccAttachments { get; set; }
        public virtual DbSet<TccAutoSumbitStepRecord> TccAutoSumbitStepRecords { get; set; }
        public virtual DbSet<TccAwardAdjustMentPlan> TccAwardAdjustMentPlans { get; set; }
        public virtual DbSet<TccAwardAdjustMentPlanProcess> TccAwardAdjustMentPlanProcesses { get; set; }
        public virtual DbSet<TccAwardAdjustMentPlanProcessLine> TccAwardAdjustMentPlanProcessLines { get; set; }
        public virtual DbSet<TccAwardAdjustYearMentPlanProcess> TccAwardAdjustYearMentPlanProcesses { get; set; }
        public virtual DbSet<TccAwardAdjustYearMentPlanProcessLine> TccAwardAdjustYearMentPlanProcessLines { get; set; }
        public virtual DbSet<TccAwardAssign2DeptAssign> TccAwardAssign2DeptAssigns { get; set; }
        public virtual DbSet<TccAwardAssign2DeptLine> TccAwardAssign2DeptLines { get; set; }
        public virtual DbSet<TccAwardAssign2DeptPersonDetail> TccAwardAssign2DeptPersonDetails { get; set; }
        public virtual DbSet<TccAwardAssign2Header> TccAwardAssign2Headers { get; set; }
        public virtual DbSet<TccAwardAssign2PersonLine> TccAwardAssign2PersonLines { get; set; }
        public virtual DbSet<TccAwardAssign2ProjectAssign> TccAwardAssign2ProjectAssigns { get; set; }
        public virtual DbSet<TccAwardAssign2ProjectLine> TccAwardAssign2ProjectLines { get; set; }
        public virtual DbSet<TccAwardBusinessAprovessHistroy> TccAwardBusinessAprovessHistroys { get; set; }
        public virtual DbSet<TccAwardPaymentHistroy> TccAwardPaymentHistroys { get; set; }
        public virtual DbSet<TccAwardPool> TccAwardPools { get; set; }
        public virtual DbSet<TccAwardPoolForArchive> TccAwardPoolForArchives { get; set; }
        public virtual DbSet<TccAwardPoolTemp> TccAwardPoolTemps { get; set; }
        public virtual DbSet<TccAwardSenderHistroy> TccAwardSenderHistroys { get; set; }
        public virtual DbSet<TccAwardUserRelation> TccAwardUserRelations { get; set; }
        public virtual DbSet<TccBalanceBasic> TccBalanceBasics { get; set; }
        public virtual DbSet<TccBalanceCostList> TccBalanceCostLists { get; set; }
        public virtual DbSet<TccBalanceCostType> TccBalanceCostTypes { get; set; }
        public virtual DbSet<TccBalanceCostTypeSubject> TccBalanceCostTypeSubjects { get; set; }
        public virtual DbSet<TccBasicAuthorityDictionary> TccBasicAuthorityDictionaries { get; set; }
        public virtual DbSet<TccBasicAuthorityDictionary20181122> TccBasicAuthorityDictionary20181122s { get; set; }
        public virtual DbSet<TccBasicAuthorityOperateLog> TccBasicAuthorityOperateLogs { get; set; }
        public virtual DbSet<TccBasicAuthorityRelation> TccBasicAuthorityRelations { get; set; }
        public virtual DbSet<TccBasicAuthorityRelation20181122> TccBasicAuthorityRelation20181122s { get; set; }
        public virtual DbSet<TccBasicAward> TccBasicAwards { get; set; }
        public virtual DbSet<TccBasicData20181122> TccBasicData20181122s { get; set; }
        public virtual DbSet<TccBasicDatum> TccBasicData { get; set; }
        public virtual DbSet<TccBasicInfoOtherCustomer> TccBasicInfoOtherCustomers { get; set; }
        public virtual DbSet<TccBasicInfoOtherPayment> TccBasicInfoOtherPayments { get; set; }
        public virtual DbSet<TccBasicInfoOtherPaymentDepart> TccBasicInfoOtherPaymentDeparts { get; set; }
        public virtual DbSet<TccBasicInfoOtherPaymentbak20160325> TccBasicInfoOtherPaymentbak20160325s { get; set; }
        public virtual DbSet<TccBasicInfoOtherSupplier> TccBasicInfoOtherSuppliers { get; set; }
        public virtual DbSet<TccBasicInfoProjectAdjustProcess> TccBasicInfoProjectAdjustProcesses { get; set; }
        public virtual DbSet<TccBasicInfoProjectAdjustProcessBak> TccBasicInfoProjectAdjustProcessBaks { get; set; }
        public virtual DbSet<TccBasicProjectAward> TccBasicProjectAwards { get; set; }
        public virtual DbSet<TccBidQuotationProjectAward> TccBidQuotationProjectAwards { get; set; }
        public virtual DbSet<TccBidQuotationProjectAwardDetailList> TccBidQuotationProjectAwardDetailLists { get; set; }
        public virtual DbSet<TccBillsManagement> TccBillsManagements { get; set; }
        public virtual DbSet<TccBorrowCashRepaymentDetaill> TccBorrowCashRepaymentDetaills { get; set; }
        public virtual DbSet<TccBorrowCashRepaymentHeader> TccBorrowCashRepaymentHeaders { get; set; }
        public virtual DbSet<TccBorrowMoney> TccBorrowMoneys { get; set; }
        public virtual DbSet<TccBorrowMoneyHistory> TccBorrowMoneyHistories { get; set; }
        public virtual DbSet<TccBorrowMoneyHistorybak> TccBorrowMoneyHistorybaks { get; set; }
        public virtual DbSet<TccBorrowingofAccountingArchivesDetail> TccBorrowingofAccountingArchivesDetails { get; set; }
        public virtual DbSet<TccBorrowingofAccountingArchivesHeader> TccBorrowingofAccountingArchivesHeaders { get; set; }
        public virtual DbSet<TccBsicInfoOtherCustomer> TccBsicInfoOtherCustomers { get; set; }
        public virtual DbSet<TccBudgetAwardAdjustMentPlan> TccBudgetAwardAdjustMentPlans { get; set; }
        public virtual DbSet<TccBudgetBasic> TccBudgetBasics { get; set; }
        public virtual DbSet<TccBudgetBasicAccount> TccBudgetBasicAccounts { get; set; }
        public virtual DbSet<TccBudgetBasicAccountDeparment> TccBudgetBasicAccountDeparments { get; set; }
        public virtual DbSet<TccBudgetBasicAccountInfo> TccBudgetBasicAccountInfos { get; set; }
        public virtual DbSet<TccBudgetBasicAccountLog> TccBudgetBasicAccountLogs { get; set; }
        public virtual DbSet<TccBudgetBasicAccountSubject> TccBudgetBasicAccountSubjects { get; set; }
        public virtual DbSet<TccBudgetBasicConfig> TccBudgetBasicConfigs { get; set; }
        public virtual DbSet<TccBudgetBasicDepartment> TccBudgetBasicDepartments { get; set; }
        public virtual DbSet<TccBudgetBasicRelevance> TccBudgetBasicRelevances { get; set; }
        public virtual DbSet<TccBudgetBasicRowConfig> TccBudgetBasicRowConfigs { get; set; }
        public virtual DbSet<TccBudgetCheckLog> TccBudgetCheckLogs { get; set; }
        public virtual DbSet<TccBudgetConfig> TccBudgetConfigs { get; set; }
        public virtual DbSet<TccBudgetHistory> TccBudgetHistories { get; set; }
        public virtual DbSet<TccBudgetInfoContractInfo> TccBudgetInfoContractInfos { get; set; }
        public virtual DbSet<TccBudgetInfoContractInfoBasic> TccBudgetInfoContractInfoBasics { get; set; }
        public virtual DbSet<TccBudgetInfoContractInfoBasicCalculate> TccBudgetInfoContractInfoBasicCalculates { get; set; }
        public virtual DbSet<TccBudgetInfoContractInfoBasicDatum> TccBudgetInfoContractInfoBasicData { get; set; }
        public virtual DbSet<TccBudgetInfoContractInfoBasicVerification> TccBudgetInfoContractInfoBasicVerifications { get; set; }
        public virtual DbSet<TccBudgetInfoContractInfoTemp> TccBudgetInfoContractInfoTemps { get; set; }
        public virtual DbSet<TccBudgetInfoPeptjInfo> TccBudgetInfoPeptjInfos { get; set; }
        public virtual DbSet<TccBudgetInfoPeptjInfo72> TccBudgetInfoPeptjInfo72s { get; set; }
        public virtual DbSet<TccBudgetInfoPeptjInfo72Temp> TccBudgetInfoPeptjInfo72Temps { get; set; }
        public virtual DbSet<TccBudgetInfoPeptjInfoTemp> TccBudgetInfoPeptjInfoTemps { get; set; }
        public virtual DbSet<TccBudgetItemCentralizedDp> TccBudgetItemCentralizedDps { get; set; }
        public virtual DbSet<TccBudgetItemConfig> TccBudgetItemConfigs { get; set; }
        public virtual DbSet<TccBudgetItemConfigOther> TccBudgetItemConfigOthers { get; set; }
        public virtual DbSet<TccBudgetItemGeneralDp> TccBudgetItemGeneralDps { get; set; }
        public virtual DbSet<TccBudgetItemQueryDp> TccBudgetItemQueryDps { get; set; }
        public virtual DbSet<TccBudgetMessageConfig> TccBudgetMessageConfigs { get; set; }
        public virtual DbSet<TccBudgetOtherCodeDictionary> TccBudgetOtherCodeDictionaries { get; set; }
        public virtual DbSet<TccBudgetProcess> TccBudgetProcesses { get; set; }
        public virtual DbSet<TccBudgetProcessAccountAmount> TccBudgetProcessAccountAmounts { get; set; }
        public virtual DbSet<TccBudgetProcessTemp> TccBudgetProcessTemps { get; set; }
        public virtual DbSet<TccBudgetProcessTempAccountAmount> TccBudgetProcessTempAccountAmounts { get; set; }
        public virtual DbSet<TccBudgetProcessWage> TccBudgetProcessWages { get; set; }
        public virtual DbSet<TccBudgetProcessWageAccountAmount> TccBudgetProcessWageAccountAmounts { get; set; }
        public virtual DbSet<TccBudgetProcessWageBasicDatum> TccBudgetProcessWageBasicData { get; set; }
        public virtual DbSet<TccBudgetProjectInit> TccBudgetProjectInits { get; set; }
        public virtual DbSet<TccBudgetType> TccBudgetTypes { get; set; }
        public virtual DbSet<TccBudgetTypeRole> TccBudgetTypeRoles { get; set; }
        public virtual DbSet<TccBudgetWarningConfig> TccBudgetWarningConfigs { get; set; }
        public virtual DbSet<TccBudgetWarningConfigProcessName> TccBudgetWarningConfigProcessNames { get; set; }
        public virtual DbSet<TccBudgetofDivestitureEnterprise> TccBudgetofDivestitureEnterprises { get; set; }
        public virtual DbSet<TccBudgetofDivestitureEnterpriseTemp> TccBudgetofDivestitureEnterpriseTemps { get; set; }
        public virtual DbSet<TccBudgetofExternalDonation> TccBudgetofExternalDonations { get; set; }
        public virtual DbSet<TccBudgetofExternalDonationTemp> TccBudgetofExternalDonationTemps { get; set; }
        public virtual DbSet<TccBudgetofInformatization> TccBudgetofInformatizations { get; set; }
        public virtual DbSet<TccBudgetofInformatizationTemp> TccBudgetofInformatizationTemps { get; set; }
        public virtual DbSet<TccBudgetofPartyconstructionFund> TccBudgetofPartyconstructionFunds { get; set; }
        public virtual DbSet<TccBudgetofPartyconstructionFundsTemp> TccBudgetofPartyconstructionFundsTemps { get; set; }
        public virtual DbSet<TccBudgetofPayroll> TccBudgetofPayrolls { get; set; }
        public virtual DbSet<TccBudgetofPayrollBreakdown> TccBudgetofPayrollBreakdowns { get; set; }
        public virtual DbSet<TccBudgetofPayrollBreakdownTemp> TccBudgetofPayrollBreakdownTemps { get; set; }
        public virtual DbSet<TccBudgetofPayrollTemp> TccBudgetofPayrollTemps { get; set; }
        public virtual DbSet<TccBudgetofStatementForDisposalPart1> TccBudgetofStatementForDisposalPart1s { get; set; }
        public virtual DbSet<TccBudgetofStatementForDisposalPart1Temp> TccBudgetofStatementForDisposalPart1Temps { get; set; }
        public virtual DbSet<TccBudgetofStatementForDisposalPart2> TccBudgetofStatementForDisposalPart2s { get; set; }
        public virtual DbSet<TccBudgetofStatementForDisposalPart2Temp> TccBudgetofStatementForDisposalPart2Temps { get; set; }
        public virtual DbSet<TccBusinessAskForLeave> TccBusinessAskForLeaves { get; set; }
        public virtual DbSet<TccBusinessTrip> TccBusinessTrips { get; set; }
        public virtual DbSet<TccBusinessTripPaymentInfo> TccBusinessTripPaymentInfos { get; set; }
        public virtual DbSet<TccBusinessTripPersonDetail> TccBusinessTripPersonDetails { get; set; }
        public virtual DbSet<TccCanDeductedDonation> TccCanDeductedDonations { get; set; }
        public virtual DbSet<TccCardInfo> TccCardInfos { get; set; }
        public virtual DbSet<TccCardUserList> TccCardUserLists { get; set; }
        public virtual DbSet<TccChatGantt> TccChatGantts { get; set; }
        public virtual DbSet<TccCity> TccCities { get; set; }
        public virtual DbSet<TccComputerDept> TccComputerDepts { get; set; }
        public virtual DbSet<TccComputerInfo> TccComputerInfos { get; set; }
        public virtual DbSet<TccComputerStatus> TccComputerStatuses { get; set; }
        public virtual DbSet<TccComputerUser> TccComputerUsers { get; set; }
        public virtual DbSet<TccConstructionCostConfirmDetail> TccConstructionCostConfirmDetails { get; set; }
        public virtual DbSet<TccConstructionCostConfirmHeader> TccConstructionCostConfirmHeaders { get; set; }
        public virtual DbSet<TccContractCurcencyOfJq> TccContractCurcencyOfJqs { get; set; }
        public virtual DbSet<TccContractInfoChangeCode> TccContractInfoChangeCodes { get; set; }
        public virtual DbSet<TccContractInfoChangeHistoryLog> TccContractInfoChangeHistoryLogs { get; set; }
        public virtual DbSet<TccCurrency> TccCurrencies { get; set; }
        public virtual DbSet<TccCwAccountsubject> TccCwAccountsubjects { get; set; }
        public virtual DbSet<TccCyvehicleFare> TccCyvehicleFares { get; set; }
        public virtual DbSet<TccDateCalendar> TccDateCalendars { get; set; }
        public virtual DbSet<TccDateCalendarTemp> TccDateCalendarTemps { get; set; }
        public virtual DbSet<TccDepartment> TccDepartments { get; set; }
        public virtual DbSet<TccDeptAnnualBudget> TccDeptAnnualBudgets { get; set; }
        public virtual DbSet<TccDeptAnnualBudgetAdjustLog> TccDeptAnnualBudgetAdjustLogs { get; set; }
        public virtual DbSet<TccDeptAnnualBudgetbak20160325> TccDeptAnnualBudgetbak20160325s { get; set; }
        public virtual DbSet<TccDeptBudgetEditLog> TccDeptBudgetEditLogs { get; set; }
        public virtual DbSet<TccDeptPayDeadLine> TccDeptPayDeadLines { get; set; }
        public virtual DbSet<TccDeptValueConfig> TccDeptValueConfigs { get; set; }
        public virtual DbSet<TccDeptValueInfo> TccDeptValueInfos { get; set; }
        public virtual DbSet<TccDictDocument> TccDictDocuments { get; set; }
        public virtual DbSet<TccDictDrawingArchiveDesignApprovelPerson> TccDictDrawingArchiveDesignApprovelPeople { get; set; }
        public virtual DbSet<TccDocOpinion> TccDocOpinions { get; set; }
        public virtual DbSet<TccDraft> TccDrafts { get; set; }
        public virtual DbSet<TccDraftInfo> TccDraftInfos { get; set; }
        public virtual DbSet<TccDraftInfoBusiness> TccDraftInfoBusinesses { get; set; }
        public virtual DbSet<TccDraftInfoImport> TccDraftInfoImports { get; set; }
        public virtual DbSet<TccDraftInfoImport1> TccDraftInfoImport1s { get; set; }
        public virtual DbSet<TccDraftInfoImport1DraftInfo> TccDraftInfoImport1DraftInfos { get; set; }
        public virtual DbSet<TccDraftInfoImport1Receipt> TccDraftInfoImport1Receipts { get; set; }
        public virtual DbSet<TccDraftInfoImport1Temp> TccDraftInfoImport1Temps { get; set; }
        public virtual DbSet<TccDraftInfoImport1TempDraftInfo> TccDraftInfoImport1TempDraftInfos { get; set; }
        public virtual DbSet<TccDraftInfoImportDraftInfo> TccDraftInfoImportDraftInfos { get; set; }
        public virtual DbSet<TccDraftInfoImportZkTmp> TccDraftInfoImportZkTmps { get; set; }
        public virtual DbSet<TccDraftInfoInit> TccDraftInfoInits { get; set; }
        public virtual DbSet<TccDraftInfoLog> TccDraftInfoLogs { get; set; }
        public virtual DbSet<TccDraftInfoOperateProcess> TccDraftInfoOperateProcesses { get; set; }
        public virtual DbSet<TccDraftInfoRemark> TccDraftInfoRemarks { get; set; }
        public virtual DbSet<TccDrawingArchiveApply> TccDrawingArchiveApplies { get; set; }
        public virtual DbSet<TccDrawingArchiveApplyDictArchiveMajor> TccDrawingArchiveApplyDictArchiveMajors { get; set; }
        public virtual DbSet<TccDrawingArchiveApplyDictSealuse> TccDrawingArchiveApplyDictSealuses { get; set; }
        public virtual DbSet<TccDrawingArchiveApplyDrawingDirectory> TccDrawingArchiveApplyDrawingDirectories { get; set; }
        public virtual DbSet<TccDrawingArchiveApplyDrawingDirectorySpf> TccDrawingArchiveApplyDrawingDirectorySpfs { get; set; }
        public virtual DbSet<TccDrawingArchiveApplyDrawingDirectoryTmp> TccDrawingArchiveApplyDrawingDirectoryTmps { get; set; }
        public virtual DbSet<TccDrawingArchiveApplyPressureContainer> TccDrawingArchiveApplyPressureContainers { get; set; }
        public virtual DbSet<TccDrawingArchiveApplyPressureContainerTmp> TccDrawingArchiveApplyPressureContainerTmps { get; set; }
        public virtual DbSet<TccDrawingArchiveApplyPressurePipe> TccDrawingArchiveApplyPressurePipes { get; set; }
        public virtual DbSet<TccDrawingArchiveApplyPressurePipeTmp> TccDrawingArchiveApplyPressurePipeTmps { get; set; }
        public virtual DbSet<TccDriverOverTime> TccDriverOverTimes { get; set; }
        public virtual DbSet<TccDriversInfo> TccDriversInfos { get; set; }
        public virtual DbSet<TccEarlywarning> TccEarlywarnings { get; set; }
        public virtual DbSet<TccEmployeeCheckScore> TccEmployeeCheckScores { get; set; }
        public virtual DbSet<TccEmployeeConfigScore> TccEmployeeConfigScores { get; set; }
        public virtual DbSet<TccEmployeeDueInfo> TccEmployeeDueInfos { get; set; }
        public virtual DbSet<TccEmployeePreInfo> TccEmployeePreInfos { get; set; }
        public virtual DbSet<TccEmployeeStartCheck> TccEmployeeStartChecks { get; set; }
        public virtual DbSet<TccEmployeeStartTask> TccEmployeeStartTasks { get; set; }
        public virtual DbSet<TccEntertainmentClaimHeader> TccEntertainmentClaimHeaders { get; set; }
        public virtual DbSet<TccEntertainmentClaimHeaderTemp> TccEntertainmentClaimHeaderTemps { get; set; }
        public virtual DbSet<TccExamAnswer> TccExamAnswers { get; set; }
        public virtual DbSet<TccExamAtt> TccExamAtts { get; set; }
        public virtual DbSet<TccExamError> TccExamErrors { get; set; }
        public virtual DbSet<TccExamOption> TccExamOptions { get; set; }
        public virtual DbSet<TccExamPaper> TccExamPapers { get; set; }
        public virtual DbSet<TccExamQuestion> TccExamQuestions { get; set; }
        public virtual DbSet<TccExamQuestionAnswer> TccExamQuestionAnswers { get; set; }
        public virtual DbSet<TccExamQuestionInfo> TccExamQuestionInfos { get; set; }
        public virtual DbSet<TccExamQuestionResult> TccExamQuestionResults { get; set; }
        public virtual DbSet<TccExamScore> TccExamScores { get; set; }
        public virtual DbSet<TccExpenseBudget> TccExpenseBudgets { get; set; }
        public virtual DbSet<TccExpenseCategory> TccExpenseCategories { get; set; }
        public virtual DbSet<TccExpenseClaimAbroadConsolidated> TccExpenseClaimAbroadConsolidateds { get; set; }
        public virtual DbSet<TccExpenseClaimAbroadHeader> TccExpenseClaimAbroadHeaders { get; set; }
        public virtual DbSet<TccExpenseClaimAbroadSubsidyLine> TccExpenseClaimAbroadSubsidyLines { get; set; }
        public virtual DbSet<TccExpenseClaimAnnualLine> TccExpenseClaimAnnualLines { get; set; }
        public virtual DbSet<TccExpenseClaimConfigSetting> TccExpenseClaimConfigSettings { get; set; }
        public virtual DbSet<TccExpenseClaimConfigSettingLog> TccExpenseClaimConfigSettingLogs { get; set; }
        public virtual DbSet<TccExpenseClaimDailyLine> TccExpenseClaimDailyLines { get; set; }
        public virtual DbSet<TccExpenseClaimDailyLinesTemp> TccExpenseClaimDailyLinesTemps { get; set; }
        public virtual DbSet<TccExpenseClaimHeader> TccExpenseClaimHeaders { get; set; }
        public virtual DbSet<TccExpenseClaimHeaderTemp> TccExpenseClaimHeaderTemps { get; set; }
        public virtual DbSet<TccExpenseClaimSpecialDetail> TccExpenseClaimSpecialDetails { get; set; }
        public virtual DbSet<TccExpenseClaimSpecialHeader> TccExpenseClaimSpecialHeaders { get; set; }
        public virtual DbSet<TccExpenseClaimSubsidyLine> TccExpenseClaimSubsidyLines { get; set; }
        public virtual DbSet<TccExpenseClaimSubsidyLinesTemp> TccExpenseClaimSubsidyLinesTemps { get; set; }
        public virtual DbSet<TccExpenseClaimTravelLine> TccExpenseClaimTravelLines { get; set; }
        public virtual DbSet<TccExpenseClaimTravelLinesTemp> TccExpenseClaimTravelLinesTemps { get; set; }
        public virtual DbSet<TccExpenseClaimVourcherId> TccExpenseClaimVourcherIds { get; set; }
        public virtual DbSet<TccExpenseClaimWjryLine> TccExpenseClaimWjryLines { get; set; }
        public virtual DbSet<TccExpenseClaimWjryLinesTemp> TccExpenseClaimWjryLinesTemps { get; set; }
        public virtual DbSet<TccExpensesType> TccExpensesTypes { get; set; }
        public virtual DbSet<TccFinanceCashierConfirm> TccFinanceCashierConfirms { get; set; }
        public virtual DbSet<TccFinanceCashierConfirmAbroad> TccFinanceCashierConfirmAbroads { get; set; }
        public virtual DbSet<TccFinanceCashierConfirmDetail> TccFinanceCashierConfirmDetails { get; set; }
        public virtual DbSet<TccFinanceCashierConfirmRevocationLog> TccFinanceCashierConfirmRevocationLogs { get; set; }
        public virtual DbSet<TccFinanceCashierConfirmTmpForModifyHistory> TccFinanceCashierConfirmTmpForModifyHistories { get; set; }
        public virtual DbSet<TccFinanceCashierConfirmVoucherInfo> TccFinanceCashierConfirmVoucherInfos { get; set; }
        public virtual DbSet<TccFinanceCasierClaimHandle> TccFinanceCasierClaimHandles { get; set; }
        public virtual DbSet<TccFinanceCasierClaimMessageSendLog> TccFinanceCasierClaimMessageSendLogs { get; set; }
        public virtual DbSet<TccFinanceLock> TccFinanceLocks { get; set; }
        public virtual DbSet<TccFinanceTaskToDo> TccFinanceTaskToDos { get; set; }
        public virtual DbSet<TccFinancingOfAdd> TccFinancingOfAdds { get; set; }
        public virtual DbSet<TccFinancingOfAddTemp> TccFinancingOfAddTemps { get; set; }
        public virtual DbSet<TccFinancingOfAsset> TccFinancingOfAssets { get; set; }
        public virtual DbSet<TccFinancingOfAssetTemp> TccFinancingOfAssetTemps { get; set; }
        public virtual DbSet<TccFinancingOfDisposal> TccFinancingOfDisposals { get; set; }
        public virtual DbSet<TccFinancingOfDisposalTemp> TccFinancingOfDisposalTemps { get; set; }
        public virtual DbSet<TccFinancingOfReturn> TccFinancingOfReturns { get; set; }
        public virtual DbSet<TccFinancingOfReturnTemp> TccFinancingOfReturnTemps { get; set; }
        public virtual DbSet<TccFixedAssetInvestmentProject> TccFixedAssetInvestmentProjects { get; set; }
        public virtual DbSet<TccFixedAssetInvestmentProjectsTemp> TccFixedAssetInvestmentProjectsTemps { get; set; }
        public virtual DbSet<TccGeneralExpensesDepartment> TccGeneralExpensesDepartments { get; set; }
        public virtual DbSet<TccGeneralExpensesDepartmentTemp> TccGeneralExpensesDepartmentTemps { get; set; }
        public virtual DbSet<TccGeneralExpensesDeteail> TccGeneralExpensesDeteails { get; set; }
        public virtual DbSet<TccGeneralExpensesDeteailsTemp> TccGeneralExpensesDeteailsTemps { get; set; }
        public virtual DbSet<TccGeneralExpensesHeader> TccGeneralExpensesHeaders { get; set; }
        public virtual DbSet<TccGeneralExpensesHeaderTemp> TccGeneralExpensesHeaderTemps { get; set; }
        public virtual DbSet<TccGeneralExpensesPayInfo> TccGeneralExpensesPayInfos { get; set; }
        public virtual DbSet<TccGeneralExpensesPayInfoTemp> TccGeneralExpensesPayInfoTemps { get; set; }
        public virtual DbSet<TccGrTest> TccGrTests { get; set; }
        public virtual DbSet<TccGroupForLeave> TccGroupForLeaves { get; set; }
        public virtual DbSet<TccGuaranteeLetterContractInfo> TccGuaranteeLetterContractInfos { get; set; }
        public virtual DbSet<TccGuaranteeLetterDetail> TccGuaranteeLetterDetails { get; set; }
        public virtual DbSet<TccGuaranteeLetterFinanceOpenDetail> TccGuaranteeLetterFinanceOpenDetails { get; set; }
        public virtual DbSet<TccGuaranteeLetterFinanceOpenDetail2> TccGuaranteeLetterFinanceOpenDetail2s { get; set; }
        public virtual DbSet<TccGuaranteeLetterFnVouch> TccGuaranteeLetterFnVouches { get; set; }
        public virtual DbSet<TccGuaranteeLetterHeader> TccGuaranteeLetterHeaders { get; set; }
        public virtual DbSet<TccGuaranteeLetterModifyInfo> TccGuaranteeLetterModifyInfos { get; set; }
        public virtual DbSet<TccGuaranteeLetterPrjInfo> TccGuaranteeLetterPrjInfos { get; set; }
        public virtual DbSet<TccGuaranteeLetterpoundageAssociated> TccGuaranteeLetterpoundageAssociateds { get; set; }
        public virtual DbSet<TccGuaranteeLetterpoundageDetail> TccGuaranteeLetterpoundageDetails { get; set; }
        public virtual DbSet<TccGuaranteeLetterpoundageHeader> TccGuaranteeLetterpoundageHeaders { get; set; }
        public virtual DbSet<TccHasAmountofReimburse> TccHasAmountofReimburses { get; set; }
        public virtual DbSet<TccHasAppdenAmountOfDept> TccHasAppdenAmountOfDepts { get; set; }
        public virtual DbSet<TccHistorySpecialId> TccHistorySpecialIds { get; set; }
        public virtual DbSet<TccHouseSubsidyDetail> TccHouseSubsidyDetails { get; set; }
        public virtual DbSet<TccHouseSubsidyHeader> TccHouseSubsidyHeaders { get; set; }
        public virtual DbSet<TccHrmDict> TccHrmDicts { get; set; }
        public virtual DbSet<TccHrmHrpDictMap> TccHrmHrpDictMaps { get; set; }
        public virtual DbSet<TccHrmLyapply> TccHrmLyapplies { get; set; }
        public virtual DbSet<TccHrmLyapplyDetailBackPerson> TccHrmLyapplyDetailBackPeople { get; set; }
        public virtual DbSet<TccHrmLyapplyDetailNewPerson> TccHrmLyapplyDetailNewPeople { get; set; }
        public virtual DbSet<TccHrmLyapplyInfo> TccHrmLyapplyInfos { get; set; }
        public virtual DbSet<TccHrmPersonalManage> TccHrmPersonalManages { get; set; }
        public virtual DbSet<TccHrmPersonalManageBankCard> TccHrmPersonalManageBankCards { get; set; }
        public virtual DbSet<TccHrmPersonalManageContractCard> TccHrmPersonalManageContractCards { get; set; }
        public virtual DbSet<TccHrmPersonalManageDiplomaCard> TccHrmPersonalManageDiplomaCards { get; set; }
        public virtual DbSet<TccHrmPersonalManageGjjcard> TccHrmPersonalManageGjjcards { get; set; }
        public virtual DbSet<TccHrmPersonalManageHomeCard> TccHrmPersonalManageHomeCards { get; set; }
        public virtual DbSet<TccHrmPersonalManageLanguageCard> TccHrmPersonalManageLanguageCards { get; set; }
        public virtual DbSet<TccHrmPersonalManagePartyCard> TccHrmPersonalManagePartyCards { get; set; }
        public virtual DbSet<TccHrmPersonalManagePhoneCard> TccHrmPersonalManagePhoneCards { get; set; }
        public virtual DbSet<TccHrmPersonalManageResumeCard> TccHrmPersonalManageResumeCards { get; set; }
        public virtual DbSet<TccHrmPersonalManageReturnInfo> TccHrmPersonalManageReturnInfos { get; set; }
        public virtual DbSet<TccHrmPersonalManageZccard> TccHrmPersonalManageZccards { get; set; }
        public virtual DbSet<TccHrmPersonalManageZffcard> TccHrmPersonalManageZffcards { get; set; }
        public virtual DbSet<TccHrmPersonalManageZzcard> TccHrmPersonalManageZzcards { get; set; }
        public virtual DbSet<TccHrmRzCardApproveReturnInfo> TccHrmRzCardApproveReturnInfos { get; set; }
        public virtual DbSet<TccHrmRzapply> TccHrmRzapplies { get; set; }
        public virtual DbSet<TccHrmWageStandardMap> TccHrmWageStandardMaps { get; set; }
        public virtual DbSet<TccHrmZffstandardMap> TccHrmZffstandardMaps { get; set; }
        public virtual DbSet<TccHrpVoteAnswer> TccHrpVoteAnswers { get; set; }
        public virtual DbSet<TccHrpVoteCode> TccHrpVoteCodes { get; set; }
        public virtual DbSet<TccHrpVoteDept> TccHrpVoteDepts { get; set; }
        public virtual DbSet<TccHrpVoteQuestion> TccHrpVoteQuestions { get; set; }
        public virtual DbSet<TccIncomeAwardDetail> TccIncomeAwardDetails { get; set; }
        public virtual DbSet<TccInjuryIdentity> TccInjuryIdentities { get; set; }
        public virtual DbSet<TccInstallmentsInfo> TccInstallmentsInfos { get; set; }
        public virtual DbSet<TccInvoicesAccount> TccInvoicesAccounts { get; set; }
        public virtual DbSet<TccInvoicesAccountDetail> TccInvoicesAccountDetails { get; set; }
        public virtual DbSet<TccInvoicesReceived> TccInvoicesReceiveds { get; set; }
        public virtual DbSet<TccInvoicesReceivedBillsInfo> TccInvoicesReceivedBillsInfos { get; set; }
        public virtual DbSet<TccInvoicesReceivedCargoInfo> TccInvoicesReceivedCargoInfos { get; set; }
        public virtual DbSet<TccInvoicesReceivedDepartmentList> TccInvoicesReceivedDepartmentLists { get; set; }
        public virtual DbSet<TccInvoicesReceivedDraftInfo> TccInvoicesReceivedDraftInfos { get; set; }
        public virtual DbSet<TccInvoicesReceivedPackingInfo> TccInvoicesReceivedPackingInfos { get; set; }
        public virtual DbSet<TccInvoicesReceivedPaymentList> TccInvoicesReceivedPaymentLists { get; set; }
        public virtual DbSet<TccInvoicesReceivedRecBillsInfo> TccInvoicesReceivedRecBillsInfos { get; set; }
        public virtual DbSet<TccInvoicesRed> TccInvoicesReds { get; set; }
        public virtual DbSet<TccInvoicesRedBillsInfo> TccInvoicesRedBillsInfos { get; set; }
        public virtual DbSet<TccInvoicesRedCancelBillsInfo> TccInvoicesRedCancelBillsInfos { get; set; }
        public virtual DbSet<TccInvoicesRendered> TccInvoicesRendereds { get; set; }
        public virtual DbSet<TccInvoicesRenderedBillsInfo> TccInvoicesRenderedBillsInfos { get; set; }
        public virtual DbSet<TccInvoicesRenderedDraftInfo> TccInvoicesRenderedDraftInfos { get; set; }
        public virtual DbSet<TccInvoicesRenderedPackingInfo> TccInvoicesRenderedPackingInfos { get; set; }
        public virtual DbSet<TccInvoicesRenderedRecevelist> TccInvoicesRenderedRecevelists { get; set; }
        public virtual DbSet<TccInvoicesRenderedRenBillsInfo> TccInvoicesRenderedRenBillsInfos { get; set; }
        public virtual DbSet<TccIreceivedRed> TccIreceivedReds { get; set; }
        public virtual DbSet<TccIreceivedRedCancelBillList> TccIreceivedRedCancelBillLists { get; set; }
        public virtual DbSet<TccItProject> TccItProjects { get; set; }
        public virtual DbSet<TccItProjectUser> TccItProjectUsers { get; set; }
        public virtual DbSet<TccJsgTest> TccJsgTests { get; set; }
        public virtual DbSet<TccLeaderRegister> TccLeaderRegisters { get; set; }
        public virtual DbSet<TccLetterOfCredit> TccLetterOfCredits { get; set; }
        public virtual DbSet<TccLetterOfCreditCounterFee> TccLetterOfCreditCounterFees { get; set; }
        public virtual DbSet<TccLetterOfCreditCounterFeeMain> TccLetterOfCreditCounterFeeMains { get; set; }
        public virtual DbSet<TccLetterOfCreditGatherChange> TccLetterOfCreditGatherChanges { get; set; }
        public virtual DbSet<TccLetterOfCreditOpen> TccLetterOfCreditOpens { get; set; }
        public virtual DbSet<TccLetterOfCreditOpenChangePayInfo> TccLetterOfCreditOpenChangePayInfos { get; set; }
        public virtual DbSet<TccLetterOfCreditOpenModifyInfo> TccLetterOfCreditOpenModifyInfos { get; set; }
        public virtual DbSet<TccLetterOfCreditOpenPayInfo> TccLetterOfCreditOpenPayInfos { get; set; }
        public virtual DbSet<TccLetterOfCreditPaymentHistory> TccLetterOfCreditPaymentHistories { get; set; }
        public virtual DbSet<TccLetterOfGuaranteeInfo> TccLetterOfGuaranteeInfos { get; set; }
        public virtual DbSet<TccMailPostApply> TccMailPostApplies { get; set; }
        public virtual DbSet<TccMailPostApplyMailTypeDict> TccMailPostApplyMailTypeDicts { get; set; }
        public virtual DbSet<TccMailPostApplyMx> TccMailPostApplyMxes { get; set; }
        public virtual DbSet<TccMailPostChangedReport> TccMailPostChangedReports { get; set; }
        public virtual DbSet<TccMailRecv> TccMailRecvs { get; set; }
        public virtual DbSet<TccMailRecvMailTypeDict> TccMailRecvMailTypeDicts { get; set; }
        public virtual DbSet<TccMainMonthPaymentRecord> TccMainMonthPaymentRecords { get; set; }
        public virtual DbSet<TccManagementAward> TccManagementAwards { get; set; }
        public virtual DbSet<TccManagementAwardsDetail> TccManagementAwardsDetails { get; set; }
        public virtual DbSet<TccManagementAwardsDetailsTest> TccManagementAwardsDetailsTests { get; set; }
        public virtual DbSet<TccManagementPersonnelBonu> TccManagementPersonnelBonus { get; set; }
        public virtual DbSet<TccMeetCostFare> TccMeetCostFares { get; set; }
        public virtual DbSet<TccMeetInfo> TccMeetInfos { get; set; }
        public virtual DbSet<TccMeetUser> TccMeetUsers { get; set; }
        public virtual DbSet<TccMeetUserSend> TccMeetUserSends { get; set; }
        public virtual DbSet<TccMessageSend> TccMessageSends { get; set; }
        public virtual DbSet<TccMileStoneAwardSendPlanApply> TccMileStoneAwardSendPlanApplies { get; set; }
        public virtual DbSet<TccMileStoneAwardSendPlanDetail> TccMileStoneAwardSendPlanDetails { get; set; }
        public virtual DbSet<TccMonitoringLogsInfo> TccMonitoringLogsInfos { get; set; }
        public virtual DbSet<TccMonthPaymentRecord> TccMonthPaymentRecords { get; set; }
        public virtual DbSet<TccMonthPaymentRecordTemp> TccMonthPaymentRecordTemps { get; set; }
        public virtual DbSet<TccMonthlyPaymentPlanRecord> TccMonthlyPaymentPlanRecords { get; set; }
        public virtual DbSet<TccMonthlyReimbursementCriterion> TccMonthlyReimbursementCriteria { get; set; }
        public virtual DbSet<TccMonthlyforHouseSubsidy> TccMonthlyforHouseSubsidies { get; set; }
        public virtual DbSet<TccNotarizeApply> TccNotarizeApplies { get; set; }
        public virtual DbSet<TccNoticeSendApply> TccNoticeSendApplies { get; set; }
        public virtual DbSet<TccOperatingAndBusinessSupportVehicleBudget> TccOperatingAndBusinessSupportVehicleBudgets { get; set; }
        public virtual DbSet<TccOperatingAndBusinessSupportVehicleBudgetTemp> TccOperatingAndBusinessSupportVehicleBudgetTemps { get; set; }
        public virtual DbSet<TccOperatingPersonnelBonu> TccOperatingPersonnelBonus { get; set; }
        public virtual DbSet<TccOtherCategoriesAward> TccOtherCategoriesAwards { get; set; }
        public virtual DbSet<TccOtherCategoriesAwardDetailList> TccOtherCategoriesAwardDetailLists { get; set; }
        public virtual DbSet<TccOtherPaymentShare> TccOtherPaymentShares { get; set; }
        public virtual DbSet<TccPaBaseInfo> TccPaBaseInfos { get; set; }
        public virtual DbSet<TccPaDeptAbilityDevelop> TccPaDeptAbilityDevelops { get; set; }
        public virtual DbSet<TccPaDeptAbilityEvaluate> TccPaDeptAbilityEvaluates { get; set; }
        public virtual DbSet<TccPaDeptDeptRecord> TccPaDeptDeptRecords { get; set; }
        public virtual DbSet<TccPaDeptOthersPa> TccPaDeptOthersPas { get; set; }
        public virtual DbSet<TccPaDeptOthersPadetail> TccPaDeptOthersPadetails { get; set; }
        public virtual DbSet<TccPaDeptPersonalRecord> TccPaDeptPersonalRecords { get; set; }
        public virtual DbSet<TccPaDeptWorkPerformance> TccPaDeptWorkPerformances { get; set; }
        public virtual DbSet<TccPaDictEvaluateField> TccPaDictEvaluateFields { get; set; }
        public virtual DbSet<TccPaDictEvaluateFieldKind> TccPaDictEvaluateFieldKinds { get; set; }
        public virtual DbSet<TccPaDictEvaluateStandard> TccPaDictEvaluateStandards { get; set; }
        public virtual DbSet<TccPaPainfo> TccPaPainfos { get; set; }
        public virtual DbSet<TccPartyAmountInformation> TccPartyAmountInformations { get; set; }
        public virtual DbSet<TccPartyImportErrorReport> TccPartyImportErrorReports { get; set; }
        public virtual DbSet<TccPartyMoneyInitialization> TccPartyMoneyInitializations { get; set; }
        public virtual DbSet<TccPartyValueInfo> TccPartyValueInfos { get; set; }
        public virtual DbSet<TccPartyValueSubmit> TccPartyValueSubmits { get; set; }
        public virtual DbSet<TccPartyValueUser> TccPartyValueUsers { get; set; }
        public virtual DbSet<TccPayMedicalInsuranceFeeDetail> TccPayMedicalInsuranceFeeDetails { get; set; }
        public virtual DbSet<TccPayMedicalInsuranceFeeHeader> TccPayMedicalInsuranceFeeHeaders { get; set; }
        public virtual DbSet<TccPayMentType> TccPayMentTypes { get; set; }
        public virtual DbSet<TccPaymentHistory> TccPaymentHistories { get; set; }
        public virtual DbSet<TccPaymentHistoryInit> TccPaymentHistoryInits { get; set; }
        public virtual DbSet<TccPaymentHistoryNotProject> TccPaymentHistoryNotProjects { get; set; }
        public virtual DbSet<TccPaymentHistoryTmpForModifyHisoty> TccPaymentHistoryTmpForModifyHisoties { get; set; }
        public virtual DbSet<TccPaymentProcess> TccPaymentProcesses { get; set; }
        public virtual DbSet<TccPaymentProcessDraftInfo> TccPaymentProcessDraftInfos { get; set; }
        public virtual DbSet<TccPaymentProcessFlowInfo> TccPaymentProcessFlowInfos { get; set; }
        public virtual DbSet<TccPaymentProcessInit> TccPaymentProcessInits { get; set; }
        public virtual DbSet<TccPaymentProcessMultiple> TccPaymentProcessMultiples { get; set; }
        public virtual DbSet<TccPaymentProcessMultipleApplicationLog> TccPaymentProcessMultipleApplicationLogs { get; set; }
        public virtual DbSet<TccPaymentProcessMultipleBillsInfo> TccPaymentProcessMultipleBillsInfos { get; set; }
        public virtual DbSet<TccPaymentProcessMultipleContractInfo> TccPaymentProcessMultipleContractInfos { get; set; }
        public virtual DbSet<TccPaymentProcessMultipleCreditLetterInfo> TccPaymentProcessMultipleCreditLetterInfos { get; set; }
        public virtual DbSet<TccPaymentProcessMultipleDepartment> TccPaymentProcessMultipleDepartments { get; set; }
        public virtual DbSet<TccPaymentProcessMultipleDraftInfo> TccPaymentProcessMultipleDraftInfos { get; set; }
        public virtual DbSet<TccPaymentProcessMultipleDraftLog> TccPaymentProcessMultipleDraftLogs { get; set; }
        public virtual DbSet<TccPaymentProcessMultipleFinishNoticeLog> TccPaymentProcessMultipleFinishNoticeLogs { get; set; }
        public virtual DbSet<TccPaymentProcessMultipleFlowInfo> TccPaymentProcessMultipleFlowInfos { get; set; }
        public virtual DbSet<TccPaymentProcessMultipleLetterOfCredit> TccPaymentProcessMultipleLetterOfCredits { get; set; }
        public virtual DbSet<TccPaymentProcessMultipleOtherBuy> TccPaymentProcessMultipleOtherBuys { get; set; }
        public virtual DbSet<TccPaymentProcessMultiplePaymentInfo> TccPaymentProcessMultiplePaymentInfos { get; set; }
        public virtual DbSet<TccPaymentProcessMultiplePeptjInfo> TccPaymentProcessMultiplePeptjInfos { get; set; }
        public virtual DbSet<TccPaymentProcessMultipleReceivingInfo> TccPaymentProcessMultipleReceivingInfos { get; set; }
        public virtual DbSet<TccPaymentProcessMultipleServiceLog> TccPaymentProcessMultipleServiceLogs { get; set; }
        public virtual DbSet<TccPaymentProcessMultipleSubmitLogTime> TccPaymentProcessMultipleSubmitLogTimes { get; set; }
        public virtual DbSet<TccPaymentProcessMultipleTicketInfo> TccPaymentProcessMultipleTicketInfos { get; set; }
        public virtual DbSet<TccPaymentProcessMultipleTmpForModifyHistory> TccPaymentProcessMultipleTmpForModifyHistories { get; set; }
        public virtual DbSet<TccPaymentProcessUpdateInfoByPeptj90> TccPaymentProcessUpdateInfoByPeptj90s { get; set; }
        public virtual DbSet<TccPayrollProcess> TccPayrollProcesses { get; set; }
        public virtual DbSet<TccPeptj62AdjustDay> TccPeptj62AdjustDays { get; set; }
        public virtual DbSet<TccPeptj62AdjustDayTemp> TccPeptj62AdjustDayTemps { get; set; }
        public virtual DbSet<TccPeptj82ProjectProcess> TccPeptj82ProjectProcesses { get; set; }
        public virtual DbSet<TccPeptj82ProjectProcessTemp> TccPeptj82ProjectProcessTemps { get; set; }
        public virtual DbSet<TccPeptj90Lawsuit> TccPeptj90Lawsuits { get; set; }
        public virtual DbSet<TccPeptjCashlistIntf64> TccPeptjCashlistIntf64s { get; set; }
        public virtual DbSet<TccPeptjCashlistIntf64Temp> TccPeptjCashlistIntf64Temps { get; set; }
        public virtual DbSet<TccPeptjContractList> TccPeptjContractLists { get; set; }
        public virtual DbSet<TccPeptjContractListTemp> TccPeptjContractListTemps { get; set; }
        public virtual DbSet<TccPeptjPayContractLawsuitInit> TccPeptjPayContractLawsuitInits { get; set; }
        public virtual DbSet<TccPeptjProject49> TccPeptjProject49s { get; set; }
        public virtual DbSet<TccPeptjProject49Temp> TccPeptjProject49Temps { get; set; }
        public virtual DbSet<TccPeptjProjectInfo> TccPeptjProjectInfos { get; set; }
        public virtual DbSet<TccPeptjProjectInfoBudgetByPeptj> TccPeptjProjectInfoBudgetByPeptjs { get; set; }
        public virtual DbSet<TccPeptjProjectInfoBudgetByPeptjTemp> TccPeptjProjectInfoBudgetByPeptjTemps { get; set; }
        public virtual DbSet<TccPeptjProjectInfoTemp> TccPeptjProjectInfoTemps { get; set; }
        public virtual DbSet<TccPersonalAsset> TccPersonalAssets { get; set; }
        public virtual DbSet<TccPersonalAssetAtt> TccPersonalAssetAtts { get; set; }
        public virtual DbSet<TccPhoneModify> TccPhoneModifies { get; set; }
        public virtual DbSet<TccPhoneModifyInfo> TccPhoneModifyInfos { get; set; }
        public virtual DbSet<TccPostCategory> TccPostCategories { get; set; }
        public virtual DbSet<TccPostForTelephoneSubsidy> TccPostForTelephoneSubsidies { get; set; }
        public virtual DbSet<TccPostForTransportSubsidy> TccPostForTransportSubsidies { get; set; }
        public virtual DbSet<TccPostLevel> TccPostLevels { get; set; }
        public virtual DbSet<TccPostingCarryoverRecord> TccPostingCarryoverRecords { get; set; }
        public virtual DbSet<TccPriceLibraryApply> TccPriceLibraryApplies { get; set; }
        public virtual DbSet<TccPriceLibraryConfig> TccPriceLibraryConfigs { get; set; }
        public virtual DbSet<TccPriceLibraryInfo> TccPriceLibraryInfos { get; set; }
        public virtual DbSet<TccPriceLibraryInfoSub> TccPriceLibraryInfoSubs { get; set; }
        public virtual DbSet<TccPrintApply> TccPrintApplies { get; set; }
        public virtual DbSet<TccPrintApplyCost> TccPrintApplyCosts { get; set; }
        public virtual DbSet<TccPrintApplyDe> TccPrintApplyDes { get; set; }
        public virtual DbSet<TccPrintApplyMxDzDy> TccPrintApplyMxDzDies { get; set; }
        public virtual DbSet<TccPrintApplyMxDzDzqt> TccPrintApplyMxDzDzqts { get; set; }
        public virtual DbSet<TccPrintApplyMxDzLp> TccPrintApplyMxDzLps { get; set; }
        public virtual DbSet<TccPrintApplyMxFsFy> TccPrintApplyMxFsFies { get; set; }
        public virtual DbSet<TccPrintApplyMxFsSm> TccPrintApplyMxFsSms { get; set; }
        public virtual DbSet<TccPrintApplyMxFsSt> TccPrintApplyMxFsSts { get; set; }
        public virtual DbSet<TccPrintApplyMxHtCad> TccPrintApplyMxHtCads { get; set; }
        public virtual DbSet<TccPrintApplyMxHtHtqt> TccPrintApplyMxHtHtqts { get; set; }
        public virtual DbSet<TccPrintApplyMxHtPh> TccPrintApplyMxHtPhs { get; set; }
        public virtual DbSet<TccPrintApplyMxQt> TccPrintApplyMxQts { get; set; }
        public virtual DbSet<TccPrintApplyMxQtGgfw> TccPrintApplyMxQtGgfws { get; set; }
        public virtual DbSet<TccPrintApplyMxQtLw> TccPrintApplyMxQtLws { get; set; }
        public virtual DbSet<TccPrintApplyMxQtSbwh> TccPrintApplyMxQtSbwhs { get; set; }
        public virtual DbSet<TccPrintApplyMxTwfz> TccPrintApplyMxTwfzs { get; set; }
        public virtual DbSet<TccPrintApplyMxZhZh> TccPrintApplyMxZhZhs { get; set; }
        public virtual DbSet<TccPrintApplyOrg> TccPrintApplyOrgs { get; set; }
        public virtual DbSet<TccPrintApplyPriceCad> TccPrintApplyPriceCads { get; set; }
        public virtual DbSet<TccPrintApplyPriceCgfy> TccPrintApplyPriceCgfies { get; set; }
        public virtual DbSet<TccPrintApplyPriceDy> TccPrintApplyPriceDies { get; set; }
        public virtual DbSet<TccPrintApplyPriceGcfy> TccPrintApplyPriceGcfies { get; set; }
        public virtual DbSet<TccPrintApplyPriceLw> TccPrintApplyPriceLws { get; set; }
        public virtual DbSet<TccPrintApplyPricePh> TccPrintApplyPricePhs { get; set; }
        public virtual DbSet<TccPrintApplyPriceQt> TccPrintApplyPriceQts { get; set; }
        public virtual DbSet<TccPrintApplyPriceSm> TccPrintApplyPriceSms { get; set; }
        public virtual DbSet<TccPrintApplyPriceSy> TccPrintApplyPriceSies { get; set; }
        public virtual DbSet<TccPrintApplyPriceZh> TccPrintApplyPriceZhs { get; set; }
        public virtual DbSet<TccPrintApplyRole> TccPrintApplyRoles { get; set; }
        public virtual DbSet<TccPrintApplyServicetype> TccPrintApplyServicetypes { get; set; }
        public virtual DbSet<TccPrintApplyTempMouthCostDept> TccPrintApplyTempMouthCostDepts { get; set; }
        public virtual DbSet<TccPrintApplyTempMouthCostProj> TccPrintApplyTempMouthCostProjs { get; set; }
        public virtual DbSet<TccPrintApplyTyprintFare> TccPrintApplyTyprintFares { get; set; }
        public virtual DbSet<TccPrintApplyTyprintFareInfo> TccPrintApplyTyprintFareInfos { get; set; }
        public virtual DbSet<TccPrintApplyUser> TccPrintApplyUsers { get; set; }
        public virtual DbSet<TccProdDeptReallocationAwardDespense> TccProdDeptReallocationAwardDespenses { get; set; }
        public virtual DbSet<TccProdDeptReallocationAwardPay> TccProdDeptReallocationAwardPays { get; set; }
        public virtual DbSet<TccProdDeptReallocationAwardPayDetailList> TccProdDeptReallocationAwardPayDetailLists { get; set; }
        public virtual DbSet<TccProdDeptRelcAwardDeptInfoSavePlan> TccProdDeptRelcAwardDeptInfoSavePlans { get; set; }
        public virtual DbSet<TccProdDeptRelcAwardDespDetl> TccProdDeptRelcAwardDespDetls { get; set; }
        public virtual DbSet<TccProjectAdvanReceivedHistory> TccProjectAdvanReceivedHistories { get; set; }
        public virtual DbSet<TccProjectArtificialTimeHistory> TccProjectArtificialTimeHistories { get; set; }
        public virtual DbSet<TccProjectAwardAllAssignApply> TccProjectAwardAllAssignApplies { get; set; }
        public virtual DbSet<TccProjectAwardAllowSendStatus> TccProjectAwardAllowSendStatuses { get; set; }
        public virtual DbSet<TccProjectAwardApplyProcess> TccProjectAwardApplyProcesses { get; set; }
        public virtual DbSet<TccProjectAwardNewFlowAllowProject> TccProjectAwardNewFlowAllowProjects { get; set; }
        public virtual DbSet<TccProjectAwardPaymentHistroy> TccProjectAwardPaymentHistroys { get; set; }
        public virtual DbSet<TccProjectAwardSendApplyMileStone> TccProjectAwardSendApplyMileStones { get; set; }
        public virtual DbSet<TccProjectAwardSendApplyProjectImprove> TccProjectAwardSendApplyProjectImproves { get; set; }
        public virtual DbSet<TccProjectAwardSendApplyProjectManage> TccProjectAwardSendApplyProjectManages { get; set; }
        public virtual DbSet<TccProjectAwardSendApplyWorkQuality> TccProjectAwardSendApplyWorkQualities { get; set; }
        public virtual DbSet<TccProjectAwardSendDict> TccProjectAwardSendDicts { get; set; }
        public virtual DbSet<TccProjectAwardSendPlanApply> TccProjectAwardSendPlanApplies { get; set; }
        public virtual DbSet<TccProjectAwardSendPlanDetailAwardType> TccProjectAwardSendPlanDetailAwardTypes { get; set; }
        public virtual DbSet<TccProjectAwardSendPlanDetailDesignMajor> TccProjectAwardSendPlanDetailDesignMajors { get; set; }
        public virtual DbSet<TccProjectAwardSendPlanDetailProjectMajor> TccProjectAwardSendPlanDetailProjectMajors { get; set; }
        public virtual DbSet<TccProjectCostMonthReportApply> TccProjectCostMonthReportApplies { get; set; }
        public virtual DbSet<TccProjectFinancialInfoForStatement> TccProjectFinancialInfoForStatements { get; set; }
        public virtual DbSet<TccProjectHistory> TccProjectHistories { get; set; }
        public virtual DbSet<TccProjectInfoFinanceReceivable> TccProjectInfoFinanceReceivables { get; set; }
        public virtual DbSet<TccProjectInfoForStatement> TccProjectInfoForStatements { get; set; }
        public virtual DbSet<TccProjectInfoForStatementTemp> TccProjectInfoForStatementTemps { get; set; }
        public virtual DbSet<TccProjectInfoStatus> TccProjectInfoStatuses { get; set; }
        public virtual DbSet<TccProjectLoanApplication> TccProjectLoanApplications { get; set; }
        public virtual DbSet<TccProjectManageSale> TccProjectManageSales { get; set; }
        public virtual DbSet<TccProjectManageSale20160415bak> TccProjectManageSale20160415baks { get; set; }
        public virtual DbSet<TccProjectManageSaleBak> TccProjectManageSaleBaks { get; set; }
        public virtual DbSet<TccProjectSpecialAmountInit> TccProjectSpecialAmountInits { get; set; }
        public virtual DbSet<TccProposal> TccProposals { get; set; }
        public virtual DbSet<TccProposalAnserUser> TccProposalAnserUsers { get; set; }
        public virtual DbSet<TccProposalAnswer> TccProposalAnswers { get; set; }
        public virtual DbSet<TccProposalDict> TccProposalDicts { get; set; }
        public virtual DbSet<TccProvidentFundDetail> TccProvidentFundDetails { get; set; }
        public virtual DbSet<TccProvidentFundHistroy> TccProvidentFundHistroys { get; set; }
        public virtual DbSet<TccProvidentFundProcess> TccProvidentFundProcesses { get; set; }
        public virtual DbSet<TccPurchaseBudget> TccPurchaseBudgets { get; set; }
        public virtual DbSet<TccPurchaseBudgetBased> TccPurchaseBudgetBaseds { get; set; }
        public virtual DbSet<TccPurchaseBudgetTemp> TccPurchaseBudgetTemps { get; set; }
        public virtual DbSet<TccPurchaseRecord> TccPurchaseRecords { get; set; }
        public virtual DbSet<TccPutProjectTurnoverRecord> TccPutProjectTurnoverRecords { get; set; }
        public virtual DbSet<TccPutProjectTurnoverRecordChangeInfo> TccPutProjectTurnoverRecordChangeInfos { get; set; }
        public virtual DbSet<TccPutProjectTurnoverRecordChangeMain> TccPutProjectTurnoverRecordChangeMains { get; set; }
        public virtual DbSet<TccRecDocReport> TccRecDocReports { get; set; }
        public virtual DbSet<TccRecDocReportRelation> TccRecDocReportRelations { get; set; }
        public virtual DbSet<TccRecDocument> TccRecDocuments { get; set; }
        public virtual DbSet<TccReceivablesProcess> TccReceivablesProcesses { get; set; }
        public virtual DbSet<TccReceivablesRecord> TccReceivablesRecords { get; set; }
        public virtual DbSet<TccReceivablesRecordBak> TccReceivablesRecordBaks { get; set; }
        public virtual DbSet<TccReceivablesRecordDeposit> TccReceivablesRecordDeposits { get; set; }
        public virtual DbSet<TccReceivablesRecordDepositInit> TccReceivablesRecordDepositInits { get; set; }
        public virtual DbSet<TccReceivablesRecordInit> TccReceivablesRecordInits { get; set; }
        public virtual DbSet<TccReceivablesRecordbak1> TccReceivablesRecordbak1s { get; set; }
        public virtual DbSet<TccReceiveDocument202009> TccReceiveDocument202009s { get; set; }
        public virtual DbSet<TccRecieveDocument> TccRecieveDocuments { get; set; }
        public virtual DbSet<TccRecordAssignedTouser> TccRecordAssignedTousers { get; set; }
        public virtual DbSet<TccRegistrationSubsidyBillsInfo> TccRegistrationSubsidyBillsInfos { get; set; }
        public virtual DbSet<TccRegistrationSubsidyDetail> TccRegistrationSubsidyDetails { get; set; }
        public virtual DbSet<TccRegistrationSubsidyHeader> TccRegistrationSubsidyHeaders { get; set; }
        public virtual DbSet<TccRegistrationSubsidyInfo> TccRegistrationSubsidyInfos { get; set; }
        public virtual DbSet<TccRelationOfPayAndRec> TccRelationOfPayAndRecs { get; set; }
        public virtual DbSet<TccResearchAndDevelopmentProjectBudget> TccResearchAndDevelopmentProjectBudgets { get; set; }
        public virtual DbSet<TccResearchAndDevelopmentProjectBudgetTemp> TccResearchAndDevelopmentProjectBudgetTemps { get; set; }
        public virtual DbSet<TccRiskMortgageDetail> TccRiskMortgageDetails { get; set; }
        public virtual DbSet<TccRiskMortgagesHeader> TccRiskMortgagesHeaders { get; set; }
        public virtual DbSet<TccRiskMortgagesOtherCategoryDetail> TccRiskMortgagesOtherCategoryDetails { get; set; }
        public virtual DbSet<TccRiskMortgagesOtherCategoryHeader> TccRiskMortgagesOtherCategoryHeaders { get; set; }
        public virtual DbSet<TccRole> TccRoles { get; set; }
        public virtual DbSet<TccRoleAuthorityRelation> TccRoleAuthorityRelations { get; set; }
        public virtual DbSet<TccRperInfo> TccRperInfos { get; set; }
        public virtual DbSet<TccSafetyManagementProcess> TccSafetyManagementProcesses { get; set; }
        public virtual DbSet<TccSalaryAdjustmentPlan> TccSalaryAdjustmentPlans { get; set; }
        public virtual DbSet<TccSalaryBasic> TccSalaryBasics { get; set; }
        public virtual DbSet<TccSalaryManageProcess> TccSalaryManageProcesses { get; set; }
        public virtual DbSet<TccSealDocInfo> TccSealDocInfos { get; set; }
        public virtual DbSet<TccSealInfo> TccSealInfos { get; set; }
        public virtual DbSet<TccSealMadeApply> TccSealMadeApplies { get; set; }
        public virtual DbSet<TccSealUseApply> TccSealUseApplies { get; set; }
        public virtual DbSet<TccSenDocForwardRecord> TccSenDocForwardRecords { get; set; }
        public virtual DbSet<TccSenDocGroup> TccSenDocGroups { get; set; }
        public virtual DbSet<TccSenDocument> TccSenDocuments { get; set; }
        public virtual DbSet<TccSenDocument202009> TccSenDocument202009s { get; set; }
        public virtual DbSet<TccSenDocumentRule> TccSenDocumentRules { get; set; }
        public virtual DbSet<TccSenDocumentTxDoc> TccSenDocumentTxDocs { get; set; }
        public virtual DbSet<TccSenDocumentTxDocAtt> TccSenDocumentTxDocAtts { get; set; }
        public virtual DbSet<TccSeparationCompletion> TccSeparationCompletions { get; set; }
        public virtual DbSet<TccSheBaoHistroy> TccSheBaoHistroys { get; set; }
        public virtual DbSet<TccSmFile> TccSmFiles { get; set; }
        public virtual DbSet<TccSocialSecurityProportion> TccSocialSecurityProportions { get; set; }
        public virtual DbSet<TccSpecialAwardHeader> TccSpecialAwardHeaders { get; set; }
        public virtual DbSet<TccSpecialAwardPersonLine> TccSpecialAwardPersonLines { get; set; }
        public virtual DbSet<TccSpecialFareRole> TccSpecialFareRoles { get; set; }
        public virtual DbSet<TccSpecialSubsidyHeader> TccSpecialSubsidyHeaders { get; set; }
        public virtual DbSet<TccSpecialTaxDeduct> TccSpecialTaxDeducts { get; set; }
        public virtual DbSet<TccSpecialTaxDeduct20190130> TccSpecialTaxDeduct20190130s { get; set; }
        public virtual DbSet<TccSpecialTaxDeduct20190227> TccSpecialTaxDeduct20190227s { get; set; }
        public virtual DbSet<TccSpecialTaxDeduct20191210> TccSpecialTaxDeduct20191210s { get; set; }
        public virtual DbSet<TccStandardforHouseSubsidy> TccStandardforHouseSubsidies { get; set; }
        public virtual DbSet<TccStandardforTelephoneSubsidy> TccStandardforTelephoneSubsidies { get; set; }
        public virtual DbSet<TccStandardforTransportSubsidy> TccStandardforTransportSubsidies { get; set; }
        public virtual DbSet<TccSuggestSurveyValue> TccSuggestSurveyValues { get; set; }
        public virtual DbSet<TccSurvey> TccSurveys { get; set; }
        public virtual DbSet<TccSurveyRisk> TccSurveyRisks { get; set; }
        public virtual DbSet<TccSyncProjectTaxAmtPeptj> TccSyncProjectTaxAmtPeptjs { get; set; }
        public virtual DbSet<TccSystemQueryBusinessAndQuery> TccSystemQueryBusinessAndQueries { get; set; }
        public virtual DbSet<TccSystemQueryDeptInfo> TccSystemQueryDeptInfos { get; set; }
        public virtual DbSet<TccSystemQueryDict> TccSystemQueryDicts { get; set; }
        public virtual DbSet<TccSystemQueryGwinfo> TccSystemQueryGwinfos { get; set; }
        public virtual DbSet<TccSystemQueryPerson> TccSystemQueryPeople { get; set; }
        public virtual DbSet<TccSystemQueryProcessNameMap> TccSystemQueryProcessNameMaps { get; set; }
        public virtual DbSet<TccSystemQueryQualificationInfo> TccSystemQueryQualificationInfos { get; set; }
        public virtual DbSet<TccSystemQueryRoleInfo> TccSystemQueryRoleInfos { get; set; }
        public virtual DbSet<TccSystemQueryStepInfo> TccSystemQueryStepInfos { get; set; }
        public virtual DbSet<TccTasksUserChangeTemp> TccTasksUserChangeTemps { get; set; }
        public virtual DbSet<TccTaxRateMapping> TccTaxRateMappings { get; set; }
        public virtual DbSet<TccTaxRateMappingYearIncome> TccTaxRateMappingYearIncomes { get; set; }
        public virtual DbSet<TccTelephoneSubsidyBillsInfo> TccTelephoneSubsidyBillsInfos { get; set; }
        public virtual DbSet<TccTelephoneSubsidyInfoDetail> TccTelephoneSubsidyInfoDetails { get; set; }
        public virtual DbSet<TccTelephoneSubsidyInfoHeader> TccTelephoneSubsidyInfoHeaders { get; set; }
        public virtual DbSet<TccTelephoneSubsidyOperateLog> TccTelephoneSubsidyOperateLogs { get; set; }
        public virtual DbSet<TccTempDatum> TccTempData { get; set; }
        public virtual DbSet<TccTempInterfaceDatum> TccTempInterfaceData { get; set; }
        public virtual DbSet<TccTestForTheForthAward> TccTestForTheForthAwards { get; set; }
        public virtual DbSet<TccTheForthAwardHistroy> TccTheForthAwardHistroys { get; set; }
        public virtual DbSet<TccTheForthAwardRecordPackage> TccTheForthAwardRecordPackages { get; set; }
        public virtual DbSet<TccTheForthAwardSection> TccTheForthAwardSections { get; set; }
        public virtual DbSet<TccTheForthAwardSection2> TccTheForthAwardSection2s { get; set; }
        public virtual DbSet<TccTransportMonthlyReimbursementCriterion> TccTransportMonthlyReimbursementCriteria { get; set; }
        public virtual DbSet<TccTransportSubsidyBillsInfo> TccTransportSubsidyBillsInfos { get; set; }
        public virtual DbSet<TccTransportSubsidyInfoDetail> TccTransportSubsidyInfoDetails { get; set; }
        public virtual DbSet<TccTransportSubsidyInfoHeader> TccTransportSubsidyInfoHeaders { get; set; }
        public virtual DbSet<TccTransportSubsidyOperateLog> TccTransportSubsidyOperateLogs { get; set; }
        public virtual DbSet<TccTransportSubsidyWithholdingInfo> TccTransportSubsidyWithholdingInfos { get; set; }
        public virtual DbSet<TccTransportSubsidyWithholdingList> TccTransportSubsidyWithholdingLists { get; set; }
        public virtual DbSet<TccTripStandard> TccTripStandards { get; set; }
        public virtual DbSet<TccTsDictDeptOfDevCenter> TccTsDictDeptOfDevCenters { get; set; }
        public virtual DbSet<TccTsDictPlanDetail> TccTsDictPlanDetails { get; set; }
        public virtual DbSet<TccTsDictPlanDetail0321> TccTsDictPlanDetail0321s { get; set; }
        public virtual DbSet<TccTsDictPlanItemCount> TccTsDictPlanItemCounts { get; set; }
        public virtual DbSet<TccTsDictShouldDoneHour> TccTsDictShouldDoneHours { get; set; }
        public virtual DbSet<TccTsPartyTrainResult> TccTsPartyTrainResults { get; set; }
        public virtual DbSet<TccTsTrainBookInfo> TccTsTrainBookInfos { get; set; }
        public virtual DbSet<TccTsTrainChangeApply> TccTsTrainChangeApplies { get; set; }
        public virtual DbSet<TccTsTrainChangeApplyDetail> TccTsTrainChangeApplyDetails { get; set; }
        public virtual DbSet<TccTsTrainDoneDetail> TccTsTrainDoneDetails { get; set; }
        public virtual DbSet<TccTsTrainDonePerson> TccTsTrainDonePeople { get; set; }
        public virtual DbSet<TccTsTrainDoneSignDetail> TccTsTrainDoneSignDetails { get; set; }
        public virtual DbSet<TccTsTrainDoneTeacher> TccTsTrainDoneTeachers { get; set; }
        public virtual DbSet<TccTsTrainPlanBaseInfo> TccTsTrainPlanBaseInfos { get; set; }
        public virtual DbSet<TccTsTrainPlanDept> TccTsTrainPlanDepts { get; set; }
        public virtual DbSet<TccTsTrainPlanDeptDetail> TccTsTrainPlanDeptDetails { get; set; }
        public virtual DbSet<TccTsTrainPlanReturnInfo> TccTsTrainPlanReturnInfos { get; set; }
        public virtual DbSet<TccTsTrainTeacherApply> TccTsTrainTeacherApplies { get; set; }
        public virtual DbSet<TccTsTrainTeacherAttInfo> TccTsTrainTeacherAttInfos { get; set; }
        public virtual DbSet<TccTsTrainTeacherDetail> TccTsTrainTeacherDetails { get; set; }
        public virtual DbSet<TccTsTrainTeacherInfo> TccTsTrainTeacherInfos { get; set; }
        public virtual DbSet<TccTxdocReviewOpinion> TccTxdocReviewOpinions { get; set; }
        public virtual DbSet<TccTxdocumentReview> TccTxdocumentReviews { get; set; }
        public virtual DbSet<TccUserAnnuity> TccUserAnnuities { get; set; }
        public virtual DbSet<TccUserCompleteBak> TccUserCompleteBaks { get; set; }
        public virtual DbSet<TccUserDefinedApplicationForAward> TccUserDefinedApplicationForAwards { get; set; }
        public virtual DbSet<TccUserDefinedApplicationForAwardDeleteRecord> TccUserDefinedApplicationForAwardDeleteRecords { get; set; }
        public virtual DbSet<TccUserDefinedApplicationForAwardLog> TccUserDefinedApplicationForAwardLogs { get; set; }
        public virtual DbSet<TccUserMobileTempt> TccUserMobileTempts { get; set; }
        public virtual DbSet<TccUserRole> TccUserRoles { get; set; }
        public virtual DbSet<TccVehicle> TccVehicles { get; set; }
        public virtual DbSet<TccVehicleInfo> TccVehicleInfos { get; set; }
        public virtual DbSet<TccVehicleSeat> TccVehicleSeats { get; set; }
        public virtual DbSet<TccVoucherExpenseClaimOfRelation> TccVoucherExpenseClaimOfRelations { get; set; }
        public virtual DbSet<TccVoucherIdrelation> TccVoucherIdrelations { get; set; }
        public virtual DbSet<TccVoucherOfRelation> TccVoucherOfRelations { get; set; }
        public virtual DbSet<TccWagePay> TccWagePays { get; set; }
        public virtual DbSet<TccWagePaymentHistroy> TccWagePaymentHistroys { get; set; }
        public virtual DbSet<TccWagePaymentHistroy20160225bak> TccWagePaymentHistroy20160225baks { get; set; }
        public virtual DbSet<TccWagePaymentHistroy20181220> TccWagePaymentHistroy20181220s { get; set; }
        public virtual DbSet<TccWagePaymentHistroy20190130> TccWagePaymentHistroy20190130s { get; set; }
        public virtual DbSet<TccWagePaymentHistroy20190218> TccWagePaymentHistroy20190218s { get; set; }
        public virtual DbSet<TccWagePaymentHistroy20190227> TccWagePaymentHistroy20190227s { get; set; }
        public virtual DbSet<TccWagePaymentHistroy20190403> TccWagePaymentHistroy20190403s { get; set; }
        public virtual DbSet<TccWagePaymentHistroy20190506> TccWagePaymentHistroy20190506s { get; set; }
        public virtual DbSet<TccWagePaymentHistroy20191021> TccWagePaymentHistroy20191021s { get; set; }
        public virtual DbSet<TccWagePaymentHistroy20191210> TccWagePaymentHistroy20191210s { get; set; }
        public virtual DbSet<TccWagePaymentHistroy20191224> TccWagePaymentHistroy20191224s { get; set; }
        public virtual DbSet<TccWagePaymentProcess> TccWagePaymentProcesses { get; set; }
        public virtual DbSet<TccWagePaymentProcess20191210> TccWagePaymentProcess20191210s { get; set; }
        public virtual DbSet<TccWagePaymentProcessDeptAssign> TccWagePaymentProcessDeptAssigns { get; set; }
        public virtual DbSet<TccWagePaymentProcessDeptLine> TccWagePaymentProcessDeptLines { get; set; }
        public virtual DbSet<TccWagePaymentProcessPersonLine> TccWagePaymentProcessPersonLines { get; set; }
        public virtual DbSet<TccWagePaymentQscore> TccWagePaymentQscores { get; set; }
        public virtual DbSet<TccWagePaymentReportMonthVoucher> TccWagePaymentReportMonthVouchers { get; set; }
        public virtual DbSet<TccWageRecordPackage> TccWageRecordPackages { get; set; }
        public virtual DbSet<TccWarningMessageAuto> TccWarningMessageAutos { get; set; }
        public virtual DbSet<TccWealPaymentHistroy> TccWealPaymentHistroys { get; set; }
        public virtual DbSet<TccWealPaymentHistroy20191210> TccWealPaymentHistroy20191210s { get; set; }
        public virtual DbSet<TccWinBiddingBonusDeptAssign> TccWinBiddingBonusDeptAssigns { get; set; }
        public virtual DbSet<TccWinBiddingBonusHeader> TccWinBiddingBonusHeaders { get; set; }
        public virtual DbSet<TccWinBiddingBonusLine> TccWinBiddingBonusLines { get; set; }
        public virtual DbSet<TccWinBiddingBonusPersonLine> TccWinBiddingBonusPersonLines { get; set; }
        public virtual DbSet<TccWinBiddingBonusProjectAssign> TccWinBiddingBonusProjectAssigns { get; set; }
        public virtual DbSet<TccYearAwardsAdjust> TccYearAwardsAdjusts { get; set; }
        public virtual DbSet<Tempinfo> Tempinfos { get; set; }
        public virtual DbSet<Test1102> Test1102s { get; set; }
        public virtual DbSet<TestAward> TestAwards { get; set; }
        public virtual DbSet<TestAward2> TestAward2s { get; set; }
        public virtual DbSet<Testtb> Testtbs { get; set; }
        public virtual DbSet<TmpFinanceTaskBusinessTable> TmpFinanceTaskBusinessTables { get; set; }
        public virtual DbSet<TmpRExcel> TmpRExcels { get; set; }
        public virtual DbSet<TmpTmpDraftinto> TmpTmpDraftintos { get; set; }
        public virtual DbSet<UbscPlanItem> UbscPlanItems { get; set; }
        public virtual DbSet<UbscPlanItemsSource> UbscPlanItemsSources { get; set; }
        public virtual DbSet<UbscWorkPlanDepartment> UbscWorkPlanDepartments { get; set; }
        public virtual DbSet<UbscWorkPlanInfo> UbscWorkPlanInfos { get; set; }
        public virtual DbSet<UbscWorkPlanInfoEmpower> UbscWorkPlanInfoEmpowers { get; set; }
        public virtual DbSet<UbscWorkPlanSource> UbscWorkPlanSources { get; set; }
        public virtual DbSet<UbscWorkPlanType> UbscWorkPlanTypes { get; set; }
        public virtual DbSet<UbscWorkPlanVerifyDetail> UbscWorkPlanVerifyDetails { get; set; }
        public virtual DbSet<UbscYearPlanChange> UbscYearPlanChanges { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserTable> UserTables { get; set; }
        public virtual DbSet<UserTableInfo> UserTableInfos { get; set; }
        public virtual DbSet<View106Calendar> View106Calendars { get; set; }
        public virtual DbSet<ViewAbroadUser> ViewAbroadUsers { get; set; }
        public virtual DbSet<ViewAbroadUserInfo> ViewAbroadUserInfos { get; set; }
        public virtual DbSet<ViewAnuualUserList> ViewAnuualUserLists { get; set; }
        public virtual DbSet<ViewApprovedRecordDistinct> ViewApprovedRecordDistincts { get; set; }
        public virtual DbSet<ViewApprovedRecordFinanceRequestProcessForPrintHeader> ViewApprovedRecordFinanceRequestProcessForPrintHeaders { get; set; }
        public virtual DbSet<ViewAskForLeave> ViewAskForLeaves { get; set; }
        public virtual DbSet<ViewAskForLeaveInfomation> ViewAskForLeaveInfomations { get; set; }
        public virtual DbSet<ViewAskForLeaveList> ViewAskForLeaveLists { get; set; }
        public virtual DbSet<ViewAssetInfoRelation> ViewAssetInfoRelations { get; set; }
        public virtual DbSet<ViewAssign2AwardDetail> ViewAssign2AwardDetails { get; set; }
        public virtual DbSet<ViewAward3019MasterDept> ViewAward3019MasterDepts { get; set; }
        public virtual DbSet<ViewAwardCategoryMasterDept> ViewAwardCategoryMasterDepts { get; set; }
        public virtual DbSet<ViewAwardMasterDept> ViewAwardMasterDepts { get; set; }
        public virtual DbSet<ViewAwardSender> ViewAwardSenders { get; set; }
        public virtual DbSet<ViewB11005PaymentTemp> ViewB11005PaymentTemps { get; set; }
        public virtual DbSet<ViewBalanceBasic> ViewBalanceBasics { get; set; }
        public virtual DbSet<ViewBaseTable> ViewBaseTables { get; set; }
        public virtual DbSet<ViewBasicPersonDeptInfo> ViewBasicPersonDeptInfos { get; set; }
        public virtual DbSet<ViewBillsInfoReceived> ViewBillsInfoReceiveds { get; set; }
        public virtual DbSet<ViewBillsInfoRendered> ViewBillsInfoRendereds { get; set; }
        public virtual DbSet<ViewBorrowMoneyInfo> ViewBorrowMoneyInfos { get; set; }
        public virtual DbSet<ViewBorrowMoneyInfoInitWarning> ViewBorrowMoneyInfoInitWarnings { get; set; }
        public virtual DbSet<ViewBorrowMoneyInfoWarning> ViewBorrowMoneyInfoWarnings { get; set; }
        public virtual DbSet<ViewBreakSubsidyUserInfo> ViewBreakSubsidyUserInfos { get; set; }
        public virtual DbSet<ViewBudget> ViewBudgets { get; set; }
        public virtual DbSet<ViewBudgetAwardUse> ViewBudgetAwardUses { get; set; }
        public virtual DbSet<ViewBudgetDeparment> ViewBudgetDeparments { get; set; }
        public virtual DbSet<ViewBudgetDepartment> ViewBudgetDepartments { get; set; }
        public virtual DbSet<ViewBudgetDeptBudgetRunningCost> ViewBudgetDeptBudgetRunningCosts { get; set; }
        public virtual DbSet<ViewBudgetDeptBudgetSpecialCost> ViewBudgetDeptBudgetSpecialCosts { get; set; }
        public virtual DbSet<ViewBudgetDeptHappenedRunningCost> ViewBudgetDeptHappenedRunningCosts { get; set; }
        public virtual DbSet<ViewBudgetDeptHappenedRunningCostDetail> ViewBudgetDeptHappenedRunningCostDetails { get; set; }
        public virtual DbSet<ViewBudgetDeptHappenedSpecialCost> ViewBudgetDeptHappenedSpecialCosts { get; set; }
        public virtual DbSet<ViewBudgetDeptHappenedSpecialCostDetail> ViewBudgetDeptHappenedSpecialCostDetails { get; set; }
        public virtual DbSet<ViewBudgetDeptHappeningRunningCost> ViewBudgetDeptHappeningRunningCosts { get; set; }
        public virtual DbSet<ViewBudgetDeptHappeningRunningCostDetail> ViewBudgetDeptHappeningRunningCostDetails { get; set; }
        public virtual DbSet<ViewBudgetDeptHappeningRunningCostDetails2> ViewBudgetDeptHappeningRunningCostDetails2s { get; set; }
        public virtual DbSet<ViewBudgetDeptHappeningRunningCostDetailsTest> ViewBudgetDeptHappeningRunningCostDetailsTests { get; set; }
        public virtual DbSet<ViewBudgetDeptHappeningSpecialCost> ViewBudgetDeptHappeningSpecialCosts { get; set; }
        public virtual DbSet<ViewBudgetDeptHappeningSpecialCostDetail> ViewBudgetDeptHappeningSpecialCostDetails { get; set; }
        public virtual DbSet<ViewBudgetDeptHappeningSpecialCostDetailsTest> ViewBudgetDeptHappeningSpecialCostDetailsTests { get; set; }
        public virtual DbSet<ViewBudgetFinishProcess> ViewBudgetFinishProcesses { get; set; }
        public virtual DbSet<ViewBudgetProjectBudgetRunningCost> ViewBudgetProjectBudgetRunningCosts { get; set; }
        public virtual DbSet<ViewBudgetProjectBudgetSpecialCost> ViewBudgetProjectBudgetSpecialCosts { get; set; }
        public virtual DbSet<ViewBudgetProjectHappenedRunningCost> ViewBudgetProjectHappenedRunningCosts { get; set; }
        public virtual DbSet<ViewBudgetProjectHappenedRunningCostDetail> ViewBudgetProjectHappenedRunningCostDetails { get; set; }
        public virtual DbSet<ViewBudgetProjectHappenedSpecialCostFyf> ViewBudgetProjectHappenedSpecialCostFyfs { get; set; }
        public virtual DbSet<ViewBudgetProjectHappenedSpecialCostFyfDetail> ViewBudgetProjectHappenedSpecialCostFyfDetails { get; set; }
        public virtual DbSet<ViewBudgetProjectHappenedSpecialCostYf> ViewBudgetProjectHappenedSpecialCostYfs { get; set; }
        public virtual DbSet<ViewBudgetProjectHappenedSpecialCostYfDetail> ViewBudgetProjectHappenedSpecialCostYfDetails { get; set; }
        public virtual DbSet<ViewBudgetProjectHappeningRunningCost> ViewBudgetProjectHappeningRunningCosts { get; set; }
        public virtual DbSet<ViewBudgetProjectHappeningRunningCostDetail> ViewBudgetProjectHappeningRunningCostDetails { get; set; }
        public virtual DbSet<ViewBudgetProjectHappeningSpecialCostFyf> ViewBudgetProjectHappeningSpecialCostFyfs { get; set; }
        public virtual DbSet<ViewBudgetProjectHappeningSpecialCostFyfDetail> ViewBudgetProjectHappeningSpecialCostFyfDetails { get; set; }
        public virtual DbSet<ViewBudgetProjectHappeningSpecialCostYf> ViewBudgetProjectHappeningSpecialCostYfs { get; set; }
        public virtual DbSet<ViewBudgetProjectHappeningSpecialCostYfDetail> ViewBudgetProjectHappeningSpecialCostYfDetails { get; set; }
        public virtual DbSet<ViewBudgetTelephoneSubsidy> ViewBudgetTelephoneSubsidies { get; set; }
        public virtual DbSet<ViewBudgetTypeRole> ViewBudgetTypeRoles { get; set; }
        public virtual DbSet<ViewBusinessTripAbortList> ViewBusinessTripAbortLists { get; set; }
        public virtual DbSet<ViewBusinessTripInfomation> ViewBusinessTripInfomations { get; set; }
        public virtual DbSet<ViewBusinessTripOfairInfo> ViewBusinessTripOfairInfos { get; set; }
        public virtual DbSet<ViewBussinessCard> ViewBussinessCards { get; set; }
        public virtual DbSet<ViewCarryoverCompany> ViewCarryoverCompanies { get; set; }
        public virtual DbSet<ViewCashierBusinessTable> ViewCashierBusinessTables { get; set; }
        public virtual DbSet<ViewCashierConfirmExportAnnual> ViewCashierConfirmExportAnnuals { get; set; }
        public virtual DbSet<ViewCashierConfirmExportCash> ViewCashierConfirmExportCashes { get; set; }
        public virtual DbSet<ViewCashierConfirmExportCheque> ViewCashierConfirmExportCheques { get; set; }
        public virtual DbSet<ViewCashierConfirmExportTelegraphicTransfer> ViewCashierConfirmExportTelegraphicTransfers { get; set; }
        public virtual DbSet<ViewCheckFundPaymentInfo> ViewCheckFundPaymentInfos { get; set; }
        public virtual DbSet<ViewContractPaymentInfo> ViewContractPaymentInfos { get; set; }
        public virtual DbSet<ViewContractPaymentInfo1> ViewContractPaymentInfos1 { get; set; }
        public virtual DbSet<ViewContractPaymentInfoNew> ViewContractPaymentInfoNews { get; set; }
        public virtual DbSet<ViewDepartment> ViewDepartments { get; set; }
        public virtual DbSet<ViewDepartmentAccount> ViewDepartmentAccounts { get; set; }
        public virtual DbSet<ViewDepartmentManager> ViewDepartmentManagers { get; set; }
        public virtual DbSet<ViewDepositOfTransactionInfo> ViewDepositOfTransactionInfos { get; set; }
        public virtual DbSet<ViewDepositReceived> ViewDepositReceiveds { get; set; }
        public virtual DbSet<ViewDeptBudgetInfo> ViewDeptBudgetInfos { get; set; }
        public virtual DbSet<ViewDeptBudgetInfoTemp> ViewDeptBudgetInfoTemps { get; set; }
        public virtual DbSet<ViewDeptInfomation> ViewDeptInfomations { get; set; }
        public virtual DbSet<ViewDeptsLeader> ViewDeptsLeaders { get; set; }
        public virtual DbSet<ViewDeptsManagement> ViewDeptsManagements { get; set; }
        public virtual DbSet<ViewDeptsOperateQuote> ViewDeptsOperateQuotes { get; set; }
        public virtual DbSet<ViewDeptsProduction> ViewDeptsProductions { get; set; }
        public virtual DbSet<ViewDeptsService> ViewDeptsServices { get; set; }
        public virtual DbSet<ViewDraftInfoDraftCode> ViewDraftInfoDraftCodes { get; set; }
        public virtual DbSet<ViewDraftInfoWarning> ViewDraftInfoWarnings { get; set; }
        public virtual DbSet<ViewEmployeeBasicInfo> ViewEmployeeBasicInfos { get; set; }
        public virtual DbSet<ViewExamAbroadUser> ViewExamAbroadUsers { get; set; }
        public virtual DbSet<ViewExpenseClaimAbroadInfomation> ViewExpenseClaimAbroadInfomations { get; set; }
        public virtual DbSet<ViewExpenseClaimByTripInfo> ViewExpenseClaimByTripInfos { get; set; }
        public virtual DbSet<ViewExpenseClaimCashierConfirmDetail> ViewExpenseClaimCashierConfirmDetails { get; set; }
        public virtual DbSet<ViewExpenseClaimInfomation> ViewExpenseClaimInfomations { get; set; }
        public virtual DbSet<ViewExpensingInfo> ViewExpensingInfos { get; set; }
        public virtual DbSet<ViewExpensingInfoAll> ViewExpensingInfoAlls { get; set; }
        public virtual DbSet<ViewFinanceForProjectBalanceAward> ViewFinanceForProjectBalanceAwards { get; set; }
        public virtual DbSet<ViewFinanceForProjectBalanceAwardBak> ViewFinanceForProjectBalanceAwardBaks { get; set; }
        public virtual DbSet<ViewFinanceInfoForReport> ViewFinanceInfoForReports { get; set; }
        public virtual DbSet<ViewFinanceInfoPayment> ViewFinanceInfoPayments { get; set; }
        public virtual DbSet<ViewFinanceInfoVoucherId> ViewFinanceInfoVoucherIds { get; set; }
        public virtual DbSet<ViewFinanceInvoicesInfo> ViewFinanceInvoicesInfos { get; set; }
        public virtual DbSet<ViewFinancePayHistory> ViewFinancePayHistories { get; set; }
        public virtual DbSet<ViewFinancePayProcessing> ViewFinancePayProcessings { get; set; }
        public virtual DbSet<ViewFinanceProjectAward> ViewFinanceProjectAwards { get; set; }
        public virtual DbSet<ViewFinanceProjectOperationCost> ViewFinanceProjectOperationCosts { get; set; }
        public virtual DbSet<ViewFinanceRecInvoice> ViewFinanceRecInvoices { get; set; }
        public virtual DbSet<ViewFinanceReceiveAmountInfo> ViewFinanceReceiveAmountInfos { get; set; }
        public virtual DbSet<ViewFinanceReceiveHistory> ViewFinanceReceiveHistories { get; set; }
        public virtual DbSet<ViewFinanceReceiveofTaxHistory> ViewFinanceReceiveofTaxHistories { get; set; }
        public virtual DbSet<ViewFinanceRenInvoice> ViewFinanceRenInvoices { get; set; }
        public virtual DbSet<ViewFinanceRenInvoices20160930bak> ViewFinanceRenInvoices20160930baks { get; set; }
        public virtual DbSet<ViewFinanceRequestInfo> ViewFinanceRequestInfos { get; set; }
        public virtual DbSet<ViewFinanceTaskBusinessTable> ViewFinanceTaskBusinessTables { get; set; }
        public virtual DbSet<ViewFinanceTaskBusinessTableBak2> ViewFinanceTaskBusinessTableBak2s { get; set; }
        public virtual DbSet<ViewFinanceTaskBusinessTableCompelete> ViewFinanceTaskBusinessTableCompeletes { get; set; }
        public virtual DbSet<ViewFinanceTaskBusinessTableOfFp> ViewFinanceTaskBusinessTableOfFps { get; set; }
        public virtual DbSet<ViewFinanceTaskBusinessTableOutSide> ViewFinanceTaskBusinessTableOutSides { get; set; }
        public virtual DbSet<ViewFinanceTaskBusinessTableReceivable> ViewFinanceTaskBusinessTableReceivables { get; set; }
        public virtual DbSet<ViewFinanceTaskBusinessTableTemp> ViewFinanceTaskBusinessTableTemps { get; set; }
        public virtual DbSet<ViewGeneralExpensesCashierConfirmDetail> ViewGeneralExpensesCashierConfirmDetails { get; set; }
        public virtual DbSet<ViewGeneralExpensesPayInfo> ViewGeneralExpensesPayInfos { get; set; }
        public virtual DbSet<ViewGetPerson> ViewGetPersons { get; set; }
        public virtual DbSet<ViewGrtLtChangeInfo> ViewGrtLtChangeInfos { get; set; }
        public virtual DbSet<ViewGrtLtForCheck> ViewGrtLtForChecks { get; set; }
        public virtual DbSet<ViewGrtLtForCheckForPayment> ViewGrtLtForCheckForPayments { get; set; }
        public virtual DbSet<ViewHDispathUserInfo> ViewHDispathUserInfos { get; set; }
        public virtual DbSet<ViewHappenedCostOfOccurrence> ViewHappenedCostOfOccurrences { get; set; }
        public virtual DbSet<ViewHappeningCostOfOccurrence> ViewHappeningCostOfOccurrences { get; set; }
        public virtual DbSet<ViewHasHappenedBorrowMoneyInfo> ViewHasHappenedBorrowMoneyInfos { get; set; }
        public virtual DbSet<ViewHasHappenedBorrowMoneyInfoCheck> ViewHasHappenedBorrowMoneyInfoChecks { get; set; }
        public virtual DbSet<ViewHasHappeningBorrowMoneyInfo> ViewHasHappeningBorrowMoneyInfos { get; set; }
        public virtual DbSet<ViewHasIncurredExpensesInfo> ViewHasIncurredExpensesInfos { get; set; }
        public virtual DbSet<ViewHousingsubsidyInfo> ViewHousingsubsidyInfos { get; set; }
        public virtual DbSet<ViewHousingsubsidyList> ViewHousingsubsidyLists { get; set; }
        public virtual DbSet<ViewHousingsubsidySalaryAttribution> ViewHousingsubsidySalaryAttributions { get; set; }
        public virtual DbSet<ViewHousingsubsidyStandardofMonth> ViewHousingsubsidyStandardofMonths { get; set; }
        public virtual DbSet<ViewHrpAbroadUser> ViewHrpAbroadUsers { get; set; }
        public virtual DbSet<ViewHrpAllCurrentUser> ViewHrpAllCurrentUsers { get; set; }
        public virtual DbSet<ViewHrpAllDepartment> ViewHrpAllDepartments { get; set; }
        public virtual DbSet<ViewHrpBaoBeiUser> ViewHrpBaoBeiUsers { get; set; }
        public virtual DbSet<ViewHrpHumanBasic> ViewHrpHumanBasics { get; set; }
        public virtual DbSet<ViewHrpPassportInfo> ViewHrpPassportInfos { get; set; }
        public virtual DbSet<ViewHrpUserInfo> ViewHrpUserInfos { get; set; }
        public virtual DbSet<ViewHrpUserRelativeInfo> ViewHrpUserRelativeInfos { get; set; }
        public virtual DbSet<ViewIndependentAccountingAre> ViewIndependentAccountingAres { get; set; }
        public virtual DbSet<ViewItopTicket> ViewItopTickets { get; set; }
        public virtual DbSet<ViewMeetCostFare> ViewMeetCostFares { get; set; }
        public virtual DbSet<ViewMeetUserInfo> ViewMeetUserInfos { get; set; }
        public virtual DbSet<ViewMergeAbroadApproveInfo> ViewMergeAbroadApproveInfos { get; set; }
        public virtual DbSet<ViewMonthlyPaymentPaidDetail> ViewMonthlyPaymentPaidDetails { get; set; }
        public virtual DbSet<ViewMonthlyPaymentPlanDetail> ViewMonthlyPaymentPlanDetails { get; set; }
        public virtual DbSet<ViewOtherCustomer> ViewOtherCustomers { get; set; }
        public virtual DbSet<ViewOtherSupplier> ViewOtherSuppliers { get; set; }
        public virtual DbSet<ViewOuterUnitInfo> ViewOuterUnitInfos { get; set; }
        public virtual DbSet<ViewPaymentHistory5NotVoucherInfoInbox> ViewPaymentHistory5NotVoucherInfoInboxes { get; set; }
        public virtual DbSet<ViewPaymentHistoryDepartmentContractNotVoucherInfoInbox> ViewPaymentHistoryDepartmentContractNotVoucherInfoInboxes { get; set; }
        public virtual DbSet<ViewPaymentHistoryDepartmentContractNotVoucherInfoInboxDepartmentList> ViewPaymentHistoryDepartmentContractNotVoucherInfoInboxDepartmentLists { get; set; }
        public virtual DbSet<ViewPaymentHistoryDepartmentNotVoucherInfoInbox> ViewPaymentHistoryDepartmentNotVoucherInfoInboxes { get; set; }
        public virtual DbSet<ViewPaymentHistoryDepartmentNotVoucherInfoInboxDepartmentList> ViewPaymentHistoryDepartmentNotVoucherInfoInboxDepartmentLists { get; set; }
        public virtual DbSet<ViewPaymentHistoryDepositInbox> ViewPaymentHistoryDepositInboxes { get; set; }
        public virtual DbSet<ViewPaymentHistoryProjectContractNotVoucherInfoInbox> ViewPaymentHistoryProjectContractNotVoucherInfoInboxes { get; set; }
        public virtual DbSet<ViewPaymentHistoryProjectNotVoucherInfoInbox> ViewPaymentHistoryProjectNotVoucherInfoInboxes { get; set; }
        public virtual DbSet<ViewPaymentHistorySheJiFenBaoFei> ViewPaymentHistorySheJiFenBaoFeis { get; set; }
        public virtual DbSet<ViewPaymentHistoryTotal> ViewPaymentHistoryTotals { get; set; }
        public virtual DbSet<ViewPaymentHistoryTotalNew> ViewPaymentHistoryTotalNews { get; set; }
        public virtual DbSet<ViewPaymentProcessMultipleRelation> ViewPaymentProcessMultipleRelations { get; set; }
        public virtual DbSet<ViewPeptjBudgetProcessInfo> ViewPeptjBudgetProcessInfos { get; set; }
        public virtual DbSet<ViewPeptjContractLawsuit> ViewPeptjContractLawsuits { get; set; }
        public virtual DbSet<ViewPeptjCustomerInfo> ViewPeptjCustomerInfos { get; set; }
        public virtual DbSet<ViewPeptjPayContract> ViewPeptjPayContracts { get; set; }
        public virtual DbSet<ViewPeptjPayContractLawsuit> ViewPeptjPayContractLawsuits { get; set; }
        public virtual DbSet<ViewPeptjPayContractLawsuitWithStatus> ViewPeptjPayContractLawsuitWithStatuses { get; set; }
        public virtual DbSet<ViewPeptjProjectInfo> ViewPeptjProjectInfos { get; set; }
        public virtual DbSet<ViewPeptjProjectInfoHuman> ViewPeptjProjectInfoHumans { get; set; }
        public virtual DbSet<ViewPeptjProjectInfoLocation> ViewPeptjProjectInfoLocations { get; set; }
        public virtual DbSet<ViewPeptjProjectInfoSubjectType> ViewPeptjProjectInfoSubjectTypes { get; set; }
        public virtual DbSet<ViewPeptjResearchProject> ViewPeptjResearchProjects { get; set; }
        public virtual DbSet<ViewPeptjSupplyInfo> ViewPeptjSupplyInfos { get; set; }
        public virtual DbSet<ViewPersonInfo> ViewPersonInfos { get; set; }
        public virtual DbSet<ViewPersonInfoDepartmentalCategory> ViewPersonInfoDepartmentalCategories { get; set; }
        public virtual DbSet<ViewPrintCostDeptSumMonth> ViewPrintCostDeptSumMonths { get; set; }
        public virtual DbSet<ViewPrintCostProjSumMonth> ViewPrintCostProjSumMonths { get; set; }
        public virtual DbSet<ViewProbasicinfo> ViewProbasicinfos { get; set; }
        public virtual DbSet<ViewProcessVoucherList> ViewProcessVoucherLists { get; set; }
        public virtual DbSet<ViewProjectApprovedCost> ViewProjectApprovedCosts { get; set; }
        public virtual DbSet<ViewProjectAwardSendCheckTree> ViewProjectAwardSendCheckTrees { get; set; }
        public virtual DbSet<ViewProjectAwardTree> ViewProjectAwardTrees { get; set; }
        public virtual DbSet<ViewProjectBudgetInfo> ViewProjectBudgetInfos { get; set; }
        public virtual DbSet<ViewProjectBudgetInfoTemp> ViewProjectBudgetInfoTemps { get; set; }
        public virtual DbSet<ViewProjectInfo> ViewProjectInfos { get; set; }
        public virtual DbSet<ViewProjectInfoBudgetByPeptj> ViewProjectInfoBudgetByPeptjs { get; set; }
        public virtual DbSet<ViewProjectInfoBudgetByPeptjLocation> ViewProjectInfoBudgetByPeptjLocations { get; set; }
        public virtual DbSet<ViewProjectInfoByUserId> ViewProjectInfoByUserIds { get; set; }
        public virtual DbSet<ViewProjectInfoCost> ViewProjectInfoCosts { get; set; }
        public virtual DbSet<ViewProjectInfoFinanceReceivable> ViewProjectInfoFinanceReceivables { get; set; }
        public virtual DbSet<ViewProjectInfoFinanceReceivablesCny> ViewProjectInfoFinanceReceivablesCnies { get; set; }
        public virtual DbSet<ViewProjectInfoFinanceReceivablesContract> ViewProjectInfoFinanceReceivablesContracts { get; set; }
        public virtual DbSet<ViewProjectInfoFinanceReceivablesContract20181227OldBak> ViewProjectInfoFinanceReceivablesContract20181227OldBaks { get; set; }
        public virtual DbSet<ViewProjectInfoFinanceReceivablesofContract> ViewProjectInfoFinanceReceivablesofContracts { get; set; }
        public virtual DbSet<ViewProjectInfoFund> ViewProjectInfoFunds { get; set; }
        public virtual DbSet<ViewProjectInfoFund2> ViewProjectInfoFund2s { get; set; }
        public virtual DbSet<ViewProjectInfoFund3> ViewProjectInfoFund3s { get; set; }
        public virtual DbSet<ViewProjectInfoHumanWorkPrice> ViewProjectInfoHumanWorkPrices { get; set; }
        public virtual DbSet<ViewProjectInfoHumanWorkPriceDetail> ViewProjectInfoHumanWorkPriceDetails { get; set; }
        public virtual DbSet<ViewProjectList> ViewProjectLists { get; set; }
        public virtual DbSet<ViewQueryAskforLeaveInfoMation> ViewQueryAskforLeaveInfoMations { get; set; }
        public virtual DbSet<ViewQueryFinanceCashFlowList> ViewQueryFinanceCashFlowLists { get; set; }
        public virtual DbSet<ViewQueryGrtLtInfo> ViewQueryGrtLtInfos { get; set; }
        public virtual DbSet<ViewQueryProcessStatus> ViewQueryProcessStatuses { get; set; }
        public virtual DbSet<ViewReceivablesInbox> ViewReceivablesInboxes { get; set; }
        public virtual DbSet<ViewReceivablesRaecordHistory> ViewReceivablesRaecordHistories { get; set; }
        public virtual DbSet<ViewReceivablesRecord> ViewReceivablesRecords { get; set; }
        public virtual DbSet<ViewReceivablesRecordHistory> ViewReceivablesRecordHistories { get; set; }
        public virtual DbSet<ViewReceiveAccountByRed> ViewReceiveAccountByReds { get; set; }
        public virtual DbSet<ViewReceiveHistoryDepositInbox> ViewReceiveHistoryDepositInboxes { get; set; }
        public virtual DbSet<ViewReceivedByPayMentInfo> ViewReceivedByPayMentInfos { get; set; }
        public virtual DbSet<ViewReportAboadAbroadUserRecord> ViewReportAboadAbroadUserRecords { get; set; }
        public virtual DbSet<ViewReportAbroadApplyRecord> ViewReportAbroadApplyRecords { get; set; }
        public virtual DbSet<ViewReportAttachment> ViewReportAttachments { get; set; }
        public virtual DbSet<ViewReportAwardByYear> ViewReportAwardByYears { get; set; }
        public virtual DbSet<ViewReportEntertainmentClaim> ViewReportEntertainmentClaims { get; set; }
        public virtual DbSet<ViewReportExpenseClaimDailyLine> ViewReportExpenseClaimDailyLines { get; set; }
        public virtual DbSet<ViewReportExpenseClaimHeader> ViewReportExpenseClaimHeaders { get; set; }
        public virtual DbSet<ViewReportExpenseClaimHotel> ViewReportExpenseClaimHotels { get; set; }
        public virtual DbSet<ViewReportExpenseClaimOther> ViewReportExpenseClaimOthers { get; set; }
        public virtual DbSet<ViewReportExpenseClaimSubsidyLine> ViewReportExpenseClaimSubsidyLines { get; set; }
        public virtual DbSet<ViewReportExpenseClaimTravel> ViewReportExpenseClaimTravels { get; set; }
        public virtual DbSet<ViewReportExpenseClaimWjryLine> ViewReportExpenseClaimWjryLines { get; set; }
        public virtual DbSet<ViewReportFinanceRequestProcessExchangeInfo> ViewReportFinanceRequestProcessExchangeInfos { get; set; }
        public virtual DbSet<ViewReportFinanceRequestProcessForPrintHeader> ViewReportFinanceRequestProcessForPrintHeaders { get; set; }
        public virtual DbSet<ViewReportGeneralExpensesDepartment> ViewReportGeneralExpensesDepartments { get; set; }
        public virtual DbSet<ViewReportGeneralExpensesDeteail> ViewReportGeneralExpensesDeteails { get; set; }
        public virtual DbSet<ViewReportGeneralExpensesHeader> ViewReportGeneralExpensesHeaders { get; set; }
        public virtual DbSet<ViewReportGeneralExpensesPayInfo> ViewReportGeneralExpensesPayInfos { get; set; }
        public virtual DbSet<ViewReportInvoiceRequestProcess> ViewReportInvoiceRequestProcesses { get; set; }
        public virtual DbSet<ViewReportInvoicesReceived> ViewReportInvoicesReceiveds { get; set; }
        public virtual DbSet<ViewReportInvoicesRendered> ViewReportInvoicesRendereds { get; set; }
        public virtual DbSet<ViewReportPaymentProcessMultiple> ViewReportPaymentProcessMultiples { get; set; }
        public virtual DbSet<ViewReportPaymentProcessMultipleBillInfo> ViewReportPaymentProcessMultipleBillInfos { get; set; }
        public virtual DbSet<ViewReportPaymentProcessMultipleDepartmentCode> ViewReportPaymentProcessMultipleDepartmentCodes { get; set; }
        public virtual DbSet<ViewReportPaymentProcessMultipleDraftInfo> ViewReportPaymentProcessMultipleDraftInfos { get; set; }
        public virtual DbSet<ViewReportPaymentProcessMultiplePaymentInfo> ViewReportPaymentProcessMultiplePaymentInfos { get; set; }
        public virtual DbSet<ViewReportPaymentProcessMultipleProcess> ViewReportPaymentProcessMultipleProcesses { get; set; }
        public virtual DbSet<ViewReportReceivedBillsInfo> ViewReportReceivedBillsInfos { get; set; }
        public virtual DbSet<ViewReportRequestProcessContract> ViewReportRequestProcessContracts { get; set; }
        public virtual DbSet<ViewReportRequestProcessFormalBill> ViewReportRequestProcessFormalBills { get; set; }
        public virtual DbSet<ViewReportRequestProcessOfficialBill> ViewReportRequestProcessOfficialBills { get; set; }
        public virtual DbSet<ViewReportRequestProcessPay> ViewReportRequestProcessPays { get; set; }
        public virtual DbSet<ViewReportRequestProcessRequest> ViewReportRequestProcessRequests { get; set; }
        public virtual DbSet<ViewRiskMortgageInfo> ViewRiskMortgageInfos { get; set; }
        public virtual DbSet<ViewRoleAuthorityRelation> ViewRoleAuthorityRelations { get; set; }
        public virtual DbSet<ViewRunningcost> ViewRunningcosts { get; set; }
        public virtual DbSet<ViewSalaryCard> ViewSalaryCards { get; set; }
        public virtual DbSet<ViewSalarySalaryVestMap> ViewSalarySalaryVestMaps { get; set; }
        public virtual DbSet<ViewSecurityFund> ViewSecurityFunds { get; set; }
        public virtual DbSet<ViewSenDocGroupUser> ViewSenDocGroupUsers { get; set; }
        public virtual DbSet<ViewSenDocPartyGroupSelectList> ViewSenDocPartyGroupSelectLists { get; set; }
        public virtual DbSet<ViewSentBackProcess> ViewSentBackProcesses { get; set; }
        public virtual DbSet<ViewSubsidyWarning> ViewSubsidyWarnings { get; set; }
        public virtual DbSet<ViewSurveyDepartInfo> ViewSurveyDepartInfos { get; set; }
        public virtual DbSet<ViewSurveyProjectInfo> ViewSurveyProjectInfos { get; set; }
        public virtual DbSet<ViewTask> ViewTasks { get; set; }
        public virtual DbSet<ViewTaskBak> ViewTaskBaks { get; set; }
        public virtual DbSet<ViewTaskCompleted> ViewTaskCompleteds { get; set; }
        public virtual DbSet<ViewTaskCompletedRecent> ViewTaskCompletedRecents { get; set; }
        public virtual DbSet<ViewTaskToDo> ViewTaskToDos { get; set; }
        public virtual DbSet<ViewTccAbroadAbroadRecord> ViewTccAbroadAbroadRecords { get; set; }
        public virtual DbSet<ViewTccHrpUserPosition> ViewTccHrpUserPositions { get; set; }
        public virtual DbSet<ViewTccHrpVoteAnswer> ViewTccHrpVoteAnswers { get; set; }
        public virtual DbSet<ViewTccRunningCost> ViewTccRunningCosts { get; set; }
        public virtual DbSet<ViewTccTest1> ViewTccTest1s { get; set; }
        public virtual DbSet<ViewTccTravelItineraryInfo> ViewTccTravelItineraryInfos { get; set; }
        public virtual DbSet<ViewTccTravelItineraryOfPersonInfo> ViewTccTravelItineraryOfPersonInfos { get; set; }
        public virtual DbSet<ViewTccUserAbroadInfo> ViewTccUserAbroadInfos { get; set; }
        public virtual DbSet<ViewTccUserType> ViewTccUserTypes { get; set; }
        public virtual DbSet<ViewTccriskMortgageInfo> ViewTccriskMortgageInfos { get; set; }
        public virtual DbSet<ViewTelephoneSubsidyInfo> ViewTelephoneSubsidyInfos { get; set; }
        public virtual DbSet<ViewTelephoneSubsidyofHasHappened> ViewTelephoneSubsidyofHasHappeneds { get; set; }
        public virtual DbSet<ViewTest> ViewTests { get; set; }
        public virtual DbSet<ViewThirdPaymentMonthRecord> ViewThirdPaymentMonthRecords { get; set; }
        public virtual DbSet<ViewTrainSystemChiefEngineer> ViewTrainSystemChiefEngineers { get; set; }
        public virtual DbSet<ViewTrainingExpenseDetail> ViewTrainingExpenseDetails { get; set; }
        public virtual DbSet<ViewTransportSubsidyPersonList> ViewTransportSubsidyPersonLists { get; set; }
        public virtual DbSet<ViewTransportSubsidyofHasHappened> ViewTransportSubsidyofHasHappeneds { get; set; }
        public virtual DbSet<ViewTripStandard> ViewTripStandards { get; set; }
        public virtual DbSet<ViewUltiCompleteTaskList> ViewUltiCompleteTaskLists { get; set; }
        public virtual DbSet<ViewUltiInBoxTaskList> ViewUltiInBoxTaskLists { get; set; }
        public virtual DbSet<ViewUltiInitTaskList> ViewUltiInitTaskLists { get; set; }
        public virtual DbSet<ViewUltiWarningTaskList> ViewUltiWarningTaskLists { get; set; }
        public virtual DbSet<ViewUserDept> ViewUserDepts { get; set; }
        public virtual DbSet<ViewUserLocation> ViewUserLocations { get; set; }
        public virtual DbSet<ViewVehicleDeptCostMonth> ViewVehicleDeptCostMonths { get; set; }
        public virtual DbSet<ViewVehicleProjectCostMonth> ViewVehicleProjectCostMonths { get; set; }
        public virtual DbSet<VmTmp> VmTmps { get; set; }
        public virtual DbSet<We3> We3s { get; set; }
        public virtual DbSet<WorkPlanCheckList> WorkPlanCheckLists { get; set; }
        public virtual DbSet<WorkPlanModeList> WorkPlanModeLists { get; set; }
        public virtual DbSet<WorkPlanModeType> WorkPlanModeTypes { get; set; }
        public virtual DbSet<WorkPlanSituation> WorkPlanSituations { get; set; }
        public virtual DbSet<WorkVisaRecord> WorkVisaRecords { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Server=UltimusDB;Database=TCC_BusinessDB;Uid=sa;Pwd=UltimusDB;");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Chinese_PRC_CI_AS");

            modelBuilder.Entity<A>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("a");

                entity.Property(e => e.Id).HasColumnName("id");
            });

            modelBuilder.Entity<ADemoUpdateTrg>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("a_Demo_Update_Trg");

                entity.Property(e => e.Cpcts).HasColumnName("cpcts");

                entity.Property(e => e.Cts).HasColumnName("cts");

                entity.Property(e => e.Vouchercode)
                    .HasMaxLength(50)
                    .HasColumnName("vouchercode");
            });

            modelBuilder.Entity<ATmpSubjectCode>(entity =>
            {
                entity.ToTable("a_tmp_SubjectCode");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Item4).HasMaxLength(50);

                entity.Property(e => e.Item6).HasMaxLength(50);

                entity.Property(e => e.Item7).HasMaxLength(50);

                entity.Property(e => e.Km)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("km");

                entity.Property(e => e.Lydesc)
                    .HasMaxLength(50)
                    .HasColumnName("LYDESC");

                entity.Property(e => e.No)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NO");

                entity.Property(e => e.ProjType).HasMaxLength(50);
            });

            modelBuilder.Entity<Aaa>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AAA");

                entity.Property(e => e.Id)
                    .HasMaxLength(10)
                    .HasColumnName("ID")
                    .IsFixedLength(true);

                entity.Property(e => e.We)
                    .HasMaxLength(10)
                    .HasColumnName("we")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Aaa4>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("aaa4");

                entity.Property(e => e.DeptName).HasMaxLength(255);

                entity.Property(e => e.PersonName).HasMaxLength(255);
            });

            modelBuilder.Entity<Abc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("abc");

                entity.Property(e => e.A).HasColumnName("a");

                entity.Property(e => e.B).HasColumnName("b");

                entity.Property(e => e.C).HasColumnName("c");
            });

            modelBuilder.Entity<AbroadSecurity>(entity =>
            {
                entity.ToTable("AbroadSecurity");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Tvcountry).HasColumnName("TVCountry");
            });

            modelBuilder.Entity<AbroadTask>(entity =>
            {
                entity.ToTable("AbroadTask");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.NIndex).HasColumnName("nIndex");

                entity.Property(e => e.SId)
                    .HasMaxLength(50)
                    .HasColumnName("sID");

                entity.Property(e => e.TaskId)
                    .HasMaxLength(50)
                    .HasColumnName("TaskID");

                entity.Property(e => e.TaskInfo).HasMaxLength(50);

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<AbroadUser>(entity =>
            {
                entity.ToTable("AbroadUser");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyLogin).HasMaxLength(50);

                entity.Property(e => e.BeginDate).HasColumnType("datetime");

                entity.Property(e => e.BornDate).HasColumnType("datetime");

                entity.Property(e => e.BornPlace).HasMaxLength(50);

                entity.Property(e => e.BorrowDate).HasColumnType("datetime");

                entity.Property(e => e.CompId)
                    .HasMaxLength(50)
                    .HasColumnName("CompID");

                entity.Property(e => e.ContractStatus).HasMaxLength(50);

                entity.Property(e => e.Countersign).HasComment("汇签意见");

                entity.Property(e => e.DeptName).HasMaxLength(50);

                entity.Property(e => e.DeptNo).HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.FirstName).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.HrpId)
                    .HasMaxLength(50)
                    .HasColumnName("HrpID");

                entity.Property(e => e.IsHaveWorkVisa)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsVsfirst).HasColumnName("IsVSFirst");

                entity.Property(e => e.LastName).HasMaxLength(50);

                entity.Property(e => e.Mobile).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.PassportCode).HasMaxLength(50);

                entity.Property(e => e.PassportType).HasMaxLength(50);

                entity.Property(e => e.PassportTypeNo).HasMaxLength(50);

                entity.Property(e => e.PassportValid).HasColumnType("datetime");

                entity.Property(e => e.PinYinName).HasMaxLength(50);

                entity.Property(e => e.Post)
                    .HasMaxLength(50)
                    .HasComment("岗位");

                entity.Property(e => e.PostGrade).HasColumnType("numeric(10, 2)");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");

                entity.Property(e => e.ReturnPaperDate).HasColumnType("datetime");

                entity.Property(e => e.Title)
                    .HasMaxLength(50)
                    .HasComment("职称");

                entity.Property(e => e.Tvcountry).HasColumnName("TVCountry");

                entity.Property(e => e.TvsubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("TVSubmitDate");

                entity.Property(e => e.UserFlag)
                    .HasDefaultValueSql("((0))")
                    .HasComment("员工形成标识 1为取消形成");

                entity.Property(e => e.UserKey).HasMaxLength(50);

                entity.Property(e => e.UserType).HasComment("1 本单位人员; 0未生效人员，2 外单位人员");

                entity.Property(e => e.VisaNum).HasMaxLength(50);

                entity.Property(e => e.VisaSec).HasMaxLength(50);

                entity.Property(e => e.VisaSecInfo).HasMaxLength(50);

                entity.Property(e => e.VisaType).HasMaxLength(50);

                entity.Property(e => e.VisaTypeNo).HasMaxLength(50);

                entity.Property(e => e.VisaValid).HasColumnType("datetime");
            });

            modelBuilder.Entity<AbroadVisaValid>(entity =>
            {
                entity.ToTable("AbroadVisaValid");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.PassportCode).HasMaxLength(50);

                entity.Property(e => e.UserKey).HasMaxLength(50);

                entity.Property(e => e.VisaCode)
                    .HasMaxLength(50)
                    .HasComment("签证次数");

                entity.Property(e => e.VisaNum).HasMaxLength(50);

                entity.Property(e => e.VisaSign).HasColumnType("datetime");

                entity.Property(e => e.VisaStatus).HasMaxLength(50);

                entity.Property(e => e.VisaType).HasMaxLength(50);

                entity.Property(e => e.VisaValid).HasColumnType("datetime");
            });

            modelBuilder.Entity<AbroadWordAtt>(entity =>
            {
                entity.ToTable("Abroad_Word_Att");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AttBelong)
                    .HasColumnName("Att_Belong")
                    .HasComment("1是正文 2是附件");

                entity.Property(e => e.AttFileId).HasColumnName("Att_FileID");

                entity.Property(e => e.AttFileName)
                    .HasMaxLength(50)
                    .HasColumnName("Att_FileName");

                entity.Property(e => e.FormNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<ApprovedRecord>(entity =>
            {
                entity.ToTable("ApprovedRecord");

                entity.HasIndex(e => new { e.ProcessName, e.IncidentNo, e.StepName }, "IX_ApprovedRecord");

                entity.HasIndex(e => e.ProcessName, "IX_AutoGen_20140724_32053");

                entity.HasIndex(e => e.IncidentNo, "IX_AutoGen_20140724_40846");

                entity.Property(e => e.ApproveDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Approve_Date");

                entity.Property(e => e.ApproveRemark).HasColumnName("Approve_Remark");

                entity.Property(e => e.ApproveResult)
                    .HasMaxLength(200)
                    .HasColumnName("Approve_Result");

                entity.Property(e => e.ApproveResultCode).HasColumnName("Approve_ResultCode");

                entity.Property(e => e.ApproveUserLoginName)
                    .HasMaxLength(200)
                    .HasColumnName("Approve_UserLoginName");

                entity.Property(e => e.ApproveUserName)
                    .HasMaxLength(200)
                    .HasColumnName("Approve_UserName");

                entity.Property(e => e.Flag)
                    .HasDefaultValueSql("((0))")
                    .HasComment("默认值为0，标识是流程中插入的审批记录\r\n1为从业务中插入的审批记录");

                entity.Property(e => e.ProcessName).HasMaxLength(200);

                entity.Property(e => e.StepName).HasMaxLength(200);
            });

            modelBuilder.Entity<ApprovedRecord02>(entity =>
            {
                entity.ToTable("ApprovedRecord02");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.ApproveDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Approve_Date");

                entity.Property(e => e.ApproveRemark).HasColumnName("Approve_Remark");

                entity.Property(e => e.ApproveResult)
                    .HasMaxLength(200)
                    .HasColumnName("Approve_Result");

                entity.Property(e => e.ApproveResultCode).HasColumnName("Approve_ResultCode");

                entity.Property(e => e.ApproveUserLoginName)
                    .HasMaxLength(200)
                    .HasColumnName("Approve_UserLoginName");

                entity.Property(e => e.ApproveUserName)
                    .HasMaxLength(200)
                    .HasColumnName("Approve_UserName");

                entity.Property(e => e.Flag)
                    .HasDefaultValueSql("((0))")
                    .HasComment("默认值为0，标识是流程中插入的审批记录\r\n1为从业务中插入的审批记录");

                entity.Property(e => e.ProcessName).HasMaxLength(200);

                entity.Property(e => e.StepName).HasMaxLength(200);
            });

            modelBuilder.Entity<ApprovedRecordDrawingArchiveApply>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ApprovedRecord_DrawingArchiveApply");

                entity.Property(e => e.ApproveDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Approve_Date");

                entity.Property(e => e.ApproveRemark).HasColumnName("Approve_Remark");

                entity.Property(e => e.ApproveResult)
                    .HasMaxLength(200)
                    .HasColumnName("Approve_Result");

                entity.Property(e => e.ApproveResultCode).HasColumnName("Approve_ResultCode");

                entity.Property(e => e.ApproveUserLoginName)
                    .HasMaxLength(200)
                    .HasColumnName("Approve_UserLoginName");

                entity.Property(e => e.ApproveUserName)
                    .HasMaxLength(200)
                    .HasColumnName("Approve_UserName");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.ProcessName).HasMaxLength(200);

                entity.Property(e => e.StepName).HasMaxLength(200);
            });

            modelBuilder.Entity<ApprovedRecordExtend>(entity =>
            {
                entity.ToTable("ApprovedRecordExtend");

                entity.Property(e => e.Id).HasColumnName("ID");
            });

            modelBuilder.Entity<Article>(entity =>
            {
                entity.HasIndex(e => e.UserId, "IX_Articles_UserId");

                entity.Property(e => e.Summary).HasColumnName("summary");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Articles)
                    .HasForeignKey(d => d.UserId);
            });

            modelBuilder.Entity<Astest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AStest");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.UserAccount)
                    .HasMaxLength(255)
                    .HasColumnName("user_account");

                entity.Property(e => e.UserStatus).HasColumnName("user_status");
            });

            modelBuilder.Entity<AteList>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ateList");

                entity.Property(e => e.Childid)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("childid");

                entity.Property(e => e.Codeitemdesc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("codeitemdesc");

                entity.Property(e => e.Codeitemid)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("codeitemid");

                entity.Property(e => e.Codesetid)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("codesetid");

                entity.Property(e => e.Parentid)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("parentid");
            });

            modelBuilder.Entity<AwardMoneyDispenseHistory>(entity =>
            {
                entity.ToTable("AwardMoneyDispenseHistory");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AwardMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DispenseMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MonthInPool).HasColumnName("Month_inPool");

                entity.Property(e => e.UserIdentityId)
                    .IsRequired()
                    .HasMaxLength(18);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Year).HasColumnName("YEAR");
            });

            modelBuilder.Entity<AwardMoneyPartHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AwardMoneyPartHistory");

                entity.HasIndex(e => new { e.IsFanPin, e.ReceiveMonth }, "IX_AutoGen_20140724_11051");

                entity.HasIndex(e => new { e.UserIdentityId, e.Year, e.ReceiveMonth, e.IsLeave }, "IX_AutoGen_20140724_15850");

                entity.HasIndex(e => new { e.Year, e.ReceiveMonth, e.IsLeave }, "IX_AutoGen_20140724_15852");

                entity.HasIndex(e => e.ReceiveMonth, "IX_AutoGen_20140724_21943");

                entity.HasIndex(e => new { e.UserIdentityId, e.Year, e.IsLeave, e.ReceiveMonth }, "IX_AutoGen_20140724_3362");

                entity.HasIndex(e => new { e.Year, e.IsLeave, e.ReceiveMonth }, "IX_AutoGen_20140724_3364");

                entity.HasIndex(e => new { e.Year, e.ReceiveMonth }, "IX_AutoGen_20140724_381");

                entity.HasIndex(e => new { e.Year, e.ReceiveMonth }, "IX_AutoGen_20140724_383");

                entity.HasIndex(e => new { e.Year, e.ReceiveMonth }, "IX_AutoGen_20140724_4393");

                entity.HasIndex(e => new { e.UserIdentityId, e.Year, e.ReceiveMonth }, "IX_AutoGen_20140724_551");

                entity.HasIndex(e => new { e.Year, e.ReceiveMonth, e.AwardComposedCode }, "IX_AutoGen_20140724_553");

                entity.HasIndex(e => new { e.AwardComposedCode, e.Year, e.ReceiveMonth }, "IX_AutoGen_20140724_555");

                entity.HasIndex(e => new { e.MainGrpId, e.UserIdentityId }, "idx_nc_AwardMoneyPartHistory");

                entity.Property(e => e.ArchiveDate).HasColumnType("datetime");

                entity.Property(e => e.AwardComposedCode).HasMaxLength(100);

                entity.Property(e => e.AwardMoney).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.BelongFlag).HasMaxLength(50);

                entity.Property(e => e.Category)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Dept).HasMaxLength(200);

                entity.Property(e => e.DeptCode).HasMaxLength(50);

                entity.Property(e => e.DispenseMoney).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.FormNumber).HasMaxLength(200);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.IsFanPin)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.MainGrpId).HasMaxLength(36);

                entity.Property(e => e.ProcessName).HasMaxLength(500);

                entity.Property(e => e.ProjectCode).HasMaxLength(200);

                entity.Property(e => e.QtMoney).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UserIdentityId).HasMaxLength(100);

                entity.Property(e => e.UserName).HasMaxLength(100);
            });

            modelBuilder.Entity<AwardPool>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AwardPool");

                entity.Property(e => e.ApproveMoney).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.ArchiveDate).HasColumnType("datetime");

                entity.Property(e => e.AwardComposedCode).HasMaxLength(100);

                entity.Property(e => e.AwardMoney).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.BelongFlag)
                    .HasMaxLength(50)
                    .HasColumnName("belongFlag");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Dept).HasMaxLength(200);

                entity.Property(e => e.DeptCode).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(200);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IsFanPin).HasMaxLength(100);

                entity.Property(e => e.ProcessName).HasMaxLength(500);

                entity.Property(e => e.ProjectCode).HasMaxLength(200);

                entity.Property(e => e.ProjectName).HasMaxLength(2000);

                entity.Property(e => e.ProjectType).HasMaxLength(200);

                entity.Property(e => e.Sharer)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UserIdentityId).HasMaxLength(100);

                entity.Property(e => e.UserLoginName).HasMaxLength(100);

                entity.Property(e => e.UserName).HasMaxLength(100);
            });

            modelBuilder.Entity<AwardPool3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AwardPool3");

                entity.Property(e => e.ApproveMoney).HasColumnType("numeric(38, 2)");

                entity.Property(e => e.ArchiveDate).HasColumnType("datetime");

                entity.Property(e => e.AwardComposedCode).HasMaxLength(100);

                entity.Property(e => e.AwardMoney).HasColumnType("numeric(20, 4)");

                entity.Property(e => e.BelongFlag)
                    .HasMaxLength(50)
                    .HasColumnName("belongFlag");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Dept).HasMaxLength(200);

                entity.Property(e => e.DeptCode).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(200);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IsFanPin).HasMaxLength(100);

                entity.Property(e => e.ProcessName).HasMaxLength(500);

                entity.Property(e => e.ProjectCode).HasMaxLength(200);

                entity.Property(e => e.ProjectName).HasMaxLength(2000);

                entity.Property(e => e.ProjectType).HasMaxLength(200);

                entity.Property(e => e.Sharer)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UserIdentityId).HasMaxLength(100);

                entity.Property(e => e.UserLoginName).HasMaxLength(100);

                entity.Property(e => e.UserName).HasMaxLength(100);
            });

            modelBuilder.Entity<AwardPool42>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AwardPool42");

                entity.Property(e => e.ApproveMoney).HasColumnType("numeric(38, 2)");

                entity.Property(e => e.ArchiveDate).HasColumnType("datetime");

                entity.Property(e => e.AwardComposedCode).HasMaxLength(100);

                entity.Property(e => e.AwardMoney).HasColumnType("numeric(20, 4)");

                entity.Property(e => e.BelongFlag)
                    .HasMaxLength(50)
                    .HasColumnName("belongFlag");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Dept).HasMaxLength(200);

                entity.Property(e => e.DeptCode).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(200);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IsFanPin).HasMaxLength(100);

                entity.Property(e => e.ProcessName).HasMaxLength(500);

                entity.Property(e => e.ProjectCode).HasMaxLength(200);

                entity.Property(e => e.ProjectName).HasMaxLength(2000);

                entity.Property(e => e.ProjectType).HasMaxLength(200);

                entity.Property(e => e.Sharer)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UserIdentityId).HasMaxLength(100);

                entity.Property(e => e.UserLoginName).HasMaxLength(100);

                entity.Property(e => e.UserName).HasMaxLength(100);
            });

            modelBuilder.Entity<AwardPoolForTest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AwardPoolForTest");

                entity.Property(e => e.ApproveMoney).HasColumnType("numeric(38, 2)");

                entity.Property(e => e.ArchiveDate).HasColumnType("datetime");

                entity.Property(e => e.AwardComposedCode).HasMaxLength(100);

                entity.Property(e => e.AwardMoney).HasColumnType("numeric(20, 4)");

                entity.Property(e => e.BelongFlag)
                    .HasMaxLength(50)
                    .HasColumnName("belongFlag");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Dept).HasMaxLength(200);

                entity.Property(e => e.DeptCode).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(200);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IsFanPin).HasMaxLength(100);

                entity.Property(e => e.ProcessName).HasMaxLength(500);

                entity.Property(e => e.ProjectCode).HasMaxLength(200);

                entity.Property(e => e.ProjectName).HasMaxLength(2000);

                entity.Property(e => e.ProjectType).HasMaxLength(200);

                entity.Property(e => e.Sharer)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UserIdentityId).HasMaxLength(100);

                entity.Property(e => e.UserLoginName).HasMaxLength(100);

                entity.Property(e => e.UserName).HasMaxLength(100);
            });

            modelBuilder.Entity<AwardPoolNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AwardPoolNew");

                entity.Property(e => e.ApproveMoney).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.ArchiveDate).HasColumnType("datetime");

                entity.Property(e => e.AwardComposedCode).HasMaxLength(100);

                entity.Property(e => e.AwardMoney).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.BelongFlag)
                    .HasMaxLength(50)
                    .HasColumnName("belongFlag");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Dept).HasMaxLength(200);

                entity.Property(e => e.DeptCode).HasMaxLength(100);

                entity.Property(e => e.FormNumber).HasMaxLength(200);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IsFanPin).HasMaxLength(100);

                entity.Property(e => e.ProcessName).HasMaxLength(500);

                entity.Property(e => e.ProjectCode).HasMaxLength(200);

                entity.Property(e => e.ProjectName).HasMaxLength(2000);

                entity.Property(e => e.ProjectType).HasMaxLength(200);

                entity.Property(e => e.Sharer)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UserIdentityId).HasMaxLength(100);

                entity.Property(e => e.UserLoginName).HasMaxLength(100);

                entity.Property(e => e.UserName).HasMaxLength(100);
            });

            modelBuilder.Entity<BSqlCodeType>(entity =>
            {
                entity.HasKey(e => e.SctId)
                    .HasName("PK_B_SQLCODETYPE");

                entity.ToTable("B_SqlCodeType");

                entity.Property(e => e.SctId)
                    .ValueGeneratedNever()
                    .HasColumnName("SCT_ID");

                entity.Property(e => e.SctName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("SCT_Name");

                entity.Property(e => e.SctType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("SCT_Type");
            });

            modelBuilder.Entity<BSqlConfig>(entity =>
            {
                entity.HasKey(e => e.ScId)
                    .HasName("PK_B_SQLCONFIG");

                entity.ToTable("B_SqlConfig");

                entity.Property(e => e.ScId).HasColumnName("SC_ID");

                entity.Property(e => e.ScDataDoType).HasColumnName("SC_DataDoType");

                entity.Property(e => e.ScDataName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("SC_DataName");

                entity.Property(e => e.ScFiledName)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasColumnName("SC_FiledName");

                entity.Property(e => e.ScFunctionName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("SC_FunctionName");

                entity.Property(e => e.ScIsSystem).HasColumnName("SC_IsSystem");

                entity.Property(e => e.ScKeyFiled)
                    .HasMaxLength(50)
                    .HasColumnName("SC_KeyFiled");

                entity.Property(e => e.ScKeyFiledType).HasColumnName("SC_KeyFiledType");

                entity.Property(e => e.ScModuleName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("SC_ModuleName");

                entity.Property(e => e.ScOrderSort)
                    .HasMaxLength(100)
                    .HasColumnName("SC_OrderSort");

                entity.Property(e => e.ScSummary)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("SC_Summary");

                entity.Property(e => e.ScTableName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("SC_TableName");

                entity.Property(e => e.ScWhere)
                    .HasMaxLength(2000)
                    .HasColumnName("SC_Where");
            });

            modelBuilder.Entity<BaseTable>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("baseTable");

                entity.Property(e => e.Cdate)
                    .HasColumnType("datetime")
                    .HasColumnName("cdate");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .HasColumnName("id")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(36)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<Basic>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Basic");

                entity.Property(e => e.SKey)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("S_Key");

                entity.Property(e => e.SUse)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("S_Use");

                entity.Property(e => e.SValue)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("S_Value");
            });

            modelBuilder.Entity<Bpmsapplog20180906>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BPMSAPPLog_20180906");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Exception).HasMaxLength(2000);

                entity.Property(e => e.FolderName)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Level)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Logger)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Message).IsRequired();

                entity.Property(e => e.MethodName)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.PathName)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Thread)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<Budget>(entity =>
            {
                entity.ToTable("budget");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Budgetid)
                    .HasMaxLength(20)
                    .HasColumnName("BUDGETID");

                entity.Property(e => e.Budgetname)
                    .HasMaxLength(50)
                    .HasColumnName("BUDGETNAME");

                entity.Property(e => e.HasTheAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Money)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MONEY");

                entity.Property(e => e.Projectcode)
                    .HasMaxLength(20)
                    .HasColumnName("PROJECTCODE");

                entity.Property(e => e.Projectname)
                    .HasMaxLength(50)
                    .HasColumnName("PROJECTNAME");

                entity.Property(e => e.RemainMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Updateed)
                    .HasMaxLength(200)
                    .HasColumnName("UPDATEED");

                entity.Property(e => e.Year)
                    .HasMaxLength(10)
                    .HasColumnName("YEAR");
            });

            modelBuilder.Entity<Calendar>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Calendar");

                entity.Property(e => e.Code)
                    .HasMaxLength(1)
                    .HasColumnName("code");

                entity.Property(e => e.Riqi)
                    .HasColumnType("datetime")
                    .HasColumnName("riqi");
            });

            modelBuilder.Entity<CheckPaymentCreateVourcherLog>(entity =>
            {
                entity.ToTable("CheckPaymentCreateVourcherLog");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.VoucherCode).HasMaxLength(50);
            });

            modelBuilder.Entity<CheckPaymentVourcherLock>(entity =>
            {
                entity.ToTable("CheckPaymentVourcherLock");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<CommonDic>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CommonDic");

                entity.Property(e => e.Label)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("VALUE");
            });

            modelBuilder.Entity<CommonDic20181127>(entity =>
            {
                entity.ToTable("CommonDic20181127");

                entity.Property(e => e.IsEnabled)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Label)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("VALUE");
            });

            modelBuilder.Entity<ConfigAbroadAtt>(entity =>
            {
                entity.ToTable("Config_Abroad_Att");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AbroadTypeName).HasMaxLength(50);

                entity.Property(e => e.AfileName).HasColumnName("AFileName");

                entity.Property(e => e.AfileNameId)
                    .HasMaxLength(50)
                    .HasColumnName("AFileNameID");

                entity.Property(e => e.AttOption).HasColumnName("Att_Option");

                entity.Property(e => e.AttRequire).HasColumnName("Att_Require");
            });

            modelBuilder.Entity<ConfigAbroadInsStandard>(entity =>
            {
                entity.ToTable("Config_AbroadInsStandard");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CreateTime).HasColumnType("date");

                entity.Property(e => e.InsDayStardard).HasColumnType("money");

                entity.Property(e => e.InsYearStardard).HasColumnType("money");

                entity.Property(e => e.ValidEddate)
                    .HasColumnType("date")
                    .HasColumnName("ValidEDDate");

                entity.Property(e => e.ValidStdate)
                    .HasColumnType("date")
                    .HasColumnName("ValidSTDate");
            });

            modelBuilder.Entity<ConfigAbroadSubCountry>(entity =>
            {
                entity.ToTable("Config_Abroad_SubCountry");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DeptNo).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.UserKey).HasMaxLength(50);

                entity.Property(e => e.UserName).HasMaxLength(50);
            });

            modelBuilder.Entity<ConfigAbroadTypeInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Config_AbroadTypeInfo");

                entity.Property(e => e.AbroadInfo)
                    .HasMaxLength(50)
                    .HasColumnName("abroadInfo");

                entity.Property(e => e.AttrInfo).HasColumnName("attrInfo");

                entity.Property(e => e.Id).HasColumnName("id");
            });

            modelBuilder.Entity<ConfigAbroadValid>(entity =>
            {
                entity.ToTable("Config_Abroad_Valid");

                entity.Property(e => e.Id).HasColumnName("ID");
            });

            modelBuilder.Entity<ConfigApproved>(entity =>
            {
                entity.ToTable("Config_Approved");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApproveResult)
                    .HasMaxLength(200)
                    .HasColumnName("Approve_Result");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(200)
                    .HasComment("流程名");

                entity.Property(e => e.StepId).HasComment("步骤编号");

                entity.Property(e => e.StepName)
                    .HasMaxLength(200)
                    .HasComment("步骤名称");
            });

            modelBuilder.Entity<ConfigApprovedExtend>(entity =>
            {
                entity.ToTable("Config_ApprovedExtend");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApproveRemark)
                    .HasMaxLength(500)
                    .HasColumnName("Approve_Remark")
                    .HasComment("审批意见");

                entity.Property(e => e.ApproveResultCode)
                    .HasColumnName("Approve_ResultCode")
                    .HasComment("是否同意  1或2代表的实际意义根据流程审批记录中自行判断");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(200)
                    .HasComment("用于关联Config_Approved表");
            });

            modelBuilder.Entity<ConfigApprovedRole>(entity =>
            {
                entity.ToTable("Config_ApprovedRole");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DeptId)
                    .HasMaxLength(50)
                    .HasColumnName("DeptID");

                entity.Property(e => e.RoleId)
                    .HasMaxLength(50)
                    .HasColumnName("RoleID");

                entity.Property(e => e.StepId).HasColumnName("StepID");

                entity.Property(e => e.StepName).HasMaxLength(50);
            });

            modelBuilder.Entity<ConfigAwardControler>(entity =>
            {
                entity.ToTable("Config_AwardControler");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AwardComposedCode).HasMaxLength(50);

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DisabledEndTime).HasColumnType("datetime");

                entity.Property(e => e.DisabledStartTime).HasColumnType("datetime");

                entity.Property(e => e.Enabled)
                    .HasDefaultValueSql("((0))")
                    .HasComment("是否启用，0不启用，1启用");

                entity.Property(e => e.FaXinDi).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);
            });

            modelBuilder.Entity<ConfigAwardControlerApplyTime>(entity =>
            {
                entity.ToTable("Config_AwardControler_ApplyTime");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AwardComposedCode).HasMaxLength(50);

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.DisabledEndTime).HasColumnType("datetime");

                entity.Property(e => e.DisabledStartTime).HasColumnType("datetime");

                entity.Property(e => e.ProcessName).HasMaxLength(50);
            });

            modelBuilder.Entity<ConfigAwardDispenseType>(entity =>
            {
                entity.ToTable("Config_AwardDispenseType");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.AwardComposeCode)
                    .HasMaxLength(10)
                    .HasComment("奖项编号");

                entity.Property(e => e.DispenseTime).HasComment("奖金拆分次数");

                entity.Property(e => e.DispenseType).HasComment("1:季度奖类型【在下个季度随工资分3次发放】,2:非季度奖【如果进入奖金池时间为非4季度，则发放规则同季度奖，如果进入奖金池时间在第4季度，则作为13薪在12月26日发放】");
            });

            modelBuilder.Entity<ConfigBalanceValidProject>(entity =>
            {
                entity.ToTable("Config_Balance_ValidProject");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .HasComment("项目编号      项目结余奖 （ 只有在此表中的项目才可以申请项目结余奖 ）   ");
            });

            modelBuilder.Entity<ConfigBasicOption>(entity =>
            {
                entity.ToTable("Config_BasicOptions");

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreateUser).HasMaxLength(50);

                entity.Property(e => e.Enabled)
                    .HasDefaultValueSql("((1))")
                    .HasComment("是否启用，1 启用，0 不启用");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.PowerDept).HasMaxLength(50);

                entity.Property(e => e.PowerRole).HasMaxLength(50);

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.Property(e => e.UpdateUser).HasMaxLength(50);

                entity.Property(e => e.UseCategoryId).HasComment("用途编号，对应用途表");
            });

            modelBuilder.Entity<ConfigBranchOffice>(entity =>
            {
                entity.ToTable("Config_BranchOffice");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DeptCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SubjectType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ConfigBudgetApplicationLink>(entity =>
            {
                entity.ToTable("Config_Budget_ApplicationLink");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApYear)
                    .HasMaxLength(10)
                    .HasColumnName("Ap_Year");

                entity.Property(e => e.ApplicationCode).HasComment("用途编码 ");

                entity.Property(e => e.ApplicationName)
                    .HasMaxLength(50)
                    .HasComment("用途名称");

                entity.Property(e => e.CbyGroup)
                    .HasColumnName("CByGroup")
                    .HasDefaultValueSql("((0))")
                    .HasComment("分组控制预算");

                entity.Property(e => e.Flag).HasComment("1项目；2部门");

                entity.Property(e => e.IsControl).HasComment("是否控制预算");

                entity.Property(e => e.Item2)
                    .HasMaxLength(50)
                    .HasComment("对应预算");

                entity.Property(e => e.Item2Yf)
                    .HasMaxLength(50)
                    .HasColumnName("Item2YF")
                    .HasComment("研发项目使用");

                entity.Property(e => e.Item3)
                    .HasMaxLength(50)
                    .HasComment("对应预算");

                entity.Property(e => e.RunningCost).HasComment("1运行费2专项费");

                entity.Property(e => e.SubjectId)
                    .HasColumnName("SubjectID")
                    .HasComment("对应普华接口预算ID");

                entity.Property(e => e.SubjectType)
                    .HasMaxLength(50)
                    .HasComment("费用类型");
            });

            modelBuilder.Entity<ConfigBudgetApplicationLink20160325bak>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Config_Budget_ApplicationLink_20160325bak");

                entity.Property(e => e.ApYear)
                    .HasMaxLength(10)
                    .HasColumnName("Ap_Year");

                entity.Property(e => e.ApplicationName).HasMaxLength(50);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Item2).HasMaxLength(50);

                entity.Property(e => e.Item2Yf)
                    .HasMaxLength(50)
                    .HasColumnName("Item2YF");

                entity.Property(e => e.Item3).HasMaxLength(50);

                entity.Property(e => e.SubjectType).HasMaxLength(50);
            });

            modelBuilder.Entity<ConfigBudgetApplicationLink20160415bak>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Config_Budget_ApplicationLink_20160415bak");

                entity.Property(e => e.ApYear)
                    .HasMaxLength(10)
                    .HasColumnName("Ap_Year");

                entity.Property(e => e.ApplicationName).HasMaxLength(50);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Item2).HasMaxLength(50);

                entity.Property(e => e.Item2Yf)
                    .HasMaxLength(50)
                    .HasColumnName("Item2YF");

                entity.Property(e => e.Item3).HasMaxLength(50);

                entity.Property(e => e.SubjectType).HasMaxLength(50);
            });

            modelBuilder.Entity<ConfigBudgetApplicationLinkLog>(entity =>
            {
                entity.ToTable("Config_Budget_ApplicationLink_Log");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplicationCode).HasComment("对应预算用途的编码");

                entity.Property(e => e.ApplicationName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("预算用途名称");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasComment("操作时间");

                entity.Property(e => e.Flag).HasComment("1标识为从页面新增的数据，2标识为从原数据库中删除的数据(根据Item2删除)，3标识为从数据库中删除的数据(根据ApplicationCode和ApplicationName删除)");

                entity.Property(e => e.Gid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("GID")
                    .HasComment("批量操作时使用的guid编码");

                entity.Property(e => e.IsControl).HasComment("是否控制预算，1是控制预算，0是不控制预算");

                entity.Property(e => e.IsMerge).HasComment("是否合并控制，1是单项管控，2是合并管控");

                entity.Property(e => e.IsRunningCost).HasComment("是否是运行费，从页面保存的数据(Flag=1)0是不控制预算，1是运行费，2是专项费；从数据表中保存的数据(Flag=2)1是运行费，2是专项费");

                entity.Property(e => e.Item2)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("预算大类名称");

                entity.Property(e => e.Item3)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("预算小类名称");

                entity.Property(e => e.MergeGroup).HasComment("合并管控时，合并的管控项CByGroup");

                entity.Property(e => e.MergeGroupName)
                    .HasMaxLength(50)
                    .HasComment("合并管控时，合并的管控项名称");
            });

            modelBuilder.Entity<ConfigCodeitem>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Config_Codeitem");

                entity.Property(e => e.Codeitemdesc).HasColumnName("codeitemdesc");

                entity.Property(e => e.Codeitemid)
                    .HasMaxLength(50)
                    .HasColumnName("codeitemid");

                entity.Property(e => e.Codesetid)
                    .HasMaxLength(50)
                    .HasColumnName("codesetid");

                entity.Property(e => e.Codesetinfo)
                    .HasMaxLength(50)
                    .HasColumnName("codesetinfo");

                entity.Property(e => e.OtherId)
                    .HasMaxLength(50)
                    .HasColumnName("otherID");
            });

            modelBuilder.Entity<ConfigCorrespondenceouPuhua>(entity =>
            {
                entity.ToTable("Config_CorrespondenceouPuhua");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.Code).HasComment("普华科目ID");

                entity.Property(e => e.IsYf)
                    .HasColumnName("IsYF")
                    .HasComment("是否是研发项目 1是 0不是");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .HasComment("普华对应科目");

                entity.Property(e => e.ProjectType)
                    .HasMaxLength(50)
                    .HasComment("项目类型  ");

                entity.Property(e => e.SubjectCode)
                    .HasMaxLength(50)
                    .HasComment("久其科目编号");

                entity.Property(e => e.SubjectName)
                    .HasMaxLength(50)
                    .HasComment("久其科目名称");
            });

            modelBuilder.Entity<ConfigDepartmentAccount>(entity =>
            {
                entity.ToTable("Config_Department_Account");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("部门编号");

                entity.Property(e => e.SubjectType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("科目类型");

                entity.Property(e => e.SubjectTypeName).HasMaxLength(50);
            });

            modelBuilder.Entity<ConfigDeptApplyBySetting>(entity =>
            {
                entity.ToTable("config_DeptApplyBySetting");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DeptCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ConfigDeptPressureCoefficient>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Config_DeptPressureCoefficient");

                entity.Property(e => e.Coefficient).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(100)
                    .HasComment("部门编号");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(100)
                    .HasComment("部门名称");

                entity.Property(e => e.Id).HasColumnName("id");
            });

            modelBuilder.Entity<ConfigGeneralExpensesRuningCost>(entity =>
            {
                entity.ToTable("Config_GeneralExpenses_RuningCost");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键ID");

                entity.Property(e => e.DeptType)
                    .HasMaxLength(50)
                    .HasComment("部门类型:职能部门：0102 经营部门：0103 生产部门：0101");

                entity.Property(e => e.ExpenseName)
                    .HasMaxLength(50)
                    .HasComment("费用类型");

                entity.Property(e => e.GroupNumber).HasComment("合并控制预算");

                entity.Property(e => e.IsEnabled).HasComment("是否可用 0 可用  1不可用");

                entity.Property(e => e.PayType).HasComment("1 项目  2部门");

                entity.Property(e => e.SubName)
                    .HasMaxLength(50)
                    .HasComment("名称--对用预算表TCC_Dept_AnnualBudget中的Item2的值");

                entity.Property(e => e.SubjectName)
                    .HasMaxLength(50)
                    .HasComment("名称--对用预算表TCC_Dept_AnnualBudget中的Item3的值");

                entity.Property(e => e.SubjectType)
                    .HasMaxLength(50)
                    .HasComment("科目类型 ");

                entity.Property(e => e.Type).HasComment("1  运行费  2 专项费用");
            });

            modelBuilder.Entity<ConfigLeaveInfoStep>(entity =>
            {
                entity.ToTable("config_LeaveInfoSteps");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Chairman).HasDefaultValueSql("((0))");

                entity.Property(e => e.CompUnion).HasDefaultValueSql("((0))");

                entity.Property(e => e.DeptLeader).HasDefaultValueSql("((0))");

                entity.Property(e => e.EndApplyDays).HasColumnType("numeric(18, 1)");

                entity.Property(e => e.GeneralLeader).HasDefaultValueSql("((0))");

                entity.Property(e => e.GroupLeader).HasDefaultValueSql("((0))");

                entity.Property(e => e.ResourceLeader).HasDefaultValueSql("((0))");

                entity.Property(e => e.ResourceSupervise).HasDefaultValueSql("((0))");

                entity.Property(e => e.StartApplyDays).HasColumnType("decimal(18, 1)");

                entity.Property(e => e.SupervLeader).HasDefaultValueSql("((0))");

                entity.Property(e => e.TypeId)
                    .HasMaxLength(50)
                    .HasColumnName("TypeID");

                entity.Property(e => e.TypeName).HasMaxLength(50);

                entity.Property(e => e.UserTypeName).HasMaxLength(50);
            });

            modelBuilder.Entity<ConfigLeaveTypeInfo>(entity =>
            {
                entity.ToTable("config_LeaveTypeInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ControlType)
                    .HasMaxLength(50)
                    .HasComment("日期/时间/小时   D/T/H");

                entity.Property(e => e.DayDesc).HasMaxLength(50);

                entity.Property(e => e.DayType)
                    .HasMaxLength(50)
                    .HasComment("工作日/自然日  W/N");

                entity.Property(e => e.NameDesc).HasMaxLength(50);

                entity.Property(e => e.TypeId)
                    .HasMaxLength(50)
                    .HasColumnName("TypeID");

                entity.Property(e => e.TypeName).HasMaxLength(50);
            });

            modelBuilder.Entity<ConfigMessageSummaryStep>(entity =>
            {
                entity.HasKey(e => e.MssId)
                    .HasName("PK_Config_MessageSummaryUser");

                entity.ToTable("Config_MessageSummaryStep");

                entity.Property(e => e.MssId).HasColumnName("MSS_Id");

                entity.Property(e => e.MssProcessName)
                    .HasMaxLength(100)
                    .HasColumnName("MSS_ProcessName");

                entity.Property(e => e.MssRealTimeRemind).HasColumnName("MSS_RealTimeRemind");

                entity.Property(e => e.MssStepName)
                    .HasMaxLength(100)
                    .HasColumnName("MSS_StepName");
            });

            modelBuilder.Entity<ConfigMessageTemplate>(entity =>
            {
                entity.HasKey(e => e.MtId);

                entity.ToTable("Config_MessageTemplate");

                entity.Property(e => e.MtId).HasColumnName("MT_Id");

                entity.Property(e => e.MtCode)
                    .HasMaxLength(100)
                    .HasColumnName("MT_Code");

                entity.Property(e => e.MtContent)
                    .HasMaxLength(1000)
                    .HasColumnName("MT_Content");

                entity.Property(e => e.MtTitle)
                    .HasMaxLength(1000)
                    .HasColumnName("MT_Title");

                entity.Property(e => e.MtType)
                    .HasColumnName("MT_Type")
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<ConfigMonthlyPlanApplicationInfo>(entity =>
            {
                entity.ToTable("Config_MonthlyPlan_ApplicationInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplicationCode).HasComment("用途编号");

                entity.Property(e => e.ApplicationName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("用途名称");

                entity.Property(e => e.ApplicationType).HasComment("当前设定：1为付款申请流程，2为一般费用报销流程，以后有可能追加");

                entity.Property(e => e.ControlType).HasComment("1是采购类付款，2是施工类付款，3是人工费付款，4是预付款，5是质保金，以后有可能追加");

                entity.Property(e => e.ProjectType).HasComment("1代表项目用途，2代表非项目用途");
            });

            modelBuilder.Entity<ConfigPageNoPermissionPathsConfiguration>(entity =>
            {
                entity.ToTable("Config_PageNoPermissionPathsConfiguration");

                entity.Property(e => e.Enabled)
                    .HasDefaultValueSql("((1))")
                    .HasComment("是否启用");

                entity.Property(e => e.NoAuthPath)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<ConfigPagePermissionsConfiguration>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Config_PagePermissionsConfiguration");

                entity.Property(e => e.Category)
                    .HasDefaultValueSql("((-1))")
                    .HasComment("分类");

                entity.Property(e => e.Enabled)
                    .HasDefaultValueSql("((1))")
                    .HasComment("是否启用，1为启用");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.IncidentStatus)
                    .HasDefaultValueSql("((-1))")
                    .HasComment("流程状态");

                entity.Property(e => e.PageType)
                    .HasDefaultValueSql("((1))")
                    .HasComment("页面地址类型：1标识相对，2标识绝对。默认相对");

                entity.Property(e => e.PageUrl)
                    .HasMaxLength(200)
                    .HasDefaultValueSql("(N'')")
                    .HasComment("页面地址（）");

                entity.Property(e => e.StepName)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(N'')")
                    .HasComment("任务编号");

                entity.Property(e => e.TaskStatus)
                    .HasDefaultValueSql("((0))")
                    .HasComment("任务状态，1待办，3已办，0全部");
            });

            modelBuilder.Entity<ConfigPaymentCategorySubjectCode>(entity =>
            {
                entity.ToTable("Config_Payment_CategorySubjectCode");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BillStatus).HasComment("是否有票据。1有票据，2无票据，5票税科目。3，4结转科目");

                entity.Property(e => e.Category).HasComment("分类 ");

                entity.Property(e => e.IsEnabled)
                    .HasDefaultValueSql("((1))")
                    .HasComment("是否启用1付款，2一般费用报销");

                entity.Property(e => e.PayCategory).HasComment("付款类型（项目用：1,2,3,4,5,6）相关采购、施工等");

                entity.Property(e => e.PayType).HasComment("付款类型：1项目付款;非项目付款");

                entity.Property(e => e.PayType2).HasComment("付款类型1:.ecpcepc;2不是。");

                entity.Property(e => e.SubjectCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("科目号");

                entity.Property(e => e.SubjectType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("科目类型");
            });

            modelBuilder.Entity<ConfigPaymentCategorySubjectCodeForSpecial>(entity =>
            {
                entity.ToTable("Config_Payment_CategorySubjectCode_ForSpecial");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplicationCode).HasComment("费用用途编号");

                entity.Property(e => e.ApplicationName)
                    .HasMaxLength(50)
                    .HasComment("费用用途名称");

                entity.Property(e => e.InvoiceCategoryText)
                    .HasMaxLength(50)
                    .HasComment("票据名称");

                entity.Property(e => e.InvoiceCategoryValue).HasComment("票据名称编码");

                entity.Property(e => e.IsEnabled).HasComment("1：付款  2：一般费用报销");

                entity.Property(e => e.PayType).HasComment("1：项目  2：部门");

                entity.Property(e => e.TaxRateText)
                    .HasMaxLength(50)
                    .HasComment("税额名称");

                entity.Property(e => e.TaxSubjectCode)
                    .HasMaxLength(50)
                    .HasComment("税额入账科目");
            });

            modelBuilder.Entity<ConfigPaymentCategorySubjectCodeForTaxRate>(entity =>
            {
                entity.ToTable("Config_Payment_CategorySubjectCode_ForTaxRate");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BillStatus)
                    .HasDefaultValueSql("((1))")
                    .HasComment("是否有票据。1有票据，2无票据，5票税科目。3，4结转科目");

                entity.Property(e => e.Category).HasComment("分类 ");

                entity.Property(e => e.IsEnabled).HasComment("是否启用1付款，2一般费用报销");

                entity.Property(e => e.PayCategory).HasComment("付款类型（项目用：1,2,3,4,5,6）相关采购、施工等");

                entity.Property(e => e.PayType).HasComment("付款类型：1项目付款;非项目付款");

                entity.Property(e => e.PayType2).HasComment("付款类型1:.ecpcepc;2不是。");

                entity.Property(e => e.SubjectCode)
                    .HasMaxLength(50)
                    .HasComment("科目号");

                entity.Property(e => e.SubjectType)
                    .HasMaxLength(50)
                    .HasComment("科目类型");

                entity.Property(e => e.TaxRateText)
                    .HasMaxLength(50)
                    .HasComment("税率名称");
            });

            modelBuilder.Entity<ConfigPaymentProcessValidContract>(entity =>
            {
                entity.ToTable("Config_PaymentProcess_ValidContract");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.ContractCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("合同号");

                entity.Property(e => e.IsEnable)
                    .HasDefaultValueSql("((1))")
                    .HasComment("是否有效。0无效1有效");

                entity.Property(e => e.PayCategory)
                    .HasDefaultValueSql("((1))")
                    .HasComment("预留（默认为1才有效)");
            });

            modelBuilder.Entity<ConfigPaymentProcessValidContractForProject>(entity =>
            {
                entity.ToTable("Config_PaymentProcess_ValidContractForProject");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ContractCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("合同号");

                entity.Property(e => e.IsEnable)
                    .HasDefaultValueSql("((1))")
                    .HasComment("是否有效");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("项目号");
            });

            modelBuilder.Entity<ConfigPaymentProcessValidProject>(entity =>
            {
                entity.ToTable("Config_PaymentProcess_ValidProject");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.IsEnable)
                    .HasDefaultValueSql("((1))")
                    .HasComment("是否有效1有效;0无效");

                entity.Property(e => e.PayCategory).HasComment("付款类型,1:采购;3施工;5人工时;6其它");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .HasComment("项目号");
            });

            modelBuilder.Entity<ConfigProcessAutoAbort>(entity =>
            {
                entity.ToTable("Config_ProcessAutoAbort");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Enabled)
                    .HasDefaultValueSql("((1))")
                    .HasComment("是否可用，1：可用，0不可用");

                entity.Property(e => e.MessageSendTime)
                    .HasColumnType("datetime")
                    .HasComment("撤销消息发送时间");

                entity.Property(e => e.OverDays)
                    .HasDefaultValueSql("((0))")
                    .HasComment("与超时时间比，超过的天数");

                entity.Property(e => e.OverTime)
                    .HasColumnType("datetime")
                    .HasComment("超时时间");

                entity.Property(e => e.ProcessName).HasMaxLength(200);

                entity.Property(e => e.Source)
                    .HasDefaultValueSql("((1))")
                    .HasComment("1：普华，2：edoc2,3：待补充");

                entity.Property(e => e.Steplabel)
                    .HasMaxLength(50)
                    .HasColumnName("STEPLABEL");

                entity.Property(e => e.Steplabelnext)
                    .HasMaxLength(50)
                    .HasColumnName("STEPLABELNext");
            });

            modelBuilder.Entity<ConfigProcessForm>(entity =>
            {
                entity.ToTable("Config_ProcessForm");

                entity.Property(e => e.FormUrl).HasMaxLength(1000);

                entity.Property(e => e.ProcessName).HasMaxLength(100);

                entity.Property(e => e.StepName).HasMaxLength(100);
            });

            modelBuilder.Entity<ConfigProcessname>(entity =>
            {
                entity.ToTable("Config_Processname");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IsDelete).HasComment("是否删除");

                entity.Property(e => e.ShowProcessName)
                    .HasMaxLength(50)
                    .HasComment("表单展示流程名");

                entity.Property(e => e.UltimusProcessName)
                    .HasMaxLength(50)
                    .HasComment("Ultimus中流程名称");
            });

            modelBuilder.Entity<ConfigPurchaseItemBudget>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Config_PurchaseItem_Budget");

                entity.Property(e => e.CclassCode)
                    .HasMaxLength(50)
                    .HasColumnName("CClassCode");

                entity.Property(e => e.CclassName)
                    .HasMaxLength(50)
                    .HasColumnName("CClassName");

                entity.Property(e => e.DeptCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DeptName).HasMaxLength(50);

                entity.Property(e => e.GclassCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("GClassCode");

                entity.Property(e => e.GclassName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("GClassName");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Item2).HasMaxLength(50);

                entity.Property(e => e.Item3).HasMaxLength(50);

                entity.Property(e => e.ItemCode).HasMaxLength(50);

                entity.Property(e => e.ItemSubCode).HasMaxLength(50);

                entity.Property(e => e.PclassCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("PClassCode");

                entity.Property(e => e.PclassName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("PClassName");
            });

            modelBuilder.Entity<ConfigPurchaseType>(entity =>
            {
                entity.ToTable("config_PurchaseType");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Category).HasMaxLength(50);

                entity.Property(e => e.CategoryId)
                    .HasMaxLength(50)
                    .HasColumnName("CategoryID");

                entity.Property(e => e.ProductType).HasMaxLength(50);

                entity.Property(e => e.ProductTypeCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ConfigReceivedSubjectCode>(entity =>
            {
                entity.ToTable("Config_Received_SubjectCode");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Dcredit)
                    .HasColumnName("dcredit")
                    .HasComment("0:借  1：贷");

                entity.Property(e => e.Digest).HasMaxLength(200);

                entity.Property(e => e.ForUse)
                    .HasDefaultValueSql("((0))")
                    .HasComment("0 用于收款   1用于开票   2用于开票销项税额");

                entity.Property(e => e.Plusminus).HasComment("1:正值  2：负值");

                entity.Property(e => e.SubjectCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ConfigRiskEstimate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Config_Risk_Estimate");

                entity.Property(e => e.Efficiency)
                    .HasMaxLength(200)
                    .HasComment("影响程度");

                entity.Property(e => e.Emergency).HasMaxLength(200);

                entity.Property(e => e.EventDesc).HasComment("事件描述");

                entity.Property(e => e.FirstCode).HasMaxLength(50);

                entity.Property(e => e.FirstNo).HasMaxLength(50);

                entity.Property(e => e.FirstType)
                    .HasMaxLength(200)
                    .HasComment("一级分类");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.InfoDesc).HasComment("风险事件描述");

                entity.Property(e => e.ParentCode).HasMaxLength(50);

                entity.Property(e => e.Possibility)
                    .HasMaxLength(200)
                    .HasComment("发生可能性");

                entity.Property(e => e.SecCode).HasMaxLength(50);

                entity.Property(e => e.SecNo).HasMaxLength(50);

                entity.Property(e => e.SecType)
                    .HasMaxLength(200)
                    .HasComment("二级级分类");

                entity.Property(e => e.SurveyCode).HasMaxLength(50);

                entity.Property(e => e.SurveyType).HasComment("1 部门  2 项目 3 分公司 4 子公司");

                entity.Property(e => e.ThirdCode)
                    .HasMaxLength(50)
                    .HasComment("编号");

                entity.Property(e => e.ThirdNo).HasMaxLength(50);

                entity.Property(e => e.ThirdType)
                    .HasMaxLength(200)
                    .HasComment("三级分类");
            });

            modelBuilder.Entity<ConfigSpecialDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Config_SpecialDate");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.GongZiFaFangDi).HasMaxLength(50);

                entity.Property(e => e.TargetDate).HasColumnType("datetime");

                entity.Property(e => e.UseForCode).HasMaxLength(50);

                entity.Property(e => e.UseForName).HasMaxLength(50);
            });

            modelBuilder.Entity<ConfigSpecialDate20190403>(entity =>
            {
                entity.ToTable("Config_SpecialDate20190403");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("创建时间");

                entity.Property(e => e.GongZiFaFangDi).HasMaxLength(50);

                entity.Property(e => e.Status)
                    .HasDefaultValueSql("((1))")
                    .HasComment("是否启用");

                entity.Property(e => e.TargetDate).HasColumnType("datetime");

                entity.Property(e => e.UseForCode)
                    .HasMaxLength(50)
                    .HasComment("用途编号");

                entity.Property(e => e.UseForName)
                    .HasMaxLength(50)
                    .HasComment("用途名称");
            });

            modelBuilder.Entity<ConfigSpecialProcess>(entity =>
            {
                entity.ToTable("Config_SpecialProcess");

                entity.Property(e => e.ProcessName).HasMaxLength(200);

                entity.Property(e => e.StepName).HasMaxLength(200);
            });

            modelBuilder.Entity<ConfigSpecialStandard>(entity =>
            {
                entity.ToTable("Config_SpecialStandard");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CurcencyAb)
                    .HasMaxLength(50)
                    .HasColumnName("CurcencyAB");

                entity.Property(e => e.CurcencyName).HasMaxLength(50);

                entity.Property(e => e.DocGt90)
                    .HasColumnType("money")
                    .HasColumnName("DocGT90")
                    .HasComment("境内大于90");

                entity.Property(e => e.MaintenDate).HasMaxLength(50);

                entity.Property(e => e.MaxDate).HasMaxLength(50);

                entity.Property(e => e.OsGt150)
                    .HasColumnType("money")
                    .HasColumnName("OsGT150")
                    .HasComment("境外大于120");

                entity.Property(e => e.OsLte120)
                    .HasColumnType("money")
                    .HasColumnName("OsLTE120")
                    .HasComment("境外小于等于120");

                entity.Property(e => e.SocialRatio).HasColumnType("money");

                entity.Property(e => e.SpecialType)
                    .HasMaxLength(50)
                    .HasComment("CM 国家--缴费基数; PM 岗位-系数 OV 超期奖励");

                entity.Property(e => e.TaxRatio).HasColumnType("money");
            });

            modelBuilder.Entity<ConfigSubjectRelation>(entity =>
            {
                entity.ToTable("Config_SubjectRelation");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CostTypeCode).HasMaxLength(100);

                entity.Property(e => e.CostTypeName).HasMaxLength(100);

                entity.Property(e => e.DeptCode).HasMaxLength(100);

                entity.Property(e => e.DeptName).HasMaxLength(100);

                entity.Property(e => e.Remark).HasMaxLength(1000);

                entity.Property(e => e.SubjectCode).HasMaxLength(100);

                entity.Property(e => e.SubjectName).HasMaxLength(100);

                entity.Property(e => e.TypeName).HasMaxLength(100);
            });

            modelBuilder.Entity<ConfigSurveyRisk>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Config_Survey_Risk");

                entity.Property(e => e.SurveyCode).HasMaxLength(50);

                entity.Property(e => e.SurveyOrder).ValueGeneratedOnAdd();

                entity.Property(e => e.SurveyParentCode).HasMaxLength(50);

                entity.Property(e => e.SurveyRoot).HasDefaultValueSql("((0))");

                entity.Property(e => e.SurveyTitle).HasMaxLength(50);
            });

            modelBuilder.Entity<ConfigSurveySuggest>(entity =>
            {
                entity.ToTable("Config_Survey_Suggest");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Dimension).HasMaxLength(50);

                entity.Property(e => e.Related).HasMaxLength(50);

                entity.Property(e => e.SurveyTitle)
                    .HasMaxLength(500)
                    .HasColumnName("Survey_Title");

                entity.Property(e => e.SurveyTypeId).HasColumnName("SurveyTypeID");
            });

            modelBuilder.Entity<ConfigTaskProcessFormExclude>(entity =>
            {
                entity.ToTable("Config_TaskProcessFormExclude");

                entity.HasIndex(e => new { e.ProcessName, e.StepName }, "IX_Config_TaskProcessFormExclude")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(100)
                    .HasComment("流程名");

                entity.Property(e => e.StepName)
                    .HasMaxLength(100)
                    .HasComment("步骤名");

                entity.Property(e => e.Valid).HasComment("是否有效，１排除在待办外，２不排除");
            });

            modelBuilder.Entity<ConfigTaskProcessFormExcludeAword>(entity =>
            {
                entity.ToTable("Config_TaskProcessFormExclude_Aword");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Assignedtouser)
                    .HasMaxLength(50)
                    .HasColumnName("ASSIGNEDTOUSER")
                    .HasComment("查看人");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasComment("创建时间");

                entity.Property(e => e.CreatorLoginName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("创建人");

                entity.Property(e => e.DeptNo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DeptNO")
                    .HasComment("部门");

                entity.Property(e => e.Flag).HasComment("标志位：１不显示在待办，２显示在待办");

                entity.Property(e => e.Incident).HasComment("实例");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程");

                entity.Property(e => e.StepLabel)
                    .HasMaxLength(50)
                    .HasComment("步骤名");

                entity.Property(e => e.TaskId)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("TaskID")
                    .IsFixedLength(true)
                    .HasComment("说明");

                entity.Property(e => e.UpateDate)
                    .HasColumnType("datetime")
                    .HasComment("更新时间");

                entity.Property(e => e.UpdateLoginName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("更新人");
            });

            modelBuilder.Entity<ConfigTaxesPayableForDictionary>(entity =>
            {
                entity.ToTable("Config_TaxesPayableForDictionary");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Column1)
                    .HasMaxLength(50)
                    .HasComment("UserFor 为'InvoicesReceived' 时，代表合同类型");

                entity.Property(e => e.Column2)
                    .HasMaxLength(50)
                    .HasComment("");

                entity.Property(e => e.Column3).HasMaxLength(50);

                entity.Property(e => e.OsubjectCode)
                    .HasMaxLength(50)
                    .HasComment("老科目号");

                entity.Property(e => e.RateValue)
                    .HasMaxLength(50)
                    .HasComment("税率编号");

                entity.Property(e => e.SubjectCode)
                    .HasMaxLength(50)
                    .HasComment("新科目号");

                entity.Property(e => e.UserFor)
                    .HasMaxLength(50)
                    .HasComment("UserFor 为空，则为普遍设置，若为’InvoicesReceived‘ 则为收取发票申请采购合同（排除其他付款类型）、施工分包合同（排除其他付款类型）、保险合同的税额配置");
            });

            modelBuilder.Entity<ConfigTccPayInfo>(entity =>
            {
                entity.ToTable("Config_TccPayInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Abacode)
                    .HasMaxLength(50)
                    .HasColumnName("ABACode");

                entity.Property(e => e.IbanCode).HasMaxLength(50);

                entity.Property(e => e.PayTable).HasMaxLength(50);

                entity.Property(e => e.SwichCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ConfigTransferUrl>(entity =>
            {
                entity.ToTable("Config_Transfer_Url");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BusinessNameId).HasColumnName("BusinessNameID");

                entity.Property(e => e.ProcessNameId).HasColumnName("ProcessNameID");

                entity.Property(e => e.TccDomain).HasColumnName("Tcc_Domain");

                entity.Property(e => e.TccUrl).HasColumnName("Tcc_URL");
            });

            modelBuilder.Entity<ConfigUseCategory>(entity =>
            {
                entity.ToTable("Config_UseCategory");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreateUser).HasMaxLength(50);

                entity.Property(e => e.Enabled)
                    .HasDefaultValueSql("((1))")
                    .HasComment("是否启用，1，启用，0，不启用");

                entity.Property(e => e.Name).HasMaxLength(1000);

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.Property(e => e.UpdateUser).HasMaxLength(50);
            });

            modelBuilder.Entity<ConfigWarningMessageTemplate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Config_Warning_MessageTemplate");

                entity.Property(e => e.IsEnabled).HasDefaultValueSql("((1))");

                entity.Property(e => e.IsMobile).HasComment("是否发短信，1发；2不发");

                entity.Property(e => e.MsgContent).HasMaxLength(1000);

                entity.Property(e => e.MsgTitle).HasMaxLength(500);

                entity.Property(e => e.MsgType).HasComment("信息类型");

                entity.Property(e => e.SendTypeName)
                    .HasMaxLength(50)
                    .HasComment("类型内容");
            });

            modelBuilder.Entity<ConfigWarningTime>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Config_Warning_Time");

                entity.Property(e => e.IsEnabled).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<ConfigWarningUser>(entity =>
            {
                entity.HasKey(e => e.SendType);

                entity.ToTable("Config_Warning_Users");

                entity.Property(e => e.SendType).ValueGeneratedNever();

                entity.Property(e => e.IsEnabled).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<CopiedIncident>(entity =>
            {
                entity.HasKey(e => new { e.Processname, e.Incident })
                    .HasName("PK_CopiedIncidents_1");

                entity.Property(e => e.Processname)
                    .HasMaxLength(200)
                    .HasColumnName("PROCESSNAME");

                entity.Property(e => e.Incident).HasColumnName("INCIDENT");

                entity.Property(e => e.Endtime)
                    .HasColumnType("datetime")
                    .HasColumnName("ENDTIME");

                entity.Property(e => e.Initiator)
                    .HasMaxLength(50)
                    .HasColumnName("INITIATOR");

                entity.Property(e => e.Priority)
                    .HasMaxLength(10)
                    .HasColumnName("PRIORITY");

                entity.Property(e => e.Processversion)
                    .HasMaxLength(10)
                    .HasColumnName("PROCESSVERSION");

                entity.Property(e => e.Starttime)
                    .HasColumnType("datetime")
                    .HasColumnName("STARTTIME");

                entity.Property(e => e.Status).HasColumnName("STATUS");

                entity.Property(e => e.Summary)
                    .HasMaxLength(2000)
                    .HasColumnName("SUMMARY");
            });

            modelBuilder.Entity<CopiedTask>(entity =>
            {
                entity.HasKey(e => e.TaskId)
                    .HasName("PK__CopiedTa__7C6949D148A680A3");

                entity.ToTable("CopiedTask");

                entity.HasIndex(e => e.Status, "IX_CopiedTask");

                entity.HasIndex(e => new { e.ProcessName, e.Incident }, "IX_CopiedTask_1");

                entity.HasIndex(e => e.StepLabel, "IX_CopiedTask_2");

                entity.HasIndex(e => e.StepLabel, "IX_CopiedTask_3");

                entity.Property(e => e.TaskId)
                    .HasMaxLength(36)
                    .HasColumnName("TaskID");

                entity.Property(e => e.AssignedToUser)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.ProcessName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.StepId)
                    .HasMaxLength(60)
                    .HasColumnName("StepID");

                entity.Property(e => e.StepLabel)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TaskUser)
                    .IsRequired()
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<CpDisTask>(entity =>
            {
                entity.HasKey(e => e.TaskId)
                    .HasName("PK__CP_DisTa__7C6949D1072E2695");

                entity.ToTable("CP_DisTask");

                entity.Property(e => e.TaskId)
                    .HasMaxLength(36)
                    .HasColumnName("TaskID");

                entity.Property(e => e.AssignedToUser).HasMaxLength(200);

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.ProcessName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.StepId)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("StepID");

                entity.Property(e => e.StepLabel)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TaskUser).HasMaxLength(200);
            });

            modelBuilder.Entity<CpDisTaskLog>(entity =>
            {
                entity.HasKey(e => e.TaskId)
                    .HasName("PK__CP_DisTa__7C6949D10ECF485D");

                entity.ToTable("CP_DisTask_Log");

                entity.Property(e => e.TaskId)
                    .HasMaxLength(36)
                    .HasColumnName("TaskID");

                entity.Property(e => e.AssignedToUser).HasMaxLength(200);

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.ProcessName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PushTime).HasColumnType("datetime");

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.StepId)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("StepID");

                entity.Property(e => e.StepLabel)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TaskUser).HasMaxLength(200);
            });

            modelBuilder.Entity<CpTask>(entity =>
            {
                entity.HasKey(e => e.TaskId)
                    .HasName("PK__CP_Task__7C6949D1459EC3AC");

                entity.ToTable("CP_Task");

                entity.Property(e => e.TaskId)
                    .HasMaxLength(36)
                    .HasColumnName("TaskID");

                entity.Property(e => e.AssignedToUser).HasMaxLength(200);

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.ProcessName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.StepId)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("StepID");

                entity.Property(e => e.StepLabel)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TaskUser).HasMaxLength(200);
            });

            modelBuilder.Entity<CpTaskLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CP_Task_Log");

                entity.Property(e => e.AssignedToUser).HasMaxLength(200);

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.ProcessName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PushTime).HasColumnType("datetime");

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.StepId)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("StepID");

                entity.Property(e => e.StepLabel)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TaskId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .HasColumnName("TaskID");

                entity.Property(e => e.TaskUser).HasMaxLength(200);
            });

            modelBuilder.Entity<CpTaskThirdparty>(entity =>
            {
                entity.ToTable("CP_TaskThirdparty");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IUser)
                    .HasMaxLength(100)
                    .HasColumnName("iUser");

                entity.Property(e => e.Incident).HasColumnName("incident");

                entity.Property(e => e.PName)
                    .HasMaxLength(100)
                    .HasColumnName("pName");

                entity.Property(e => e.SName)
                    .HasMaxLength(100)
                    .HasColumnName("sName");

                entity.Property(e => e.Summary)
                    .HasMaxLength(500)
                    .HasColumnName("summary");

                entity.Property(e => e.TBeginTime)
                    .HasColumnType("datetime")
                    .HasColumnName("tBeginTime");

                entity.Property(e => e.TStatus).HasColumnName("tStatus");

                entity.Property(e => e.TUser)
                    .HasMaxLength(100)
                    .HasColumnName("tUser");

                entity.Property(e => e.TaskId)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("taskId");

                entity.Property(e => e.UrlParams)
                    .HasMaxLength(1000)
                    .HasColumnName("urlParams");
            });

            modelBuilder.Entity<CpTaskThirdpartyLog>(entity =>
            {
                entity.ToTable("CP_TaskThirdparty_Log");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.IUser)
                    .HasMaxLength(100)
                    .HasColumnName("iUser");

                entity.Property(e => e.Incident).HasColumnName("incident");

                entity.Property(e => e.PName)
                    .HasMaxLength(100)
                    .HasColumnName("pName");

                entity.Property(e => e.PushTime).HasColumnType("datetime");

                entity.Property(e => e.SName)
                    .HasMaxLength(100)
                    .HasColumnName("sName");

                entity.Property(e => e.Summary)
                    .HasMaxLength(500)
                    .HasColumnName("summary");

                entity.Property(e => e.TBeginTime)
                    .HasColumnType("datetime")
                    .HasColumnName("tBeginTime");

                entity.Property(e => e.TStatus).HasColumnName("tStatus");

                entity.Property(e => e.TUser)
                    .HasMaxLength(100)
                    .HasColumnName("tUser");

                entity.Property(e => e.TaskId)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("taskId");

                entity.Property(e => e.UrlParams)
                    .HasMaxLength(1000)
                    .HasColumnName("urlParams");
            });

            modelBuilder.Entity<CyvehicleFareInfo>(entity =>
            {
                entity.ToTable("CYVehicleFareInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AcceptCompayCode).HasMaxLength(50);

                entity.Property(e => e.AcceptFare).HasColumnType("money");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.ManagerInfo).HasMaxLength(50);

                entity.Property(e => e.ProjectNo).HasMaxLength(50);

                entity.Property(e => e.UseDeptId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("UseDeptID");
            });

            modelBuilder.Entity<D>(entity =>
            {
                entity.ToTable("D");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AimCountry).HasMaxLength(50);

                entity.Property(e => e.AimTime).HasColumnType("datetime");

                entity.Property(e => e.DeptNo).HasMaxLength(50);

                entity.Property(e => e.Flag)
                    .HasDefaultValueSql("((1))")
                    .HasComment("1人员,0,取消行程");

                entity.Property(e => e.FlightNo).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.LeaveCountry).HasMaxLength(50);

                entity.Property(e => e.LeaveTime).HasColumnType("datetime");

                entity.Property(e => e.Mobile).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.PassCountry).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.RaimCity).HasColumnName("RAimCity");

                entity.Property(e => e.RaimCountry).HasMaxLength(50);

                entity.Property(e => e.RaimTime)
                    .HasColumnType("datetime")
                    .HasColumnName("RAimTime");

                entity.Property(e => e.RequestTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Time");

                entity.Property(e => e.RflightNo)
                    .HasMaxLength(50)
                    .HasColumnName("RFlightNo");

                entity.Property(e => e.RleaveCity).HasColumnName("RLeaveCity");

                entity.Property(e => e.RleaveCountry)
                    .HasMaxLength(50)
                    .HasColumnName("RLeaveCountry");

                entity.Property(e => e.RleaveTime)
                    .HasColumnType("datetime")
                    .HasColumnName("RLeaveTime");

                entity.Property(e => e.RpassCity).HasColumnName("RPassCity");

                entity.Property(e => e.RpassCountry)
                    .HasMaxLength(50)
                    .HasColumnName("RPassCountry");

                entity.Property(e => e.UserKey).HasMaxLength(50);
            });

            modelBuilder.Entity<DepartmentWorkPlanCheck>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DepartmentWorkPlanCheck");

                entity.Property(e => e.CheckingDate).HasColumnType("datetime");

                entity.Property(e => e.CheckingOid)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("CheckingOID");

                entity.Property(e => e.CheckingPerson)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DepartmentWorkPlanCheckOid).HasColumnName("DepartmentWorkPlanCheckOID");

                entity.Property(e => e.Quarter)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Remark).HasColumnType("text");

                entity.Property(e => e.SysCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("SYS_Created");

                entity.Property(e => e.SysCreatedBy).HasColumnName("SYS_CreatedBy");

                entity.Property(e => e.SysDeleted).HasColumnName("SYS_Deleted");

                entity.Property(e => e.SysDivision).HasColumnName("SYS_DIVISION");

                entity.Property(e => e.SysLastUpd)
                    .HasColumnType("datetime")
                    .HasColumnName("SYS_LAST_UPD");

                entity.Property(e => e.SysLastUpdBy).HasColumnName("SYS_LAST_UPD_BY");

                entity.Property(e => e.SysOrg).HasColumnName("SYS_ORG");

                entity.Property(e => e.SysPostn).HasColumnName("SYS_POSTN");

                entity.Property(e => e.SysReplacement).HasColumnName("SYS_REPLACEMENT");

                entity.Property(e => e.UbscWorkPlanInfoFk).HasColumnName("UBSC_WorkPlanInfo_FK");
            });

            modelBuilder.Entity<DepartmentWorkPlanCheckDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DepartmentWorkPlanCheckDetail");

                entity.Property(e => e.Complete).HasColumnName("complete");

                entity.Property(e => e.DepartmentWorkPlanCheckDetailOid).HasColumnName("DepartmentWorkPlanCheckDetailOID");

                entity.Property(e => e.DepartmentWorkPlanCheckFk).HasColumnName("DepartmentWorkPlanCheck_FK");

                entity.Property(e => e.Execution)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SysCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("SYS_Created");

                entity.Property(e => e.SysCreatedBy).HasColumnName("SYS_CreatedBy");

                entity.Property(e => e.SysDeleted).HasColumnName("SYS_Deleted");

                entity.Property(e => e.SysDivision).HasColumnName("SYS_DIVISION");

                entity.Property(e => e.SysLastUpd)
                    .HasColumnType("datetime")
                    .HasColumnName("SYS_LAST_UPD");

                entity.Property(e => e.SysLastUpdBy).HasColumnName("SYS_LAST_UPD_BY");

                entity.Property(e => e.SysOrg).HasColumnName("SYS_ORG");

                entity.Property(e => e.SysPostn).HasColumnName("SYS_POSTN");

                entity.Property(e => e.SysReplacement).HasColumnName("SYS_REPLACEMENT");

                entity.Property(e => e.UbscPlanItemsFk).HasColumnName("UBSC_PlanItems_FK");
            });

            modelBuilder.Entity<DictNotarizeApply>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Dict_NotarizeApply");

                entity.Property(e => e.Codeitemdesc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("codeitemdesc");

                entity.Property(e => e.Codeitemid)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("codeitemid");

                entity.Property(e => e.Codesetid)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("codesetid");
            });

            modelBuilder.Entity<DriverOverStandard>(entity =>
            {
                entity.ToTable("DriverOverStandard");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Alldaystandard)
                    .HasColumnType("money")
                    .HasColumnName("alldaystandard");

                entity.Property(e => e.Businessstandard)
                    .HasColumnType("money")
                    .HasColumnName("businessstandard");

                entity.Property(e => e.Everymilestandard)
                    .HasColumnType("money")
                    .HasColumnName("everymilestandard");

                entity.Property(e => e.Everystandard)
                    .HasColumnType("money")
                    .HasColumnName("everystandard");

                entity.Property(e => e.Holidaystandard)
                    .HasColumnType("money")
                    .HasColumnName("holidaystandard");

                entity.Property(e => e.Nightstandard)
                    .HasColumnType("money")
                    .HasColumnName("nightstandard");

                entity.Property(e => e.StandardDate)
                    .HasColumnType("date")
                    .HasColumnName("standardDate");

                entity.Property(e => e.Weekstandard)
                    .HasColumnType("money")
                    .HasColumnName("weekstandard");

                entity.Property(e => e.Wholestandard)
                    .HasColumnType("money")
                    .HasColumnName("wholestandard");
            });

            modelBuilder.Entity<DriverOverTime>(entity =>
            {
                entity.ToTable("DriverOverTime");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Alldaymoney)
                    .HasColumnType("money")
                    .HasColumnName("alldaymoney");

                entity.Property(e => e.Alldays).HasColumnName("alldays");

                entity.Property(e => e.Alldaystandard)
                    .HasColumnType("money")
                    .HasColumnName("alldaystandard");

                entity.Property(e => e.Allmoney)
                    .HasColumnType("money")
                    .HasColumnName("allmoney");

                entity.Property(e => e.Businessdays).HasColumnName("businessdays");

                entity.Property(e => e.Businessmoney)
                    .HasColumnType("money")
                    .HasColumnName("businessmoney");

                entity.Property(e => e.Businessstandard)
                    .HasColumnType("money")
                    .HasColumnName("businessstandard");

                entity.Property(e => e.Carmiles).HasColumnName("carmiles");

                entity.Property(e => e.Everydays).HasColumnName("everydays");

                entity.Property(e => e.Everymilestandard)
                    .HasColumnType("money")
                    .HasColumnName("everymilestandard");

                entity.Property(e => e.Everymoney)
                    .HasColumnType("money")
                    .HasColumnName("everymoney");

                entity.Property(e => e.Everystandard)
                    .HasColumnType("money")
                    .HasColumnName("everystandard");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.Holidaymoney)
                    .HasColumnType("money")
                    .HasColumnName("holidaymoney");

                entity.Property(e => e.Holidays).HasColumnName("holidays");

                entity.Property(e => e.Holidaystandard)
                    .HasColumnType("money")
                    .HasColumnName("holidaystandard");

                entity.Property(e => e.Milemoney)
                    .HasColumnType("money")
                    .HasColumnName("milemoney");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .HasColumnName("name");

                entity.Property(e => e.Namekey)
                    .HasMaxLength(50)
                    .HasColumnName("namekey");

                entity.Property(e => e.Nightdays).HasColumnName("nightdays");

                entity.Property(e => e.Nightsmoney)
                    .HasColumnType("money")
                    .HasColumnName("nightsmoney");

                entity.Property(e => e.Nightstandard)
                    .HasColumnType("money")
                    .HasColumnName("nightstandard");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.TimeMonth).HasColumnType("datetime");

                entity.Property(e => e.Weekdays).HasColumnName("weekdays");

                entity.Property(e => e.Weekmoney)
                    .HasColumnType("money")
                    .HasColumnName("weekmoney");

                entity.Property(e => e.Weekstandard)
                    .HasColumnType("money")
                    .HasColumnName("weekstandard");

                entity.Property(e => e.Wholedays).HasColumnName("wholedays");

                entity.Property(e => e.Wholemoney)
                    .HasColumnType("money")
                    .HasColumnName("wholemoney");

                entity.Property(e => e.Wholestandard)
                    .HasColumnType("money")
                    .HasColumnName("wholestandard");
            });

            modelBuilder.Entity<FinanceAppInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Finance_AppInfo");

                entity.Property(e => e.AppDate).HasColumnType("datetime");

                entity.Property(e => e.ApproveResult)
                    .HasMaxLength(200)
                    .HasColumnName("Approve_Result");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.OpName)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.OpUserName).HasMaxLength(200);

                entity.Property(e => e.ProcessName).HasMaxLength(200);

                entity.Property(e => e.StepName).HasMaxLength(200);

                entity.Property(e => e.VoucherCode).HasMaxLength(50);
            });

            modelBuilder.Entity<FinanceProcessStep>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ProcessName).HasMaxLength(200);

                entity.Property(e => e.StepName).HasMaxLength(200);
            });

            modelBuilder.Entity<FinanceRequestProcess>(entity =>
            {
                entity.ToTable("FinanceRequestProcess");

                entity.HasIndex(e => e.RequestDate, "IX_FinanceRequestProcess");

                entity.HasIndex(e => new { e.ProcessName, e.Incident }, "IX_FinanceRequestProcess_1");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .HasColumnName("ID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.AccountPayCmpCode)
                    .HasMaxLength(50)
                    .HasComment("客户编号");

                entity.Property(e => e.AccountPayCmpName)
                    .HasMaxLength(50)
                    .HasComment("客户名称");

                entity.Property(e => e.AccountReceiveCmpCode)
                    .HasMaxLength(50)
                    .HasComment("合同签订方编号");

                entity.Property(e => e.AccountReceiveCmpName)
                    .HasMaxLength(200)
                    .HasComment("合同签订方");

                entity.Property(e => e.AppointGrtLetter)
                    .HasMaxLength(50)
                    .HasComment("约定保函类别   用于其他收款：保证金 类型为替换保函保证金");

                entity.Property(e => e.AuditBusinessLoginName)
                    .HasMaxLength(20)
                    .HasComment("审核会计登录名");

                entity.Property(e => e.AuditBusinessName)
                    .HasMaxLength(20)
                    .HasComment("审核会计姓名");

                entity.Property(e => e.BatchBillDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Batch_BillDate")
                    .HasComment("收据开票日期(目前应用于其他收款)");

                entity.Property(e => e.BillAmount)
                    .HasColumnType("decimal(38, 2)")
                    .HasComment("开出发票金额");

                entity.Property(e => e.BillCategory).HasComment("保证金\\押金类别");

                entity.Property(e => e.BillCategoryName)
                    .HasMaxLength(50)
                    .HasComment("保证金\\押金类别名称");

                entity.Property(e => e.BillContent)
                    .HasMaxLength(200)
                    .HasComment("票据内容");

                entity.Property(e => e.BillNum).HasComment("票据张数");

                entity.Property(e => e.BillNumber)
                    .HasMaxLength(50)
                    .HasComment("收据/形式发票编号");

                entity.Property(e => e.BillTypeValue).HasComment("开票类型");

                entity.Property(e => e.ContCode)
                    .HasMaxLength(50)
                    .HasComment("合同编号 用于其他收款：保证金 类型为替换保函保证金");

                entity.Property(e => e.ContCurrency)
                    .HasMaxLength(50)
                    .HasComment("合同币种  用于其他收款：保证金 类型为替换保函保证金");

                entity.Property(e => e.ContName)
                    .HasMaxLength(200)
                    .HasComment("合同名称  用于其他收款：保证金 类型为替换保函保证金");

                entity.Property(e => e.ContractAmt)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("合同总价 用于其他收款：保证金 类型为替换保函保证金");

                entity.Property(e => e.ContractType)
                    .HasMaxLength(50)
                    .HasComment("合同编号  用于其他收款：保证金 类型为替换保函保证金");

                entity.Property(e => e.DesignOfIncome)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("应收/预收款");

                entity.Property(e => e.DfconfimStatus)
                    .HasColumnName("DFconfimStatus")
                    .HasDefaultValueSql("((0))")
                    .HasComment("对方确认状态  0:空  1:对方已确认  2:对方未确认");

                entity.Property(e => e.DigestDescribition)
                    .HasMaxLength(500)
                    .HasComment("摘要");

                entity.Property(e => e.DonateAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("扣款发票金额");

                entity.Property(e => e.DonateBill)
                    .HasMaxLength(50)
                    .HasComment("扣款发票编号");

                entity.Property(e => e.DonateDk)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("DonateDK")
                    .HasComment("业主代扣");

                entity.Property(e => e.ExchangeNote)
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')")
                    .HasComment("外汇说明");

                entity.Property(e => e.FinanceProDate)
                    .HasColumnType("datetime")
                    .HasComment("接单时间");

                entity.Property(e => e.FinanceProLoginName)
                    .HasMaxLength(20)
                    .HasComment("接单会计登录名");

                entity.Property(e => e.FinanceProName)
                    .HasMaxLength(20)
                    .HasComment("接单会计姓名");

                entity.Property(e => e.FinanceStatus).HasComment("审核标识");

                entity.Property(e => e.FpRceiptor)
                    .HasMaxLength(20)
                    .HasColumnName("fpRceiptor");

                entity.Property(e => e.GrtLtType)
                    .HasMaxLength(50)
                    .HasComment("保函类别  用于其他收款：保证金 类型为替换保函保证金");

                entity.Property(e => e.IdentifySource).HasComment("其他收款：1代表先付后收 2代表先收后付");

                entity.Property(e => e.Incident).HasComment("实例号");

                entity.Property(e => e.IncidentStr)
                    .HasMaxLength(20)
                    .HasComputedColumnSql("(CONVERT([nvarchar](20),[Incident],(0)))", false);

                entity.Property(e => e.IncometypeText)
                    .HasMaxLength(50)
                    .HasComment("收入类型名称");

                entity.Property(e => e.IncometypeValue).HasComment("收入类型编号");

                entity.Property(e => e.InvoiceNumber)
                    .HasMaxLength(50)
                    .HasComment("发票编号");

                entity.Property(e => e.IsReturned)
                    .HasDefaultValueSql("((0))")
                    .HasComment("0:正常状态  1：已退回状态");

                entity.Property(e => e.IsRz)
                    .HasColumnName("IsRZ")
                    .HasComment("是否入账");

                entity.Property(e => e.IsWhExchange)
                    .HasDefaultValueSql("((0))")
                    .HasComment("是否生成外汇报表  0初始化数据  1待生成  2已生成");

                entity.Property(e => e.MoneyRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MoneyRMB")
                    .HasComment("折合人民币金额");

                entity.Property(e => e.MoneyTotal)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("本次收款金额合计");

                entity.Property(e => e.NotesRemark)
                    .HasMaxLength(500)
                    .HasComment("备注信息");

                entity.Property(e => e.OfferInvoiceDate).HasMaxLength(50);

                entity.Property(e => e.Opentions)
                    .HasDefaultValueSql("((0))")
                    .HasComment("出口类别：2--出口设备材料  1--备品备件");

                entity.Property(e => e.PayBankCode).HasMaxLength(50);

                entity.Property(e => e.PayBankName).HasMaxLength(500);

                entity.Property(e => e.PayCheque).HasMaxLength(500);

                entity.Property(e => e.PayCmpAddress)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')")
                    .HasComment("付款单位地址");

                entity.Property(e => e.PayCmpBank)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')")
                    .HasComment("开户行");

                entity.Property(e => e.PayCmpBankAcct)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')")
                    .HasComment("开户行账号");

                entity.Property(e => e.PayCmpBankUnionAcct)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')")
                    .HasComment("联行行号");

                entity.Property(e => e.PayCmpCode)
                    .HasMaxLength(30)
                    .HasComment("付款单位编号");

                entity.Property(e => e.PayCmpName)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')")
                    .HasComment("付款单位名称");

                entity.Property(e => e.PayCmpPhone)
                    .HasMaxLength(30)
                    .HasComment("付款单位联系电话");

                entity.Property(e => e.PayInfoId)
                    .HasColumnName("PayInfoID")
                    .HasComment("对应已支付信息ID");

                entity.Property(e => e.PaymentInstructions).HasMaxLength(100);

                entity.Property(e => e.PlanInAcctDate)
                    .HasColumnType("datetime")
                    .HasComment("预计到账时间");

                entity.Property(e => e.PostalBillGetMethod).HasComment("汇票获取方式 ");

                entity.Property(e => e.ProcessFinishDate)
                    .HasColumnType("datetime")
                    .HasComment("流程完成时间");

                entity.Property(e => e.ProcessName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ProcessStatus).HasComment("流程状态");

                entity.Property(e => e.ProjectCategory)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("项目类型");

                entity.Property(e => e.ProjectCategorySub)
                    .HasMaxLength(50)
                    .HasColumnName("ProjectCategory_Sub")
                    .HasComment("项目子类型");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("项目代号");

                entity.Property(e => e.ProjectCompletePct)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))")
                    .HasComment("项目进度%");

                entity.Property(e => e.ProjectContractAmount)
                    .HasColumnType("decimal(38, 2)")
                    .HasComment("项目收款合同总额");

                entity.Property(e => e.ProjectJnw)
                    .HasMaxLength(50)
                    .HasColumnName("ProjectJNW")
                    .HasComment("项目境内外");

                entity.Property(e => e.ProjectName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')")
                    .HasComment("项目名称");

                entity.Property(e => e.ProjectReceivedAmount)
                    .HasColumnType("decimal(38, 2)")
                    .HasComment("已收费额");

                entity.Property(e => e.ProjectReceivedPct)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))")
                    .HasComment("已收费百分比");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("汇率");

                entity.Property(e => e.Rceiptor)
                    .HasMaxLength(50)
                    .HasComment("领取人");

                entity.Property(e => e.ReceiptAmount)
                    .HasColumnType("decimal(38, 2)")
                    .HasComment("开出收据金额");

                entity.Property(e => e.ReportId)
                    .HasColumnName("ReportID")
                    .HasComment("报表ID");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("申请时间");

                entity.Property(e => e.RequestDeptCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptCode")
                    .HasDefaultValueSql("('')")
                    .HasComment("申请人主管部门");

                entity.Property(e => e.RequestDeptName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptName")
                    .HasDefaultValueSql("('')")
                    .HasComment("申请人主管部门名称");

                entity.Property(e => e.RequestFormNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Request_FormNumber")
                    .HasComment("申请表单编号");

                entity.Property(e => e.RequestLoginName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName")
                    .HasDefaultValueSql("('')")
                    .HasComment("申请账号");

                entity.Property(e => e.RequestPayCategory).HasComment("收款类型");

                entity.Property(e => e.RequestRealName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName")
                    .HasDefaultValueSql("('')")
                    .HasComment("申请人名称");

                entity.Property(e => e.RequestType).HasComment("申请类型");

                entity.Property(e => e.RequestUserIdentity)
                    .HasMaxLength(30)
                    .HasColumnName("Request_UserIdentity");

                entity.Property(e => e.SourceFormNumber)
                    .HasMaxLength(50)
                    .HasComment("其他收款应用：先付后收 付款表单号");

                entity.Property(e => e.StandardCurrency)
                    .HasMaxLength(20)
                    .HasComment("主币种");

                entity.Property(e => e.StandardCurrencyMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("折主币种金额");

                entity.Property(e => e.StandardCurrencyMoneyRate)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("折主币种汇率");

                entity.Property(e => e.SubMoneyOnVat)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("销项税额");

                entity.Property(e => e.SumDue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SumReceiveAmountBig)
                    .HasMaxLength(50)
                    .HasComment("本次收款金额大写");

                entity.Property(e => e.SumReceiveAmountSmall)
                    .HasColumnType("decimal(38, 2)")
                    .HasComment("本次收款金额");

                entity.Property(e => e.Tariff).HasMaxLength(50);

                entity.Property(e => e.TaxRate)
                    .HasMaxLength(20)
                    .HasComment("税率");

                entity.Property(e => e.TaxRateValue).HasMaxLength(20);

                entity.Property(e => e.Telphone)
                    .HasMaxLength(30)
                    .HasComment("联系电话");

                entity.Property(e => e.TheAppleCurOperate).HasComment("0 是乘 1是除");

                entity.Property(e => e.TheApplyCurcency)
                    .HasMaxLength(50)
                    .HasComment("本次收款申请币种");

                entity.Property(e => e.TheApplyCurcencyName)
                    .HasMaxLength(50)
                    .HasComment("申请收款币种中文");

                entity.Property(e => e.TheApplyRate)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("本次申请汇率");

                entity.Property(e => e.TheApplyReceivedAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("申请收款金额");

                entity.Property(e => e.TheRate).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.Voucherid)
                    .HasColumnName("VOUCHERID")
                    .HasComment("凭证号");

                entity.Property(e => e.WaElecInvoiceNumber).HasComment("代扣水电费收据编号");
            });

            modelBuilder.Entity<FinanceRequestProcessBillsDeleteInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FinanceRequestProcessBillsDeleteInfo");

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BillAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BillCode).HasMaxLength(50);

                entity.Property(e => e.BillContent).HasMaxLength(1000);

                entity.Property(e => e.BillTaxAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BillType).HasMaxLength(20);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.InvoiceDate).HasColumnType("datetime");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.Requestor).HasMaxLength(50);

                entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TaxRateCode).HasMaxLength(50);

                entity.Property(e => e.TaxRateText).HasMaxLength(50);

                entity.Property(e => e.TransactorIdentity).HasMaxLength(50);

                entity.Property(e => e.TransactorLoginName).HasMaxLength(50);

                entity.Property(e => e.TransactorRealName).HasMaxLength(50);
            });

            modelBuilder.Entity<FinanceRequestProcessBillsInfo>(entity =>
            {
                entity.ToTable("FinanceRequestProcessBillsInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BillAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BillCode).HasMaxLength(50);

                entity.Property(e => e.BillContent)
                    .HasMaxLength(1000)
                    .HasComment("票据内容");

                entity.Property(e => e.BillTaxAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BillType).HasMaxLength(20);

                entity.Property(e => e.ByAttachment).HasMaxLength(50);

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("datetime")
                    .HasComment("开票日期");

                entity.Property(e => e.NoteType).HasComment("0 收据 1 发票");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.RCreateTime)
                    .HasMaxLength(50)
                    .HasColumnName("R_CreateTime");

                entity.Property(e => e.RId)
                    .HasMaxLength(36)
                    .HasColumnName("R_ID");

                entity.Property(e => e.RName)
                    .HasMaxLength(50)
                    .HasColumnName("R_name");

                entity.Property(e => e.RTitle)
                    .HasMaxLength(50)
                    .HasColumnName("R_Title");

                entity.Property(e => e.Requestor)
                    .HasMaxLength(50)
                    .HasComment("收取发票申请流程的申请人");

                entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TaxRateCode).HasMaxLength(50);

                entity.Property(e => e.TaxRateText).HasMaxLength(50);

                entity.Property(e => e.TransactorIdentity).HasMaxLength(50);

                entity.Property(e => e.TransactorLoginName).HasMaxLength(50);

                entity.Property(e => e.TransactorRealName).HasMaxLength(50);
            });

            modelBuilder.Entity<FinanceRequestProcessBillsNoProject>(entity =>
            {
                entity.ToTable("FinanceRequestProcessBillsNoProject");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BillAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BillCode).HasMaxLength(50);

                entity.Property(e => e.BillContent)
                    .HasMaxLength(1000)
                    .HasComment("票据内容");

                entity.Property(e => e.BillTaxAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BillType)
                    .HasMaxLength(50)
                    .HasComment("票据类型");

                entity.Property(e => e.BillTypeValue).HasComment("票据类型编号");

                entity.Property(e => e.ByAttachment).HasMaxLength(50);

                entity.Property(e => e.Inventory)
                    .HasDefaultValueSql("((0))")
                    .HasComment("清单数");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("datetime")
                    .HasComment("开票日期");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.RCreateTime)
                    .HasMaxLength(50)
                    .HasColumnName("R_CreateTime");

                entity.Property(e => e.RId)
                    .HasMaxLength(36)
                    .HasColumnName("R_ID");

                entity.Property(e => e.RName)
                    .HasMaxLength(50)
                    .HasColumnName("R_name");

                entity.Property(e => e.RTitle)
                    .HasMaxLength(50)
                    .HasColumnName("R_Title");

                entity.Property(e => e.Requestor)
                    .HasMaxLength(50)
                    .HasComment("收取发票申请流程的申请人");

                entity.Property(e => e.TaxRateCode)
                    .HasMaxLength(50)
                    .HasComment("税率编号");

                entity.Property(e => e.TaxRateText)
                    .HasMaxLength(50)
                    .HasComment("税率显示值");
            });

            modelBuilder.Entity<FinanceRequestProcessContract>(entity =>
            {
                entity.ToTable("FinanceRequestProcessContract");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .HasColumnName("ID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.AccountPayCmpCode).HasMaxLength(50);

                entity.Property(e => e.AccountPayCmpName).HasMaxLength(200);

                entity.Property(e => e.AccountReceiveCmpCode).HasMaxLength(50);

                entity.Property(e => e.AccountReceiveCmpName).HasMaxLength(200);

                entity.Property(e => e.AddupReceivedAmount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.AddupReceivedPct).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContractRate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.CurAddupReceivedAmount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.CurAddupReceivedPct).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.CurCurrency)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CurRequestAmount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.CurRequestAmountUpp)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("CurRequestAmountUPP")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Mode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ModifiedAmount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.MultiCurrency).HasMaxLength(10);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ProcessId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .HasColumnName("ProcessID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.RequestDesc)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RequestMethod)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RequestNode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RmbeqAmount)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("RMBEqAmount");

                entity.Property(e => e.SignAmount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.TotalAmount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.UsdeqAmount)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("USDEqAmount");
            });

            modelBuilder.Entity<FinanceRequestProcessExchangeInfo>(entity =>
            {
                entity.ToTable("FinanceRequestProcessExchangeInfo");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.Currency)
                    .HasMaxLength(50)
                    .HasComment("币种");

                entity.Property(e => e.CurrencyName)
                    .HasMaxLength(50)
                    .HasComment("币种");

                entity.Property(e => e.CustomsAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("关单金额");

                entity.Property(e => e.CustomsCode)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("关单编号");

                entity.Property(e => e.ExchangeNote)
                    .HasMaxLength(500)
                    .HasComment("外汇说明");

                entity.Property(e => e.ProcessId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .HasColumnName("ProcessID")
                    .HasComment("外键");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ReInvoiceAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("收取发票金额");

                entity.Property(e => e.ReInvoiceCode)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("收取发票编号");

                entity.Property(e => e.ReMainCustomsAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("本次收取关单金额");

                entity.Property(e => e.RequestLoginName).HasMaxLength(50);

                entity.Property(e => e.ThirdCountryAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("第三国采购金额");

                entity.Property(e => e.Zsfpamount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ZSFPAmount")
                    .HasDefaultValueSql("((0))")
                    .HasComment("形式发票金额");

                entity.Property(e => e.Zsfpcode)
                    .HasMaxLength(100)
                    .HasColumnName("ZSFPCode")
                    .HasDefaultValueSql("('')")
                    .HasComment("形式发票编号");
            });

            modelBuilder.Entity<FinanceRequestProcessForPrintDetail>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CustomsAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("关单金额");

                entity.Property(e => e.CustomsCode)
                    .HasMaxLength(100)
                    .HasComment("关单编号");

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.ReInvoiceAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("收取发票金额");

                entity.Property(e => e.ReInvoiceCode)
                    .HasMaxLength(100)
                    .HasComment("收取发票编号");

                entity.Property(e => e.Zsfpamount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ZSFPAmount")
                    .HasComment("形式发票金额");

                entity.Property(e => e.Zsfpcode)
                    .HasMaxLength(100)
                    .HasColumnName("ZSFPCode")
                    .HasComment("形式发票编号");
            });

            modelBuilder.Entity<FinanceRequestProcessForPrintHeader>(entity =>
            {
                entity.ToTable("FinanceRequestProcessForPrintHeader");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Bpbjamount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("bpbjamount")
                    .HasComment("货物贸易（一般贸易支出）申报金额");

                entity.Property(e => e.ContantCode)
                    .HasMaxLength(50)
                    .HasComment("合同编号");

                entity.Property(e => e.Currency)
                    .HasMaxLength(50)
                    .HasComment("币别");

                entity.Property(e => e.DycustCode)
                    .HasMaxLength(50)
                    .HasColumnName("DYCustCode")
                    .HasComment("货物贸易（一般贸易支出）对应关单编号");

                entity.Property(e => e.GdCode)
                    .HasMaxLength(50)
                    .HasColumnName("GD_Code")
                    .HasComment("对应关单金额合计");

                entity.Property(e => e.HwckAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Hwck_Amount")
                    .HasComment("对外承包工程（设备、物资等）货物出口金额");

                entity.Property(e => e.Incidents).HasMaxLength(200);

                entity.Property(e => e.Other1)
                    .HasMaxLength(50)
                    .HasColumnName("other_1")
                    .HasComment("其他收汇说明");

                entity.Property(e => e.Other2)
                    .HasMaxLength(500)
                    .HasColumnName("other_2")
                    .HasComment("其他收汇说明");

                entity.Property(e => e.OtherAmount1)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Other_Amount1")
                    .HasComment("对外承包工程其他申报金额");

                entity.Property(e => e.OtherAmount2)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Other_Amount2")
                    .HasComment("其他申报金额");

                entity.Property(e => e.Pid)
                    .HasColumnName("PID")
                    .HasComment("外键");

                entity.Property(e => e.PmCpmpany)
                    .HasMaxLength(500)
                    .HasComment("付款单位名称");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .HasComment("项目号");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(500)
                    .HasComment("项目名称");

                entity.Property(e => e.RaceiveAccount)
                    .HasMaxLength(100)
                    .HasComment("收款账号");

                entity.Property(e => e.ReceiveAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("收汇金额");

                entity.Property(e => e.ReceiveBank)
                    .HasMaxLength(500)
                    .HasComment("收款银行");

                entity.Property(e => e.ReceiveDate)
                    .HasColumnType("datetime")
                    .HasComment("收款日期");

                entity.Property(e => e.Sg1Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("SG1_Amount")
                    .HasComment("对外承包工程建筑、工程技术服务申报金额");

                entity.Property(e => e.SgAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("SG_Amount")
                    .HasComment("对外承包工程建筑、土建安装服务申报金额");

                entity.Property(e => e.Thirdamount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("thirdamount")
                    .HasComment("境外承包工程从第三方国家采购的货物直接运送到项目所在地\\当地采购的货物申报金额");

                entity.Property(e => e.TotalAmountGd1)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("TotalAmount_GD1")
                    .HasComment("对应关单金额合计");

                entity.Property(e => e.TotalAmountGd2)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("TotalAmount_GD2")
                    .HasComment("对应关单金额合计");
            });

            modelBuilder.Entity<FinanceRequestProcessOfCashier>(entity =>
            {
                entity.ToTable("FinanceRequestProcessOfCashier");

                entity.HasIndex(e => new { e.ProcessName, e.Incident }, "IX_FinanceRequestProcessOfCashier");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("海关信息表单号");

                entity.Property(e => e.AccountPayCmpCode)
                    .HasMaxLength(50)
                    .HasComment("入账付款单位编号");

                entity.Property(e => e.AccountPayCmpName)
                    .HasMaxLength(50)
                    .HasComment("入账付款单位名称");

                entity.Property(e => e.AccountReceiveCmpCode).HasMaxLength(50);

                entity.Property(e => e.AccountReceiveCmpName).HasMaxLength(200);

                entity.Property(e => e.AccountingTime)
                    .HasColumnType("datetime")
                    .HasComment("收款到账时间");

                entity.Property(e => e.AnnexaNumber)
                    .HasMaxLength(20)
                    .HasComment("附件张数");

                entity.Property(e => e.AuditAccountDate)
                    .HasColumnType("datetime")
                    .HasComment("审核时间");

                entity.Property(e => e.AuditAccountLoginName)
                    .HasMaxLength(50)
                    .HasComment("审核人账号");

                entity.Property(e => e.AuditAccountName)
                    .HasMaxLength(50)
                    .HasComment("审核人姓名");

                entity.Property(e => e.ConfirmFinaceDate)
                    .HasColumnType("datetime")
                    .HasComment("接单时间");

                entity.Property(e => e.ConfirmFinaceLoginName)
                    .HasMaxLength(50)
                    .HasComment("接单账号");

                entity.Property(e => e.ConfirmFinaceName)
                    .HasMaxLength(50)
                    .HasComment("接单人姓名");

                entity.Property(e => e.ConfirmStatus).HasComment("状态标识");

                entity.Property(e => e.CustomsCode)
                    .HasMaxLength(2000)
                    .HasComment("关单编号");

                entity.Property(e => e.DesignOfIncome)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("应收/预收款");

                entity.Property(e => e.DigestDescribition)
                    .HasMaxLength(500)
                    .HasComment("摘要");

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(30)
                    .HasComment("表单号");

                entity.Property(e => e.Incident).HasComment("流程实例号");

                entity.Property(e => e.MoneyRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MoneyRMB")
                    .HasComment("折合人民币金额");

                entity.Property(e => e.OffSingleNumber)
                    .HasMaxLength(2000)
                    .HasComment("关单编号");

                entity.Property(e => e.PayBankCode)
                    .HasMaxLength(20)
                    .HasComment("收款银行编号");

                entity.Property(e => e.PayBankName)
                    .HasMaxLength(100)
                    .HasComment("收款银行");

                entity.Property(e => e.PayCheque)
                    .HasMaxLength(50)
                    .HasComment("收款银行账号");

                entity.Property(e => e.PayCmpBank)
                    .HasMaxLength(500)
                    .HasComment("付款银行");

                entity.Property(e => e.PayCmpBankAcct)
                    .HasMaxLength(500)
                    .HasComment("付款银行账号");

                entity.Property(e => e.PayCmpBankUnionAcct)
                    .HasMaxLength(500)
                    .HasComment("联行行号");

                entity.Property(e => e.PayCmpCode)
                    .HasMaxLength(30)
                    .HasComment("付款单位编号");

                entity.Property(e => e.PayorName)
                    .HasMaxLength(500)
                    .HasComment("付款单位");

                entity.Property(e => e.ProcessFinishDate)
                    .HasColumnType("datetime")
                    .HasComment("流程结束时间");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProcessStatus)
                    .HasDefaultValueSql("((0))")
                    .HasComment("流程状态");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("项目编码");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(200)
                    .HasComment("项目名");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 8)")
                    .HasDefaultValueSql("((1))")
                    .HasComment("汇率");

                entity.Property(e => e.RateDifferential)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("汇率差额");

                entity.Property(e => e.RateOfYb)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("RateOfYB")
                    .HasComment("折合人民币汇率");

                entity.Property(e => e.ReceiveAmount)
                    .HasColumnType("decimal(38, 2)")
                    .HasComment("收款金额");

                entity.Property(e => e.ReceiveMethodType).HasComment("收款方式");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date")
                    .HasComment("申请日期");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptCode")
                    .HasComment("申请人部门编号");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(200)
                    .HasColumnName("Request_DeptName")
                    .HasComment("申请人部门名称");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(20)
                    .HasColumnName("Request_LoginName")
                    .HasComment("申请人账号");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(20)
                    .HasColumnName("Request_RealName")
                    .HasComment("申请人姓名");

                entity.Property(e => e.RequestType)
                    .HasDefaultValueSql("((1))")
                    .HasComment("申请收款类型1项目合同收款，2项目非合同收款");

                entity.Property(e => e.RequestUserIdentity)
                    .HasMaxLength(30)
                    .HasColumnName("Request_UserIdentity")
                    .HasComment("申请人身份证号");

                entity.Property(e => e.SubMoneyOnVat)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("销项税额");

                entity.Property(e => e.TaxRate)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("((1))")
                    .HasComment("税率");

                entity.Property(e => e.TaxRateValue).HasComment("税率");

                entity.Property(e => e.VoucherBillTaxAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("税额金额");

                entity.Property(e => e.VoucherBillTaxAmountRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VoucherBillTaxAmountRMB")
                    .HasComment("税额人民币金额");

                entity.Property(e => e.VoucherBillTaxCurrency)
                    .HasMaxLength(50)
                    .HasComment("税额币种");

                entity.Property(e => e.VoucherTaxAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("折算金额");

                entity.Property(e => e.VoucherTaxCurrency)
                    .HasMaxLength(50)
                    .HasComment("税额入账币种");

                entity.Property(e => e.VoucherTaxExchange)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("税额汇率");

                entity.Property(e => e.Voucherid)
                    .HasColumnName("VOUCHERID")
                    .HasComment("凭证号");
            });

            modelBuilder.Entity<FinanceRequestProcessOfCashierCargoDetail>(entity =>
            {
                entity.ToTable("FinanceRequestProcessOfCashierCargoDetail");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyFormNumber).HasMaxLength(30);

                entity.Property(e => e.Batch)
                    .HasMaxLength(50)
                    .HasComment("申报批次");

                entity.Property(e => e.CdCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("CD_code")
                    .HasComment("海关信息表单号");

                entity.Property(e => e.ContractCodeCkts)
                    .HasMaxLength(500)
                    .HasColumnName("ContractCode_Ckts")
                    .HasComment("出口退税--合同编号");

                entity.Property(e => e.ContractNameCkts)
                    .HasMaxLength(500)
                    .HasColumnName("ContractName_Ckts")
                    .HasComment("出口退税--合同名称");

                entity.Property(e => e.CustomsCode)
                    .HasMaxLength(50)
                    .HasComment("海关编号");

                entity.Property(e => e.EquipmentCosts)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("设备成本");

                entity.Property(e => e.EquipmentTax)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("设备税额值");

                entity.Property(e => e.ExpectedTax)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("预计出口退税额");

                entity.Property(e => e.ExportDate)
                    .HasColumnType("datetime")
                    .HasComment("出口日期");

                entity.Property(e => e.FId).HasColumnName("F_ID");

                entity.Property(e => e.Incident).HasComment("流程实例号");

                entity.Property(e => e.InvoiceAmountTotal)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("发票总额");

                entity.Property(e => e.InvoiceTotalBillAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("票额");

                entity.Property(e => e.MaterialCosts)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("材料成本");

                entity.Property(e => e.MaterialTax)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("材料税额值");

                entity.Property(e => e.PaidInTax)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("实收出口退税额");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名称");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .HasComment("项目编号");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(500)
                    .HasComment("项目名称");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName")
                    .HasComment("申请人账号");

                entity.Property(e => e.ShouldReTax)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("应收出口退税额");

                entity.Property(e => e.SubjectCode).HasMaxLength(50);

                entity.Property(e => e.SubjectName).HasMaxLength(50);

                entity.Property(e => e.SupplierCodeCkts)
                    .HasMaxLength(500)
                    .HasColumnName("SupplierCode_Ckts")
                    .HasComment("出口退税--供应商编号");

                entity.Property(e => e.SupplierNameCkts)
                    .HasMaxLength(500)
                    .HasColumnName("SupplierName_Ckts")
                    .HasComment("出口退税--供应商名称");

                entity.Property(e => e.TotalTaxAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("税额");
            });

            modelBuilder.Entity<FinanceRequestProcessOfCashierContract>(entity =>
            {
                entity.ToTable("FinanceRequestProcessOfCashierContract");

                entity.HasIndex(e => e.FId, "IX_FinanceRequestProcessOfCashierContract");

                entity.HasIndex(e => e.ProjectCode, "IX_FinanceRequestProcessOfCashierContract_1");

                entity.HasIndex(e => e.Currency, "IX_FinanceRequestProcessOfCashierContract_2");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyFormNumber).HasMaxLength(30);

                entity.Property(e => e.ApplyName).HasMaxLength(50);

                entity.Property(e => e.BankNoticeNo).HasMaxLength(50);

                entity.Property(e => e.BillAmount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.BuckleWaElecAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("业主代扣水电费");

                entity.Property(e => e.ContractCodeCkts)
                    .HasMaxLength(50)
                    .HasColumnName("ContractCode_Ckts")
                    .HasComment("合同编号(出口退税)");

                entity.Property(e => e.ContractNameCkts)
                    .HasMaxLength(500)
                    .HasColumnName("ContractName_Ckts")
                    .HasComment("合同名称(出口退税)");

                entity.Property(e => e.Currency).HasMaxLength(20);

                entity.Property(e => e.DbankCharges)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("DBankCharges");

                entity.Property(e => e.DraftAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DtaxWithholding)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("DTaxWithholding");

                entity.Property(e => e.DwithholdingAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FId).HasColumnName("F_ID");

                entity.Property(e => e.OtherAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OwnerForfeit)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("业主罚款");

                entity.Property(e => e.OwnersDealWithSubject)
                    .HasMaxLength(50)
                    .HasComment("业主代付选择科目（5401010519--清关服务费,5401010599--其他费用）");

                entity.Property(e => e.PaidAmount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.PayInfoAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PayTheOtherAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("业主代付其他");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectCategory).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(20);

                entity.Property(e => e.ProjectName).HasMaxLength(200);

                entity.Property(e => e.ProjectPayment).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ReceiptAmount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.ReceiveAmount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.ReceiveAmountTotal).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ReceivedType).HasMaxLength(20);

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName")
                    .HasComment("申请人账号");

                entity.Property(e => e.SubjectCode).HasMaxLength(50);

                entity.Property(e => e.SubjectName).HasMaxLength(50);

                entity.Property(e => e.SupplierCodeCkts)
                    .HasMaxLength(50)
                    .HasColumnName("SupplierCode_Ckts")
                    .HasComment("供应商编号(出口退税)");

                entity.Property(e => e.SupplierNameCkts)
                    .HasMaxLength(500)
                    .HasColumnName("SupplierName_Ckts")
                    .HasComment("供应商名称(出口退税)");

                entity.Property(e => e.TelegraphicTransferAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ValueAddedTax).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.WaElecAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.WithholdingOfVat)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("WithholdingOfVAT");
            });

            modelBuilder.Entity<FinanceRequestProcessOfCashierDetail>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AmountCategory).HasComment("金额类别编号");

                entity.Property(e => e.AmountCategoryName)
                    .HasMaxLength(50)
                    .HasComment("金额类别名称");

                entity.Property(e => e.BillCode)
                    .HasMaxLength(50)
                    .HasComment("票据编号");

                entity.Property(e => e.ByAttachment).HasMaxLength(50);

                entity.Property(e => e.InvoiceCategoryText)
                    .HasMaxLength(50)
                    .HasComment("票据类型名称");

                entity.Property(e => e.InvoiceCategoryValue).HasComment("票据类型编号");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("datetime")
                    .HasComment("开票时间");

                entity.Property(e => e.IsTaxVoucher)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'否')")
                    .HasComment("是否单列入账");

                entity.Property(e => e.NotesNumber).HasComment("票据张数");

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.ProcessDigst)
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')")
                    .HasComment("摘要");

                entity.Property(e => e.RCreateTime)
                    .HasMaxLength(50)
                    .HasColumnName("R_CreateTime");

                entity.Property(e => e.RId)
                    .HasMaxLength(36)
                    .HasColumnName("R_ID");

                entity.Property(e => e.RName)
                    .HasMaxLength(50)
                    .HasColumnName("R_name");

                entity.Property(e => e.RTitle)
                    .HasMaxLength(50)
                    .HasColumnName("R_Title");

                entity.Property(e => e.ReceAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ReceBillAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("票额");

                entity.Property(e => e.ReceTaxAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("税额");

                entity.Property(e => e.SubjectCode)
                    .HasMaxLength(50)
                    .HasComment("科目号");

                entity.Property(e => e.SubjectName)
                    .HasMaxLength(200)
                    .HasComment("科目名称");

                entity.Property(e => e.TaxRate)
                    .HasMaxLength(50)
                    .HasComment("税率编号--对应字典表：TCC_BasicData     Flag=\"AmountCategory\"");

                entity.Property(e => e.TaxRateName)
                    .HasMaxLength(50)
                    .HasComment("税率");
            });

            modelBuilder.Entity<FinanceRequestProcessOfPaymentInfo>(entity =>
            {
                entity.ToTable("FinanceRequestProcessOfPaymentInfo");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .HasColumnName("ID")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("合同分类");

                entity.Property(e => e.AccountReCmpCode)
                    .HasMaxLength(50)
                    .HasComment("入账收款单位编号");

                entity.Property(e => e.AccountReCmpName)
                    .HasMaxLength(200)
                    .HasComment("入账收款单位名称");

                entity.Property(e => e.ContractCategory).HasMaxLength(50);

                entity.Property(e => e.ContractCode)
                    .HasMaxLength(50)
                    .HasComment("合同编号");

                entity.Property(e => e.ContractCurrency)
                    .HasMaxLength(20)
                    .HasComment("币种");

                entity.Property(e => e.ContractName)
                    .HasMaxLength(200)
                    .HasComment("合同名称");

                entity.Property(e => e.ContractType)
                    .HasMaxLength(50)
                    .HasComment("合同类型");

                entity.Property(e => e.CrAlPaymentAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("已申请付款金额");

                entity.Property(e => e.CrAlPaymentAmountPer)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("已申请付款比例");

                entity.Property(e => e.CrCurcency)
                    .HasMaxLength(20)
                    .HasComment("合同币种");

                entity.Property(e => e.CrPaymentAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("累计付款金额");

                entity.Property(e => e.CrPaymentAmountPer)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("累计付款比例");

                entity.Property(e => e.Inandoutside)
                    .HasMaxLength(20)
                    .HasColumnName("inandoutside")
                    .HasComment("0 境内 1境外");

                entity.Property(e => e.InvoiceNumber).HasMaxLength(50);

                entity.Property(e => e.ModifiedAmount)
                    .HasMaxLength(50)
                    .HasComment("变更金额");

                entity.Property(e => e.PayInfoType).HasMaxLength(20);

                entity.Property(e => e.PaymentAmountLowercase)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("付款金额（原币）");

                entity.Property(e => e.PaymentAmountOfHse)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PaymentAmountOfHSE")
                    .HasComment("HSE费用");

                entity.Property(e => e.PaymentAmountPercentage)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("付款比例");

                entity.Property(e => e.PaymentAmountUppercase)
                    .HasMaxLength(200)
                    .HasComment("付款金额大写 ");

                entity.Property(e => e.PaymentDescription)
                    .HasMaxLength(50)
                    .HasComment("付款说明");

                entity.Property(e => e.PaymentNode).HasComment("付款节点");

                entity.Property(e => e.PaymentNodeName)
                    .HasMaxLength(50)
                    .HasComment("付款节点名称");

                entity.Property(e => e.PaymentNote).HasMaxLength(200);

                entity.Property(e => e.PaymentTotalTime)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("本次付款后累计金额");

                entity.Property(e => e.PaymentTotalTimePercentage)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("本次付款后累计比例");

                entity.Property(e => e.ProcessId)
                    .HasMaxLength(36)
                    .HasColumnName("ProcessID")
                    .HasComment("外键");

                entity.Property(e => e.ReCmpCode)
                    .HasMaxLength(50)
                    .HasComment("收款单位编号");

                entity.Property(e => e.ReCmpName)
                    .HasMaxLength(200)
                    .HasComment("收款单位名称");

                entity.Property(e => e.ReceiptNumber).HasMaxLength(50);

                entity.Property(e => e.SignAmount)
                    .HasMaxLength(50)
                    .HasComment("签约金额");

                entity.Property(e => e.TotalAmount)
                    .HasMaxLength(50)
                    .HasComment("合同总额");

                entity.Property(e => e.WaElecAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("代扣水电费");
            });

            modelBuilder.Entity<FinanceRequestProcessRefundInfo>(entity =>
            {
                entity.HasKey(e => e.Fid);

                entity.ToTable("FinanceRequestProcessRefundInfo");

                entity.Property(e => e.Fid).HasColumnName("FID");

                entity.Property(e => e.AccountPayCmpCode)
                    .HasMaxLength(50)
                    .HasColumnName("AccountPayCmp_Code");

                entity.Property(e => e.AccountPayCmpName)
                    .HasMaxLength(200)
                    .HasColumnName("AccountPayCmp_Name");

                entity.Property(e => e.AccountReceiveCmpCode)
                    .HasMaxLength(50)
                    .HasColumnName("AccountReceiveCmp_Code");

                entity.Property(e => e.AccountReceiveCmpName)
                    .HasMaxLength(200)
                    .HasColumnName("AccountReceiveCmp_Name");

                entity.Property(e => e.AuditBusinessLoginName).HasMaxLength(20);

                entity.Property(e => e.AuditBusinessName).HasMaxLength(20);

                entity.Property(e => e.AuditProDate).HasColumnType("datetime");

                entity.Property(e => e.FinanceProLoginName).HasMaxLength(20);

                entity.Property(e => e.FinanceProName).HasMaxLength(20);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.MainIncident).HasMaxLength(50);

                entity.Property(e => e.MainProcessName).HasMaxLength(50);

                entity.Property(e => e.MainProjectCode).HasMaxLength(50);

                entity.Property(e => e.MainProjectName).HasMaxLength(200);

                entity.Property(e => e.PayBankCode).HasMaxLength(20);

                entity.Property(e => e.PayBankName).HasMaxLength(200);

                entity.Property(e => e.PayCheque).HasMaxLength(50);

                entity.Property(e => e.ProcessEndDate).HasColumnType("datetime");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.RefundAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RequestDate).HasColumnType("datetime");

                entity.Property(e => e.RequestDeptCode).HasMaxLength(50);

                entity.Property(e => e.RequestDeptName).HasMaxLength(50);

                entity.Property(e => e.RequestLoginName).HasMaxLength(50);

                entity.Property(e => e.RequestPhone).HasMaxLength(50);

                entity.Property(e => e.RequestRealName).HasMaxLength(50);

                entity.Property(e => e.RequestUserIdentity).HasMaxLength(50);

                entity.Property(e => e.Voucherid).HasColumnName("VOUCHERID");
            });

            modelBuilder.Entity<FinanceRequestProcessRquest>(entity =>
            {
                entity.ToTable("FinanceRequestProcessRquest");

                entity.HasIndex(e => e.ProcessId, "IX_FinanceRequestProcessRquest");

                entity.HasIndex(e => e.CurCurrency, "IX_FinanceRequestProcessRquest_1");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .HasColumnName("ID")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("主键");

                entity.Property(e => e.BuckleWaElecAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("业主代扣水电费");

                entity.Property(e => e.Code).HasMaxLength(100);

                entity.Property(e => e.CodeName).HasMaxLength(200);

                entity.Property(e => e.ContanctCode)
                    .HasMaxLength(200)
                    .HasComment("合同编号");

                entity.Property(e => e.CurAddupReceivedAmount)
                    .HasColumnType("decimal(38, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("本次收款后累计收费额");

                entity.Property(e => e.CurAddupReceivedPct)
                    .HasColumnType("decimal(10, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("本次收款后累计收费比例");

                entity.Property(e => e.CurCurrency)
                    .HasMaxLength(10)
                    .HasComment("币种");

                entity.Property(e => e.CurRequestAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("本次收款金额");

                entity.Property(e => e.CurRequestAmountUpp)
                    .HasMaxLength(100)
                    .HasColumnName("CurRequestAmountUPP")
                    .HasComment("本次收款金额大写");

                entity.Property(e => e.Name)
                    .HasMaxLength(200)
                    .HasComment("合同名称");

                entity.Property(e => e.OwnerForfeit)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("业主罚款");

                entity.Property(e => e.ProcessId)
                    .HasMaxLength(36)
                    .HasColumnName("ProcessID")
                    .HasComment("外键");

                entity.Property(e => e.ProjectPayment)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("本次收取工程款");

                entity.Property(e => e.RequestDesc)
                    .HasMaxLength(100)
                    .HasComment("收款说明");

                entity.Property(e => e.RequestMethod)
                    .HasMaxLength(100)
                    .HasComment("收款方式");

                entity.Property(e => e.RequestNode)
                    .HasMaxLength(20)
                    .HasComment("收款节点");

                entity.Property(e => e.Taxwithholding)
                    .HasColumnType("decimal(38, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("代扣税金");

                entity.Property(e => e.ValueAddedTax)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("本次收取增值税");

                entity.Property(e => e.WithholdingAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("业主代扣额");

                entity.Property(e => e.WithholdingOfVat)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("WithholdingOfVAT")
                    .HasDefaultValueSql("((0))")
                    .HasComment("代扣增值税");
            });

            modelBuilder.Entity<FlowNoticedMessage>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FlowNoticedMessage");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MType).HasColumnName("M_Type");

                entity.Property(e => e.MessageBody).HasMaxLength(200);

                entity.Property(e => e.MessageTitle).HasMaxLength(100);

                entity.Property(e => e.ProcessName).HasMaxLength(50);
            });

            modelBuilder.Entity<FuncItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FuncItem");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<FuncMember>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FuncMember");

                entity.Property(e => e.FuncItemId).HasColumnName("FuncItemID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MemberAccount).HasMaxLength(50);

                entity.Property(e => e.MemberName).HasMaxLength(100);

                entity.Property(e => e.MemberType).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<Hli>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("hli");

                entity.Property(e => e.合同编号).HasMaxLength(255);
            });

            modelBuilder.Entity<HotfixAward>(entity =>
            {
                entity.ToTable("Hotfix_Award");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FixMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserIdentityId).HasMaxLength(50);
            });

            modelBuilder.Entity<Hrp2>(entity =>
            {
                entity.ToTable("hrp2");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Addr)
                    .HasMaxLength(200)
                    .HasColumnName("addr");

                entity.Property(e => e.ContractType)
                    .HasMaxLength(50)
                    .HasColumnName("contract_type");

                entity.Property(e => e.Isfinish)
                    .HasMaxLength(20)
                    .HasColumnName("isfinish");

                entity.Property(e => e.ProjectCategory)
                    .HasMaxLength(20)
                    .HasColumnName("project_category");

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(20)
                    .HasColumnName("project_id");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(200)
                    .HasColumnName("project_name");

                entity.Property(e => e.Xmjl)
                    .HasMaxLength(20)
                    .HasColumnName("xmjl");
            });

            modelBuilder.Entity<Hrp23>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("hrp23");

                entity.Property(e => e.Abacode)
                    .HasMaxLength(200)
                    .HasColumnName("abacode");

                entity.Property(e => e.Bgje)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("bgje");

                entity.Property(e => e.Bz)
                    .HasMaxLength(20)
                    .HasColumnName("bz");

                entity.Property(e => e.ContType)
                    .HasMaxLength(20)
                    .HasColumnName("cont_type");

                entity.Property(e => e.Htbh)
                    .HasMaxLength(20)
                    .HasColumnName("htbh");

                entity.Property(e => e.Htmc)
                    .HasMaxLength(50)
                    .HasColumnName("htmc");

                entity.Property(e => e.Htqyje)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("htqyje");

                entity.Property(e => e.Htxs)
                    .HasMaxLength(50)
                    .HasColumnName("htxs");

                entity.Property(e => e.Htze)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("htze");

                entity.Property(e => e.Khh)
                    .HasMaxLength(200)
                    .HasColumnName("khh");

                entity.Property(e => e.Khhzh)
                    .HasMaxLength(200)
                    .HasColumnName("khhzh");

                entity.Property(e => e.Khhzi)
                    .HasMaxLength(200)
                    .HasColumnName("khhzi");

                entity.Property(e => e.Lbancode)
                    .HasMaxLength(200)
                    .HasColumnName("lbancode");

                entity.Property(e => e.Lhhh)
                    .HasMaxLength(200)
                    .HasColumnName("lhhh");

                entity.Property(e => e.Myfs)
                    .HasMaxLength(200)
                    .HasColumnName("myfs");

                entity.Property(e => e.ProjId)
                    .HasMaxLength(20)
                    .HasColumnName("proj_id");

                entity.Property(e => e.Skdwbh)
                    .HasMaxLength(200)
                    .HasColumnName("skdwbh");

                entity.Property(e => e.Skdwdz)
                    .HasMaxLength(200)
                    .HasColumnName("skdwdz");

                entity.Property(e => e.Skdwmc)
                    .HasMaxLength(200)
                    .HasColumnName("skdwmc");

                entity.Property(e => e.Swiftcode)
                    .HasMaxLength(200)
                    .HasColumnName("swiftcode");

                entity.Property(e => e.Ysfs)
                    .HasMaxLength(200)
                    .HasColumnName("ysfs");
            });

            modelBuilder.Entity<Hrp26>(entity =>
            {
                entity.ToTable("hrp26");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Bghje)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("bghje");

                entity.Property(e => e.Bgje)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("bgje");

                entity.Property(e => e.DeptId)
                    .HasMaxLength(20)
                    .HasColumnName("dept_id");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .HasColumnName("dept_name");

                entity.Property(e => e.Gsje)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("gsje");

                entity.Property(e => e.Htbh)
                    .HasMaxLength(30)
                    .HasColumnName("htbh");

                entity.Property(e => e.Htje)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("htje");

                entity.Property(e => e.Htlx)
                    .HasMaxLength(30)
                    .HasColumnName("htlx");

                entity.Property(e => e.Htmc)
                    .HasMaxLength(500)
                    .HasColumnName("htmc");

                entity.Property(e => e.HtqdrName)
                    .HasMaxLength(20)
                    .HasColumnName("htqdr_name");

                entity.Property(e => e.Htqdrq)
                    .HasMaxLength(20)
                    .HasColumnName("htqdrq");

                entity.Property(e => e.Proid)
                    .HasMaxLength(200)
                    .HasColumnName("proid");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(200)
                    .HasColumnName("project_name");

                entity.Property(e => e.Swjl1Name)
                    .HasMaxLength(30)
                    .HasColumnName("swjl1_name");

                entity.Property(e => e.Swjl1Sfzh)
                    .HasMaxLength(30)
                    .HasColumnName("swjl1_sfzh");

                entity.Property(e => e.Swjl2Name)
                    .HasMaxLength(20)
                    .HasColumnName("swjl2_name");

                entity.Property(e => e.Swjl2Sfzh)
                    .HasMaxLength(20)
                    .HasColumnName("swjl2_sfzh");

                entity.Property(e => e.XmjlName)
                    .HasMaxLength(200)
                    .HasColumnName("xmjl_name");
            });

            modelBuilder.Entity<HrpManagementAward>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DeptId)
                    .HasMaxLength(20)
                    .HasColumnName("dept_id");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .HasColumnName("dept_name");

                entity.Property(e => e.Htbh)
                    .HasMaxLength(30)
                    .HasColumnName("htbh");

                entity.Property(e => e.Htje)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("htje");

                entity.Property(e => e.Htmc)
                    .HasMaxLength(500)
                    .HasColumnName("htmc");

                entity.Property(e => e.Htqdrq)
                    .HasMaxLength(20)
                    .HasColumnName("htqdrq");

                entity.Property(e => e.Swjl1Name)
                    .HasMaxLength(30)
                    .HasColumnName("swjl1_name");

                entity.Property(e => e.Swjl1Sfzh)
                    .HasMaxLength(30)
                    .HasColumnName("swjl1_sfzh");

                entity.Property(e => e.Swjl2Name)
                    .HasMaxLength(30)
                    .HasColumnName("swjl2_name");

                entity.Property(e => e.Swjl2Sfzh)
                    .HasMaxLength(30)
                    .HasColumnName("swjl2_sfzh");
            });

            modelBuilder.Entity<HrpOrg>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("hrp_org");

                entity.Property(e => e.Childid)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("childid");

                entity.Property(e => e.Codeitemdesc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("codeitemdesc");

                entity.Property(e => e.Codeitemid)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("codeitemid");

                entity.Property(e => e.Codesetid)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("codesetid");

                entity.Property(e => e.Corcode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("corcode");

                entity.Property(e => e.EndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("end_date");

                entity.Property(e => e.Flag).HasColumnName("flag");

                entity.Property(e => e.Grade).HasColumnName("grade");

                entity.Property(e => e.Invalid).HasColumnName("invalid");

                entity.Property(e => e.Layer).HasColumnName("layer");

                entity.Property(e => e.Parentid)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("parentid");

                entity.Property(e => e.PosCond)
                    .HasColumnType("text")
                    .HasColumnName("pos_cond");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("start_date");

                entity.Property(e => e.State)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("state");
            });

            modelBuilder.Entity<HrpUsr>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("hrp_usr");

                entity.Property(e => e.A0100)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.A0101)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.A0107)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.A0111).HasColumnType("datetime");

                entity.Property(e => e.A0114)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.A0117)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.A0121)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.A0124)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.A0127)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.A0141).HasColumnType("datetime");

                entity.Property(e => e.A0144).HasColumnType("datetime");

                entity.Property(e => e.A0164)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.A0171)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.A0177)
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.A01z0)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("A01Z0");

                entity.Property(e => e.B0110)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.C0102)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.C0103)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.C0108)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.C0109)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.C010b)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("C010B");

                entity.Property(e => e.C010c)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("C010C");

                entity.Property(e => e.C010d)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("C010D");

                entity.Property(e => e.C010e)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("C010E");

                entity.Property(e => e.C010f)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("C010F");

                entity.Property(e => e.C010g)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("C010G");

                entity.Property(e => e.C010h)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("C010H");

                entity.Property(e => e.C010i)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("C010I");

                entity.Property(e => e.C010k)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("C010K");

                entity.Property(e => e.C010l)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("C010L");

                entity.Property(e => e.C010n)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("C010N");

                entity.Property(e => e.C010o)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("C010O");

                entity.Property(e => e.C010p)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("C010P");

                entity.Property(e => e.C010q)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("C010Q");

                entity.Property(e => e.C010r)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("C010R");

                entity.Property(e => e.C0110)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.C011a)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("C011A");

                entity.Property(e => e.C011i)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("c011i");

                entity.Property(e => e.C0124)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.C0142)
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.C0181)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.C0183).HasColumnType("datetime");

                entity.Property(e => e.C0184).HasColumnType("datetime");

                entity.Property(e => e.C01sc)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("C01SC");

                entity.Property(e => e.C01tc)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("C01TC");

                entity.Property(e => e.C01vc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("C01VC");

                entity.Property(e => e.C01wc)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("C01WC");

                entity.Property(e => e.C01xc)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("C01XC");

                entity.Property(e => e.C01yc)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("C01YC");

                entity.Property(e => e.C01zc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("C01ZC");

                entity.Property(e => e.C01zd)
                    .HasColumnType("datetime")
                    .HasColumnName("C01ZD");

                entity.Property(e => e.C01ze)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("C01ZE");

                entity.Property(e => e.C01zf)
                    .HasColumnType("datetime")
                    .HasColumnName("C01ZF");

                entity.Property(e => e.C01zh)
                    .HasColumnType("datetime")
                    .HasColumnName("C01ZH");

                entity.Property(e => e.C01zi)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("C01ZI");

                entity.Property(e => e.C01zk)
                    .HasColumnType("datetime")
                    .HasColumnName("C01ZK");

                entity.Property(e => e.C01zm)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("C01ZM");

                entity.Property(e => e.C01zn)
                    .HasColumnType("datetime")
                    .HasColumnName("C01ZN");

                entity.Property(e => e.C01zo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("C01ZO");

                entity.Property(e => e.C01zp)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("C01ZP");

                entity.Property(e => e.C01zq)
                    .HasColumnType("datetime")
                    .HasColumnName("C01ZQ");

                entity.Property(e => e.C01zr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("C01ZR");

                entity.Property(e => e.C01zs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("C01ZS");

                entity.Property(e => e.C01zt).HasColumnName("C01ZT");

                entity.Property(e => e.C01zu)
                    .HasColumnType("datetime")
                    .HasColumnName("C01ZU");

                entity.Property(e => e.C01zz)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("C01ZZ");

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.CreateUserName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.E0116)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.E0122)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.E01a1)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("E01A1");

                entity.Property(e => e.E0340).HasColumnType("datetime");

                entity.Property(e => e.Groups)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModTime).HasColumnType("datetime");

                entity.Property(e => e.ModTime1).HasColumnType("datetime");

                entity.Property(e => e.ModUserName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Poweronid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("poweronid");

                entity.Property(e => e.State)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserPassword)
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HrpVisitRele>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("hrp_visitRele");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .HasColumnName("deptName");

                entity.Property(e => e.EEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("eEndDate");

                entity.Property(e => e.MStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("mStartDate");

                entity.Property(e => e.Mreason)
                    .HasMaxLength(50)
                    .HasColumnName("mreason");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.UserKey).HasMaxLength(50);

                entity.Property(e => e.UserName).HasMaxLength(50);
            });

            modelBuilder.Entity<Hrpsk>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("hrpsk");

                entity.HasIndex(e => e.Proid, "IX_AutoGen_20140724_1384");

                entity.HasIndex(e => e.Proid, "IX_AutoGen_20140724_1386");

                entity.Property(e => e.Beizhu)
                    .HasMaxLength(100)
                    .HasColumnName("beizhu");

                entity.Property(e => e.Dzri)
                    .HasColumnType("datetime")
                    .HasColumnName("dzri");

                entity.Property(e => e.Hl)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("hl");

                entity.Property(e => e.Lururen)
                    .HasMaxLength(50)
                    .HasColumnName("lururen");

                entity.Property(e => e.Lurusj)
                    .HasColumnType("datetime")
                    .HasColumnName("lurusj");

                entity.Property(e => e.Money).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Payfs)
                    .HasMaxLength(100)
                    .HasColumnName("payfs");

                entity.Property(e => e.Paymc)
                    .HasMaxLength(100)
                    .HasColumnName("paymc");

                entity.Property(e => e.Payyh)
                    .HasMaxLength(100)
                    .HasColumnName("payyh");

                entity.Property(e => e.Payyhzh)
                    .HasMaxLength(100)
                    .HasColumnName("payyhzh");

                entity.Property(e => e.Proid)
                    .HasMaxLength(50)
                    .HasColumnName("proid");

                entity.Property(e => e.ProjectManager)
                    .HasMaxLength(50)
                    .HasColumnName("project_Manager");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(50)
                    .HasColumnName("project_name");

                entity.Property(e => e.Rmbje)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("RMBJE");

                entity.Property(e => e.Skmc)
                    .HasMaxLength(50)
                    .HasColumnName("skmc");
            });

            modelBuilder.Entity<HtLocation>(entity =>
            {
                entity.ToTable("ht_location");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.Level)
                    .HasMaxLength(50)
                    .HasColumnName("level");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name");

                entity.Property(e => e.NameEn).HasColumnName("name_en");

                entity.Property(e => e.NamePinyin).HasColumnName("name_pinyin");

                entity.Property(e => e.Path)
                    .HasMaxLength(50)
                    .HasColumnName("path");

                entity.Property(e => e.Pid).HasColumnName("pid");
            });

            modelBuilder.Entity<InformationKd001>(entity =>
            {
                entity.ToTable("Information_kd001");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Arrivecode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FromCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Nfare).HasColumnName("NFare");
            });

            modelBuilder.Entity<JgGeneralBudgetIndividual>(entity =>
            {
                entity.ToTable("JG_GeneralBudget_Individual");

                entity.Property(e => e.AccountCode).HasMaxLength(50);

                entity.Property(e => e.AccountName).HasMaxLength(50);

                entity.Property(e => e.BudgetAmount).HasColumnType("decimal(18, 1)");

                entity.Property(e => e.FirAccountName).HasMaxLength(50);

                entity.Property(e => e.PAccountCode)
                    .HasMaxLength(50)
                    .HasColumnName("pAccountCode");

                entity.Property(e => e.PAccountId).HasColumnName("pAccountId");

                entity.Property(e => e.PAccountName)
                    .HasMaxLength(50)
                    .HasColumnName("pAccountName");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.SecAccountName).HasMaxLength(50);
            });

            modelBuilder.Entity<Kdlog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("KDlog");

                entity.Property(e => e.Sqltxt).HasColumnName("sqltxt");
            });

            modelBuilder.Entity<KqgcTest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("kqgcTest");

                entity.Property(e => e.事由)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.关联单号)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.姓名)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.审批人)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.审批时间).HasColumnType("datetime");

                entity.Property(e => e.状态)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.申请单号)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.申请时间).HasColumnType("datetime");

                entity.Property(e => e.终止日期).HasColumnType("datetime");

                entity.Property(e => e.起始日期).HasColumnType("datetime");

                entity.Property(e => e.身份证号)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Kqsqtest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("KQSQTEST");

                entity.Property(e => e.单位领导)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.单位领导意见)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.单号)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.审批时间).HasColumnType("datetime");

                entity.Property(e => e.审批结果)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.状态)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.申请日期).HasColumnType("datetime");

                entity.Property(e => e.结束时间).HasColumnType("datetime");

                entity.Property(e => e.请假事由)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.请假类别)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.起始时间).HasColumnType("datetime");

                entity.Property(e => e.身份证号)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.部门领导)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.部门领导意见)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LandrayBorrowMoneyInfo>(entity =>
            {
                entity.ToTable("Landray_BorrowMoneyInfo");

                entity.Property(e => e.Id)
                    .HasMaxLength(10)
                    .HasColumnName("id")
                    .IsFixedLength(true);

                entity.Property(e => e.BorrowMoneySmall)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BorrowMoney_Small")
                    .HasComment("借款折人民币金额");

                entity.Property(e => e.BorrowType).HasComment("借款类型");

                entity.Property(e => e.BorrowTypeText)
                    .HasMaxLength(40)
                    .HasComment("借款类型描述");

                entity.Property(e => e.ConfirmDate)
                    .HasColumnType("datetime")
                    .HasComment("入账时间");

                entity.Property(e => e.ConfirmStatus)
                    .HasMaxLength(100)
                    .HasComment("入账状态");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasComment("创建时间");

                entity.Property(e => e.CurrencyAb)
                    .HasMaxLength(40)
                    .HasColumnName("CurrencyAB")
                    .HasComment("币种");

                entity.Property(e => e.Incident).HasComment("实例号");

                entity.Property(e => e.LandrayFormCode)
                    .HasMaxLength(100)
                    .HasComment("蓝凌表单编号");

                entity.Property(e => e.MoneyYb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MONEY_YB")
                    .HasComment("借款原币金额");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(1000)
                    .HasComment("流程名称");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(400)
                    .HasComment("项目号");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(4000)
                    .HasComment("项目名称");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("汇率");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(100)
                    .HasColumnName("Request_DeptCode")
                    .HasComment("部门编码");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(400)
                    .HasColumnName("Request_DeptName")
                    .HasComment("部门名称");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(100)
                    .HasColumnName("Request_LoginName")
                    .HasComment("登陆人账号");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(200)
                    .HasColumnName("Request_RealName");

                entity.Property(e => e.RequestUserIdentity)
                    .HasMaxLength(100)
                    .HasColumnName("Request_UserIdentity")
                    .HasComment("登陆人身份证号码");

                entity.Property(e => e.Status).HasComment("状态（1、已冲借；2、已占用；3、已撤销）");

                entity.Property(e => e.ToDomesticOversea).HasComment("境内外");

                entity.Property(e => e.UpdateTime)
                    .HasColumnType("datetime")
                    .HasComment("更新时间");
            });

            modelBuilder.Entity<LandrayRecDocument>(entity =>
            {
                entity.HasKey(e => e.NewId)
                    .HasName("PK__LandrayR__7CC3769E214232FC");

                entity.ToTable("LandrayRecDocument");

                entity.Property(e => e.NewId).HasColumnName("NewID");

                entity.Property(e => e.ApplyDate).HasColumnType("datetime");

                entity.Property(e => e.ApplyLoginUser).HasMaxLength(50);

                entity.Property(e => e.ApplyName).HasMaxLength(50);

                entity.Property(e => e.AttAsdocId)
                    .IsUnicode(false)
                    .HasColumnName("Att_ASDocID");

                entity.Property(e => e.AttDocType).HasComment("1 正文 2 附件");

                entity.Property(e => e.AttFileId).HasMaxLength(50);

                entity.Property(e => e.DeadLine).HasColumnType("datetime");

                entity.Property(e => e.DocTitle).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.HasOpinion).HasColumnName("hasOpinion");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InfoOpen).HasMaxLength(50);

                entity.Property(e => e.IsReport).HasMaxLength(50);

                entity.Property(e => e.MainSendDeptLeader).HasColumnName("mainSendDeptLeader");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.RecDocDate).HasColumnType("datetime");

                entity.Property(e => e.RecDocNo).HasMaxLength(50);

                entity.Property(e => e.SenDocCorp).HasMaxLength(50);

                entity.Property(e => e.SenDocNo).HasMaxLength(50);

                entity.Property(e => e.SendDocDate).HasColumnType("datetime");

                entity.Property(e => e.YbleaderNum).HasColumnName("YBLeaderNum");
            });

            modelBuilder.Entity<LandraySenDocument>(entity =>
            {
                entity.HasKey(e => e.NewId)
                    .HasName("PK__LandrayS__7CC3769E1D71A218");

                entity.ToTable("LandraySenDocument");

                entity.Property(e => e.NewId).HasColumnName("NewID");

                entity.Property(e => e.ApplyDate).HasColumnType("datetime");

                entity.Property(e => e.ApplyDept).HasMaxLength(50);

                entity.Property(e => e.ApplyDeptNo).HasMaxLength(50);

                entity.Property(e => e.ApplyLoginUser).HasMaxLength(50);

                entity.Property(e => e.ApplyName).HasMaxLength(50);

                entity.Property(e => e.AttAsdocId)
                    .IsUnicode(false)
                    .HasColumnName("Att_ASDocID");

                entity.Property(e => e.AttDocType).HasComment("1 正文 2 附件");

                entity.Property(e => e.CoptyToLeaderId).HasColumnName("copty_to_leader_id");

                entity.Property(e => e.DocFileId).HasMaxLength(50);

                entity.Property(e => e.DocType).HasMaxLength(50);

                entity.Property(e => e.Exammark).HasMaxLength(500);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.HegaoContent).HasColumnName("hegao_content");

                entity.Property(e => e.HegaoPerson)
                    .HasMaxLength(50)
                    .HasColumnName("hegao_person");

                entity.Property(e => e.HegaoPersonId)
                    .HasMaxLength(50)
                    .HasColumnName("hegao_person_id");

                entity.Property(e => e.HegaoTime)
                    .HasColumnType("datetime")
                    .HasColumnName("hegao_time");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InfoOpen)
                    .HasMaxLength(50)
                    .HasColumnName("infoOpen");

                entity.Property(e => e.IsExam).HasMaxLength(50);

                entity.Property(e => e.Oaid)
                    .HasMaxLength(50)
                    .HasColumnName("OAId");

                entity.Property(e => e.Optionmark).HasMaxLength(500);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.QianfaContent).HasColumnName("qianfa_content");

                entity.Property(e => e.QianfaPerson)
                    .HasMaxLength(50)
                    .HasColumnName("qianfa_person");

                entity.Property(e => e.QianfaPersonId)
                    .HasMaxLength(50)
                    .HasColumnName("qianfa_person_id");

                entity.Property(e => e.QianfaTime)
                    .HasColumnType("datetime")
                    .HasColumnName("qianfa_time");

                entity.Property(e => e.SendDocDate).HasColumnType("datetime");

                entity.Property(e => e.SendDocNo).HasMaxLength(50);

                entity.Property(e => e.SendFw).HasMaxLength(50);

                entity.Property(e => e.SendKind).HasMaxLength(50);

                entity.Property(e => e.SendNo).HasColumnName("sendNo");

                entity.Property(e => e.SendToLeaderId).HasColumnName("send_to_leader_id");

                entity.Property(e => e.SendType).HasMaxLength(50);

                entity.Property(e => e.SendUnit)
                    .HasMaxLength(50)
                    .HasColumnName("send_unit");

                entity.Property(e => e.SendUnitId)
                    .HasMaxLength(50)
                    .HasColumnName("send_unit_id");

                entity.Property(e => e.Sendmark).HasMaxLength(500);

                entity.Property(e => e.XmlToYonyou).HasColumnName("xmlToYonyou");
            });

            modelBuilder.Entity<LandrayUserAbroadInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Landray_UserAbroadInfo");

                entity.Property(e => e.AimCity).HasMaxLength(100);

                entity.Property(e => e.AimCountry).HasMaxLength(100);

                entity.Property(e => e.BeginDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LeaveCity).HasMaxLength(100);

                entity.Property(e => e.LeaveCountry).HasMaxLength(100);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.ProjectName).HasMaxLength(600);

                entity.Property(e => e.ProjectNo).HasMaxLength(50);

                entity.Property(e => e.RequestDeptNo).HasMaxLength(50);

                entity.Property(e => e.RequestRealName).HasMaxLength(50);

                entity.Property(e => e.RoadInfo).HasMaxLength(300);

                entity.Property(e => e.Sid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("sid");

                entity.Property(e => e.TaskType).HasMaxLength(50);

                entity.Property(e => e.Tvcountry)
                    .HasMaxLength(300)
                    .HasColumnName("TVCountry");

                entity.Property(e => e.Url)
                    .HasMaxLength(300)
                    .HasColumnName("url");

                entity.Property(e => e.UserKey).HasMaxLength(50);
            });

            modelBuilder.Entity<Log>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("log");

                entity.Property(e => e.Nvarchar)
                    .HasMaxLength(4000)
                    .HasColumnName("nvarchar");
            });

            modelBuilder.Entity<MeetInfo>(entity =>
            {
                entity.HasKey(e => e.MeetId);

                entity.ToTable("MeetInfo");

                entity.Property(e => e.MeetId).HasColumnName("MeetID");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.MeetFare).HasColumnType("money");

                entity.Property(e => e.MeetRoom).HasMaxLength(50);

                entity.Property(e => e.MeetingCode).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.RoomCode).HasMaxLength(50);

                entity.Property(e => e.RoomFare).HasColumnType("money");

                entity.Property(e => e.ServiceFare).HasColumnType("money");

                entity.Property(e => e.VoteCode).HasMaxLength(50);

                entity.Property(e => e.VoteDeadline).HasColumnType("datetime");

                entity.Property(e => e.VoteOption).HasMaxLength(50);
            });

            modelBuilder.Entity<MessageOnTimeSend>(entity =>
            {
                entity.ToTable("Message_OnTimeSend");

                entity.Property(e => e.MsContent).HasColumnName("MS_Content");

                entity.Property(e => e.MsCreateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MS_CreateDate")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MsIncidentNo).HasColumnName("MS_IncidentNo");

                entity.Property(e => e.MsIsSendToTable)
                    .HasColumnName("MS_IsSendToTable")
                    .HasDefaultValueSql("((0))")
                    .HasComment("是否插入到MessageSend表中,1标识是，0标识否");

                entity.Property(e => e.MsProcessName)
                    .HasMaxLength(200)
                    .HasColumnName("MS_ProcessName");

                entity.Property(e => e.MsSendTime)
                    .HasColumnType("datetime")
                    .HasColumnName("MS_SendTime")
                    .HasComment("指定向MessageSend表插入的时间");

                entity.Property(e => e.MsStatus)
                    .HasColumnName("MS_Status")
                    .HasDefaultValueSql("((0))")
                    .HasComment("状态，0：正常，1:流程撤销失败");

                entity.Property(e => e.MsTitle).HasColumnName("MS_Title");

                entity.Property(e => e.MsTo)
                    .HasMaxLength(50)
                    .HasColumnName("MS_TO");
            });

            modelBuilder.Entity<MessageSend>(entity =>
            {
                entity.HasKey(e => e.MsId)
                    .HasName("PK_MessageSend2");

                entity.ToTable("MessageSend");

                entity.HasIndex(e => e.MsProcessName, "IX_AutoGen_20140724_12460");

                entity.HasIndex(e => new { e.MsProcessName, e.MsIncidentNo, e.MsStepName }, "ProcessName_Incident_StepName");

                entity.Property(e => e.MsId).HasColumnName("MS_Id");

                entity.Property(e => e.MsContent)
                    .HasMaxLength(1000)
                    .HasColumnName("MS_Content");

                entity.Property(e => e.MsCreateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("MS_CreateTime");

                entity.Property(e => e.MsFrom)
                    .HasMaxLength(100)
                    .HasColumnName("MS_From");

                entity.Property(e => e.MsIncidentNo).HasColumnName("MS_IncidentNo");

                entity.Property(e => e.MsIsReadNotice).HasColumnName("MS_IsReadNotice");

                entity.Property(e => e.MsIsSendMail).HasColumnName("MS_IsSendMail");

                entity.Property(e => e.MsIsSendMobile).HasColumnName("MS_IsSendMobile");

                entity.Property(e => e.MsIsSendOther).HasColumnName("MS_IsSendOther");

                entity.Property(e => e.MsOpenUrl)
                    .HasMaxLength(1000)
                    .HasColumnName("MS_OpenUrl");

                entity.Property(e => e.MsProcessName)
                    .HasMaxLength(1000)
                    .HasColumnName("MS_ProcessName");

                entity.Property(e => e.MsStepName)
                    .HasMaxLength(100)
                    .HasColumnName("MS_StepName");

                entity.Property(e => e.MsThirdpartyId)
                    .HasMaxLength(100)
                    .HasColumnName("MS_ThirdpartyId");

                entity.Property(e => e.MsTitle)
                    .HasMaxLength(1000)
                    .HasColumnName("MS_Title");

                entity.Property(e => e.MsTo)
                    .HasMaxLength(4000)
                    .HasColumnName("MS_To");

                entity.Property(e => e.MstCode)
                    .HasMaxLength(100)
                    .HasColumnName("MST_Code");
            });

            modelBuilder.Entity<MessageSendMailError>(entity =>
            {
                entity.HasKey(e => e.MseId);

                entity.ToTable("MessageSendMailError");

                entity.Property(e => e.MseId).HasColumnName("MSE_Id");

                entity.Property(e => e.MsId).HasColumnName("MS_Id");

                entity.Property(e => e.MseContent)
                    .HasMaxLength(4000)
                    .HasColumnName("MSE_Content");

                entity.Property(e => e.MseCreateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("MSE_CreateTime");

                entity.Property(e => e.MseLastSendTime)
                    .HasColumnType("datetime")
                    .HasColumnName("MSE_LastSendTime");

                entity.Property(e => e.MseMail)
                    .HasMaxLength(100)
                    .HasColumnName("MSE_Mail");

                entity.Property(e => e.MseResult).HasColumnName("MSE_Result");

                entity.Property(e => e.MseResultDesc)
                    .HasColumnType("text")
                    .HasColumnName("MSE_ResultDesc");

                entity.Property(e => e.MseSendCount).HasColumnName("MSE_SendCount");

                entity.Property(e => e.MseTitle)
                    .HasMaxLength(4000)
                    .HasColumnName("MSE_Title");

                entity.Property(e => e.MseTo)
                    .HasMaxLength(100)
                    .HasColumnName("MSE_To");
            });

            modelBuilder.Entity<MessageSendRecord>(entity =>
            {
                entity.HasKey(e => e.MsrId);

                entity.ToTable("MessageSendRecord");

                entity.HasIndex(e => e.MsrProcessName, "IX_AutoGen_20140724_5466");

                entity.HasIndex(e => e.MsrSendTime, "IX_AutoGen_20140724_5468");

                entity.Property(e => e.MsrId).HasColumnName("MSR_Id");

                entity.Property(e => e.MsrContent)
                    .HasMaxLength(1000)
                    .HasColumnName("MSR_Content");

                entity.Property(e => e.MsrFromUser)
                    .HasMaxLength(100)
                    .HasColumnName("MSR_FromUser");

                entity.Property(e => e.MsrIncidentNo).HasColumnName("MSR_IncidentNo");

                entity.Property(e => e.MsrProcessName)
                    .HasMaxLength(100)
                    .HasColumnName("MSR_ProcessName");

                entity.Property(e => e.MsrResult).HasColumnName("MSR_Result");

                entity.Property(e => e.MsrResultDesc)
                    .HasMaxLength(1000)
                    .HasColumnName("MSR_ResultDesc");

                entity.Property(e => e.MsrSendTime)
                    .HasColumnType("datetime")
                    .HasColumnName("MSR_SendTime");

                entity.Property(e => e.MsrStepName)
                    .HasMaxLength(100)
                    .HasColumnName("MSR_StepName");

                entity.Property(e => e.MsrTarget)
                    .HasMaxLength(1000)
                    .HasColumnName("MSR_Target");

                entity.Property(e => e.MsrTitle)
                    .HasMaxLength(1000)
                    .HasColumnName("MSR_Title");

                entity.Property(e => e.MsrToUser)
                    .HasMaxLength(100)
                    .HasColumnName("MSR_ToUser");

                entity.Property(e => e.MsrType).HasColumnName("MSR_Type");

                entity.Property(e => e.MstCode)
                    .HasMaxLength(100)
                    .HasColumnName("MST_Code");
            });

            modelBuilder.Entity<MessageSendTempNew>(entity =>
            {
                entity.HasKey(e => e.MsId)
                    .HasName("PK_MessageSendTemp");

                entity.ToTable("MessageSend_Temp_New");

                entity.Property(e => e.MsId)
                    .HasColumnName("MS_Id")
                    .HasComment("ID");

                entity.Property(e => e.MsContent)
                    .HasMaxLength(1000)
                    .HasColumnName("MS_Content")
                    .HasComment("内容");

                entity.Property(e => e.MsCreateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("MS_CreateTime")
                    .HasComment("创建时间");

                entity.Property(e => e.MsFrom)
                    .HasMaxLength(100)
                    .HasColumnName("MS_From")
                    .HasComment("发送人");

                entity.Property(e => e.MsIncidentNo)
                    .HasColumnName("MS_IncidentNo")
                    .HasComment("实例号");

                entity.Property(e => e.MsIsReadNotice)
                    .HasColumnName("MS_IsReadNotice")
                    .HasComment("是否已读");

                entity.Property(e => e.MsIsSendMail)
                    .HasColumnName("MS_IsSendMail")
                    .HasComment("是否邮件");

                entity.Property(e => e.MsIsSendMobile)
                    .HasColumnName("MS_IsSendMobile")
                    .HasComment("是否短信");

                entity.Property(e => e.MsIsSendOther)
                    .HasColumnName("MS_IsSendOther")
                    .HasComment("是否其他");

                entity.Property(e => e.MsOpenUrl)
                    .HasMaxLength(1000)
                    .HasColumnName("MS_OpenUrl")
                    .HasComment("URL");

                entity.Property(e => e.MsProcessName)
                    .HasMaxLength(1000)
                    .HasColumnName("MS_ProcessName")
                    .HasComment("流程名");

                entity.Property(e => e.MsStepName)
                    .HasMaxLength(100)
                    .HasColumnName("MS_StepName")
                    .HasComment("步骤名");

                entity.Property(e => e.MsThirdpartyId)
                    .HasMaxLength(100)
                    .HasColumnName("MS_ThirdpartyId")
                    .HasComment("第三方标识");

                entity.Property(e => e.MsTitle)
                    .HasMaxLength(1000)
                    .HasColumnName("MS_Title")
                    .HasComment("标题");

                entity.Property(e => e.MsTo)
                    .HasMaxLength(4000)
                    .HasColumnName("MS_To")
                    .HasComment("接收人");

                entity.Property(e => e.MsType)
                    .HasMaxLength(100)
                    .HasColumnName("MS_Type")
                    .HasComment("提醒类型");

                entity.Property(e => e.MstCode)
                    .HasMaxLength(100)
                    .HasColumnName("MST_Code")
                    .HasComment("编号");
            });

            modelBuilder.Entity<MessageSendTemporary>(entity =>
            {
                entity.HasKey(e => e.MsId)
                    .HasName("PK_MessageSend3");

                entity.ToTable("MessageSend_Temporary");

                entity.Property(e => e.MsId).HasColumnName("MS_Id");

                entity.Property(e => e.MsContent)
                    .HasMaxLength(1000)
                    .HasColumnName("MS_Content");

                entity.Property(e => e.MsCreateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("MS_CreateTime");

                entity.Property(e => e.MsFrom)
                    .HasMaxLength(100)
                    .HasColumnName("MS_From");

                entity.Property(e => e.MsIncidentNo).HasColumnName("MS_IncidentNo");

                entity.Property(e => e.MsIsReadNotice).HasColumnName("MS_IsReadNotice");

                entity.Property(e => e.MsIsSendMail).HasColumnName("MS_IsSendMail");

                entity.Property(e => e.MsIsSendMobile).HasColumnName("MS_IsSendMobile");

                entity.Property(e => e.MsIsSendOther).HasColumnName("MS_IsSendOther");

                entity.Property(e => e.MsOpenUrl)
                    .HasMaxLength(1000)
                    .HasColumnName("MS_OpenUrl");

                entity.Property(e => e.MsProcessName)
                    .HasMaxLength(1000)
                    .HasColumnName("MS_ProcessName");

                entity.Property(e => e.MsStepName)
                    .HasMaxLength(100)
                    .HasColumnName("MS_StepName");

                entity.Property(e => e.MsThirdpartyId)
                    .HasMaxLength(100)
                    .HasColumnName("MS_ThirdpartyId");

                entity.Property(e => e.MsTitle)
                    .HasMaxLength(1000)
                    .HasColumnName("MS_Title");

                entity.Property(e => e.MsTo)
                    .HasMaxLength(4000)
                    .HasColumnName("MS_To");

                entity.Property(e => e.MstCode)
                    .HasMaxLength(100)
                    .HasColumnName("MST_Code");
            });

            modelBuilder.Entity<MytemptbCarryover>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mytemptb_carryover");

                entity.Property(e => e.CostType)
                    .IsRequired()
                    .HasMaxLength(6);

                entity.Property(e => e.Dept).HasMaxLength(200);

                entity.Property(e => e.DeptCode).HasMaxLength(200);

                entity.Property(e => e.Direction)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasColumnName("direction");

                entity.Property(e => e.SubjectCode).HasMaxLength(100);

                entity.Property(e => e.TotalMoney)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("totalMoney");
            });

            modelBuilder.Entity<MytemptbCarryoverWage>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mytemptb_carryover_wage");

                entity.Property(e => e.CostType).HasMaxLength(100);

                entity.Property(e => e.Dept).HasMaxLength(50);

                entity.Property(e => e.Direction)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasColumnName("direction");

                entity.Property(e => e.SalaryVest).HasMaxLength(200);

                entity.Property(e => e.SubjectCode).HasMaxLength(100);

                entity.Property(e => e.SubjectName)
                    .HasMaxLength(100)
                    .HasColumnName("subjectName");

                entity.Property(e => e.TotalMoney)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("totalMoney");
            });

            modelBuilder.Entity<MytemptbPaymentPackage>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mytemptb_payment_package");

                entity.Property(e => e.Fuli).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.IdentityId).HasMaxLength(200);

                entity.Property(e => e.NewSalaryVest).HasMaxLength(100);

                entity.Property(e => e.Num).HasColumnName("num");

                entity.Property(e => e.RealWages).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ShiFaGongZi).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<NotHolidayUser>(entity =>
            {
                entity.ToTable("NotHolidayUser");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AllDays).HasColumnType("decimal(18, 1)");

                entity.Property(e => e.BeginDate).HasMaxLength(50);

                entity.Property(e => e.DeptNo).HasMaxLength(50);

                entity.Property(e => e.EndDate).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.RealName).HasMaxLength(50);

                entity.Property(e => e.ReasonInfo).HasMaxLength(50);

                entity.Property(e => e.RequestUserName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserName");

                entity.Property(e => e.UserKey).HasMaxLength(50);
            });

            modelBuilder.Entity<OcrTknInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OcrTknInfo");

                entity.Property(e => e.Tkn)
                    .HasMaxLength(500)
                    .HasColumnName("tkn");
            });

            modelBuilder.Entity<PassPortInfo>(entity =>
            {
                entity.ToTable("PassPortInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BornDate).HasColumnType("datetime");

                entity.Property(e => e.CardStatus).HasMaxLength(50);

                entity.Property(e => e.FileNo)
                    .HasMaxLength(50)
                    .HasComment("存储编号");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.PassportCode).HasMaxLength(50);

                entity.Property(e => e.PassportSign).HasColumnType("datetime");

                entity.Property(e => e.PassportStatus).HasMaxLength(50);

                entity.Property(e => e.PassportTypeNo).HasMaxLength(50);

                entity.Property(e => e.PassportValid).HasColumnType("datetime");

                entity.Property(e => e.UserKey).HasMaxLength(50);
            });

            modelBuilder.Entity<RentDriversInfo>(entity =>
            {
                entity.ToTable("Rent_DriversInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CarNumber).HasMaxLength(50);

                entity.Property(e => e.CarType).HasMaxLength(50);

                entity.Property(e => e.ContratBelong).HasMaxLength(50);

                entity.Property(e => e.DriverName).HasMaxLength(50);

                entity.Property(e => e.DriverPhone).HasMaxLength(50);

                entity.Property(e => e.UserKey).HasMaxLength(50);

                entity.Property(e => e.VehicleBong).HasMaxLength(50);

                entity.Property(e => e.VehicleUseCom).HasMaxLength(50);
            });

            modelBuilder.Entity<RentVehicle>(entity =>
            {
                entity.ToTable("Rent_Vehicles");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CarNumber).HasMaxLength(50);

                entity.Property(e => e.CarType).HasMaxLength(50);

                entity.Property(e => e.Price).HasColumnType("money");

                entity.Property(e => e.VehicleBong).HasMaxLength(50);

                entity.Property(e => e.VehicleUseCom).HasMaxLength(50);
            });

            modelBuilder.Entity<Reta01>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("reta01");

                entity.Property(e => e.A0100)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.A0101)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.A0104)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.A0107)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.A0111).HasColumnType("datetime");

                entity.Property(e => e.A0114)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.A0117)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.A0121)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.A0124)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.A0127)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.A0131)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.A0141).HasColumnType("datetime");

                entity.Property(e => e.A0144).HasColumnType("datetime");

                entity.Property(e => e.A0154)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.A0164)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.A0171)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.A0174)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.A0177)
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.A0181)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.A01z0)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("A01Z0");

                entity.Property(e => e.B0110)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.C0102)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.C0103)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.C0108)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.C0109)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.C010b)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("C010B");

                entity.Property(e => e.C010c)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("C010C");

                entity.Property(e => e.C010d)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("C010D");

                entity.Property(e => e.C010e)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("C010E");

                entity.Property(e => e.C010f)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("C010F");

                entity.Property(e => e.C010h)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("C010H");

                entity.Property(e => e.C010i)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("C010I");

                entity.Property(e => e.C010l)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("C010L");

                entity.Property(e => e.C010o)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("C010O");

                entity.Property(e => e.C010r)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("C010R");

                entity.Property(e => e.C010s)
                    .HasColumnType("datetime")
                    .HasColumnName("C010S");

                entity.Property(e => e.C010t)
                    .HasColumnType("datetime")
                    .HasColumnName("C010T");

                entity.Property(e => e.C010u)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("C010U");

                entity.Property(e => e.C010v)
                    .HasColumnType("datetime")
                    .HasColumnName("C010V");

                entity.Property(e => e.C010x)
                    .HasColumnType("datetime")
                    .HasColumnName("C010X");

                entity.Property(e => e.C0110)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.C0118)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.C0119)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.C011a)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("C011A");

                entity.Property(e => e.C011e)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("C011E");

                entity.Property(e => e.C011g)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("C011G");

                entity.Property(e => e.C011h)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("C011H");

                entity.Property(e => e.C011i)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("C011I");

                entity.Property(e => e.C011j)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("C011J");

                entity.Property(e => e.C011k)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("C011K");

                entity.Property(e => e.C011l)
                    .HasColumnType("datetime")
                    .HasColumnName("C011L");

                entity.Property(e => e.C011m)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("C011M");

                entity.Property(e => e.C011n)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("C011N");

                entity.Property(e => e.C011o)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("C011O");

                entity.Property(e => e.C011p)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("C011P");

                entity.Property(e => e.C011q)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("C011Q");

                entity.Property(e => e.C011r)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("C011R");

                entity.Property(e => e.C011t)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("C011T");

                entity.Property(e => e.C011u)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("C011U");

                entity.Property(e => e.C011v)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("C011V");

                entity.Property(e => e.C011w)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("C011W");

                entity.Property(e => e.C011x)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("C011X");

                entity.Property(e => e.C011y)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("C011Y");

                entity.Property(e => e.C011z).HasColumnName("C011Z");

                entity.Property(e => e.C0120)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.C0121)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.C0122)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.C0123)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.C0125)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.C0126)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.C0127)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.C0128)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.C0129)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.C012a)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("C012A");

                entity.Property(e => e.C012b)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("C012B");

                entity.Property(e => e.C012c)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("C012C");

                entity.Property(e => e.C012d)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("C012D");

                entity.Property(e => e.C012e)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("C012E");

                entity.Property(e => e.C012f)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("C012F");

                entity.Property(e => e.C012g)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("C012G");

                entity.Property(e => e.C012h)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("C012H");

                entity.Property(e => e.C012i)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("C012I");

                entity.Property(e => e.C012j)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("C012J");

                entity.Property(e => e.C012k)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("C012K");

                entity.Property(e => e.C012l)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("C012L");

                entity.Property(e => e.C012m)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("C012M");

                entity.Property(e => e.C012n)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("C012N");

                entity.Property(e => e.C0181)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.C0183).HasColumnType("datetime");

                entity.Property(e => e.C0184).HasColumnType("datetime");

                entity.Property(e => e.C01tc)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("C01TC");

                entity.Property(e => e.C01vc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("C01VC");

                entity.Property(e => e.C01wc)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("C01WC");

                entity.Property(e => e.C01xc)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("C01XC");

                entity.Property(e => e.C01yc)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("C01YC");

                entity.Property(e => e.C01zc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("C01ZC");

                entity.Property(e => e.C01zd)
                    .HasColumnType("datetime")
                    .HasColumnName("C01ZD");

                entity.Property(e => e.C01ze)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("C01ZE");

                entity.Property(e => e.C01zi)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("C01ZI");

                entity.Property(e => e.C01zk)
                    .HasColumnType("datetime")
                    .HasColumnName("C01ZK");

                entity.Property(e => e.C01zm)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("C01ZM");

                entity.Property(e => e.C01zn)
                    .HasColumnType("datetime")
                    .HasColumnName("C01ZN");

                entity.Property(e => e.C01zo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("C01ZO");

                entity.Property(e => e.C01zp)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("C01ZP");

                entity.Property(e => e.C01zq)
                    .HasColumnType("datetime")
                    .HasColumnName("C01ZQ");

                entity.Property(e => e.C01zs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("C01ZS");

                entity.Property(e => e.C01zu)
                    .HasColumnType("datetime")
                    .HasColumnName("C01ZU");

                entity.Property(e => e.C01zz)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("C01ZZ");

                entity.Property(e => e.Ccccc)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CCCCC");

                entity.Property(e => e.Cdddd)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("CDDDD");

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.CreateUserName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.E0102)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.E0116)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.E0122)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.E01a1)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("E01A1");

                entity.Property(e => e.Groups)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Guidkey)
                    .HasMaxLength(38)
                    .IsUnicode(false)
                    .HasColumnName("GUIDKEY");

                entity.Property(e => e.ModTime).HasColumnType("datetime");

                entity.Property(e => e.ModTime1).HasColumnType("datetime");

                entity.Property(e => e.ModUserName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserPassword)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Room>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Room");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Layout)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Photo)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RoomCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RoomDesc)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.RoomName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Tst)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Sbh>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("sbh");

                entity.Property(e => e.合同号).HasMaxLength(255);
            });

            modelBuilder.Entity<ScheduledAssignedProcess>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ScheduledAssignedProcess");

                entity.Property(e => e.ProcessCode).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);
            });

            modelBuilder.Entity<SecToProject>(entity =>
            {
                entity.ToTable("Sec_To_Project");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ProjectoId)
                    .HasMaxLength(50)
                    .HasColumnName("ProjectoID");

                entity.Property(e => e.Projector).HasMaxLength(50);

                entity.Property(e => e.SecName).HasMaxLength(50);

                entity.Property(e => e.SecUser).HasMaxLength(50);
            });

            modelBuilder.Entity<Sheet1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Sheet1$");

                entity.Property(e => e.BankAccount).HasMaxLength(255);

                entity.Property(e => e.Cardholder).HasMaxLength(255);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Dept).HasMaxLength(255);

                entity.Property(e => e.IdentityId).HasMaxLength(255);

                entity.Property(e => e.SalaryVest).HasMaxLength(255);

                entity.Property(e => e.UserName).HasMaxLength(255);
            });

            modelBuilder.Entity<SpecialFare>(entity =>
            {
                entity.ToTable("SpecialFare");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AllDaysMoney).HasColumnType("money");

                entity.Property(e => e.AllDaysStandard).HasColumnType("money");

                entity.Property(e => e.Allmoney).HasColumnType("money");

                entity.Property(e => e.ApplyUser).HasMaxLength(50);

                entity.Property(e => e.BusinessMoney).HasColumnType("money");

                entity.Property(e => e.BusinessStandard).HasColumnType("money");

                entity.Property(e => e.DrMileMoney).HasColumnType("money");

                entity.Property(e => e.DriEverymileStandard).HasColumnType("money");

                entity.Property(e => e.EditorManyMoney).HasColumnType("money");

                entity.Property(e => e.EditorManyStandard).HasColumnType("money");

                entity.Property(e => e.EditorMoney).HasColumnType("money");

                entity.Property(e => e.EveryDaysMoney).HasColumnType("money");

                entity.Property(e => e.EveryDaysStandard).HasColumnType("money");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.HoliDaysMoney).HasColumnType("money");

                entity.Property(e => e.HoliDaysStandard).HasColumnType("money");

                entity.Property(e => e.NightsMoney).HasColumnType("money");

                entity.Property(e => e.NightsStandard).HasColumnType("money");

                entity.Property(e => e.OtherLineMoney).HasColumnType("money");

                entity.Property(e => e.OtherLineStandard).HasColumnType("money");

                entity.Property(e => e.ProDaysMoney).HasColumnType("money");

                entity.Property(e => e.ProDaysStandard).HasColumnType("money");

                entity.Property(e => e.ProHolidayMoney).HasColumnType("money");

                entity.Property(e => e.ProHolidayStandard).HasColumnType("money");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ResdaysMoney).HasColumnType("money");

                entity.Property(e => e.ResdaysStandard).HasColumnType("money");

                entity.Property(e => e.TimeMonth).HasColumnType("smalldatetime");

                entity.Property(e => e.TutorMonthMoney).HasColumnType("money");

                entity.Property(e => e.TutorMonthStandard).HasColumnType("money");

                entity.Property(e => e.UserKey).HasMaxLength(50);

                entity.Property(e => e.UserName).HasMaxLength(50);

                entity.Property(e => e.WeekMoney).HasColumnType("money");

                entity.Property(e => e.WeekStandard).HasColumnType("money");

                entity.Property(e => e.WholeDaysMoney).HasColumnType("money");

                entity.Property(e => e.WholeDaysStandard).HasColumnType("money");
            });

            modelBuilder.Entity<SpecialFareStandard>(entity =>
            {
                entity.ToTable("SpecialFareStandard");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DriAllDaysStandard).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DriEveryDaysStandard).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DriEverymileStandard).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DriHoliDaysStandard).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DriNightsStandard).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DriWeekStandard).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DriWholeDaysStandard).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.EditorManyStandard).HasMaxLength(50);

                entity.Property(e => e.OtherStandard).HasMaxLength(50);

                entity.Property(e => e.ProDaysStandard).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ProHolidayStandard).HasMaxLength(50);

                entity.Property(e => e.ResdaysStandard).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TutorMonthStandard).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<Supplier>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Supplier");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.SupplierName).HasMaxLength(255);
            });

            modelBuilder.Entity<TableTaskCompleted>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Table_Task_Completed");

                entity.Property(e => e.IBeginTime)
                    .HasColumnType("datetime")
                    .HasColumnName("iBeginTime");

                entity.Property(e => e.IUser)
                    .HasMaxLength(200)
                    .HasColumnName("iUser");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Incident).HasColumnName("incident");

                entity.Property(e => e.PName)
                    .HasMaxLength(500)
                    .HasColumnName("pName");

                entity.Property(e => e.Params)
                    .HasMaxLength(1000)
                    .HasColumnName("params");

                entity.Property(e => e.SName)
                    .HasMaxLength(100)
                    .HasColumnName("sName");

                entity.Property(e => e.Source)
                    .HasMaxLength(100)
                    .HasColumnName("source");

                entity.Property(e => e.Summary)
                    .HasMaxLength(500)
                    .HasColumnName("summary");

                entity.Property(e => e.TBeginTime)
                    .HasColumnType("datetime")
                    .HasColumnName("tBeginTime");

                entity.Property(e => e.TEndTime)
                    .HasColumnType("datetime")
                    .HasColumnName("tEndTime");

                entity.Property(e => e.TStatus).HasColumnName("tStatus");

                entity.Property(e => e.TUser)
                    .HasMaxLength(200)
                    .HasColumnName("tUser");

                entity.Property(e => e.TaskId)
                    .HasMaxLength(100)
                    .HasColumnName("taskId");
            });

            modelBuilder.Entity<TableTaskToDo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Table_Task_ToDo");

                entity.Property(e => e.IBeginTime)
                    .HasColumnType("datetime")
                    .HasColumnName("iBeginTime");

                entity.Property(e => e.IUser)
                    .HasMaxLength(200)
                    .HasColumnName("iUser");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Incident).HasColumnName("incident");

                entity.Property(e => e.PName)
                    .HasMaxLength(500)
                    .HasColumnName("pName");

                entity.Property(e => e.Params)
                    .HasMaxLength(1000)
                    .HasColumnName("params");

                entity.Property(e => e.SName)
                    .HasMaxLength(100)
                    .HasColumnName("sName");

                entity.Property(e => e.Source)
                    .HasMaxLength(100)
                    .HasColumnName("source");

                entity.Property(e => e.Summary)
                    .HasMaxLength(500)
                    .HasColumnName("summary");

                entity.Property(e => e.TBeginTime)
                    .HasColumnType("datetime")
                    .HasColumnName("tBeginTime");

                entity.Property(e => e.TEndTime)
                    .HasColumnType("datetime")
                    .HasColumnName("tEndTime");

                entity.Property(e => e.TStatus).HasColumnName("tStatus");

                entity.Property(e => e.TUser)
                    .HasMaxLength(200)
                    .HasColumnName("tUser");

                entity.Property(e => e.TaskId)
                    .HasMaxLength(100)
                    .HasColumnName("taskId");
            });

            modelBuilder.Entity<TaskThirdparty>(entity =>
            {
                entity.ToTable("TaskThirdparty");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IBeginTime)
                    .HasColumnType("datetime")
                    .HasColumnName("iBeginTime");

                entity.Property(e => e.IUser)
                    .HasMaxLength(100)
                    .HasColumnName("iUser");

                entity.Property(e => e.Incident).HasColumnName("incident");

                entity.Property(e => e.PName)
                    .HasMaxLength(100)
                    .HasColumnName("pName");

                entity.Property(e => e.SName)
                    .HasMaxLength(100)
                    .HasColumnName("sName");

                entity.Property(e => e.Source)
                    .HasMaxLength(100)
                    .HasColumnName("source");

                entity.Property(e => e.Summary)
                    .HasMaxLength(100)
                    .HasColumnName("summary");

                entity.Property(e => e.TBeginTime)
                    .HasColumnType("datetime")
                    .HasColumnName("tBeginTime");

                entity.Property(e => e.TEndTime)
                    .HasColumnType("datetime")
                    .HasColumnName("tEndTime");

                entity.Property(e => e.TStatus).HasColumnName("tStatus");

                entity.Property(e => e.TUser)
                    .HasMaxLength(100)
                    .HasColumnName("tUser");

                entity.Property(e => e.TaskId)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("taskId");

                entity.Property(e => e.UrlParams)
                    .HasMaxLength(1000)
                    .HasColumnName("urlParams");
            });

            modelBuilder.Entity<TaskWarning>(entity =>
            {
                entity.ToTable("TaskWarning");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("createDate")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("创建时间");

                entity.Property(e => e.Source)
                    .HasMaxLength(256)
                    .HasColumnName("source");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("是否显示");

                entity.Property(e => e.ThirdpartyId1)
                    .HasMaxLength(256)
                    .HasColumnName("thirdpartyId1");

                entity.Property(e => e.ThirdpartyId2).HasColumnName("thirdpartyId2");

                entity.Property(e => e.Title)
                    .HasMaxLength(1000)
                    .HasColumnName("title")
                    .HasComment("标题");

                entity.Property(e => e.Url)
                    .HasMaxLength(1000)
                    .HasColumnName("url");

                entity.Property(e => e.UserAccount)
                    .HasMaxLength(256)
                    .HasColumnName("userAccount")
                    .HasComment("用户帐号");
            });

            modelBuilder.Entity<TaskWarningTemporary>(entity =>
            {
                entity.ToTable("TaskWarning_Temporary");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("createDate");

                entity.Property(e => e.Source)
                    .HasMaxLength(256)
                    .HasColumnName("source");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.ThirdpartyId1)
                    .HasMaxLength(256)
                    .HasColumnName("thirdpartyId1");

                entity.Property(e => e.ThirdpartyId2).HasColumnName("thirdpartyId2");

                entity.Property(e => e.Title)
                    .HasMaxLength(1000)
                    .HasColumnName("title");

                entity.Property(e => e.Url)
                    .HasMaxLength(1000)
                    .HasColumnName("url");

                entity.Property(e => e.UserAccount)
                    .HasMaxLength(256)
                    .HasColumnName("userAccount");
            });

            modelBuilder.Entity<Tcc106ServerDboUsrAz8>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Tcc106Server_dbo_usrAZ8");

                entity.HasIndex(e => e.A0100, "idx_cl_usrAZ8")
                    .IsClustered();

                entity.HasIndex(e => e.A0100, "idx_nc_usrAZ8");

                entity.Property(e => e.A0100)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.A0177).HasMaxLength(100);

                entity.Property(e => e.Az8z0)
                    .HasColumnType("datetime")
                    .HasColumnName("AZ8Z0");

                entity.Property(e => e.Az8z1).HasColumnName("AZ8Z1");

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.CreateUserName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cz801)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("CZ801");

                entity.Property(e => e.Cz809)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("CZ809");

                entity.Property(e => e.Cz810)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("CZ810");

                entity.Property(e => e.Cz811)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("CZ811");

                entity.Property(e => e.Cz812)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("CZ812");

                entity.Property(e => e.Cz813)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("CZ813");

                entity.Property(e => e.Cz814)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("CZ814");

                entity.Property(e => e.Cz815)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("CZ815");

                entity.Property(e => e.Cz816)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("CZ816");

                entity.Property(e => e.Cz817)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("CZ817");

                entity.Property(e => e.Cz818)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("CZ818");

                entity.Property(e => e.Cz819)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("CZ819");

                entity.Property(e => e.Cz820)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("CZ820");

                entity.Property(e => e.Cz824)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("CZ824");

                entity.Property(e => e.Cz825)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("CZ825");

                entity.Property(e => e.Cz827)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("CZ827");

                entity.Property(e => e.Cz828)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("CZ828");

                entity.Property(e => e.Cz829)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("CZ829");

                entity.Property(e => e.Cz82a)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("CZ82A");

                entity.Property(e => e.Cz82b)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("CZ82B");

                entity.Property(e => e.Cz82c)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("CZ82C");

                entity.Property(e => e.Cz82d)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("CZ82D");

                entity.Property(e => e.Cz82e)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("CZ82E");

                entity.Property(e => e.Cz82f)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("CZ82F");

                entity.Property(e => e.Cz82g)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("CZ82G");

                entity.Property(e => e.Cz82h)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("CZ82H");

                entity.Property(e => e.Id)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ModTime).HasColumnType("datetime");

                entity.Property(e => e.ModUserName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tcc106ServerDboUsrAzv>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Tcc106Server_dbo_usrAZV");

                entity.Property(e => e.A0100)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.A0177)
                    .HasMaxLength(100)
                    .HasColumnName("a0177");

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.CreateUserName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Czv01)
                    .HasColumnType("datetime")
                    .HasColumnName("CZV01");

                entity.Property(e => e.Czv02)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CZV02");

                entity.Property(e => e.Czv06)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("CZV06");

                entity.Property(e => e.Czv07)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("CZV07");

                entity.Property(e => e.Czv08)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("CZV08");

                entity.Property(e => e.Czv09)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("CZV09");

                entity.Property(e => e.Czv11)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("CZV11");

                entity.Property(e => e.Czv12)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("CZV12");

                entity.Property(e => e.Czv13)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("CZV13");

                entity.Property(e => e.Czv26)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CZV26");

                entity.Property(e => e.Czv27)
                    .HasColumnType("datetime")
                    .HasColumnName("CZV27");

                entity.Property(e => e.Czv28)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("CZV28");

                entity.Property(e => e.Czv30)
                    .HasColumnType("datetime")
                    .HasColumnName("CZV30");

                entity.Property(e => e.Czv31)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("CZV31");

                entity.Property(e => e.Czv32)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("CZV32");

                entity.Property(e => e.Czv33)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("CZV33");

                entity.Property(e => e.Czv34)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("CZV34");

                entity.Property(e => e.Czv35)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("CZV35");

                entity.Property(e => e.Czv36)
                    .HasColumnType("numeric(4, 2)")
                    .HasColumnName("CZV36");

                entity.Property(e => e.Czv37)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("CZV37");

                entity.Property(e => e.Czv38)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("CZV38");

                entity.Property(e => e.Id)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ModTime).HasColumnType("datetime");

                entity.Property(e => e.ModUserName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TccAbortLeave>(entity =>
            {
                entity.ToTable("TCC_AbortLeave");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AbortFormNumber)
                    .HasMaxLength(50)
                    .HasComment("被撤销表单号");

                entity.Property(e => e.AbortProcessName).HasMaxLength(50);

                entity.Property(e => e.ActualBeginDate).HasColumnType("datetime");

                entity.Property(e => e.ActualEndDate).HasColumnType("datetime");

                entity.Property(e => e.AskForLeaveBeginDate).HasColumnType("datetime");

                entity.Property(e => e.AskForLeaveEndDate).HasColumnType("datetime");

                entity.Property(e => e.CmopDays)
                    .HasDefaultValueSql("((0))")
                    .HasComment("换休天数");

                entity.Property(e => e.CompBeginDate)
                    .HasColumnType("datetime")
                    .HasComment("换休开始时间");

                entity.Property(e => e.CompEndDate)
                    .HasColumnType("datetime")
                    .HasComment("换休结束时间");

                entity.Property(e => e.CompToalDays).HasComment("可换休天数");

                entity.Property(e => e.ExtendDate)
                    .HasColumnType("datetime")
                    .HasComment("延长出差时间至");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.FromCity).HasMaxLength(50);

                entity.Property(e => e.InviteUnit).HasMaxLength(1000);

                entity.Property(e => e.IsAbort)
                    .HasMaxLength(50)
                    .HasComment("是否已经销假  Y是  N 否");

                entity.Property(e => e.IsRotateRest)
                    .HasMaxLength(50)
                    .HasComment("是否已换休   Y是  N 否");

                entity.Property(e => e.Payee).HasComment("是否换休  1=是  2=否");

                entity.Property(e => e.ProcessFinishDate).HasColumnType("datetime");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(50);

                entity.Property(e => e.ProjectName).HasMaxLength(2000);

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptCode");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptName");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName");

                entity.Property(e => e.RequestUserIdentity)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserIdentity");

                entity.Property(e => e.ToCity).HasMaxLength(50);

                entity.Property(e => e.ToCountry).HasMaxLength(100);

                entity.Property(e => e.TravelType1)
                    .HasMaxLength(100)
                    .HasColumnName("Travel_Type");
            });

            modelBuilder.Entity<TccAbroadAbroadRecord>(entity =>
            {
                entity.ToTable("TCC_Abroad_AbroadRecord");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AimCountry).HasMaxLength(50);

                entity.Property(e => e.AimTime).HasColumnType("datetime");

                entity.Property(e => e.DeptNo).HasMaxLength(50);

                entity.Property(e => e.Flag)
                    .HasDefaultValueSql("((1))")
                    .HasComment("1");

                entity.Property(e => e.FlightNo).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.LeaveCountry).HasMaxLength(50);

                entity.Property(e => e.LeaveTime).HasColumnType("datetime");

                entity.Property(e => e.Mobile).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.PassCountry).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.RaimCity).HasColumnName("RAimCity");

                entity.Property(e => e.RaimCountry).HasMaxLength(50);

                entity.Property(e => e.RaimTime)
                    .HasColumnType("datetime")
                    .HasColumnName("RAimTime");

                entity.Property(e => e.RequestTime)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Time");

                entity.Property(e => e.RflightNo)
                    .HasMaxLength(50)
                    .HasColumnName("RFlightNo");

                entity.Property(e => e.RleaveCity).HasColumnName("RLeaveCity");

                entity.Property(e => e.RleaveCountry)
                    .HasMaxLength(50)
                    .HasColumnName("RLeaveCountry");

                entity.Property(e => e.RleaveTime)
                    .HasColumnType("datetime")
                    .HasColumnName("RLeaveTime");

                entity.Property(e => e.RpassCity).HasColumnName("RPassCity");

                entity.Property(e => e.RpassCountry)
                    .HasMaxLength(50)
                    .HasColumnName("RPassCountry");

                entity.Property(e => e.UserKey).HasMaxLength(50);
            });

            modelBuilder.Entity<TccAbroadApply>(entity =>
            {
                entity.ToTable("TCC_AbroadApply");

                entity.HasIndex(e => e.FormNumber, "IX_TCC_AbroadApply")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AbrodDeptNo).HasMaxLength(20);

                entity.Property(e => e.AgentLoginUser).HasMaxLength(50);

                entity.Property(e => e.AgentName).HasMaxLength(50);

                entity.Property(e => e.BeginDate).HasColumnType("datetime");

                entity.Property(e => e.BorrowDate)
                    .HasColumnType("datetime")
                    .HasComment("借用护照时间");

                entity.Property(e => e.ContractLimit).HasMaxLength(20);

                entity.Property(e => e.ContractScope).HasMaxLength(50);

                entity.Property(e => e.ContractType).HasMaxLength(50);

                entity.Property(e => e.CoseSouce).HasMaxLength(30);

                entity.Property(e => e.DealType).HasMaxLength(50);

                entity.Property(e => e.DocuNo).HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.InviteCname).HasColumnName("InviteCName");

                entity.Property(e => e.InviteEname).HasColumnName("InviteEName");

                entity.Property(e => e.IsVsfirst).HasColumnName("IsVSFirst");

                entity.Property(e => e.PassportType).HasMaxLength(50);

                entity.Property(e => e.PassportTypeNo).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProcessStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.ProjectGm)
                    .HasMaxLength(50)
                    .HasColumnName("ProjectGM");

                entity.Property(e => e.ProjectJd)
                    .HasMaxLength(50)
                    .HasColumnName("ProjectJD");

                entity.Property(e => e.ProjectJdinfo).HasColumnName("ProjectJDInfo");

                entity.Property(e => e.ProjectNo).HasMaxLength(20);

                entity.Property(e => e.ProjectPosition).HasMaxLength(50);

                entity.Property(e => e.ProjectType).HasMaxLength(20);

                entity.Property(e => e.Projector).HasMaxLength(50);

                entity.Property(e => e.ProjectorId)
                    .HasMaxLength(50)
                    .HasColumnName("ProjectorID");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");

                entity.Property(e => e.RequestDeptName).HasMaxLength(50);

                entity.Property(e => e.RequestDeptNo).HasMaxLength(50);

                entity.Property(e => e.RequestRealName).HasMaxLength(30);

                entity.Property(e => e.RequestTelephone).HasMaxLength(20);

                entity.Property(e => e.RequestUserName).HasMaxLength(20);

                entity.Property(e => e.ReturnPaperDate).HasColumnType("datetime");

                entity.Property(e => e.SubComCode).HasMaxLength(50);

                entity.Property(e => e.TaskType).HasMaxLength(50);

                entity.Property(e => e.TeamLeader).HasMaxLength(50);

                entity.Property(e => e.Tvcountry).HasColumnName("TVCountry");

                entity.Property(e => e.VisaNum).HasMaxLength(50);

                entity.Property(e => e.VisaSec).HasMaxLength(50);

                entity.Property(e => e.VisaType).HasMaxLength(50);

                entity.Property(e => e.VisaTypeNo).HasMaxLength(50);
            });

            modelBuilder.Entity<TccAbroadApplySubUser>(entity =>
            {
                entity.ToTable("TCC_AbroadApply_SubUser");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DeptNo).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.UserKey).HasMaxLength(50);
            });

            modelBuilder.Entity<TccAbroadAtt>(entity =>
            {
                entity.ToTable("TCC_Abroad_Att");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AfileName).HasColumnName("AFileName");

                entity.Property(e => e.AfileNameId)
                    .HasMaxLength(50)
                    .HasColumnName("AFileNameID");

                entity.Property(e => e.AttCreateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Att_CreateDate");

                entity.Property(e => e.AttFileId)
                    .HasColumnName("Att_FileID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AttFileName)
                    .HasMaxLength(100)
                    .HasColumnName("Att_FileName");

                entity.Property(e => e.AttIncident).HasColumnName("Att_Incident");

                entity.Property(e => e.AttLogin)
                    .HasMaxLength(50)
                    .HasColumnName("Att_Login");

                entity.Property(e => e.AttOption).HasColumnName("Att_Option");

                entity.Property(e => e.AttProcessName)
                    .HasMaxLength(50)
                    .HasColumnName("Att_ProcessName");

                entity.Property(e => e.AttRequire)
                    .HasMaxLength(50)
                    .HasColumnName("Att_Require");

                entity.Property(e => e.AttStepName)
                    .HasMaxLength(100)
                    .HasColumnName("Att_StepName");

                entity.Property(e => e.AttUserId).HasColumnName("Att_UserID");

                entity.Property(e => e.AttUserName)
                    .HasMaxLength(50)
                    .HasColumnName("Att_UserName");

                entity.Property(e => e.FormNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<TccAbroadCertiInfoRecord>(entity =>
            {
                entity.ToTable("TCC_Abroad_CertiInfoRecord");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AbroadType).HasComment("出访任务");

                entity.Property(e => e.AimCountry)
                    .HasMaxLength(50)
                    .HasComment("出访国家");

                entity.Property(e => e.AimDays).HasComment("出访天数");

                entity.Property(e => e.AimRoadInfo).HasComment("出访路线");

                entity.Property(e => e.CardNo).HasMaxLength(50);

                entity.Property(e => e.CardStatus).HasMaxLength(50);

                entity.Property(e => e.DepartTime)
                    .HasMaxLength(50)
                    .HasComment("出境时间");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.HandleUser).HasMaxLength(50);

                entity.Property(e => e.HomeTime)
                    .HasMaxLength(50)
                    .HasComment("入境时间");

                entity.Property(e => e.IsReleate)
                    .HasMaxLength(50)
                    .HasColumnName("isReleate");

                entity.Property(e => e.LendDate)
                    .HasColumnType("datetime")
                    .HasComment("借出日期");

                entity.Property(e => e.LendReson).HasDefaultValueSql("(' ')");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.OperateDate).HasColumnType("datetime");

                entity.Property(e => e.ReturnDate)
                    .HasColumnType("datetime")
                    .HasComment("归还日期");

                entity.Property(e => e.ReturnReson).HasDefaultValueSql("(' ')");
            });

            modelBuilder.Entity<TccAbroadExam>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_Abroad_Exam");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");

                entity.Property(e => e.Score).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.UserKey).HasMaxLength(50);
            });

            modelBuilder.Entity<TccAbroadInsApply>(entity =>
            {
                entity.ToTable("TCC_AbroadInsApply");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProcessStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptCode");

                entity.Property(e => e.RequestDeptName).HasColumnName("Request_DeptName");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName");

                entity.Property(e => e.RequestTelPhon)
                    .HasMaxLength(50)
                    .HasColumnName("Request_TelPhon");

                entity.Property(e => e.RequestUserName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserName");
            });

            modelBuilder.Entity<TccAbroadInsApplyInfo>(entity =>
            {
                entity.ToTable("TCC_AbroadInsApply_Info");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AboradFormNumber).HasMaxLength(50);

                entity.Property(e => e.BeginDate).HasColumnType("datetime");

                entity.Property(e => e.BornDate).HasMaxLength(50);

                entity.Property(e => e.CompId)
                    .HasMaxLength(50)
                    .HasColumnName("CompID");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.InsCategory).HasMaxLength(50);

                entity.Property(e => e.InsEndDate).HasColumnType("datetime");

                entity.Property(e => e.InsFare).HasColumnType("money");

                entity.Property(e => e.InsStartDate).HasColumnType("datetime");

                entity.Property(e => e.InsStatus).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.ReturnDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UserKey).HasMaxLength(50);

                entity.Property(e => e.VisaType).HasMaxLength(50);
            });

            modelBuilder.Entity<TccAbroadInsApplyUser>(entity =>
            {
                entity.ToTable("TCC_AbroadInsApply_User");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AbortDate).HasMaxLength(50);

                entity.Property(e => e.AbortReson).HasMaxLength(50);

                entity.Property(e => e.BornDate).HasColumnType("datetime");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.InsCategory).HasMaxLength(50);

                entity.Property(e => e.InsDays).HasDefaultValueSql("((0))");

                entity.Property(e => e.InsEndDate).HasColumnType("datetime");

                entity.Property(e => e.InsFare)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InsStartDate).HasColumnType("datetime");

                entity.Property(e => e.InsStatus).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.ReturnDate)
                    .HasColumnType("datetime")
                    .HasComment("返程时间");

                entity.Property(e => e.RinsDays)
                    .HasColumnName("RInsDays")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasComment("出发时间");

                entity.Property(e => e.UserKey).HasMaxLength(50);

                entity.Property(e => e.VisaType).HasMaxLength(50);
            });

            modelBuilder.Entity<TccAbroadMergedAtt>(entity =>
            {
                entity.ToTable("TCC_Abroad_MergedAtt");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ChildFormNumber).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.Tvcountry).HasColumnName("TVCountry");
            });

            modelBuilder.Entity<TccAbroadMessage>(entity =>
            {
                entity.ToTable("TCC_Abroad_Message");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.PId).HasColumnName("pID");

                entity.Property(e => e.ReceiveDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ReceiveMail).HasMaxLength(50);

                entity.Property(e => e.ReceivePhone).HasMaxLength(50);

                entity.Property(e => e.ReceiveUser).HasMaxLength(50);
            });

            modelBuilder.Entity<TccAbroadTempt>(entity =>
            {
                entity.ToTable("TCC_Abroad_Tempt");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.PassportCode).HasMaxLength(50);

                entity.Property(e => e.UserKey).HasMaxLength(50);

                entity.Property(e => e.VisaNum).HasMaxLength(50);

                entity.Property(e => e.VisaSign).HasColumnType("datetime");

                entity.Property(e => e.VisaType).HasMaxLength(50);

                entity.Property(e => e.VisaValid).HasColumnType("datetime");
            });

            modelBuilder.Entity<TccAbroadWorkVisa>(entity =>
            {
                entity.ToTable("TCC_Abroad_WorkVisa");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptCode");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptName");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName");

                entity.Property(e => e.RequestTelPhone)
                    .HasMaxLength(50)
                    .HasColumnName("Request_TelPhone");

                entity.Property(e => e.RequestUserName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserName");
            });

            modelBuilder.Entity<TccAbroadWorkVisaInfo>(entity =>
            {
                entity.ToTable("TCC_Abroad_WorkVisaInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyLogin).HasMaxLength(50);

                entity.Property(e => e.BornDate).HasColumnType("datetime");

                entity.Property(e => e.DeptNo).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.PassportCode).HasMaxLength(50);

                entity.Property(e => e.PassportType).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.Tvcountry).HasColumnName("TVCountry");

                entity.Property(e => e.UserKey).HasMaxLength(50);
            });

            modelBuilder.Entity<TccAbroadWorkVisaRecord>(entity =>
            {
                entity.ToTable("TCC_Abroad_WorkVisaRecord");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DeptNo).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NewWorkVisaValid).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(50);

                entity.Property(e => e.ProjectRole).HasMaxLength(50);

                entity.Property(e => e.Remark).HasMaxLength(50);

                entity.Property(e => e.UserKey).HasMaxLength(50);

                entity.Property(e => e.WorkVisaCode).HasMaxLength(50);

                entity.Property(e => e.WorkVisaSign).HasMaxLength(50);

                entity.Property(e => e.WorkVisaStatus).HasMaxLength(50);

                entity.Property(e => e.WorkVisaValid).HasMaxLength(50);
            });

            modelBuilder.Entity<TccAbroadWorkVisaUser>(entity =>
            {
                entity.ToTable("TCC_Abroad_WorkVisaUser");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BornDate).HasColumnType("date");

                entity.Property(e => e.DeptNo).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.PassportCode).HasMaxLength(50);

                entity.Property(e => e.PassportType).HasMaxLength(50);

                entity.Property(e => e.Pinyin).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(50);

                entity.Property(e => e.Remark).HasComment("备注信息");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UserKey).HasMaxLength(50);

                entity.Property(e => e.WorkVisaCode).HasMaxLength(50);

                entity.Property(e => e.WorkVisaSign).HasColumnType("date");

                entity.Property(e => e.WorkVisaStatus)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.WorkVisaValid).HasColumnType("date");
            });

            modelBuilder.Entity<TccAbroadWorkVisaUserTempt>(entity =>
            {
                entity.ToTable("TCC_Abroad_WorkVisaUserTempt");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CompName).HasMaxLength(50);

                entity.Property(e => e.Country).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.Pinyin).HasMaxLength(50);

                entity.Property(e => e.UserKey).HasMaxLength(50);

                entity.Property(e => e.WorkVisaCode).HasMaxLength(50);

                entity.Property(e => e.WorkVisaSign).HasColumnType("date");

                entity.Property(e => e.WorkVisaStatus).HasMaxLength(50);

                entity.Property(e => e.WorkVisaValid).HasColumnType("date");
            });

            modelBuilder.Entity<TccAccountConfig>(entity =>
            {
                entity.ToTable("TCC_AccountConfig");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AccountCode)
                    .HasMaxLength(50)
                    .HasComment("账套代码");

                entity.Property(e => e.AccountHead)
                    .HasMaxLength(50)
                    .HasComment("项目前添加的前缀");

                entity.Property(e => e.CompanyCode).HasComment("公司编号");

                entity.Property(e => e.CompanyName)
                    .HasMaxLength(50)
                    .HasComment("公司名称");

                entity.Property(e => e.Flag).HasComment("表示 0 为 非项目帐套  1为项目帐套");

                entity.Property(e => e.PreFixSupperid).HasMaxLength(50);

                entity.Property(e => e.ProjectCategory)
                    .HasMaxLength(50)
                    .HasComment("项目类型");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .HasComment("项目号");
            });

            modelBuilder.Entity<TccAccountRelation>(entity =>
            {
                entity.ToTable("TCC_AccountRelations");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AccountCode).HasMaxLength(50);

                entity.Property(e => e.AccountName).HasMaxLength(200);

                entity.Property(e => e.SupplierCode).HasMaxLength(50);
            });

            modelBuilder.Entity<TccAccountSubject>(entity =>
            {
                entity.ToTable("TCC_AccountSubject");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Acctyear).HasColumnName("acctyear");

                entity.Property(e => e.Asstype)
                    .HasMaxLength(50)
                    .HasColumnName("asstype");

                entity.Property(e => e.Category).HasMaxLength(50);

                entity.Property(e => e.DeptOrProject).HasMaxLength(50);

                entity.Property(e => e.Orgname)
                    .HasMaxLength(50)
                    .HasColumnName("orgname");

                entity.Property(e => e.ParentSubjectCode).HasMaxLength(50);

                entity.Property(e => e.SubjectCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SubjectName).HasMaxLength(200);

                entity.Property(e => e.Subjectmc).HasMaxLength(500);

                entity.Property(e => e.Unitid)
                    .HasMaxLength(50)
                    .HasColumnName("unitid");
            });

            modelBuilder.Entity<TccAccountSubjectInit>(entity =>
            {
                entity.ToTable("TCC_AccountSubject_init");

                entity.HasComment("入账科目表");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.Acctyear).HasColumnName("acctyear");

                entity.Property(e => e.Asstype)
                    .HasMaxLength(50)
                    .HasColumnName("asstype");

                entity.Property(e => e.Category)
                    .HasMaxLength(50)
                    .HasComment("科目所属部门或项目  1=个人借款和非EPC项目借款  2=EPC项目借款   0101=生产部门（组织架构中本部生产(包含)部门下的所有部门） 0102=管理部门（组织架构中本部管理(包含)部门下的所有部门）  0103=经营报价部门（组织架构中本部经营报价(包含)部门下的所有部门   还包括一个特殊的部门 本部服务下的文印厂）  EPC = EPC项目类  RD = 研发项目类  Other=设计工程项目类（即非EPC和RD类）     NEPC= 非EPC项目类");

                entity.Property(e => e.DeptOrProject)
                    .HasMaxLength(50)
                    .HasComment("部门/项目   D=部门 P=项目");

                entity.Property(e => e.DomesticOversea).HasComment("境内/境外  1=境内 2=境外");

                entity.Property(e => e.Orgname)
                    .HasMaxLength(50)
                    .HasColumnName("orgname");

                entity.Property(e => e.ParentSubjectCode)
                    .HasMaxLength(50)
                    .HasComment(" 父级科目编号");

                entity.Property(e => e.Sort)
                    .HasDefaultValueSql("((0))")
                    .HasComment("排序字段");

                entity.Property(e => e.SubjectCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("科目编号");

                entity.Property(e => e.SubjectLevel).HasComment("科目级别 分 1  2  3 级");

                entity.Property(e => e.SubjectName)
                    .HasMaxLength(200)
                    .HasComment("科目名称");

                entity.Property(e => e.Subjectmc).HasMaxLength(50);

                entity.Property(e => e.Unitid)
                    .HasMaxLength(50)
                    .HasColumnName("unitid");
            });

            modelBuilder.Entity<TccAccountSubjectLog>(entity =>
            {
                entity.ToTable("TCC_AccountSubject_Logs");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AlterLogin)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("修改人账号");

                entity.Property(e => e.AlterName)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("修改人姓名");

                entity.Property(e => e.Category)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("分类");

                entity.Property(e => e.Describition)
                    .HasDefaultValueSql("('')")
                    .HasComment("描述");

                entity.Property(e => e.UpdatDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("修改时间");
            });

            modelBuilder.Entity<TccAccountSubjectOwner>(entity =>
            {
                entity.ToTable("TCC_AccountSubjectOwner");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.OwnerId).HasColumnName("OwnerID");

                entity.Property(e => e.OwnerType).HasMaxLength(500);
            });

            modelBuilder.Entity<TccAddNewPaymentInfo>(entity =>
            {
                entity.ToTable("TCC_AddNewPaymentInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AddPaymentCurrency).HasMaxLength(50);

                entity.Property(e => e.FineAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OtherCost).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PaymentAbacode)
                    .HasMaxLength(50)
                    .HasColumnName("PaymentABACode");

                entity.Property(e => e.PaymentActualInputVat)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PaymentActualInputVAT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PaymentActualTotal).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PaymentBankAccount).HasMaxLength(50);

                entity.Property(e => e.PaymentBankAddress).HasMaxLength(500);

                entity.Property(e => e.PaymentBankName).HasMaxLength(500);

                entity.Property(e => e.PaymentBillAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PaymentIbanCode).HasMaxLength(50);

                entity.Property(e => e.PaymentInputVat)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PaymentInputVAT");

                entity.Property(e => e.PaymentLineNumbers).HasMaxLength(500);

                entity.Property(e => e.PaymentOtherPaymentTotal).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PaymentReceivingCompanyAddress).HasMaxLength(500);

                entity.Property(e => e.PaymentReceivingCompanyCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PaymentReceivingCompanyName).HasMaxLength(500);

                entity.Property(e => e.PaymentSwiftCode).HasMaxLength(50);

                entity.Property(e => e.PaymentTotal).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PaymentWithoutInputVat)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PaymentWithoutInputVAT");

                entity.Property(e => e.PaymentWithoutOtherTax).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.WithdholdingTax).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<TccAnnualSalaryPayment>(entity =>
            {
                entity.ToTable("TCC_AnnualSalaryPayment");

                entity.Property(e => e.ApplyDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ApplyDept).HasMaxLength(50);

                entity.Property(e => e.ApplyDeptCode).HasMaxLength(50);

                entity.Property(e => e.ApplyUserIdentityId).HasMaxLength(50);

                entity.Property(e => e.ApplyUserLoginName).HasMaxLength(50);

                entity.Property(e => e.ApplyUserName).HasMaxLength(50);

                entity.Property(e => e.PayrollCityCode).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(100);

                entity.Property(e => e.ProcessStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.SendDate).HasMaxLength(50);
            });

            modelBuilder.Entity<TccAnnualSalaryPaymentDetail>(entity =>
            {
                entity.ToTable("TCC_AnnualSalaryPaymentDetail");

                entity.Property(e => e.Dept).HasMaxLength(50);

                entity.Property(e => e.DeptCode).HasMaxLength(50);

                entity.Property(e => e.RealWage).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Summary).HasMaxLength(200);

                entity.Property(e => e.UserIdentityId).HasMaxLength(50);

                entity.Property(e => e.UserName).HasMaxLength(50);

                entity.Property(e => e.WagePersonalTax).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.WagesShould).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<TccApplyBreakSubsidy>(entity =>
            {
                entity.ToTable("TCC_ApplyBreakSubsidy");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AdressLocation).HasMaxLength(50);

                entity.Property(e => e.ClaimsDepartmentCode).HasMaxLength(50);

                entity.Property(e => e.ClaimsDepartmentName).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.MMonth).HasColumnName("mMonth");

                entity.Property(e => e.MYear).HasColumnName("mYear");

                entity.Property(e => e.MoneyActual).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProcessStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptCode");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptName");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName");

                entity.Property(e => e.RequestTelPhone)
                    .HasMaxLength(50)
                    .HasColumnName("Request_TelPhone");

                entity.Property(e => e.RequestUserName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserName");
            });

            modelBuilder.Entity<TccApplyBreakSubsidyConfig>(entity =>
            {
                entity.ToTable("TCC_ApplyBreakSubsidy_Config");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CardNo).HasMaxLength(50);

                entity.Property(e => e.ContractType).HasMaxLength(200);

                entity.Property(e => e.DeptName).HasMaxLength(50);

                entity.Property(e => e.DeptNo).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.UserKey).HasMaxLength(50);
            });

            modelBuilder.Entity<TccApplyBreakSubsidyInfo>(entity =>
            {
                entity.ToTable("TCC_ApplyBreakSubsidy_Info");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CardNo).HasMaxLength(50);

                entity.Property(e => e.ContractType).HasMaxLength(200);

                entity.Property(e => e.DeptName).HasMaxLength(200);

                entity.Property(e => e.DeptNo).HasMaxLength(50);

                entity.Property(e => e.IsDelete)
                    .HasColumnName("is_delete")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.MMonth).HasColumnName("mMonth");

                entity.Property(e => e.MYear).HasColumnName("mYear");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.Nbase)
                    .HasMaxLength(50)
                    .HasColumnName("nbase");

                entity.Property(e => e.SubsidyMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("subsidyMoney");

                entity.Property(e => e.UserKey).HasMaxLength(50);
            });

            modelBuilder.Entity<TccApplyForLeave>(entity =>
            {
                entity.ToTable("TCC_ApplyForLeave");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AbortionDate)
                    .HasColumnType("datetime")
                    .HasComment("流产日期");

                entity.Property(e => e.ActualBeginDate)
                    .HasColumnType("datetime")
                    .HasComment("实际请假开始时间");

                entity.Property(e => e.ActualEndDate)
                    .HasColumnType("datetime")
                    .HasComment("实际请假结束时间");

                entity.Property(e => e.Age).HasComment("年龄");

                entity.Property(e => e.Agency)
                    .HasDefaultValueSql("((0))")
                    .HasComment("补假 （2是代理，1不是代理）");

                entity.Property(e => e.AgentDeptName).HasMaxLength(50);

                entity.Property(e => e.AgentLoginUser)
                    .HasMaxLength(50)
                    .HasComment("请假人");

                entity.Property(e => e.AgentName)
                    .HasMaxLength(50)
                    .HasComment("经办人");

                entity.Property(e => e.AlowApply).HasComment("可请请假次数 (产假假，1可请,0不可请）");

                entity.Property(e => e.AlreadyDays)
                    .HasColumnType("decimal(18, 1)")
                    .HasComment("年假 已休假天数");

                entity.Property(e => e.ApplyDays)
                    .HasColumnType("decimal(18, 1)")
                    .HasComment("请假自然天数");

                entity.Property(e => e.ApplyDept)
                    .HasMaxLength(50)
                    .HasComment("请假者部门");

                entity.Property(e => e.ApplyDeptNo)
                    .HasMaxLength(50)
                    .HasComment("请假者部门编码");

                entity.Property(e => e.ApplyHours)
                    .HasColumnType("decimal(18, 1)")
                    .HasComment("请假自然小时数");

                entity.Property(e => e.ApplyLoginUser).HasMaxLength(50);

                entity.Property(e => e.ApplyName).HasMaxLength(50);

                entity.Property(e => e.ApplyPhone).HasMaxLength(50);

                entity.Property(e => e.ApplyTime).HasColumnType("numeric(18, 1)");

                entity.Property(e => e.ApplyUserKey).HasMaxLength(50);

                entity.Property(e => e.AvailDays)
                    .HasColumnType("decimal(18, 1)")
                    .HasComment("可请假天数");

                entity.Property(e => e.BornNumber).HasComment("孩子胎数");

                entity.Property(e => e.BornWay)
                    .HasMaxLength(50)
                    .HasComment("生产方式");

                entity.Property(e => e.BrefirstTime)
                    .HasMaxLength(50)
                    .HasColumnName("BREFirstTime")
                    .HasComment("第一次开始结束哺乳时间");

                entity.Property(e => e.BresecondTime)
                    .HasMaxLength(50)
                    .HasColumnName("BRESecondTime")
                    .HasComment("第二次开始结束哺乳时间");

                entity.Property(e => e.Brnumber)
                    .HasColumnName("BRNumber")
                    .HasComment("哺乳次数/天  （1天最多两次）");

                entity.Property(e => e.BrsfirstTime)
                    .HasMaxLength(50)
                    .HasColumnName("BRSFirstTime")
                    .HasComment("第一次开始哺乳时间");

                entity.Property(e => e.BrssecondTime)
                    .HasMaxLength(50)
                    .HasColumnName("BRSSecondTime")
                    .HasComment("第二次开始哺乳时间");

                entity.Property(e => e.CallAddress).HasComment("探亲假 父母及配偶住址");

                entity.Property(e => e.CallAdress).HasComment("父母或配偶住址");

                entity.Property(e => e.CallPeople)
                    .HasMaxLength(50)
                    .HasComment("探亲对象");

                entity.Property(e => e.CardNo)
                    .HasMaxLength(50)
                    .HasComment("工卡号");

                entity.Property(e => e.CbornDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CBornDate")
                    .HasComment("孩子出生日期");

                entity.Property(e => e.EndDate)
                    .HasColumnType("datetime")
                    .HasComment("请假结束时间");

                entity.Property(e => e.EnterWorkDate)
                    .HasColumnType("datetime")
                    .HasComment("入院时间");

                entity.Property(e => e.Flag)
                    .HasDefaultValueSql("((0))")
                    .HasComment("销假标识 0 表示需要销假,1表示已经销假");

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(50)
                    .HasComment("表单号");

                entity.Property(e => e.FuneralUser)
                    .HasMaxLength(50)
                    .HasComment("丧假 (逝者称呼)");

                entity.Property(e => e.Hjstate)
                    .HasMaxLength(50)
                    .HasColumnName("HJState")
                    .HasComment("婚姻状况  1是初婚 2是再婚");

                entity.Property(e => e.Incident).HasComment("实例号");

                entity.Property(e => e.IsMarry).HasComment("婚姻状况 0未婚,1已婚");

                entity.Property(e => e.Jyway)
                    .HasMaxLength(50)
                    .HasColumnName("JYWay")
                    .HasComment("节育方式");

                entity.Property(e => e.Position)
                    .HasMaxLength(50)
                    .HasComment("岗 位");

                entity.Property(e => e.PregMonth).HasComment("妊娠月份");

                entity.Property(e => e.PregnantDate)
                    .HasColumnType("datetime")
                    .HasComment("妊娠开始日期");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名");

                entity.Property(e => e.ProcessStatus)
                    .HasDefaultValueSql("((0))")
                    .HasComment("流程状态，1是归档，2是撤销");

                entity.Property(e => e.RegisterDate)
                    .HasColumnType("datetime")
                    .HasComment("结婚登记日期");

                entity.Property(e => e.RemainDays)
                    .HasColumnType("decimal(18, 1)")
                    .HasComment("年假 剩余假期天数");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date")
                    .HasComment("请求日期");

                entity.Property(e => e.Sex).HasComment("性别");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasComment("请假开始时间");

                entity.Property(e => e.TypeId)
                    .HasMaxLength(50)
                    .HasColumnName("TypeID");

                entity.Property(e => e.TypeName)
                    .HasMaxLength(50)
                    .HasComment("请假类型");

                entity.Property(e => e.UserType).HasComment("人员类别");

                entity.Property(e => e.VacationDays)
                    .HasColumnType("decimal(18, 1)")
                    .HasComment("年假 可休假天数");

                entity.Property(e => e.WorkDate)
                    .HasColumnType("datetime")
                    .HasComment("参加工作时间");

                entity.Property(e => e.WorkDays)
                    .HasColumnType("decimal(18, 1)")
                    .HasComment("请假工作天数");

                entity.Property(e => e.WorkHours)
                    .HasColumnType("decimal(18, 1)")
                    .HasComment("请假工作小时数");
            });

            modelBuilder.Entity<TccApplySpecialFare>(entity =>
            {
                entity.ToTable("TCC_ApplySpecialFare");

                entity.HasIndex(e => e.FormNumber, "IX_TCC_ApplySpecialFare")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AllSum)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("allSum");

                entity.Property(e => e.ApplyDeptNo).HasMaxLength(50);

                entity.Property(e => e.ApplyLoginUser).HasMaxLength(50);

                entity.Property(e => e.ApplyName).HasMaxLength(50);

                entity.Property(e => e.ApplyPhone).HasMaxLength(50);

                entity.Property(e => e.ApplyType).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.Incident).HasComment("流程状态，1是归档，2是撤销,");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProcessStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");

                entity.Property(e => e.TimeMonth).HasMaxLength(50);
            });

            modelBuilder.Entity<TccApplyWorkVisa>(entity =>
            {
                entity.ToTable("TCC_ApplyWorkVisa");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptCode");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptName");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName");

                entity.Property(e => e.RequestTelPhone)
                    .HasMaxLength(50)
                    .HasColumnName("Request_TelPhone");

                entity.Property(e => e.RequestUserName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserName");
            });

            modelBuilder.Entity<TccApproveInfo>(entity =>
            {
                entity.ToTable("TCC_ApproveInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.TccApproveDate)
                    .HasColumnType("datetime")
                    .HasColumnName("TCC_ApproveDate");

                entity.Property(e => e.TccApproveName)
                    .HasMaxLength(50)
                    .HasColumnName("TCC_ApproveName");

                entity.Property(e => e.TccApproveResult)
                    .HasMaxLength(50)
                    .HasColumnName("TCC_ApproveResult");

                entity.Property(e => e.TccApproveState).HasColumnName("TCC_ApproveState");

                entity.Property(e => e.TccBigMoney)
                    .HasMaxLength(255)
                    .HasColumnName("TCC_BigMoney");

                entity.Property(e => e.TccRemark).HasColumnName("TCC_Remark");

                entity.Property(e => e.TccSmallMoney)
                    .HasMaxLength(255)
                    .HasColumnName("TCC_SmallMoney");

                entity.Property(e => e.TccStepId).HasColumnName("TCC_StepID");

                entity.Property(e => e.TccStepName)
                    .HasMaxLength(50)
                    .HasColumnName("TCC_StepName");
            });

            modelBuilder.Entity<TccApproveMoneyHistroy>(entity =>
            {
                entity.ToTable("TCC_ApproveMoneyHistroy");

                entity.Property(e => e.ApproveAdjustMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ApproveMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ApproveProjectStatus).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ApproverName).HasMaxLength(100);

                entity.Property(e => e.ApproverUserLoginName).HasMaxLength(100);

                entity.Property(e => e.ProcessName).HasMaxLength(100);
            });

            modelBuilder.Entity<TccApprovePreOfferAwardHistroy>(entity =>
            {
                entity.ToTable("TCC_ApprovePreOfferAwardHistroy");

                entity.HasComment("用于项目奖金发放流程中项目核定时展示或存储前期报价奖数据并记录核定历史");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.ActrualWork)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("实耗工时");

                entity.Property(e => e.AdjustmentFactor)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("调整系数");

                entity.Property(e => e.IncidentNo)
                    .HasDefaultValueSql("((0))")
                    .HasComment("实例号");

                entity.Property(e => e.PreOfferAward)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("前期报价奖奖金");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(100)
                    .HasComment("流程名");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(100)
                    .HasComment("项目编号");

                entity.Property(e => e.ProjectManager)
                    .HasMaxLength(100)
                    .HasComment("项目经理");

                entity.Property(e => e.ProjectManagerIdentityId)
                    .HasMaxLength(100)
                    .HasComment("项目经理身份证");

                entity.Property(e => e.ProjectManagerLoginname)
                    .HasMaxLength(100)
                    .HasComment("项目经理在edoc中的登录名");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(100)
                    .HasComment("项目名称");

                entity.Property(e => e.Status)
                    .HasDefaultValueSql("((0))")
                    .HasComment("状态");
            });

            modelBuilder.Entity<TccArchivesApply>(entity =>
            {
                entity.ToTable("TCC_ArchivesApply");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyDate).HasMaxLength(50);

                entity.Property(e => e.ApplyDeptName).HasMaxLength(50);

                entity.Property(e => e.ApplyDeptNo).HasMaxLength(50);

                entity.Property(e => e.ApplyLoginName).HasMaxLength(50);

                entity.Property(e => e.ApplyName).HasMaxLength(50);

                entity.Property(e => e.ArchiveDate).HasMaxLength(50);

                entity.Property(e => e.ArchiveNo).HasMaxLength(50);

                entity.Property(e => e.ArchivePlace).HasMaxLength(50);

                entity.Property(e => e.DisAgreeReason).HasColumnName("disAgreeReason");

                entity.Property(e => e.DocFileId).HasMaxLength(50);

                entity.Property(e => e.DocKind).HasMaxLength(50);

                entity.Property(e => e.DocNo).HasMaxLength(100);

                entity.Property(e => e.DocSource).HasMaxLength(50);

                entity.Property(e => e.DocType).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.FromProcessName).HasMaxLength(50);

                entity.Property(e => e.IncidentNo).HasMaxLength(50);

                entity.Property(e => e.InfoOpen).HasMaxLength(50);

                entity.Property(e => e.IsAgree).HasMaxLength(50);

                entity.Property(e => e.PaperCount).HasMaxLength(50);

                entity.Property(e => e.ProcessStatus).HasMaxLength(50);

                entity.Property(e => e.SaveType).HasMaxLength(50);

                entity.Property(e => e.SecLevel).HasMaxLength(50);

                entity.Property(e => e.SendDate).HasMaxLength(50);

                entity.Property(e => e.ThirdPart).HasMaxLength(50);
            });

            modelBuilder.Entity<TccAreaDivision>(entity =>
            {
                entity.ToTable("TCC_AreaDivision");

                entity.HasComment("地区分类表");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.AreaLeavel).HasComment("地区类别");

                entity.Property(e => e.AreaName)
                    .HasMaxLength(200)
                    .HasComment("地区名称");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasComment("创建时间");

                entity.Property(e => e.CreateUserLoginName)
                    .HasMaxLength(200)
                    .HasComment("创建人LoginName");

                entity.Property(e => e.CreateUserRealName)
                    .HasMaxLength(200)
                    .HasComment("创建人RealName");

                entity.Property(e => e.UpdateDate)
                    .HasColumnType("datetime")
                    .HasComment("修改时间");

                entity.Property(e => e.UpdateUserLoginName)
                    .HasMaxLength(200)
                    .HasComment("修改人LoginName");

                entity.Property(e => e.UpdateUserRealName)
                    .HasMaxLength(200)
                    .HasComment("修改人RealName");
            });

            modelBuilder.Entity<TccAskForLeave>(entity =>
            {
                entity.ToTable("TCC_AskForLeave");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.CardNo)
                    .HasMaxLength(20)
                    .HasComment("工作证号");

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(20)
                    .HasComment("流水号");

                entity.Property(e => e.HaveBorrow)
                    .HasMaxLength(20)
                    .HasComment("是否借款");

                entity.Property(e => e.Incident).HasComment("实例号");

                entity.Property(e => e.MainIncident).HasComment("主流程实例号");

                entity.Property(e => e.MainProcessName)
                    .HasMaxLength(500)
                    .HasComment("主流程名");

                entity.Property(e => e.ProcessFinishDate)
                    .HasColumnType("datetime")
                    .HasComment("流程结束时间");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(500)
                    .HasComment("流程名");

                entity.Property(e => e.ProcessStatus)
                    .HasDefaultValueSql("((0))")
                    .HasComment("流程状态   0=未完成  1=已完成 2=已撤销");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date")
                    .HasComment("申请时间");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptCode")
                    .HasComment("申请人所在部门编号");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(200)
                    .HasColumnName("Request_DeptName")
                    .HasComment("申请人所在部门名称");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName")
                    .HasComment("申请人账号");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName")
                    .HasComment("申请人姓名");

                entity.Property(e => e.TotalDays).HasComment("总计（天）");

                entity.Property(e => e.TotalHours).HasComment("总计（时）");

                entity.Property(e => e.TotalMinutes).HasComment("总计（分）");

                entity.Property(e => e.TravelBeginDate)
                    .HasColumnType("datetime")
                    .HasComment("出发日期");

                entity.Property(e => e.TravelEndDate)
                    .HasColumnType("datetime")
                    .HasComment("截止日期");
            });

            modelBuilder.Entity<TccAttachment>(entity =>
            {
                entity.HasKey(e => e.AttId)
                    .HasName("PK_TCC_ATTACHMENTS");

                entity.ToTable("TCC_Attachments");

                entity.Property(e => e.AttId).HasColumnName("Att_ID");

                entity.Property(e => e.AttAsdocId)
                    .HasColumnName("Att_ASDocID")
                    .HasComment("爱数文件 id");

                entity.Property(e => e.AttCreateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Att_CreateDate");

                entity.Property(e => e.AttFileId).HasColumnName("Att_FileID");

                entity.Property(e => e.AttFileName)
                    .HasMaxLength(100)
                    .HasColumnName("Att_FileName");

                entity.Property(e => e.AttFileUse)
                    .HasColumnName("Att_FileUse")
                    .HasDefaultValueSql("((0))")
                    .HasComment("文件用途，1：开卡申请流程新银行信息，2：开卡申请流程旧银行卡信息，3：开卡申请授权书");

                entity.Property(e => e.AttGuid)
                    .HasMaxLength(200)
                    .HasColumnName("Att_Guid");

                entity.Property(e => e.AttIncident).HasColumnName("Att_Incident");

                entity.Property(e => e.AttProcessName)
                    .HasMaxLength(50)
                    .HasColumnName("Att_ProcessName");

                entity.Property(e => e.AttState).HasColumnName("Att_State");

                entity.Property(e => e.AttStepName)
                    .HasMaxLength(100)
                    .HasColumnName("Att_StepName");

                entity.Property(e => e.AttUserId).HasColumnName("Att_UserID");

                entity.Property(e => e.AttUserName)
                    .HasMaxLength(100)
                    .HasColumnName("Att_UserName");
            });

            modelBuilder.Entity<TccAutoSumbitStepRecord>(entity =>
            {
                entity.ToTable("TCC_AutoSumbitStepRecord");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Apply_Date");

                entity.Property(e => e.ApplyUserDept)
                    .HasMaxLength(200)
                    .HasColumnName("Apply_UserDept");

                entity.Property(e => e.ApplyUserName)
                    .HasMaxLength(200)
                    .HasColumnName("Apply_UserName");

                entity.Property(e => e.ApproveDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Approve_Date");

                entity.Property(e => e.ApproveRemark).HasColumnName("Approve_Remark");

                entity.Property(e => e.ApproveResult)
                    .HasMaxLength(200)
                    .HasColumnName("Approve_Result");

                entity.Property(e => e.ApproveResultCode).HasColumnName("Approve_ResultCode");

                entity.Property(e => e.ApproveUserLoginName)
                    .HasMaxLength(200)
                    .HasColumnName("Approve_UserLoginName");

                entity.Property(e => e.ApproveUserName)
                    .HasMaxLength(200)
                    .HasColumnName("Approve_UserName");

                entity.Property(e => e.FormNumber).HasMaxLength(200);

                entity.Property(e => e.ProcessName).HasMaxLength(200);

                entity.Property(e => e.StepName).HasMaxLength(200);
            });

            modelBuilder.Entity<TccAwardAdjustMentPlan>(entity =>
            {
                entity.ToTable("TCC_AwardAdjustMentPlan");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.AwardAdjustMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("钱数");

                entity.Property(e => e.AwardAdjustMoneyFromProcess)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("全年预算总金额，来自年度预算流程");

                entity.Property(e => e.AwardAdjustMoneyQ1)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("第一季度预算金额");

                entity.Property(e => e.AwardAdjustMoneyQ2)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("第二季度预算金额");

                entity.Property(e => e.AwardAdjustMoneyQ3)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("第三季度预算金额");

                entity.Property(e => e.AwardAdjustMoneyQ4)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("第四季度预算金额");

                entity.Property(e => e.AwardComposed)
                    .HasMaxLength(100)
                    .HasComment("奖项组成");

                entity.Property(e => e.AwardComposedCode)
                    .HasMaxLength(255)
                    .HasComment("奖项组成编码");

                entity.Property(e => e.AwardName)
                    .HasMaxLength(100)
                    .HasComment("奖项名称");

                entity.Property(e => e.AwardNameCode)
                    .HasMaxLength(255)
                    .HasComment("奖项名称编码");

                entity.Property(e => e.AwardType)
                    .HasMaxLength(100)
                    .HasComment("奖项类别");

                entity.Property(e => e.AwardTypeCode)
                    .HasMaxLength(255)
                    .HasComment("奖项类别编码");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("生成时间");

                entity.Property(e => e.Dept)
                    .HasMaxLength(100)
                    .HasComment("主管部门，分子公司奖格式为部门代码-部门名称");

                entity.Property(e => e.DeptCode).HasMaxLength(20);

                entity.Property(e => e.Editor)
                    .HasMaxLength(200)
                    .HasComment("编辑人");

                entity.Property(e => e.IncidentNo)
                    .HasDefaultValueSql("((0))")
                    .HasComment("实例号");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(200)
                    .HasComment("流程名");

                entity.Property(e => e.Status)
                    .HasDefaultValueSql("((0))")
                    .HasComment("状态 0=录入数据但未发起流程 1=已发起流程 2=流程归档  3=撤销");

                entity.Property(e => e.Year).HasComment("应用年度");
            });

            modelBuilder.Entity<TccAwardAdjustMentPlanProcess>(entity =>
            {
                entity.ToTable("TCC_AwardAdjustMentPlanProcess");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.FormNumber).HasMaxLength(20);

                entity.Property(e => e.ProcessFinishDate).HasColumnType("datetime");

                entity.Property(e => e.ProcessName).HasMaxLength(100);

                entity.Property(e => e.Remark).HasMaxLength(1000);

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptCode");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(200)
                    .HasColumnName("Request_DeptName");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName");
            });

            modelBuilder.Entity<TccAwardAdjustMentPlanProcessLine>(entity =>
            {
                entity.ToTable("TCC_AwardAdjustMentPlanProcessLines");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AwardAdjustMoneyQuarter)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("申请金额");

                entity.Property(e => e.AwardAdjustMoneyYear).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AwardAdjustMoneyYearSendOut).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AwardComposed)
                    .HasMaxLength(100)
                    .HasComment("奖项组成");

                entity.Property(e => e.AwardComposedCode)
                    .HasMaxLength(100)
                    .HasComment("奖项组成代码");

                entity.Property(e => e.AwardName)
                    .HasMaxLength(100)
                    .HasComment("奖项名称");

                entity.Property(e => e.AwardNameCode)
                    .HasMaxLength(100)
                    .HasComment("奖项名称代码");

                entity.Property(e => e.AwardType)
                    .HasMaxLength(100)
                    .HasComment("奖项类别");

                entity.Property(e => e.AwardTypeCode)
                    .HasMaxLength(100)
                    .HasComment("奖项类别代码");

                entity.Property(e => e.Dept).HasMaxLength(100);

                entity.Property(e => e.DeptCode).HasMaxLength(50);

                entity.Property(e => e.Incident).HasComment("实例号");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(200)
                    .HasComment("流程名");

                entity.Property(e => e.UserLoginName).HasMaxLength(50);
            });

            modelBuilder.Entity<TccAwardAdjustYearMentPlanProcess>(entity =>
            {
                entity.ToTable("TCC_AwardAdjustYearMentPlanProcess");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(50)
                    .HasComment("表单编号");

                entity.Property(e => e.Incident).HasComment("流程实例号");

                entity.Property(e => e.ProcessFinishDate)
                    .HasColumnType("datetime")
                    .HasComment("归档时间");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(100)
                    .HasComment("流程名称");

                entity.Property(e => e.ProcessStatus).HasComment("流程状态 0进行中  1已完成  2撤销");

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .HasComment("备注");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date")
                    .HasComment("申请时间");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptCode")
                    .HasComment("申请人主管部门编号");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptName")
                    .HasComment("申请人主管部门名称");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName")
                    .HasComment("申请人登录名");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName")
                    .HasComment("申请人姓名");

                entity.Property(e => e.RequestUserIdentity)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserIdentity")
                    .HasComment("申请人身份证号");

                entity.Property(e => e.Year).HasComment("年度");
            });

            modelBuilder.Entity<TccAwardAdjustYearMentPlanProcessLine>(entity =>
            {
                entity.ToTable("TCC_AwardAdjustYearMentPlanProcessLines");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AlterAwardAdjustMoneyYear)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("本次调整后预算");

                entity.Property(e => e.AwardAdjustMoneyYear)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("年度预算总额");

                entity.Property(e => e.AwardAdjustMoneyYearCanSend)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("年度奖金余额");

                entity.Property(e => e.AwardAdjustMoneyYearSendOut)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("年度已发放总额");

                entity.Property(e => e.AwardAlreadyMoneyYear)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("年度已分配总额");

                entity.Property(e => e.AwardComposed)
                    .HasMaxLength(100)
                    .HasComment("奖项组成");

                entity.Property(e => e.AwardComposedCode)
                    .HasMaxLength(100)
                    .HasComment("奖项组成代码");

                entity.Property(e => e.AwardName)
                    .HasMaxLength(100)
                    .HasComment("奖项名称");

                entity.Property(e => e.AwardNameCode)
                    .HasMaxLength(100)
                    .HasComment("奖项名称代码");

                entity.Property(e => e.AwardType)
                    .HasMaxLength(100)
                    .HasComment("奖项类别");

                entity.Property(e => e.AwardTypeCode)
                    .HasMaxLength(100)
                    .HasComment("奖项类别代码");

                entity.Property(e => e.Dept).HasMaxLength(100);

                entity.Property(e => e.DeptCode).HasMaxLength(50);

                entity.Property(e => e.Incident).HasComment("流程实例号");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(100)
                    .HasComment("流程名称");

                entity.Property(e => e.UserLoginName)
                    .HasMaxLength(50)
                    .HasComment("申请人登录名");
            });

            modelBuilder.Entity<TccAwardAssign2DeptAssign>(entity =>
            {
                entity.ToTable("TCC_AwardAssign2_DeptAssign");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Adjustment)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("调整系数");

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AmountCurrentQ)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("本季度奖金总额");

                entity.Property(e => e.AnnualAdjustmentAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("年度调剂奖总额（部门调剂奖 使用此字段）");

                entity.Property(e => e.AnnualHoursActual)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("年度实耗工时 （部门调剂奖 使用此字段）");

                entity.Property(e => e.AnnualHoursDone)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("年度完成工时（部门调剂奖 使用此字段）");

                entity.Property(e => e.AnnualProjectAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("年度项目奖总额（部门调剂奖 使用此字段）");

                entity.Property(e => e.AssignFromDept)
                    .HasMaxLength(50)
                    .HasComment("是由哪个部门分配(部门编号)");

                entity.Property(e => e.AssignFromDeptName)
                    .HasMaxLength(50)
                    .HasComment("是由哪个部门分配(部门名称)");

                entity.Property(e => e.AssignFromUser)
                    .HasMaxLength(50)
                    .HasComment("是由哪个人分配的(登录名称)");

                entity.Property(e => e.AssignFromUserIdentity)
                    .HasMaxLength(50)
                    .HasComment("是由哪个人分配的(身份证号)");

                entity.Property(e => e.AssignFromUserRealName)
                    .HasMaxLength(50)
                    .HasComment("是由哪个人分配的(真实姓名)");

                entity.Property(e => e.AwardCategory)
                    .HasMaxLength(50)
                    .HasComment("奖项编号");

                entity.Property(e => e.CanAssign)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("(N'N')")
                    .HasComment("此行奖金是否可以进行分配 （默认值为N）   Y=可以分配   N=不可以分配   在此表中 Y表示已分配完成 N表示已保存但还未提交");

                entity.Property(e => e.CanDoAdjustment)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("能力系数 （部门调剂奖 使用此字段）");

                entity.Property(e => e.CountMoneyAvg).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .HasComment("接收人所在主管部门编号");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(200)
                    .HasComment("接收人所在部门名称");

                entity.Property(e => e.HoursActual)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("实耗工时");

                entity.Property(e => e.HoursCheck)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("核定工时");

                entity.Property(e => e.HoursDone)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("完成工时");

                entity.Property(e => e.IsFanPin)
                    .HasMaxLength(10)
                    .HasComment("是否返聘  Y=是 N=否");

                entity.Property(e => e.PersonLoginName).HasMaxLength(50);

                entity.Property(e => e.PersonRealName).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(500);

                entity.Property(e => e.ReceiverDate)
                    .HasColumnType("datetime")
                    .HasComment("奖金接收时间");

                entity.Property(e => e.UserIdentity).HasMaxLength(50);
            });

            modelBuilder.Entity<TccAwardAssign2DeptLine>(entity =>
            {
                entity.ToTable("TCC_AwardAssign2_DeptLines");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Adjustment)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("调整系数");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("金额");

                entity.Property(e => e.AmountQuarterAvg)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("季度人均金额");

                entity.Property(e => e.AssignDate)
                    .HasColumnType("datetime")
                    .HasComment("奖金发放时间");

                entity.Property(e => e.AssignStatus)
                    .HasDefaultValueSql("((1))")
                    .HasComment("是否分配 1=未分配 2=已分配");

                entity.Property(e => e.AwardAmountAdj)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("奖金系数");

                entity.Property(e => e.AwardCategory)
                    .HasMaxLength(50)
                    .HasComment("奖项名称");

                entity.Property(e => e.AwardsContentSummary).HasComment("奖项内容摘要");

                entity.Property(e => e.BasicWorkName)
                    .HasMaxLength(2000)
                    .HasComment("基础工作名称");

                entity.Property(e => e.CanAssign)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'N')")
                    .HasComment("此行奖金是否可以进行分配 （默认值为N）   Y=可以分配   N=不可以分配 ");

                entity.Property(e => e.CanDoPersonAvg)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("能力人均调剂奖 （部门调剂奖）");

                entity.Property(e => e.CanDoPersonCount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("能力人数 （部门调剂奖）");

                entity.Property(e => e.CanDoPersonProAvg)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("年度能力人均项目奖 （部门调剂奖）");

                entity.Property(e => e.CanDoPersonProportion)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("能力人数比例 （部门调剂奖）");

                entity.Property(e => e.CanDoPersonYearAvg)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("年度能力人均调剂奖  （部门调剂奖）");

                entity.Property(e => e.CountMoneyAvg).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CountMoneyTotal).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CountRow).HasMaxLength(20);

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .HasComment("主管部门编号");

                entity.Property(e => e.DeptManagerIdentity)
                    .HasMaxLength(50)
                    .HasComment("部门负责人 身份证号");

                entity.Property(e => e.DeptManagerLoginName)
                    .HasMaxLength(50)
                    .HasComment("部门负责人 登录名");

                entity.Property(e => e.DeptManagerRealName)
                    .HasMaxLength(100)
                    .HasComment("部门负责人 真实姓名");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(200)
                    .HasComment("主管部门名称");

                entity.Property(e => e.HoursActual)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("实耗工时");

                entity.Property(e => e.HoursCanDo)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("能办工时");

                entity.Property(e => e.HoursCheck)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("核定工时");

                entity.Property(e => e.HoursDone)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("完成工时");

                entity.Property(e => e.HoursSubcontractors)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("分包人工时");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(500)
                    .HasComment("说明");

                entity.Property(e => e.ProductionPersonAvg)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("生产人均调剂奖 （部门调剂奖）");

                entity.Property(e => e.ProductionPersonCount).HasComment("生产人数  （部门调剂奖）");

                entity.Property(e => e.Professional)
                    .HasMaxLength(200)
                    .HasComment("专业");

                entity.Property(e => e.ReceiverDate)
                    .HasColumnType("datetime")
                    .HasComment("部门接收奖金时间（主管经理节点审批完成时间）");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName")
                    .HasComment("流程申请人登录名");

                entity.Property(e => e.WorkSubcontractors).HasComment("分包工作内容");
            });

            modelBuilder.Entity<TccAwardAssign2DeptPersonDetail>(entity =>
            {
                entity.ToTable("TCC_AwardAssign2_DeptPersonDetails");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CanDoPerson)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("能力人数");

                entity.Property(e => e.DeptCode).HasMaxLength(50);

                entity.Property(e => e.DeptName).HasMaxLength(1000);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.UserIdentity).HasMaxLength(50);

                entity.Property(e => e.UserLoginName).HasMaxLength(50);

                entity.Property(e => e.UserRealName).HasMaxLength(50);
            });

            modelBuilder.Entity<TccAwardAssign2Header>(entity =>
            {
                entity.ToTable("TCC_AwardAssign2_header");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AmountDesignSubcCurrent)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Amount_DesignSubcCurrent")
                    .HasComment("管理分包奖项中本次设计分包奖金额");

                entity.Property(e => e.AmountManagementSubc)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Amount_ManagementSubc")
                    .HasComment("管理分包奖中的其他分包金额即管理分包奖\r\n   奖项若为专业设计分包奖、项目设计分包奖则此字段存的是表单对应该的已发放金额 （当前申请的明细行合计金额）\r\n");

                entity.Property(e => e.ApplyCategory)
                    .HasMaxLength(10)
                    .HasComment("用于表示是为人申请的还是为部门申请还是为项目申请的");

                entity.Property(e => e.AssignDeptCode)
                    .HasMaxLength(50)
                    .HasComment("发放部门编号（目前只有精神文明奖用到此字段）");

                entity.Property(e => e.AssignDeptName)
                    .HasMaxLength(200)
                    .HasComment("发放部门名称（目前只有精神文明奖用到此字段）");

                entity.Property(e => e.AwardAlreadyPay)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("已发放奖金总额\r\n    若奖项为专业设计分包奖、项目设计分包奖 则此字段存的是分包合同已支付金额");

                entity.Property(e => e.AwardBudget)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("年度预算奖金总额\r\n   奖项若为管理分包奖则此字段存的是分包管理奖金额\r\n   奖项若为专业设计分包奖、项目设计分包奖则此字段存的是分包合同额");

                entity.Property(e => e.AwardCategory)
                    .HasMaxLength(50)
                    .HasComment("奖金类别 编号  从TCC_BasicAward表中获得");

                entity.Property(e => e.AwardRemaining)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("剩余奖金额\r\n   奖项若为管理分包奖则此字段存的是设计分包奖金额\r\n   奖项若为专业设计分包奖、项目设计分包奖则此字段存的是已发放设计分包奖金额");

                entity.Property(e => e.AwardSummaryJskfj)
                    .HasColumnName("AwardSummary_JSKFJ")
                    .HasComment("技术开发奖 摘要");

                entity.Property(e => e.AwardsContentSummary)
                    .HasMaxLength(200)
                    .HasComment("奖项内容摘要（目前只有精神文明奖用到此字段）");

                entity.Property(e => e.CurrQreference)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("CurrQReference")
                    .HasComment("本季度基准额   部门调剂奖用到此字段");

                entity.Property(e => e.ForeignUnitAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("本次发放外单位金额");

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(20)
                    .HasComment("表单编号");

                entity.Property(e => e.IncludeForeignUnitAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("其中外单位金额");

                entity.Property(e => e.IncludeOvertime)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("其中加班工时奖（目前只有部门调剂奖用到）");

                entity.Property(e => e.IsProjectAward)
                    .HasDefaultValueSql("((1))")
                    .HasComment("是否为项目奖项   1=否 2=是");

                entity.Property(e => e.ProcessFinishDate)
                    .HasColumnType("datetime")
                    .HasComment("流程结束时间");

                entity.Property(e => e.ProcessName).HasMaxLength(500);

                entity.Property(e => e.ProcessStatus)
                    .HasDefaultValueSql("((0))")
                    .HasComment("流程状态  0=未完成 1=已完成 2=已撤销");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date")
                    .HasComment("申请日期");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptCode")
                    .HasComment("申请人所在主管部门编号");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(200)
                    .HasColumnName("Request_DeptName")
                    .HasComment("申请人所在主管部门名称");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName")
                    .HasComment("申请人登录名");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName")
                    .HasComment("申请人姓名");

                entity.Property(e => e.UserIdentity)
                    .HasMaxLength(50)
                    .HasComment("身份证号");
            });

            modelBuilder.Entity<TccAwardAssign2PersonLine>(entity =>
            {
                entity.ToTable("TCC_AwardAssign2_PersonLines");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Adjustment)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("调整 系数");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("金额");

                entity.Property(e => e.AmountAlreadyReceivables)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Amount_AlreadyReceivables")
                    .HasComment("已收金额");

                entity.Property(e => e.AmountReceivablesCurrentQ)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Amount_ReceivablesCurrentQ")
                    .HasComment("本季度收款金额");

                entity.Property(e => e.AnnualPlanHoursSafe)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("年度预计安全工时  安全管理 奖用到此字段");

                entity.Property(e => e.AwardBase)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("奖金基数   （安全管理奖 用到此字段）");

                entity.Property(e => e.AwardCategory)
                    .HasMaxLength(50)
                    .HasComment("奖项编号");

                entity.Property(e => e.AwardsContentSummary).HasComment("奖项内容摘要");

                entity.Property(e => e.BasicWorkContent).HasComment("基础工作内容（基础工作奖使用此字段）");

                entity.Property(e => e.CanAssign)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("(N'N')")
                    .HasComment("此行奖金是否可以进行分配 （默认值为N）   Y=可以分配   N=不可以分配 ");

                entity.Property(e => e.ContractPrice)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("合同金额");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .HasComment("主管部门编号");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(200)
                    .HasComment("主管部门名称");

                entity.Property(e => e.HoursSafe)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("安全工时");

                entity.Property(e => e.Incident).HasComment("实例号");

                entity.Property(e => e.IsFanPin)
                    .HasMaxLength(10)
                    .HasComment("是否返聘  Y=是 N=否");

                entity.Property(e => e.OptimalContent).HasComment("优化内容简述");

                entity.Property(e => e.PersonLoginName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("人员登录名");

                entity.Property(e => e.PersonRealName)
                    .HasMaxLength(50)
                    .HasComment("人员真实姓名");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(500)
                    .HasComment("流程名");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .HasComment("项目编号  技术开发奖用到此字段");

                entity.Property(e => e.ProjectManagerIdentity)
                    .HasMaxLength(50)
                    .HasComment("项目经理身份证号（技术开发奖用到此字段）");

                entity.Property(e => e.ProjectManagerLoginName)
                    .HasMaxLength(50)
                    .HasComment("项目经理登录账号 （技术开发奖用到此字段）");

                entity.Property(e => e.ProjectManagerRealName)
                    .HasMaxLength(50)
                    .HasComment("项目经理姓名（技术开发奖用到此字段）");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(2000)
                    .HasComment("项目名称  技术开发奖用到此字段");

                entity.Property(e => e.ReceiverDate)
                    .HasColumnType("datetime")
                    .HasComment("个人接收奖金时间（主管经理节点审批完成时间）");

                entity.Property(e => e.Remark).HasComment("备注");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName")
                    .HasComment("流程申请人登录名");

                entity.Property(e => e.ResponsibilityBookNumber)
                    .HasMaxLength(100)
                    .HasComment("责任书编号");

                entity.Property(e => e.ResponsibilityScope).HasComment("责任区域 (安全管理奖用到此字段)");

                entity.Property(e => e.ResponsibilityScopeCode)
                    .HasMaxLength(50)
                    .HasComment("项目编号/区域编号  用于安全管理奖");

                entity.Property(e => e.ResponsibilityScopeRemark).HasComment("责任范围描述");

                entity.Property(e => e.RiskGuarantee)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("风险抵押金 (安全管理奖用到此字段)");

                entity.Property(e => e.SafetyAssessment)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("安全考核分数");

                entity.Property(e => e.UserIdentity)
                    .HasMaxLength(50)
                    .HasComment("身份证号");

                entity.Property(e => e.WorkEvaluation)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("工作量估评估");

                entity.Property(e => e.YearHourSafe)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("年度安全工时 用于安全管理奖");
            });

            modelBuilder.Entity<TccAwardAssign2ProjectAssign>(entity =>
            {
                entity.ToTable("TCC_AwardAssign2_ProjectAssign");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Adjustment)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("调整系数");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("分配金额");

                entity.Property(e => e.AssignDate)
                    .HasColumnType("datetime")
                    .HasComment("奖金发放时间");

                entity.Property(e => e.AssignFrom).HasComment("由由哪个角色分配的   0=由项目经理分配的  1=由设计经理分配的 2=由专业经理分配的 3=由专业负责人分配的");

                entity.Property(e => e.AssignFromUser)
                    .HasMaxLength(50)
                    .HasComment("分配人登录名称");

                entity.Property(e => e.AssignFromUserIdentity)
                    .HasMaxLength(50)
                    .HasComment("分配人身份证号");

                entity.Property(e => e.AssignFromUserRealName)
                    .HasMaxLength(50)
                    .HasComment("奖金分配人的真实姓名");

                entity.Property(e => e.AssignStatus)
                    .HasDefaultValueSql("((1))")
                    .HasComment("分配状态 1=正在分配中  2=已分配完成");

                entity.Property(e => e.AwardCategory)
                    .HasMaxLength(50)
                    .HasComment("奖项编号");

                entity.Property(e => e.CanAssign)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'N')")
                    .HasComment("此行奖金是否可以进行分配 （默认值为N）   Y=可以分配   N=不可以分配    （也用与标识上级发放人加载完数据后是否可以修改 如果=Y说明上级发放人已点了发放且不允许在修改）");

                entity.Property(e => e.IsFanPin)
                    .HasMaxLength(10)
                    .HasComment("是否返聘  Y=是 N=否");

                entity.Property(e => e.OptimalContent).HasComment("优化内容简述 ");

                entity.Property(e => e.ParentId).HasComment("父ID  即数据源来的主键ID");

                entity.Property(e => e.ProcessName).HasMaxLength(500);

                entity.Property(e => e.Professional)
                    .HasMaxLength(100)
                    .HasComment("专业");

                entity.Property(e => e.ProjectCategory)
                    .HasMaxLength(200)
                    .HasComment("项目类型");

                entity.Property(e => e.ProjectCode).HasMaxLength(200);

                entity.Property(e => e.ProjectName).HasMaxLength(200);

                entity.Property(e => e.ReceiverDate)
                    .HasColumnType("datetime")
                    .HasComment("接收奖金时间");

                entity.Property(e => e.ReceiverLoginName)
                    .HasMaxLength(50)
                    .HasComment("接收人登录名");

                entity.Property(e => e.ReceiverRealName)
                    .HasMaxLength(50)
                    .HasComment("接收人真实姓名");

                entity.Property(e => e.ReceiverType).HasComment("接收人类型\r\n   1 = 设计经理\r\n   2 = 专业经理\r\n   3 = 专业负责人\r\n   4 = 具体人员");

                entity.Property(e => e.RejectTimes).HasComment("项目经理明细审批时被退回的次数");

                entity.Property(e => e.Role)
                    .HasMaxLength(100)
                    .HasComment("角色");

                entity.Property(e => e.UserIdentity)
                    .HasMaxLength(50)
                    .HasComment("接收人身份证号");

                entity.Property(e => e.WorkEvaluation)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("工作量评估");
            });

            modelBuilder.Entity<TccAwardAssign2ProjectLine>(entity =>
            {
                entity.ToTable("TCC_AwardAssign2_ProjectLines");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AccidentsRecord).HasComment("事故记录");

                entity.Property(e => e.Adjustment)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("调整系数");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("奖金额");

                entity.Property(e => e.AssignDate)
                    .HasColumnType("datetime")
                    .HasComment("奖金发放时间");

                entity.Property(e => e.AssignStatus)
                    .HasDefaultValueSql("((1))")
                    .HasComment("分配状态 1=未分配 2=已分配");

                entity.Property(e => e.AwardBase)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("奖金基数");

                entity.Property(e => e.AwardCategory)
                    .HasMaxLength(50)
                    .HasComment("奖项编号");

                entity.Property(e => e.CanAssign)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('N')")
                    .HasComment("此行奖金是否可以进行分配 （默认值为N）   Y=可以分配   N=不可以分配 ");

                entity.Property(e => e.DesignSubcontractAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("设计分包合同额（项目设计分包奖中用到）");

                entity.Property(e => e.DesignSubcontractPayAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("设计分包合同已支付额（项目设计分包奖中用到）");

                entity.Property(e => e.HoursActual)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("实耗工时");

                entity.Property(e => e.HoursSafe)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("安全人工时");

                entity.Property(e => e.OptimalContent).HasComment("优化内容简述 ");

                entity.Property(e => e.Optimization)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("优化工程量");

                entity.Property(e => e.ProcessName).HasMaxLength(500);

                entity.Property(e => e.ProjectCategory)
                    .HasMaxLength(200)
                    .HasComment("项目类别");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(200)
                    .HasComment("项目编号");

                entity.Property(e => e.ProjectManager)
                    .HasMaxLength(50)
                    .HasComment("项目经理edoc登录账号");

                entity.Property(e => e.ProjectManagerName)
                    .HasMaxLength(50)
                    .HasComment("项目经理真实姓名");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(200)
                    .HasComment("项目名称");

                entity.Property(e => e.ReceiverDate)
                    .HasColumnType("datetime")
                    .HasComment("项目经理接收奖金时间（主管经理节点审批完成时间）");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName")
                    .HasComment("流程申请人登录名");

                entity.Property(e => e.SafetyAssessment)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("安全考核分数");

                entity.Property(e => e.Summary)
                    .HasMaxLength(500)
                    .HasComment("摘要");

                entity.Property(e => e.UserIdentity)
                    .HasMaxLength(50)
                    .HasComment("项目经理身份证号");

                entity.Property(e => e.WorkEvaluation)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("工作量评估 ");

                entity.Property(e => e.WorkSubcontractors).HasComment("分包工作内容");
            });

            modelBuilder.Entity<TccAwardBusinessAprovessHistroy>(entity =>
            {
                entity.ToTable("TCC_AwardBusinessAprovessHistroy");

                entity.HasComment("记录在业务模块中审批是否同意发放奖金的表");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.ApproveUser).HasMaxLength(100);

                entity.Property(e => e.ApproveUserRole)
                    .HasMaxLength(100)
                    .HasComment("审批人角色（或者说步骤名称）");

                entity.Property(e => e.AwardCode)
                    .HasMaxLength(50)
                    .HasComment("奖项编号");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("审批时间");

                entity.Property(e => e.IsAgreed).HasComment("是否同意");

                entity.Property(e => e.IsAgreedResult)
                    .HasMaxLength(100)
                    .HasComment("是否同意中文显示");

                entity.Property(e => e.RecordId).HasComment("奖金分配记录编号");

                entity.Property(e => e.Remark)
                    .HasMaxLength(200)
                    .HasComment("意见");
            });

            modelBuilder.Entity<TccAwardPaymentHistroy>(entity =>
            {
                entity.ToTable("TCC_AwardPaymentHistroy");

                entity.HasComment("用户奖金分配流程中记录给每个人发放了多少奖金");

                entity.HasIndex(e => new { e.ProcessName, e.IncidentNo, e.AwardReceiverIdentityId, e.Status, e.AwardDesc, e.ArchiveDate }, "IX_AutoGen_20140724_13315");

                entity.HasIndex(e => new { e.ProcessName, e.IncidentNo, e.AwardReceiverIdentityId }, "IX_AutoGen_20140724_13317");

                entity.HasIndex(e => new { e.ProcessName, e.IncidentNo, e.AwardDesc, e.SenderIdentityId, e.ReceiverType }, "IX_AutoGen_20140724_13319");

                entity.HasIndex(e => new { e.Status, e.ArchiveDate, e.Role, e.ReceiverType }, "IX_AutoGen_20140724_13321");

                entity.HasIndex(e => e.ReceiverType, "IX_AutoGen_20140724_13323");

                entity.HasIndex(e => new { e.Status, e.ArchiveDate }, "IX_AutoGen_20140724_13325");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.ArchiveDate).HasColumnType("datetime");

                entity.Property(e => e.AwardComposed)
                    .HasMaxLength(100)
                    .HasComment("奖金组成名称");

                entity.Property(e => e.AwardComposedCode)
                    .HasMaxLength(100)
                    .HasComment("奖金组成编号编号");

                entity.Property(e => e.AwardDesc)
                    .HasMaxLength(100)
                    .HasComment("页面显示的名称");

                entity.Property(e => e.AwardReceiver)
                    .HasMaxLength(100)
                    .HasComment("奖金接收人");

                entity.Property(e => e.AwardReceiverIdentityId)
                    .HasMaxLength(100)
                    .HasComment("奖金接收人身份证");

                entity.Property(e => e.AwardReceiverLoginName)
                    .HasMaxLength(100)
                    .HasComment("奖金接收人帐号");

                entity.Property(e => e.BeginTime).HasColumnType("datetime");

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.IncidentNo)
                    .HasDefaultValueSql("((0))")
                    .HasComment("实例号");

                entity.Property(e => e.IsFanPin).HasMaxLength(100);

                entity.Property(e => e.NoticeStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.PaymentDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("发放时间");

                entity.Property(e => e.PaymentMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("发放金额");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(100)
                    .HasComment("流程名");

                entity.Property(e => e.Professional)
                    .HasMaxLength(100)
                    .HasComment("专业");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(100)
                    .HasComment("项目编号");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(200)
                    .HasComment("项目名称");

                entity.Property(e => e.ReceiverDeptManager).HasMaxLength(100);

                entity.Property(e => e.ReceiverType)
                    .HasDefaultValueSql("((0))")
                    .HasComment("接收人类型\r\n   1 专业经理\r\n   2 专业负责人\r\n   3 具体人员");

                entity.Property(e => e.Role)
                    .HasMaxLength(100)
                    .HasComment("角色");

                entity.Property(e => e.SenderIdentityId)
                    .HasMaxLength(100)
                    .HasComment("发放人身份证号");

                entity.Property(e => e.Status)
                    .HasDefaultValueSql("((0))")
                    .HasComment("发放状态");

                entity.Property(e => e.StepId).HasComment("发放步骤ID");
            });

            modelBuilder.Entity<TccAwardPool>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_AwardPool");

                entity.Property(e => e.ApproveMoney).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.ArchiveDate).HasColumnType("datetime");

                entity.Property(e => e.AwardComposedCode).HasMaxLength(100);

                entity.Property(e => e.AwardMoney).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.BelongFlag)
                    .HasMaxLength(50)
                    .HasColumnName("belongFlag");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Dept).HasMaxLength(200);

                entity.Property(e => e.DeptCode).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(200);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IsFanPin).HasMaxLength(100);

                entity.Property(e => e.ProcessName).HasMaxLength(500);

                entity.Property(e => e.ProjectCode).HasMaxLength(200);

                entity.Property(e => e.ProjectName).HasMaxLength(2000);

                entity.Property(e => e.ProjectType).HasMaxLength(200);

                entity.Property(e => e.Sharer)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UserIdentityId).HasMaxLength(100);

                entity.Property(e => e.UserLoginName).HasMaxLength(100);

                entity.Property(e => e.UserName).HasMaxLength(100);
            });

            modelBuilder.Entity<TccAwardPoolForArchive>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_AwardPoolForArchive");

                entity.Property(e => e.ApproveMoney).HasColumnType("numeric(38, 2)");

                entity.Property(e => e.ArchiveDate).HasColumnType("datetime");

                entity.Property(e => e.AwardComposedCode).HasMaxLength(100);

                entity.Property(e => e.AwardMoney).HasColumnType("numeric(20, 4)");

                entity.Property(e => e.BelongFlag)
                    .HasMaxLength(50)
                    .HasColumnName("belongFlag");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Dept).HasMaxLength(200);

                entity.Property(e => e.DeptCode).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(200);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IsFanPin).HasMaxLength(100);

                entity.Property(e => e.ProcessName).HasMaxLength(500);

                entity.Property(e => e.ProjectCode).HasMaxLength(200);

                entity.Property(e => e.ProjectName).HasMaxLength(2000);

                entity.Property(e => e.ProjectType).HasMaxLength(200);

                entity.Property(e => e.Sharer)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UserIdentityId).HasMaxLength(100);

                entity.Property(e => e.UserLoginName).HasMaxLength(100);

                entity.Property(e => e.UserName).HasMaxLength(100);
            });

            modelBuilder.Entity<TccAwardPoolTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_AwardPoolTEMP");

                entity.Property(e => e.ApproveMoney).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.ArchiveDate).HasColumnType("datetime");

                entity.Property(e => e.AwardComposedCode).HasMaxLength(100);

                entity.Property(e => e.AwardMoney).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.BelongFlag)
                    .HasMaxLength(50)
                    .HasColumnName("belongFlag");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Dept).HasMaxLength(200);

                entity.Property(e => e.DeptCode).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(200);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IsFanPin).HasMaxLength(100);

                entity.Property(e => e.ProcessName).HasMaxLength(500);

                entity.Property(e => e.ProjectCode).HasMaxLength(200);

                entity.Property(e => e.ProjectName).HasMaxLength(2000);

                entity.Property(e => e.ProjectType).HasMaxLength(200);

                entity.Property(e => e.Sharer)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UserIdentityId).HasMaxLength(100);

                entity.Property(e => e.UserLoginName).HasMaxLength(100);

                entity.Property(e => e.UserName).HasMaxLength(100);
            });

            modelBuilder.Entity<TccAwardSenderHistroy>(entity =>
            {
                entity.ToTable("TCC_AwardSenderHistroy");

                entity.HasIndex(e => new { e.UserIdentityId, e.Pid }, "IX_AutoGen_20140724_12682");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(100)
                    .HasComment("部门编号");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(100)
                    .HasComment("部门名称");

                entity.Property(e => e.IncidentNo).HasComment("实例号");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(100)
                    .HasComment("流程名");

                entity.Property(e => e.SenderIdentityid)
                    .HasMaxLength(100)
                    .HasComment("奖金发放人的身份证号");

                entity.Property(e => e.SenderLoginName)
                    .HasMaxLength(50)
                    .HasComment("奖金发放人的账号");

                entity.Property(e => e.SenderRealName)
                    .HasMaxLength(50)
                    .HasComment("奖金发放人的姓名");

                entity.Property(e => e.UserIdentityId)
                    .HasMaxLength(100)
                    .HasComment("奖金接收人身份证号");
            });

            modelBuilder.Entity<TccAwardUserRelation>(entity =>
            {
                entity.ToTable("TCC_AwardUserRelation");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AwardCategory)
                    .HasMaxLength(50)
                    .HasComment("奖项编号");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasComment("创建时间");

                entity.Property(e => e.CreateUserLoginName)
                    .HasMaxLength(200)
                    .HasComment("创建人");

                entity.Property(e => e.CreateUserRealName)
                    .HasMaxLength(200)
                    .HasComment("创建人");

                entity.Property(e => e.HrpCodeItem)
                    .HasMaxLength(50)
                    .HasComment("HRP中的奖项对应的人员类别编号");

                entity.Property(e => e.HrpCodeItemDesc)
                    .HasMaxLength(200)
                    .HasComment("edoc中的奖项对应的人员类别名称");

                entity.Property(e => e.Status)
                    .HasDefaultValueSql("((1))")
                    .HasComment("状态(默认值为1)   是否启用  1=启用  2=关闭");

                entity.Property(e => e.UpdateDate)
                    .HasColumnType("datetime")
                    .HasComment("修改日期");

                entity.Property(e => e.UpdateLoginName)
                    .HasMaxLength(200)
                    .HasComment("修改人");

                entity.Property(e => e.UpdateRealName)
                    .HasMaxLength(200)
                    .HasComment("修改人");
            });

            modelBuilder.Entity<TccBalanceBasic>(entity =>
            {
                entity.ToTable("TCC_Balance_Basic");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AfterCurrentApproveLeftMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("本次批准后剩余奖金");

                entity.Property(e => e.AlreadyApplyMoney)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("已预支结余奖");

                entity.Property(e => e.AlterMoney).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ApplyMoney).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ApplyMoneyTotal).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ApprovedProfit).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ArchiveDate).HasColumnType("datetime");

                entity.Property(e => e.AssignDate).HasColumnType("datetime");

                entity.Property(e => e.CanApplyAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("可申请结余奖总额");

                entity.Property(e => e.CanJs)
                    .HasMaxLength(50)
                    .HasColumnName("CanJS")
                    .HasComment("是否有结算权限  Y是  N否");

                entity.Property(e => e.CanYz)
                    .HasMaxLength(50)
                    .HasColumnName("CanYZ")
                    .HasComment("是否有预支权限  Y是  N否");

                entity.Property(e => e.CurrentLeftMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("当前剩余奖金");

                entity.Property(e => e.CurrentProfit).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CurrentQapproveMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("CurrentQApproveMoney")
                    .HasDefaultValueSql("((0))")
                    .HasComment("本季度已批准额");

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.EdocPayMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("edocPayMoney")
                    .HasComment("已付款合同额");

                entity.Property(e => e.ForeignUnitAmount)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("其中外单位金额");

                entity.Property(e => e.HardwareCost).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.IsEpc).HasColumnName("IsEPC");

                entity.Property(e => e.LabourCost).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.OriginalMoney).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PayableMoney).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Pmmoney)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("PMMoney");

                entity.Property(e => e.PoweronPayAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("poweronPayAmount")
                    .HasComment("付款合同总额");

                entity.Property(e => e.ProBeginDate).HasColumnType("datetime");

                entity.Property(e => e.ProEndDate).HasColumnType("datetime");

                entity.Property(e => e.ProPlanEndDate).HasColumnType("datetime");

                entity.Property(e => e.ProcessName).HasMaxLength(500);

                entity.Property(e => e.ProjectCode).HasMaxLength(50);

                entity.Property(e => e.ProjectManagerIdentity).HasMaxLength(100);

                entity.Property(e => e.ProjectManagerLoginName).HasMaxLength(100);

                entity.Property(e => e.ProjectManagerName).HasMaxLength(100);

                entity.Property(e => e.ProjectName).HasMaxLength(200);

                entity.Property(e => e.ProjectSchedule).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Ptmoney)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("PTMoney");

                entity.Property(e => e.ReceiveMoney).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ReceiveRate).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptCode");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(200)
                    .HasColumnName("Request_DeptName");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName");

                entity.Property(e => e.RunningCost).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ThisTimeMoney).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.UserIdentity).HasMaxLength(50);

                entity.Property(e => e.YearAwardBudget)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("年度预算总额");

                entity.Property(e => e.YearBalance)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("年度剩余额");

                entity.Property(e => e.YearPayment)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("年度已发放额");
            });

            modelBuilder.Entity<TccBalanceCostList>(entity =>
            {
                entity.ToTable("TCC_Balance_CostList");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Acwp)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ACWP");

                entity.Property(e => e.Acwp2)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ACWP2");

                entity.Property(e => e.AdjustApproveMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ApproveMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BalanceMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CostTypeId).HasColumnName("CostTypeID");

                entity.Property(e => e.ProcessName).HasMaxLength(500);
            });

            modelBuilder.Entity<TccBalanceCostType>(entity =>
            {
                entity.ToTable("TCC_Balance_CostType");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.GroupName)
                    .HasMaxLength(100)
                    .HasComment("合并组名称");

                entity.Property(e => e.IsEnable).HasComment("是否可用 1 可用 0 不可用");

                entity.Property(e => e.ProjectType)
                    .HasMaxLength(100)
                    .HasComment("1 结算 2 预支");

                entity.Property(e => e.SortValue).HasComment("排序值");

                entity.Property(e => e.SubjectCodes).HasMaxLength(1000);

                entity.Property(e => e.TypeName)
                    .HasMaxLength(100)
                    .HasComment("类型名称");
            });

            modelBuilder.Entity<TccBalanceCostTypeSubject>(entity =>
            {
                entity.HasKey(e => new { e.CostTypeId, e.ProcessName })
                    .HasName("PK_TCC_Balance_CostTypeSubject_1");

                entity.ToTable("TCC_Balance_CostTypeSubject");

                entity.Property(e => e.ProcessName).HasMaxLength(100);

                entity.Property(e => e.SubjectCodes).HasMaxLength(1000);
            });

            modelBuilder.Entity<TccBasicAuthorityDictionary>(entity =>
            {
                entity.ToTable("TCC_Basic_Authority_Dictionary");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Description).HasMaxLength(100);

                entity.Property(e => e.PageDescription).HasMaxLength(500);

                entity.Property(e => e.PageName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TccBasicAuthorityDictionary20181122>(entity =>
            {
                entity.ToTable("TCC_Basic_Authority_Dictionary20181122");

                entity.HasIndex(e => new { e.PageName, e.Authority }, "IX_TCC_Basic_Authority_Dictionary")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Authority).HasComment("权限");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .HasComment("描述");

                entity.Property(e => e.PageDescription)
                    .HasMaxLength(500)
                    .HasComment("页面描述");

                entity.Property(e => e.PageName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("页面名称");

                entity.Property(e => e.Weight).HasComment("权重");
            });

            modelBuilder.Entity<TccBasicAuthorityOperateLog>(entity =>
            {
                entity.ToTable("TCC_Basic_Authority_OperateLog");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Account)
                    .HasMaxLength(50)
                    .HasComment("角色/职位/账号");

                entity.Property(e => e.Authority).HasComment("权限");

                entity.Property(e => e.Flag).HasComment("1:角色(人力资源);2:职位(项目中);3:账号（登陆账号）");

                entity.Property(e => e.OpeateLogin)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("操作人");

                entity.Property(e => e.OpreateDate)
                    .HasColumnType("datetime")
                    .HasComment("操作时间");

                entity.Property(e => e.OpreateType).HasComment("操作人员：1：添加；2：删除；");

                entity.Property(e => e.PageName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("页面");
            });

            modelBuilder.Entity<TccBasicAuthorityRelation>(entity =>
            {
                entity.ToTable("TCC_Basic_Authority_Relation");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Account).HasMaxLength(50);

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.EditDate).HasColumnType("datetime");

                entity.Property(e => e.EditLogin)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PageName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TccBasicAuthorityRelation20181122>(entity =>
            {
                entity.ToTable("TCC_Basic_Authority_Relation20181122");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Account)
                    .HasMaxLength(50)
                    .HasComment("角色/职位/账号");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("部门。与hrp角色结合使用。如果是空或者是null时，不限制。如果有值限制值。");

                entity.Property(e => e.EditDate)
                    .HasColumnType("datetime")
                    .HasComment("修改时间");

                entity.Property(e => e.EditLogin)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("修改人");

                entity.Property(e => e.Flag).HasComment("1:角色(人力资源);2:职位(项目中);3:账号（登陆账号）");

                entity.Property(e => e.PageName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TccBasicAward>(entity =>
            {
                entity.ToTable("TCC_BasicAward");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.AwardComposeCode)
                    .HasMaxLength(255)
                    .HasComment("奖项组成编码");

                entity.Property(e => e.AwardComposed)
                    .HasMaxLength(200)
                    .HasComment("奖项组成");

                entity.Property(e => e.AwardDiy)
                    .HasColumnName("AwardDIY")
                    .HasDefaultValueSql("((1))")
                    .HasComment("用于标识在福利及奖金发放流程中是否出现在 其它项的下拉列表中 1=在下拉列表中显示  ");

                entity.Property(e => e.AwardName)
                    .HasMaxLength(100)
                    .HasComment("奖项名称");

                entity.Property(e => e.AwardNameCode)
                    .HasMaxLength(255)
                    .HasComment("奖项名称编码");

                entity.Property(e => e.AwardType)
                    .HasMaxLength(100)
                    .HasComment("奖项类别");

                entity.Property(e => e.AwardTypeCode)
                    .HasMaxLength(255)
                    .HasComment("奖项类别编码");

                entity.Property(e => e.Beneficiary)
                    .HasMaxLength(200)
                    .HasComment("可被分配岗位");

                entity.Property(e => e.BeneficiaryCode)
                    .HasMaxLength(255)
                    .HasComment("可被分配岗位编码");

                entity.Property(e => e.Dept)
                    .HasMaxLength(200)
                    .HasComment("主管部门");

                entity.Property(e => e.DeptCode).HasMaxLength(100);
            });

            modelBuilder.Entity<TccBasicData20181122>(entity =>
            {
                entity.ToTable("TCC_BasicData20181122");

                entity.HasComment("基础数据表");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.Code)
                    .HasMaxLength(20)
                    .HasComment("编号");

                entity.Property(e => e.DomOrOver).HasComment("1=境内  2=境外");

                entity.Property(e => e.Flag)
                    .HasMaxLength(100)
                    .HasComment("标识");

                entity.Property(e => e.FlagName)
                    .HasMaxLength(100)
                    .HasComment("标识名称");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .HasComment("名称");

                entity.Property(e => e.OwnerDept).HasMaxLength(2000);

                entity.Property(e => e.SortField).HasComment("排序");
            });

            modelBuilder.Entity<TccBasicDatum>(entity =>
            {
                entity.ToTable("TCC_BasicData");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Code).HasMaxLength(20);

                entity.Property(e => e.Flag).HasMaxLength(100);

                entity.Property(e => e.FlagName).HasMaxLength(100);

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.OwnerDept).HasMaxLength(2000);
            });

            modelBuilder.Entity<TccBasicInfoOtherCustomer>(entity =>
            {
                entity.ToTable("TCC_BasicInfo_OtherCustomer");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AbaCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Address)
                    .HasMaxLength(2000)
                    .HasComment("地址");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("创建时间");

                entity.Property(e => e.CustomerCode)
                    .HasMaxLength(50)
                    .HasComment("客户名称");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(1000)
                    .HasComment("客户名称");

                entity.Property(e => e.IsDelete)
                    .HasDefaultValueSql("((0))")
                    .HasComment("是否删除");

                entity.Property(e => e.Khh)
                    .HasMaxLength(200)
                    .HasColumnName("KHH")
                    .HasComment("开户行");

                entity.Property(e => e.Khhdz)
                    .HasMaxLength(2000)
                    .HasColumnName("KHHDZ")
                    .HasComment("开户行地址");

                entity.Property(e => e.Khhzh)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("KHHZH")
                    .HasComment("开户行帐号");

                entity.Property(e => e.LbanCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Lhhh)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("LHHH")
                    .HasComment("联行行号");

                entity.Property(e => e.Source).HasComment("来源，1自己;2普华");

                entity.Property(e => e.SwiftCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("更新时间");
            });

            modelBuilder.Entity<TccBasicInfoOtherPayment>(entity =>
            {
                entity.ToTable("TCC_BasicInfo_OtherPayment");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.IsAdjustDept).HasComment("是否核算部门预算。在分担时，不判断承担部门的预算。1:核算;0不核算");

                entity.Property(e => e.IsAudit).HasComment("是否审核。0不审,1公司办公室审，2车队负责人，3直接到财务");

                entity.Property(e => e.IsCarryOver)
                    .HasDefaultValueSql("((0))")
                    .HasComment("是否结转");

                entity.Property(e => e.IsContract).HasComment("是否合同（1要,0不要)");

                entity.Property(e => e.IsEnabled)
                    .HasDefaultValueSql("((1))")
                    .HasComment("0:设计分包费 1：付款 2：一般费用报销");

                entity.Property(e => e.IsFile).HasComment("是否附件（1要,0不要)");

                entity.Property(e => e.IsForeign)
                    .HasDefaultValueSql("((0))")
                    .HasComment("增值税时是否可收外币。1可收0不可收");

                entity.Property(e => e.IsSupplierOrCustomer)
                    .HasDefaultValueSql("((1))")
                    .HasComment("客户、用途");

                entity.Property(e => e.IsUsingRd)
                    .HasColumnName("IsUsingRD")
                    .HasComment("是否用于研发项目  1应用 2不应用");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .HasComment("名称");

                entity.Property(e => e.OrderBy).HasComment("排序");

                entity.Property(e => e.RunningCost).HasComment("  1运行费  2 专项费用");

                entity.Property(e => e.RunningCostofYf)
                    .HasColumnName("RunningCostofYF")
                    .HasComment("应用研发项目的 1运行费  2专项费 ");

                entity.Property(e => e.Value).HasComment("值");
            });

            modelBuilder.Entity<TccBasicInfoOtherPaymentDepart>(entity =>
            {
                entity.ToTable("TCC_BasicInfo_OtherPayment_Depart");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("关联部门");

                entity.Property(e => e.IsDelete).HasComment("是否删除：0没有，1删除");

                entity.Property(e => e.Location).HasComment("1天津2北京");

                entity.Property(e => e.Role)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("审批角色");
            });

            modelBuilder.Entity<TccBasicInfoOtherPaymentbak20160325>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_BasicInfo_OtherPaymentbak_20160325");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.IsUsingRd).HasColumnName("IsUsingRD");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.RunningCostofYf).HasColumnName("RunningCostofYF");
            });

            modelBuilder.Entity<TccBasicInfoOtherSupplier>(entity =>
            {
                entity.ToTable("TCC_BasicInfo_OtherSupplier");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AbaCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Address)
                    .HasMaxLength(2000)
                    .HasComment("地址");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("创建时间");

                entity.Property(e => e.InvoicesUnitName)
                    .HasMaxLength(1000)
                    .HasComment("开票单位");

                entity.Property(e => e.IsDelete)
                    .HasDefaultValueSql("((0))")
                    .HasComment("是否删除");

                entity.Property(e => e.Khh)
                    .HasMaxLength(200)
                    .HasColumnName("KHH")
                    .HasComment("开户行");

                entity.Property(e => e.Khhdz)
                    .HasMaxLength(2000)
                    .HasColumnName("KHHDZ")
                    .HasComment("开户行地址");

                entity.Property(e => e.Khhzh)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("KHHZH")
                    .HasComment("开户行帐号");

                entity.Property(e => e.LbanCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Lhhh)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("LHHH")
                    .HasComment("联行行号");

                entity.Property(e => e.RegisterArea)
                    .HasMaxLength(50)
                    .HasColumnName("Register_Area");

                entity.Property(e => e.Source).HasComment("来源，1自己;2普华");

                entity.Property(e => e.SupplierCode)
                    .HasMaxLength(50)
                    .HasComment("供应商编码");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(1000)
                    .HasComment("供应商名称");

                entity.Property(e => e.SwiftCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("更新时间");
            });

            modelBuilder.Entity<TccBasicInfoProjectAdjustProcess>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TCC_BasicInfo_ProjectAdjustProcess");

                entity.Property(e => e.Progress).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TccBasicInfoProjectAdjustProcessBak>(entity =>
            {
                entity.ToTable("TCC_BasicInfo_ProjectAdjustProcess_bak");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IsEnabled).HasComment("是否有效");

                entity.Property(e => e.Progress)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("进度调整值");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("项目号");
            });

            modelBuilder.Entity<TccBasicProjectAward>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_BasicProjectAward");

                entity.HasComment("项目奖金分配流程用到\r\n   用来配置单个项目的基本奖金数据");

                entity.Property(e => e.Balances)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("奖金余额");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.InitProjectAwardMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0.00))")
                    .HasComment("初始发放额");

                entity.Property(e => e.PaymentyMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("已发放金额");

                entity.Property(e => e.ProjectAward)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("项目奖金总额");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(100)
                    .HasComment("项目编号");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(100)
                    .HasComment("项目名称");
            });

            modelBuilder.Entity<TccBidQuotationProjectAward>(entity =>
            {
                entity.ToTable("TCC_BidQuotationProjectAward");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyDate)
                    .HasColumnType("datetime")
                    .HasColumnName("APPLY_DATE");

                entity.Property(e => e.ApplyDept)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_DEPT");

                entity.Property(e => e.ApplyDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_DEPT_CODE");

                entity.Property(e => e.ApplyPrizeAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("APPLY_PRIZE_AMOUNT");

                entity.Property(e => e.ApplyUserLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_USER_LOGIN_NAME");

                entity.Property(e => e.ApplyUserName)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_USER_NAME");

                entity.Property(e => e.ApprovedPrizeAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("APPROVED_PRIZE_AMOUNT");

                entity.Property(e => e.FormSerialNumber)
                    .HasMaxLength(50)
                    .HasColumnName("FORM_SERIAL_NUMBER");

                entity.Property(e => e.IncidentFk).HasColumnName("INCIDENT_FK");

                entity.Property(e => e.IncidentNo).HasColumnName("INCIDENT_NO");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(100)
                    .HasColumnName("PROCESS_NAME");

                entity.Property(e => e.ProcessStatus).HasColumnName("PROCESS_STATUS");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .HasColumnName("PROJECT_CODE");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(200)
                    .HasColumnName("PROJECT_NAME");

                entity.Property(e => e.ProjectType)
                    .HasMaxLength(50)
                    .HasColumnName("PROJECT_TYPE");
            });

            modelBuilder.Entity<TccBidQuotationProjectAwardDetailList>(entity =>
            {
                entity.ToTable("TCC_BidQuotationProjectAward_DetailList");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApproveMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ArchiveDate)
                    .HasColumnType("datetime")
                    .HasComment("进入奖金池时间");

                entity.Property(e => e.AwardComposed)
                    .HasMaxLength(50)
                    .HasComment("奖项名称");

                entity.Property(e => e.AwardComposedCode).HasMaxLength(50);

                entity.Property(e => e.AwardDesc)
                    .HasMaxLength(100)
                    .HasComment("奖项描述。如：项目奖-工作节点奖");

                entity.Property(e => e.AwardMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FormNumber).HasMaxLength(100);

                entity.Property(e => e.IncidentNo).HasComment("对应奖金发放流程主表实例号");

                entity.Property(e => e.PaymentDate).HasColumnType("datetime");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(50);

                entity.Property(e => e.ProjectMajor).HasMaxLength(50);

                entity.Property(e => e.ProjectName).HasMaxLength(400);

                entity.Property(e => e.ProjectType).HasMaxLength(50);

                entity.Property(e => e.ReceiverMajor).HasMaxLength(50);

                entity.Property(e => e.ReceiverRole).HasMaxLength(50);

                entity.Property(e => e.ReceiverUserIdentityId).HasMaxLength(50);

                entity.Property(e => e.ReceiverUserLoginName).HasMaxLength(50);

                entity.Property(e => e.ReceiverUserName).HasMaxLength(50);

                entity.Property(e => e.SenderLoginName).HasMaxLength(50);

                entity.Property(e => e.SenderUserName).HasMaxLength(50);

                entity.Property(e => e.Status).HasComment("奖金状态  1 未进奖金池  3  已进奖金池");

                entity.Property(e => e.SubAward)
                    .HasMaxLength(50)
                    .HasComment("子奖项名称，如：工作节点奖");

                entity.Property(e => e.SubAwardCode).HasMaxLength(50);
            });

            modelBuilder.Entity<TccBillsManagement>(entity =>
            {
                entity.ToTable("TCC_BillsManagement");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AccountDate)
                    .HasColumnType("datetime")
                    .HasComment("入账时间");

                entity.Property(e => e.AccountStatus).HasComment("入账状态  0=未入账 1=已入账 2=不需要入账");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("价税合计金额");

                entity.Property(e => e.AmountRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AmountRMB")
                    .HasComment("票据合计");

                entity.Property(e => e.BillAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("票据金额");

                entity.Property(e => e.BillAmountCnt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BillAmountCNT");

                entity.Property(e => e.BillAmountRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BillAmountRMB")
                    .HasComment("票额折人民币");

                entity.Property(e => e.BillCategoryText)
                    .HasMaxLength(50)
                    .HasComment("票据类型");

                entity.Property(e => e.BillCategoryValue).HasComment("票据类型");

                entity.Property(e => e.BillCode)
                    .HasMaxLength(50)
                    .HasComment("票据编号");

                entity.Property(e => e.BillContent)
                    .HasMaxLength(2000)
                    .HasComment("票据内容");

                entity.Property(e => e.BillSource)
                    .HasMaxLength(50)
                    .HasComment("票据来源");

                entity.Property(e => e.BillStatus)
                    .HasDefaultValueSql("((0))")
                    .HasComment("票据状态   0=未认证  1=已认证");

                entity.Property(e => e.BillTaxAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("票据税额");

                entity.Property(e => e.BillTaxAmountCnt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BillTaxAmountCNT");

                entity.Property(e => e.BillTaxAmountRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BillTaxAmountRMB")
                    .HasComment("税额折人民币");

                entity.Property(e => e.CalculateMode).HasComment("汇率计算类型");

                entity.Property(e => e.ConfirmDate)
                    .HasColumnType("datetime")
                    .HasComment("认证日期");

                entity.Property(e => e.ConfirmIdentity)
                    .HasMaxLength(50)
                    .HasComment("认证操作人 身份证号");

                entity.Property(e => e.ConfirmLoginName)
                    .HasMaxLength(50)
                    .HasComment("认证操作人 账号");

                entity.Property(e => e.ConfirmRealName)
                    .HasMaxLength(50)
                    .HasComment("认证操作人 姓名");

                entity.Property(e => e.ContanctCode)
                    .HasMaxLength(50)
                    .HasComment("合同编号");

                entity.Property(e => e.CreatDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("创建时间");

                entity.Property(e => e.Currency)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("币种");

                entity.Property(e => e.DeleteFlag)
                    .HasDefaultValueSql("((0))")
                    .HasComment("删除标识  1删除  2作废  0正常 3 收退款");

                entity.Property(e => e.DeleteTime)
                    .HasColumnType("datetime")
                    .HasComment("删除时间");

                entity.Property(e => e.DeleteUser)
                    .HasMaxLength(50)
                    .HasComment("删除操作人");

                entity.Property(e => e.Exchange)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("汇率");

                entity.Property(e => e.ExchangeCnt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ExchangeCNT");

                entity.Property(e => e.ExdrawbackTax)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("出口退税额");

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("表单号");

                entity.Property(e => e.GoodClass).HasComment("货物类别");

                entity.Property(e => e.Inventory).HasComment("清单张数");

                entity.Property(e => e.InvoiceCode)
                    .HasMaxLength(50)
                    .HasComment("发票代码");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("datetime")
                    .HasComment("开票日期");

                entity.Property(e => e.InvoicesUnitName)
                    .HasMaxLength(1200)
                    .HasComment("开票单位");

                entity.Property(e => e.IsTs).HasComment("是否退税");

                entity.Property(e => e.NeedAccount)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("(N'N')")
                    .HasComment("是否需要入账(默认为N)  Y=是  N=否");

                entity.Property(e => e.PaymentCategory)
                    .HasMaxLength(50)
                    .HasComment("付款类型");

                entity.Property(e => e.ProcessName).HasMaxLength(200);

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .HasComment("项目编号");

                entity.Property(e => e.ProjectCodeMain)
                    .HasMaxLength(50)
                    .HasComment("项目主号");

                entity.Property(e => e.ProjectJnw)
                    .HasMaxLength(50)
                    .HasComment("项目境内外");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(500)
                    .HasComment("项目名称");

                entity.Property(e => e.ProofCode)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("完税凭证号码");

                entity.Property(e => e.RecDate)
                    .HasColumnType("datetime")
                    .HasComment("收到日期/交付日期");

                entity.Property(e => e.ReceiptTime)
                    .HasColumnType("datetime")
                    .HasComment("领取日期");

                entity.Property(e => e.ReceiptorIdentity)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("领取人身份证号");

                entity.Property(e => e.ReceiptorRealName)
                    .HasMaxLength(50)
                    .HasComment("领取人");

                entity.Property(e => e.RelevanceInvoiceCategoryText)
                    .HasMaxLength(50)
                    .HasComment("对应票据类型");

                entity.Property(e => e.RelevanceInvoiceCategoryValue).HasComment("对应开票类型");

                entity.Property(e => e.SupplierCode)
                    .HasMaxLength(50)
                    .HasComment("供应商编号");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(500)
                    .HasComment("供应商名称");

                entity.Property(e => e.TaxRate)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("税率（参与计算时需要除100）");

                entity.Property(e => e.TaxRateCode)
                    .HasMaxLength(50)
                    .HasComment("税率编号");

                entity.Property(e => e.TaxRateText)
                    .HasMaxLength(50)
                    .HasComment("税率（只用于显示）");

                entity.Property(e => e.TransactorIdentity).HasMaxLength(50);

                entity.Property(e => e.TransactorLoginName)
                    .HasMaxLength(50)
                    .HasComment("经办人");

                entity.Property(e => e.TransactorRealName).HasMaxLength(50);

                entity.Property(e => e.UnitJnw).HasMaxLength(50);

                entity.Property(e => e.VchemInfo)
                    .HasMaxLength(50)
                    .HasComment("久其凭证号--格式（年-月-久其凭证号）");

                entity.Property(e => e.Vchrnum).HasComment("凭证编号");
            });

            modelBuilder.Entity<TccBorrowCashRepaymentDetaill>(entity =>
            {
                entity.ToTable("TCC_BorrowCashRepaymentDetaill");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BorrowAmountRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BorrowAmountRMB")
                    .HasComment("借款金额（本币）");

                entity.Property(e => e.BorrowAmountYb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BorrowAmountYB")
                    .HasComment("借款金额（原币）");

                entity.Property(e => e.BorrowCurrency)
                    .HasMaxLength(50)
                    .HasComment("借款币种");

                entity.Property(e => e.BorrowPersonName)
                    .HasMaxLength(50)
                    .HasComment("借款人登录账号");

                entity.Property(e => e.BorrowPersonUserid)
                    .HasMaxLength(50)
                    .HasComment("借款人身份证号");

                entity.Property(e => e.BorrowPurpose).HasComment("借款用途：个人备用金:0  ；境外周转金：3 ；签证费周转金：2 ；项目转转金 ：1");

                entity.Property(e => e.BorrowType).HasComment("借款方式   1个人借款  2项目借款");

                entity.Property(e => e.Incident).HasComment("流程实例号");

                entity.Property(e => e.OffsetAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("冲抵金额");

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名称");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .HasComment("项目号");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(500)
                    .HasComment("项目名称");

                entity.Property(e => e.RepayAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("还款金额");

                entity.Property(e => e.RepayAmountRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("RepayAmountRMB")
                    .HasComment("还款折合人民币金额");

                entity.Property(e => e.RepayCurrency)
                    .HasMaxLength(50)
                    .HasComment("还款币种");

                entity.Property(e => e.RepayCurrencyText).HasMaxLength(50);

                entity.Property(e => e.RepayRate)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("还款汇率");

                entity.Property(e => e.RepayType).HasComment("还款方式");

                entity.Property(e => e.RepayTypeText)
                    .HasMaxLength(50)
                    .HasComment("还款方式名称");

                entity.Property(e => e.SubjectCode)
                    .HasMaxLength(50)
                    .HasComment("科目号");

                entity.Property(e => e.SubjectName)
                    .HasMaxLength(500)
                    .HasComment("科目名称");
            });

            modelBuilder.Entity<TccBorrowCashRepaymentHeader>(entity =>
            {
                entity.ToTable("TCC_BorrowCashRepaymentHeader");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AdressLocation)
                    .HasMaxLength(50)
                    .HasComment("还款地点");

                entity.Property(e => e.Agency).HasComment("是否代办  1不代办  2代办");

                entity.Property(e => e.AttachmentNum).HasComment("附件张数");

                entity.Property(e => e.BorrowType).HasComment("借款类型Value");

                entity.Property(e => e.BorrowTypeText)
                    .HasMaxLength(50)
                    .HasComment("借款类型Text");

                entity.Property(e => e.BussinessCard)
                    .HasMaxLength(50)
                    .HasComment("公务卡号");

                entity.Property(e => e.CardNo)
                    .HasMaxLength(50)
                    .HasComment("工作证号");

                entity.Property(e => e.ConfirmAuditDate)
                    .HasColumnType("datetime")
                    .HasComment("财务审核确认时间");

                entity.Property(e => e.ConfirmAuditLoginName)
                    .HasMaxLength(50)
                    .HasComment("财务业务审核人登录名");

                entity.Property(e => e.ConfirmAuditName).HasMaxLength(50);

                entity.Property(e => e.ConfirmAuditUserIdentity)
                    .HasMaxLength(50)
                    .HasComment("财务业务审核人身份证号");

                entity.Property(e => e.ConfirmDate)
                    .HasColumnType("datetime")
                    .HasComment("接单确认时间");

                entity.Property(e => e.ConfirmFinaceLoginName)
                    .HasMaxLength(50)
                    .HasComment("财务接单人登录名");

                entity.Property(e => e.ConfirmFinaceName)
                    .HasMaxLength(50)
                    .HasComment("财务接单人姓名");

                entity.Property(e => e.ConfirmFinaceUserIdentity)
                    .HasMaxLength(50)
                    .HasComment("财务接单人身份证号");

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(50)
                    .HasComment("表单号");

                entity.Property(e => e.HaveBorrow).HasComment("有无借款Value");

                entity.Property(e => e.HaveBorrowText)
                    .HasMaxLength(20)
                    .HasComment("借款类型Text");

                entity.Property(e => e.Incident).HasComment("流程实例号");

                entity.Property(e => e.Location).HasComment("1 天津 2北京");

                entity.Property(e => e.PaymentName)
                    .HasMaxLength(50)
                    .HasComment("交款人姓名");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名称");

                entity.Property(e => e.ProcessStatus).HasComment("流程状态：0进行中 1已完成 2已撤销");

                entity.Property(e => e.ReceiveDate)
                    .HasColumnType("datetime")
                    .HasComment("收款日期");

                entity.Property(e => e.Remark)
                    .HasMaxLength(2000)
                    .HasComment("还款备注");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date")
                    .HasComment("流程申请时间");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptCode")
                    .HasComment("申请人的主管部门编号");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptName")
                    .HasComment("申请人的主管部门名称");

                entity.Property(e => e.RequestFinishDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_FinishDate")
                    .HasComment("流程结束时间");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName")
                    .HasComment("申请人登录名");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName")
                    .HasComment("申请人姓名");

                entity.Property(e => e.RequestTelPhone)
                    .HasMaxLength(50)
                    .HasColumnName("Request_TelPhone")
                    .HasComment("申请人联系方式");

                entity.Property(e => e.RequestUserIdentity)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserIdentity")
                    .HasComment("申请人身份证号");

                entity.Property(e => e.RequestUserPost)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserPost")
                    .HasComment("申请人岗位等级");

                entity.Property(e => e.VisaDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_DeptCode")
                    .HasComment("经办人主管部门编号");

                entity.Property(e => e.VisaDeptName)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_DeptName")
                    .HasComment("经办人主管部门名称");

                entity.Property(e => e.VisaLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_LoginName")
                    .HasComment("经办人登录账号");

                entity.Property(e => e.VisaRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_RealName")
                    .HasComment("经办人姓名");

                entity.Property(e => e.VisaUserIdentity)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_UserIdentity")
                    .HasComment("经办人身份证号");

                entity.Property(e => e.VisaUserPost)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_UserPost")
                    .HasComment("经办人岗位等级");

                entity.Property(e => e.Voucherid)
                    .HasColumnName("VOUCHERID")
                    .HasComment("对应凭证ID号");
            });

            modelBuilder.Entity<TccBorrowMoney>(entity =>
            {
                entity.ToTable("TCC_BorrowMoney");

                entity.HasIndex(e => new { e.ProcessName, e.Incident }, "IX_TCC_BorrowMoney");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.AbroadAccountName)
                    .HasMaxLength(200)
                    .HasComment("境外开户名称");

                entity.Property(e => e.AbroadBankAccount)
                    .HasMaxLength(200)
                    .HasComment("境外银行账号");

                entity.Property(e => e.AbroadBankName)
                    .HasMaxLength(200)
                    .HasComment("境外开户行");

                entity.Property(e => e.AcceptedRemark).HasComment("不接受出差时说明原因");

                entity.Property(e => e.AttachmentNum).HasComment("附件张数");

                entity.Property(e => e.AuditAccountLoginName).HasMaxLength(20);

                entity.Property(e => e.AuditAccountName).HasMaxLength(20);

                entity.Property(e => e.AuditAccountUserIdentity).HasMaxLength(30);

                entity.Property(e => e.BankAccount)
                    .HasMaxLength(50)
                    .HasComment("银行账号");

                entity.Property(e => e.BankName)
                    .HasMaxLength(200)
                    .HasComment("开户行");

                entity.Property(e => e.BorrowMoneyBig)
                    .HasMaxLength(200)
                    .HasColumnName("BorrowMoney_Big")
                    .HasComment("借款金额大写");

                entity.Property(e => e.BorrowMoneyRemark)
                    .HasColumnName("BorrowMoney_Remark")
                    .HasComment("借款务注");

                entity.Property(e => e.BorrowMoneySmall)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BorrowMoney_Small")
                    .HasComment("借款金额小写");

                entity.Property(e => e.BorrowPurpose).HasComment("借款用途");

                entity.Property(e => e.BorrowType).HasComment("借款类型Value");

                entity.Property(e => e.BorrowTypeText)
                    .HasMaxLength(20)
                    .HasComment("借款类型Text");

                entity.Property(e => e.BussinessCard).HasMaxLength(50);

                entity.Property(e => e.CardNo)
                    .HasMaxLength(20)
                    .HasComment("工作证号");

                entity.Property(e => e.ConfirmFinaceLoginName).HasMaxLength(50);

                entity.Property(e => e.ConfirmFinaceName).HasMaxLength(50);

                entity.Property(e => e.ConfirmFinaceUserIdentity).HasMaxLength(50);

                entity.Property(e => e.ConfirmFinacedAte)
                    .HasColumnType("datetime")
                    .HasColumnName("ConfirmFinacedATE");

                entity.Property(e => e.ConfirmStatus).HasMaxLength(50);

                entity.Property(e => e.CurrencyAbbreviation).HasMaxLength(10);

                entity.Property(e => e.CurrencySubjectCode).HasMaxLength(20);

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(20)
                    .HasComment("表单编号");

                entity.Property(e => e.HaveBorrow).HasComment("有无借款Value");

                entity.Property(e => e.HaveBorrowText)
                    .HasMaxLength(20)
                    .HasComment("有无借款Text");

                entity.Property(e => e.Incident).HasComment("实例号");

                entity.Property(e => e.IsAccepted)
                    .HasMaxLength(20)
                    .HasComment("是否接受出差");

                entity.Property(e => e.IsAccount)
                    .HasDefaultValueSql("((1))")
                    .HasComment("是否冲账  1=未冲账  2=已冲账");

                entity.Property(e => e.IsBorrowMoney)
                    .HasMaxLength(20)
                    .HasComment("是否借款");

                entity.Property(e => e.IsChildProcess).HasComment("是否为子流程  1=是子流程 2=不是子流程");

                entity.Property(e => e.IsCompleted).HasMaxLength(5);

                entity.Property(e => e.IsLink)
                    .HasDefaultValueSql("((1))")
                    .HasComment("是否被报销流程关联过  1=未关联  2=已关联");

                entity.Property(e => e.MainIncident)
                    .HasDefaultValueSql("((0))")
                    .HasComment("主流程实例号");

                entity.Property(e => e.MainProcessName)
                    .HasMaxLength(500)
                    .HasComment("主流程名称");

                entity.Property(e => e.MoneyYb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MONEY_YB");

                entity.Property(e => e.NoRepayCurrency)
                    .HasMaxLength(20)
                    .HasComment("未还款币种");

                entity.Property(e => e.NoRepayMentAmount)
                    .HasColumnType("decimal(20, 2)")
                    .HasComment("未还款金额");

                entity.Property(e => e.OfficialCard)
                    .HasMaxLength(200)
                    .HasComment("公务卡号");

                entity.Property(e => e.PartnerCompanyName)
                    .HasMaxLength(200)
                    .HasComment("收款单位名称");

                entity.Property(e => e.PartnerName).HasMaxLength(20);

                entity.Property(e => e.PartnerNameloginname).HasMaxLength(20);

                entity.Property(e => e.PayAccountSubject)
                    .HasMaxLength(100)
                    .HasColumnName("Pay_AccountSubject")
                    .HasComment("计划财务部付款记录（入账科目）");

                entity.Property(e => e.PayCheque)
                    .HasMaxLength(200)
                    .HasColumnName("Pay_Cheque")
                    .HasComment("计划财务部付款记录（支票号)");

                entity.Property(e => e.PayMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Pay_Money")
                    .HasComment("出纳付款金额");

                entity.Property(e => e.PayPayBankName)
                    .HasMaxLength(200)
                    .HasColumnName("Pay_PayBankName")
                    .HasComment("计划财务部付款记录（付款行）");

                entity.Property(e => e.PayPayDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Pay_PayDate")
                    .HasComment("计划财务部付款记录（付款日期）");

                entity.Property(e => e.PayPayMentType)
                    .HasMaxLength(200)
                    .HasColumnName("Pay_PayMentType")
                    .HasComment("计划财务部付款 记录（付款方式  自动带出与字段PayMentType的值相同）");

                entity.Property(e => e.PaymentType)
                    .HasMaxLength(200)
                    .HasComment("付款方式");

                entity.Property(e => e.ProcessFinishDate)
                    .HasColumnType("datetime")
                    .HasComment("流程完成时间");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名");

                entity.Property(e => e.ProcessStatus)
                    .HasDefaultValueSql("((0))")
                    .HasComment("流程状态 0=未完成 1=已完成 2=已撤销");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(200)
                    .HasComment("项目代码");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(200)
                    .HasComment("项目名称");

                entity.Property(e => e.Quota).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Rate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date")
                    .HasComment("申请时间");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptCode")
                    .HasComment("申请人所在部门编号");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(200)
                    .HasColumnName("Request_DeptName")
                    .HasComment("申请人所在部门");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName")
                    .HasComment("申请人登录账号");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(100)
                    .HasColumnName("Request_RealName")
                    .HasComment("申请人姓名");

                entity.Property(e => e.RequestUserIdentity)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserIdentity")
                    .HasComment("申请人身份证号");

                entity.Property(e => e.Telephone)
                    .HasMaxLength(50)
                    .HasComment("联系方式");

                entity.Property(e => e.ToDomesticOversea).HasComment("1=境内 2=境外");

                entity.Property(e => e.TotalDays).HasComment("总计  天数");

                entity.Property(e => e.TotalHours).HasComment("总计  小时数");

                entity.Property(e => e.TotalMinutes).HasComment("总计  分钟数");

                entity.Property(e => e.Transactor)
                    .HasMaxLength(20)
                    .HasColumnName("transactor");

                entity.Property(e => e.TravelBeginDate)
                    .HasColumnType("datetime")
                    .HasComment("出差开始日期");

                entity.Property(e => e.TravelEndDate)
                    .HasColumnType("datetime")
                    .HasComment("出差结束日期");

                entity.Property(e => e.UnitedBankNumber)
                    .HasMaxLength(50)
                    .HasComment("联行行号");

                entity.Property(e => e.UseInstructions).HasMaxLength(200);

                entity.Property(e => e.Voucherid).HasColumnName("VOUCHERID");
            });

            modelBuilder.Entity<TccBorrowMoneyHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_BorrowMoneyHistory");

                entity.Property(e => e.BorrowMoneySmall)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BorrowMoney_Small");

                entity.Property(e => e.BorrowTypeText).HasMaxLength(40);

                entity.Property(e => e.CurrencyAbbreviation).HasMaxLength(20);

                entity.Property(e => e.MoneyYb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MONEY_YB");

                entity.Property(e => e.PaymentType).HasMaxLength(400);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(400);

                entity.Property(e => e.ProjectName).HasMaxLength(400);

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(100)
                    .HasColumnName("Request_DeptCode");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(100)
                    .HasColumnName("Request_DeptName");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(200)
                    .HasColumnName("Request_RealName");

                entity.Property(e => e.RequestUserIdentity)
                    .HasMaxLength(100)
                    .HasColumnName("Request_UserIdentity");

                entity.Property(e => e.RequstLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Requst_LoginName");
            });

            modelBuilder.Entity<TccBorrowMoneyHistorybak>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_BorrowMoneyHistorybak");

                entity.Property(e => e.BorrowMoneySmall)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BorrowMoney_Small");

                entity.Property(e => e.BorrowTypeText).HasMaxLength(40);

                entity.Property(e => e.CurrencyAbbreviation).HasMaxLength(20);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MoneyYb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MONEY_YB");

                entity.Property(e => e.PaymentType).HasMaxLength(400);

                entity.Property(e => e.ProjectCode).HasMaxLength(400);

                entity.Property(e => e.ProjectName).HasMaxLength(400);

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(100)
                    .HasColumnName("Request_DeptCode");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(100)
                    .HasColumnName("Request_DeptName");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(200)
                    .HasColumnName("Request_RealName");

                entity.Property(e => e.RequestUserIdentity)
                    .HasMaxLength(100)
                    .HasColumnName("Request_UserIdentity");
            });

            modelBuilder.Entity<TccBorrowingofAccountingArchivesDetail>(entity =>
            {
                entity.ToTable("TCC_BorrowingofAccountingArchivesDetails");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AcctYear)
                    .HasMaxLength(50)
                    .HasComment("会计年度");

                entity.Property(e => e.ApplyLoginName)
                    .HasMaxLength(50)
                    .HasComment("申请人登录名称");

                entity.Property(e => e.ApplyRealName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("申请人姓名");

                entity.Property(e => e.ApplyUseridentity)
                    .HasMaxLength(50)
                    .HasComment("申请人身份证号");

                entity.Property(e => e.CheckDate)
                    .HasMaxLength(50)
                    .HasComment("会计月份");

                entity.Property(e => e.ConfirmDate)
                    .HasColumnType("datetime")
                    .HasComment("归还时间");

                entity.Property(e => e.ConfirmStatus)
                    .HasDefaultValueSql("((0))")
                    .HasComment("归还状态  0 未归还  1  已归还");

                entity.Property(e => e.Incident).HasComment("流程实例号");

                entity.Property(e => e.Pid)
                    .HasColumnName("PID")
                    .HasComment("外键");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名称");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .HasComment("备注");

                entity.Property(e => e.VchrContent)
                    .HasMaxLength(500)
                    .HasComment("凭证内容");

                entity.Property(e => e.VchrDate)
                    .HasColumnType("datetime")
                    .HasComment("凭证日期");

                entity.Property(e => e.Vchrnum).HasComment("凭证号");
            });

            modelBuilder.Entity<TccBorrowingofAccountingArchivesHeader>(entity =>
            {
                entity.ToTable("TCC_BorrowingofAccountingArchivesHeader");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BorrowDays).HasComment("借阅期限");

                entity.Property(e => e.BorrowEnddate)
                    .HasColumnType("datetime")
                    .HasComment("借阅结束时间");

                entity.Property(e => e.BorrowRemark)
                    .HasMaxLength(500)
                    .HasComment("用途");

                entity.Property(e => e.BorrowStartDate)
                    .HasColumnType("datetime")
                    .HasComment("借阅开始时间");

                entity.Property(e => e.BorrowType).HasComment("借出方式");

                entity.Property(e => e.DaManager)
                    .HasMaxLength(50)
                    .HasComment("档案管理员姓名");

                entity.Property(e => e.DaManagerIdCard)
                    .HasMaxLength(50)
                    .HasComment("档案管理员身份证号");

                entity.Property(e => e.DaManagerLogin)
                    .HasMaxLength(50)
                    .HasComment("档案管理员帐号");

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(50)
                    .HasComment("表单号");

                entity.Property(e => e.Incident).HasComment("流程实例号");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名称");

                entity.Property(e => e.ProcessStatus).HasComment("流程状态：0进行中 1已完成 2已撤销");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date")
                    .HasComment("流程申请时间");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptCode")
                    .HasComment("申请人的主管部门编号");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptName")
                    .HasComment("申请人的主管部门名称");

                entity.Property(e => e.RequestFinishDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_FinishDate")
                    .HasComment("流程结束时间");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName")
                    .HasComment("申请人登录名");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName")
                    .HasComment("申请人姓名");

                entity.Property(e => e.RequestTelPhone)
                    .HasMaxLength(200)
                    .HasColumnName("Request_TelPhone")
                    .HasComment("申请人联系方式");

                entity.Property(e => e.RequestUserIdentity)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserIdentity")
                    .HasComment("申请人身份证号");
            });

            modelBuilder.Entity<TccBsicInfoOtherCustomer>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_BsicInfo_OtherCustomer");

                entity.Property(e => e.AbaCode)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("AbaCode");

                entity.Property(e => e.Address)
                    .HasMaxLength(2000)
                    .HasComment("地址");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("创建时间");

                entity.Property(e => e.CustomerCode)
                    .HasMaxLength(50)
                    .HasComment("客户编号");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(1000)
                    .HasComment("客户名称");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IsDelete)
                    .HasDefaultValueSql("((0))")
                    .HasComment("是否删除");

                entity.Property(e => e.Khh)
                    .HasMaxLength(200)
                    .HasColumnName("KHH")
                    .HasComment("开户行");

                entity.Property(e => e.Khhdz)
                    .HasMaxLength(2000)
                    .HasColumnName("KHHDZ")
                    .HasComment("开户行地址");

                entity.Property(e => e.Khhzh)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("KHHZH")
                    .HasComment("开户行帐号");

                entity.Property(e => e.LbanCode)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("LbanCode");

                entity.Property(e => e.Lhhh)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("LHHH")
                    .HasComment("联行行号");

                entity.Property(e => e.SwiftCode)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("SwiftCode");

                entity.Property(e => e.UpdateDate)
                    .HasColumnType("datetime")
                    .HasComment("更新时间");
            });

            modelBuilder.Entity<TccBudgetAwardAdjustMentPlan>(entity =>
            {
                entity.ToTable("TCC_Budget_AwardAdjustMentPlan");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AwardAdjustMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AwardAdjustMoneyFromProcess).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AwardAdjustMoneyQ1).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AwardAdjustMoneyQ2).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AwardAdjustMoneyQ3).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AwardAdjustMoneyQ4).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AwardComposed).HasMaxLength(100);

                entity.Property(e => e.AwardComposedCode).HasMaxLength(255);

                entity.Property(e => e.AwardName).HasMaxLength(100);

                entity.Property(e => e.AwardNameCode).HasMaxLength(255);

                entity.Property(e => e.AwardType).HasMaxLength(100);

                entity.Property(e => e.AwardTypeCode).HasMaxLength(255);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Dept).HasMaxLength(100);

                entity.Property(e => e.DeptCode).HasMaxLength(20);

                entity.Property(e => e.Editor).HasMaxLength(200);

                entity.Property(e => e.ProcessName).HasMaxLength(200);
            });

            modelBuilder.Entity<TccBudgetBasic>(entity =>
            {
                entity.ToTable("TCC_BudgetBasic");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Batch).HasComment("批次");

                entity.Property(e => e.BdgUrl)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("网页地址.bdgflag为2时使用");

                entity.Property(e => e.BudgetCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("预算编号");

                entity.Property(e => e.BudgetFlag).HasComment("显示样式");

                entity.Property(e => e.BudgetName)
                    .HasMaxLength(50)
                    .HasComment("预算名称");

                entity.Property(e => e.BudgetType).HasComment("类型：1部门；2项目");

                entity.Property(e => e.FormatType).HasComment("格式类型：１数字；２整型");

                entity.Property(e => e.IsEditThisYearBudget).HasComment("是否可编辑0:不可1可");

                entity.Property(e => e.IsEditThisYearUsed).HasComment("是否可编辑0:不可1可");

                entity.Property(e => e.IsTotal)
                    .HasDefaultValueSql("((0))")
                    .HasComment("是否合计,1合计，0不合计");

                entity.Property(e => e.IsUpdateValue)
                    .HasDefaultValueSql("((0))")
                    .HasComment("是否更新数据");

                entity.Property(e => e.IsViewTotal).HasComment("合计是否查看列");

                entity.Property(e => e.LevelType).HasComment("级别；3为部门，业务科室，财务。2为部门，财务");

                entity.Property(e => e.LinkFieldValue)
                    .HasMaxLength(50)
                    .HasComment("关联字段内容。");

                entity.Property(e => e.Orderby).HasComment("排序");

                entity.Property(e => e.TotalOrderby).HasComment("合计排序");

                entity.Property(e => e.ValidGroup)
                    .HasDefaultValueSql("((0))")
                    .HasComment("验证分组。同一数字进行验证,0不验证");

                entity.Property(e => e.Year).HasComment("年度");
            });

            modelBuilder.Entity<TccBudgetBasicAccount>(entity =>
            {
                entity.ToTable("TCC_BudgetBasicAccount");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BatchNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("批次号，用于每次申请人。");

                entity.Property(e => e.BdgCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("预算编号");

                entity.Property(e => e.BdgName)
                    .HasMaxLength(50)
                    .HasComment("名称，如果subjectCode对应无相关科目，使用该名称，对应科目使用科目名称");

                entity.Property(e => e.BdgType)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("分类（1部门预算）");

                entity.Property(e => e.IsEditThisYearBudget).HasComment("是否可编辑预算。0不可改1可改");

                entity.Property(e => e.IsEditThisYearUsed).HasComment("是否可编辑使用。0不可改1可改");

                entity.Property(e => e.IsEnabled).HasComment("是否有效（1有效；0无效）");

                entity.Property(e => e.IsTotal).HasComment("是否参与合计，0参与，1不参与");

                entity.Property(e => e.Orderby).HasComment("排序");

                entity.Property(e => e.ParentBdgCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("父类编号");

                entity.Property(e => e.SubjectCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("科目号");

                entity.Property(e => e.Year)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("年度");
            });

            modelBuilder.Entity<TccBudgetBasicAccountDeparment>(entity =>
            {
                entity.ToTable("TCC_BudgetBasicAccount_Deparment");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BdgCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("科目号");

                entity.Property(e => e.BdgType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DeptNo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DeptNO")
                    .HasComment("部门号：空为全部");
            });

            modelBuilder.Entity<TccBudgetBasicAccountInfo>(entity =>
            {
                entity.HasKey(e => e.Sid);

                entity.ToTable("TCC_BudgetBasicAccount_Info");

                entity.Property(e => e.Sid).HasColumnName("SID");

                entity.Property(e => e.BdgCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("预算编码");

                entity.Property(e => e.BdgName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("预算项名称");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasComment("创建时间");

                entity.Property(e => e.Flag).HasComment("0表示未进行插入操作 1表示插入操作完成");

                entity.Property(e => e.Guid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("GUID")
                    .HasComment("当次批量操作的唯一表示");

                entity.Property(e => e.ParentBdgCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("父节点编码");
            });

            modelBuilder.Entity<TccBudgetBasicAccountLog>(entity =>
            {
                entity.ToTable("TCC_BudgetBasicAccount_Log");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BatchNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("批次号，用于每次申请人。");

                entity.Property(e => e.BdgCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("预算编号");

                entity.Property(e => e.BdgName)
                    .HasMaxLength(50)
                    .HasComment("名称，如果subjectCode对应无相关科目，使用该名称，对应科目使用科目名称");

                entity.Property(e => e.BdgType)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("分类（1部门预算）");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasComment("创建时间");

                entity.Property(e => e.Flag).HasComment("1表示是从页面新增的数据（操作完成后删除) 2表示是从主表删除的数据 3表示主表修改名称的数据");

                entity.Property(e => e.IsEditThisYearBudget).HasComment("是否可编辑预算。0不可改1可改");

                entity.Property(e => e.IsEnabled).HasComment("是否有效（1有效；0无效）");

                entity.Property(e => e.IsTotal).HasComment("是否参与合计，0参与，1不参与");

                entity.Property(e => e.Orderby).HasComment("排序");

                entity.Property(e => e.ParentBdgCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("父类编号");

                entity.Property(e => e.SubjectCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("科目号");

                entity.Property(e => e.Year)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("年度");
            });

            modelBuilder.Entity<TccBudgetBasicAccountSubject>(entity =>
            {
                entity.ToTable("TCC_BudgetBasicAccountSubject");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BdgCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("预算编号");

                entity.Property(e => e.SubjectCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("科目号");

                entity.Property(e => e.SubjectType)
                    .HasMaxLength(50)
                    .HasComment("费用类型");
            });

            modelBuilder.Entity<TccBudgetBasicConfig>(entity =>
            {
                entity.ToTable("TCC_Budget_BasicConfig");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IsEnabled).HasComment("是否有效:1有效;2无效;");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.PayType).HasComment("1 项目；2部门");

                entity.Property(e => e.RunningCost).HasComment("预算:1运行:2专项费");
            });

            modelBuilder.Entity<TccBudgetBasicDepartment>(entity =>
            {
                entity.ToTable("TCC_BudgetBasic_Department");

                entity.HasIndex(e => e.BudgetCode, "IX_TCC_BudgetBasic_Department");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BudgetCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("编号");

                entity.Property(e => e.DeptNo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DeptNO")
                    .HasDefaultValueSql("('')")
                    .HasComment("部门号；空的为全部部门");
            });

            modelBuilder.Entity<TccBudgetBasicRelevance>(entity =>
            {
                entity.ToTable("TCC_BudgetBasic_Relevance");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BdgCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("'新编号'");

                entity.Property(e => e.BdgType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("新分类");

                entity.Property(e => e.Flag).HasComment("分类:1, 2,3");

                entity.Property(e => e.LevelNo)
                    .HasColumnName("LevelNO")
                    .HasComment("新级别");

                entity.Property(e => e.TargeLevelNo)
                    .HasColumnName("TargeLevelNO")
                    .HasComment("目标级别");

                entity.Property(e => e.TargetBdgCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("目标编号");

                entity.Property(e => e.TargetBdgType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("目标分类");
            });

            modelBuilder.Entity<TccBudgetBasicRowConfig>(entity =>
            {
                entity.ToTable("TCC_BudgetBasicRowConfig");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BatchNumber).HasComment("批次");

                entity.Property(e => e.BdgCode)
                    .HasMaxLength(50)
                    .HasComment("编号");

                entity.Property(e => e.BdgName)
                    .HasMaxLength(50)
                    .HasComment("行标题");

                entity.Property(e => e.BdgType)
                    .HasMaxLength(50)
                    .HasComment("对应TCC_BudgetBasic 中的BudgetCode");

                entity.Property(e => e.ExpandColI)
                    .HasMaxLength(50)
                    .HasComment("拓展列1");

                entity.Property(e => e.IsEnabled).HasComment("是否可用");

                entity.Property(e => e.Orderby).HasComment("排序");

                entity.Property(e => e.Year)
                    .HasMaxLength(50)
                    .HasComment("年度");
            });

            modelBuilder.Entity<TccBudgetCheckLog>(entity =>
            {
                entity.ToTable("TCC_Budget_CheckLogs");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ApplicationCode).HasMaxLength(50);

                entity.Property(e => e.ApplicationName).HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.DeptOrProject).HasMaxLength(50);

                entity.Property(e => e.IsBeyond).HasMaxLength(50);

                entity.Property(e => e.Json).HasColumnName("json");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.Times).HasMaxLength(50);
            });

            modelBuilder.Entity<TccBudgetConfig>(entity =>
            {
                entity.ToTable("TCC_BudgetConfig");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .HasComment("名称");

                entity.Property(e => e.Value)
                    .HasMaxLength(50)
                    .HasComment("值");
            });

            modelBuilder.Entity<TccBudgetHistory>(entity =>
            {
                entity.ToTable("TCC_BudgetHistory");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AccountDate)
                    .HasColumnType("datetime")
                    .HasComment("入帐时间");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("金额");

                entity.Property(e => e.AmountRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AmountRMB")
                    .HasComment("折人民币金额");

                entity.Property(e => e.ApplicationCode).HasComment("费用名称");

                entity.Property(e => e.ApplicationName)
                    .HasMaxLength(50)
                    .HasComment("费用名称");

                entity.Property(e => e.BudgetDeptCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("预算部门");

                entity.Property(e => e.BudgetDeptName)
                    .HasMaxLength(50)
                    .HasComment("预算部门");

                entity.Property(e => e.BudgetProjectCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("预算项目");

                entity.Property(e => e.BudgetProjectName)
                    .HasMaxLength(500)
                    .HasComment("预算项目");

                entity.Property(e => e.CostDeptCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("成本部门");

                entity.Property(e => e.CostDeptName)
                    .HasMaxLength(50)
                    .HasComment("成本部门");

                entity.Property(e => e.CostProjectCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("成本项目");

                entity.Property(e => e.CostProjectName)
                    .HasMaxLength(500)
                    .HasComment("成本项目");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("创建时间");

                entity.Property(e => e.Currency)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("币种");

                entity.Property(e => e.Exchange)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("汇率");

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("表单号");

                entity.Property(e => e.Incident).HasComment("实例号");

                entity.Property(e => e.Item2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Item3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("流程名");

                entity.Property(e => e.Remark).HasComment("摘要");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("部门编号");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(50)
                    .HasComment("部门名称");

                entity.Property(e => e.RequestLogin)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("登陆帐号");

                entity.Property(e => e.RequestName)
                    .HasMaxLength(50)
                    .HasComment("申请人");

                entity.Property(e => e.RequestSfzh)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RequestSFZH")
                    .HasComment("身份证号");

                entity.Property(e => e.RunningCost).HasComment("运行状态：1运行费；2专项费");

                entity.Property(e => e.SFlag).HasColumnName("sFlag");

                entity.Property(e => e.SubjectCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("科目");

                entity.Property(e => e.SubjectName)
                    .HasMaxLength(500)
                    .HasComment("科目名称");

                entity.Property(e => e.Vchrnum).HasComment("久其凭证号");

                entity.Property(e => e.VoucherId)
                    .HasColumnName("VoucherID")
                    .HasComment("凭证主键");

                entity.Property(e => e.Year)
                    .HasMaxLength(50)
                    .HasComment("预算年度");
            });

            modelBuilder.Entity<TccBudgetInfoContractInfo>(entity =>
            {
                entity.HasKey(e => e.Sid)
                    .HasName("PK_TCC_BudgetInfo_ContractInfo_1");

                entity.ToTable("TCC_BudgetInfo_ContractInfo");

                entity.Property(e => e.Sid).HasColumnName("SID");

                entity.Property(e => e.Bid).HasColumnName("BID");

                entity.Property(e => e.ColumnBigVarcher1).HasMaxLength(2000);

                entity.Property(e => e.ColumnDecimal1).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal10).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal11).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal12).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal13).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal14).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal15).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal16).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal17).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal18).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal19).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal2).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal20).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal21).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal22).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal23).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal24).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal25).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal26).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal27).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal3).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal4).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal5).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal6).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal7).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal8).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal9).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnVarcher1).HasMaxLength(50);

                entity.Property(e => e.ColumnVarcher2).HasMaxLength(50);

                entity.Property(e => e.ColumnVarcher3).HasMaxLength(50);

                entity.Property(e => e.ColumnVarcher4).HasMaxLength(50);

                entity.Property(e => e.Flag).HasComment("用途");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectName).HasMaxLength(500);
            });

            modelBuilder.Entity<TccBudgetInfoContractInfoBasic>(entity =>
            {
                entity.ToTable("TCC_BudgetInfo_ContractInfo_Basic");

                entity.HasIndex(e => new { e.Flag, e.ColumnName }, "IX_TCC_BudgetInfo_ContractInfo_Basic")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ColumnAbbreviation)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("列名缩写");

                entity.Property(e => e.ColumnAlign)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("对齐方式");

                entity.Property(e => e.ColumnName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("字段名称");

                entity.Property(e => e.ColumnTitle)
                    .HasMaxLength(50)
                    .HasComment("标题");

                entity.Property(e => e.ColumnType)
                    .HasDefaultValueSql("((1))")
                    .HasComment("字段类型；1显示，2计算");

                entity.Property(e => e.ColumnWidth)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("列宽");

                entity.Property(e => e.DataType)
                    .HasDefaultValueSql("((2))")
                    .HasComment("1数字;2字段;3日期;4日期时间");

                entity.Property(e => e.Dbformat)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DBFormat")
                    .HasDefaultValueSql("('')")
                    .HasComment("数据库使用样式");

                entity.Property(e => e.DecimalDigits)
                    .HasDefaultValueSql("((0))")
                    .HasComment("小数位数");

                entity.Property(e => e.Flag).HasComment("分类");

                entity.Property(e => e.IsEdit)
                    .HasDefaultValueSql("((2))")
                    .HasComment("是否可编辑1可2不可");

                entity.Property(e => e.IsFrozenColumns)
                    .HasDefaultValueSql("((0))")
                    .HasComment("是否固定列；1正常列，2固定列");

                entity.Property(e => e.IsPercent)
                    .HasDefaultValueSql("((2))")
                    .HasComment("是否分数，１是；２不是");

                entity.Property(e => e.IsShow)
                    .HasDefaultValueSql("((1))")
                    .HasComment("是否显示1显，２不显");

                entity.Property(e => e.Note)
                    .HasMaxLength(500)
                    .HasComment("描述说明");

                entity.Property(e => e.OrderBy)
                    .HasDefaultValueSql("((0))")
                    .HasComment("显示排序");

                entity.Property(e => e.RowspanNo)
                    .HasColumnName("RowspanNO")
                    .HasDefaultValueSql("((1))")
                    .HasComment("跨行数");
            });

            modelBuilder.Entity<TccBudgetInfoContractInfoBasicCalculate>(entity =>
            {
                entity.ToTable("TCC_BudgetInfo_ContractInfo_Basic_Calculate");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CalFlag).HasComment("类型");

                entity.Property(e => e.ColumnName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("字段");

                entity.Property(e => e.OrderBy).HasComment("顺序");

                entity.Property(e => e.TargetColumn)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("目标字段");
            });

            modelBuilder.Entity<TccBudgetInfoContractInfoBasicDatum>(entity =>
            {
                entity.ToTable("TCC_BudgetInfo_ContractInfo_BasicData");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ColumnVarcher1)
                    .HasMaxLength(50)
                    .HasComment("内容二");

                entity.Property(e => e.ColumnVarcher2)
                    .HasMaxLength(50)
                    .HasComment("内容三");

                entity.Property(e => e.Flag).HasComment("标志");

                entity.Property(e => e.RowName)
                    .HasMaxLength(50)
                    .HasComment("行内容");

                entity.Property(e => e.Year).HasComment("年度");
            });

            modelBuilder.Entity<TccBudgetInfoContractInfoBasicVerification>(entity =>
            {
                entity.ToTable("TCC_BudgetInfo_ContractInfo_Basic_Verification");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ColumnName).HasMaxLength(50);

                entity.Property(e => e.VerifyColumn).HasMaxLength(50);

                entity.Property(e => e.VerifyValue).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<TccBudgetInfoContractInfoTemp>(entity =>
            {
                entity.HasKey(e => e.Sid)
                    .HasName("PK_TCC_BudgetInfo_ContractInfo");

                entity.ToTable("TCC_BudgetInfo_ContractInfo_Temp");

                entity.Property(e => e.Sid).HasColumnName("SID");

                entity.Property(e => e.Bid).HasColumnName("BID");

                entity.Property(e => e.ColumnBigVarcher1).HasMaxLength(2000);

                entity.Property(e => e.ColumnDecimal1).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal10).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal11).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal12).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal13).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal14).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal15).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal16).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal17).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal18).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal19).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal2).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal20).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal21).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal22).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal23).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal24).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal25).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal26).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal27).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal3).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal4).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal5).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal6).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal7).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal8).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnDecimal9).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ColumnVarcher1).HasMaxLength(50);

                entity.Property(e => e.ColumnVarcher2).HasMaxLength(50);

                entity.Property(e => e.ColumnVarcher3).HasMaxLength(50);

                entity.Property(e => e.ColumnVarcher4).HasMaxLength(50);

                entity.Property(e => e.Flag).HasComment("用途");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectName).HasMaxLength(500);
            });

            modelBuilder.Entity<TccBudgetInfoPeptjInfo>(entity =>
            {
                entity.HasKey(e => e.Ids);

                entity.ToTable("TCC_BudgetInfo_PeptjInfo");

                entity.Property(e => e.Ids).HasColumnName("ids");

                entity.Property(e => e.Bid).HasColumnName("bid");

                entity.Property(e => e.HappenHours)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("happen_hours")
                    .HasComment("已发生人工时");

                entity.Property(e => e.HappenMoney)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("happen_money")
                    .HasComment("已发生额");

                entity.Property(e => e.PlannedInvestment)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("planned_investment")
                    .HasComment("投入资金总额");

                entity.Property(e => e.PlantFee)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("plant_fee")
                    .HasComment("2016年计划人工费");

                entity.Property(e => e.PlantHours)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("plant_hours")
                    .HasComment("2016年计划人工时\r\n");

                entity.Property(e => e.ProjBdate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("proj_bdate")
                    .HasComment("计划开工时间");

                entity.Property(e => e.ProjEdate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("proj_edate")
                    .HasComment("计划完工时间");

                entity.Property(e => e.ProjId)
                    .HasMaxLength(50)
                    .HasColumnName("proj_id")
                    .HasComment("项目编号");

                entity.Property(e => e.ProjName)
                    .HasMaxLength(200)
                    .HasColumnName("proj_name")
                    .HasComment("项目名称");

                entity.Property(e => e.ProjStatus)
                    .HasMaxLength(50)
                    .HasColumnName("proj_status")
                    .HasComment("项目状态");

                entity.Property(e => e.S10)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("s10")
                    .HasComment("燃料动力费");

                entity.Property(e => e.S11)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("s11")
                    .HasComment("差旅费");

                entity.Property(e => e.S12)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("s12")
                    .HasComment("会议费");

                entity.Property(e => e.S13)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("s13")
                    .HasComment("出版/文献/信息传播/知识产权事务费");

                entity.Property(e => e.S14)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("s14")
                    .HasComment("国际交流与合作费");

                entity.Property(e => e.S18)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("s18")
                    .HasComment("研发委托费");

                entity.Property(e => e.S19)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("s19")
                    .HasComment("工程费");

                entity.Property(e => e.S20)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("s20")
                    .HasComment("通讯费");

                entity.Property(e => e.S21)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("s21")
                    .HasComment("招待费");

                entity.Property(e => e.S22)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("s22")
                    .HasComment("不可预见费");

                entity.Property(e => e.S23)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("s23")
                    .HasComment("税金");

                entity.Property(e => e.S24)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("s24")
                    .HasComment("管理费\r\n");

                entity.Property(e => e.S4)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("s4")
                    .HasComment("项目奖金");

                entity.Property(e => e.S5)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("s5")
                    .HasComment("劳务费");

                entity.Property(e => e.S6)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("s6")
                    .HasComment("专家咨询费");

                entity.Property(e => e.S7)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("s7")
                    .HasComment("设备费");

                entity.Property(e => e.S8)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("s8")
                    .HasComment("材料费");

                entity.Property(e => e.S9)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("s9")
                    .HasComment("试验化验加工费");

                entity.Property(e => e.Total)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("total")
                    .HasComment("合计");

                entity.Property(e => e.TotalHours)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("total_hours")
                    .HasComment("总人工时");

                entity.Property(e => e.YearsTotalPlannedInvestment)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("years_total_planned_investment")
                    .HasComment("2016年计划投入资金总额");
            });

            modelBuilder.Entity<TccBudgetInfoPeptjInfo72>(entity =>
            {
                entity.HasKey(e => e.Ids);

                entity.ToTable("TCC_BudgetInfo_PeptjInfo72");

                entity.Property(e => e.Ids).HasColumnName("ids");

                entity.Property(e => e.Bid).HasColumnName("bid");

                entity.Property(e => e.DeptId)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("dept_id");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .HasColumnName("dept_name");

                entity.Property(e => e.Epcq1)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("EPCQ1");

                entity.Property(e => e.Epcq2)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("EPCQ2");

                entity.Property(e => e.Epcq3)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("EPCQ3");

                entity.Property(e => e.Epcq4)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("EPCQ4");

                entity.Property(e => e.Nepcq1)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("NEPCQ1");

                entity.Property(e => e.Nepcq2)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("NEPCQ2");

                entity.Property(e => e.Nepcq3)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("NEPCQ3");

                entity.Property(e => e.Nepcq4)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("NEPCQ4");

                entity.Property(e => e.Total).HasColumnType("decimal(18, 6)");
            });

            modelBuilder.Entity<TccBudgetInfoPeptjInfo72Temp>(entity =>
            {
                entity.HasKey(e => e.Ids);

                entity.ToTable("TCC_BudgetInfo_PeptjInfo72_Temp");

                entity.Property(e => e.Ids).HasColumnName("ids");

                entity.Property(e => e.Bid)
                    .HasColumnName("bid")
                    .HasComment("外键");

                entity.Property(e => e.DeptId)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("dept_id")
                    .HasComment("部门编号");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .HasColumnName("dept_name")
                    .HasComment("部门名称");

                entity.Property(e => e.Epcq1)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("EPCQ1")
                    .HasComment("EPC季度1");

                entity.Property(e => e.Epcq2)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("EPCQ2")
                    .HasComment("EPC季度2");

                entity.Property(e => e.Epcq3)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("EPCQ3")
                    .HasComment("EPC季度3");

                entity.Property(e => e.Epcq4)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("EPCQ4")
                    .HasComment("EPC季度4");

                entity.Property(e => e.Nepcq1)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("NEPCQ1")
                    .HasComment("非EPC季度1");

                entity.Property(e => e.Nepcq2)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("NEPCQ2")
                    .HasComment("非EPC季度2");

                entity.Property(e => e.Nepcq3)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("NEPCQ3")
                    .HasComment("非EPC季度3");

                entity.Property(e => e.Nepcq4)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("NEPCQ4")
                    .HasComment("非EPC季度4");

                entity.Property(e => e.Total)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("合计");
            });

            modelBuilder.Entity<TccBudgetInfoPeptjInfoTemp>(entity =>
            {
                entity.HasKey(e => e.Ids);

                entity.ToTable("TCC_BudgetInfo_PeptjInfo_Temp");

                entity.Property(e => e.Ids).HasColumnName("ids");

                entity.Property(e => e.Bid).HasColumnName("bid");

                entity.Property(e => e.HappenHours)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("happen_hours")
                    .HasComment("已发生人工时");

                entity.Property(e => e.HappenMoney)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("happen_money")
                    .HasComment("已发生额");

                entity.Property(e => e.PlannedInvestment)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("planned_investment")
                    .HasComment("投入资金总额");

                entity.Property(e => e.PlantFee)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("plant_fee")
                    .HasComment("2016年计划人工费");

                entity.Property(e => e.PlantHours)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("plant_hours")
                    .HasComment("2016年计划人工时\r\n");

                entity.Property(e => e.ProjBdate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("proj_bdate")
                    .HasComment("计划开工时间");

                entity.Property(e => e.ProjEdate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("proj_edate")
                    .HasComment("计划完工时间");

                entity.Property(e => e.ProjId)
                    .HasMaxLength(50)
                    .HasColumnName("proj_id")
                    .HasComment("项目编号");

                entity.Property(e => e.ProjName)
                    .HasMaxLength(200)
                    .HasColumnName("proj_name")
                    .HasComment("项目名称");

                entity.Property(e => e.ProjStatus)
                    .HasMaxLength(50)
                    .HasColumnName("proj_status")
                    .HasComment("项目状态");

                entity.Property(e => e.S10)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("s10")
                    .HasComment("燃料动力费");

                entity.Property(e => e.S11)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("s11")
                    .HasComment("差旅费");

                entity.Property(e => e.S12)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("s12")
                    .HasComment("会议费");

                entity.Property(e => e.S13)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("s13")
                    .HasComment("出版/文献/信息传播/知识产权事务费");

                entity.Property(e => e.S14)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("s14")
                    .HasComment("国际交流与合作费");

                entity.Property(e => e.S18)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("s18")
                    .HasComment("研发委托费");

                entity.Property(e => e.S19)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("s19")
                    .HasComment("工程费");

                entity.Property(e => e.S20)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("s20")
                    .HasComment("通讯费");

                entity.Property(e => e.S21)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("s21")
                    .HasComment("招待费");

                entity.Property(e => e.S22)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("s22")
                    .HasComment("不可预见费");

                entity.Property(e => e.S23)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("s23")
                    .HasComment("税金");

                entity.Property(e => e.S24)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("s24")
                    .HasComment("管理费\r\n");

                entity.Property(e => e.S4)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("s4")
                    .HasComment("项目奖金");

                entity.Property(e => e.S5)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("s5")
                    .HasComment("劳务费");

                entity.Property(e => e.S6)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("s6")
                    .HasComment("专家咨询费");

                entity.Property(e => e.S7)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("s7")
                    .HasComment("设备费");

                entity.Property(e => e.S8)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("s8")
                    .HasComment("材料费");

                entity.Property(e => e.S9)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("s9")
                    .HasComment("试验化验加工费");

                entity.Property(e => e.Total)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("total")
                    .HasComment("合计");

                entity.Property(e => e.TotalHours)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("total_hours")
                    .HasComment("总人工时");

                entity.Property(e => e.YearsTotalPlannedInvestment)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("years_total_planned_investment")
                    .HasComment("2016年计划投入资金总额");
            });

            modelBuilder.Entity<TccBudgetItemCentralizedDp>(entity =>
            {
                entity.ToTable("TCC_BudgetItemCentralizedDp");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BudgetItemCode)
                    .HasMaxLength(50)
                    .HasComment("预算科目编号");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .HasComment("部门编号--部门预算编制显示（一般部门）");

                entity.Property(e => e.IsEnable).HasComment("是否可用");
            });

            modelBuilder.Entity<TccBudgetItemConfig>(entity =>
            {
                entity.ToTable("TCC_BudgetItemConfig");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplicationName)
                    .HasMaxLength(50)
                    .HasComment("对应显示用途（默认与预算科目BudgetItem一致）");

                entity.Property(e => e.BdgType).HasMaxLength(10);

                entity.Property(e => e.BudgetItem)
                    .HasMaxLength(50)
                    .HasComment("预算科目编号");

                entity.Property(e => e.BudgetItemCode)
                    .HasMaxLength(50)
                    .HasComment("预算科目");

                entity.Property(e => e.Categoty).HasComment("类型  1:职工薪酬  2：费用");

                entity.Property(e => e.CentralizedDp)
                    .HasMaxLength(5)
                    .HasComment("归口部门预算编制");

                entity.Property(e => e.GeneralDp)
                    .HasMaxLength(5)
                    .HasComment("一般部门预算部门编制");

                entity.Property(e => e.IsCarryout).HasComment("是否需要结转科目");

                entity.Property(e => e.IsContrant).HasComment("是否合同必须");

                entity.Property(e => e.IsEdited).HasComment("是否可编辑");

                entity.Property(e => e.IsEnable).HasComment("是否可用");

                entity.Property(e => e.OrderBy).HasComment("排序");

                entity.Property(e => e.ParentItem)
                    .HasMaxLength(50)
                    .HasComment("父级预算科目编号");

                entity.Property(e => e.ParentItemCode)
                    .HasMaxLength(50)
                    .HasComment("父级预算科目");

                entity.Property(e => e.TreeLevel).HasComment("树形结构level");
            });

            modelBuilder.Entity<TccBudgetItemConfigOther>(entity =>
            {
                entity.ToTable("TCC_BudgetItemConfigOther");

                entity.Property(e => e.ApplicationName)
                    .HasMaxLength(50)
                    .HasComment("显示用途(一个预算科目编号有可能对应多个显示用途，也有可能只有用途)");

                entity.Property(e => e.BudgetItemCode)
                    .HasMaxLength(50)
                    .HasComment("预算科目编号");

                entity.Property(e => e.IsEnable).HasComment("是否可用");
            });

            modelBuilder.Entity<TccBudgetItemGeneralDp>(entity =>
            {
                entity.ToTable("TCC_BudgetItemGeneralDp");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BudgetItemCode)
                    .HasMaxLength(50)
                    .HasComment("预算科目编号");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .HasComment("部门编号--部门预算编制显示（一般部门）");

                entity.Property(e => e.IsEnable).HasComment("是否可用");
            });

            modelBuilder.Entity<TccBudgetItemQueryDp>(entity =>
            {
                entity.ToTable("TCC_BudgetItemQueryDp");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BudgetItemCode)
                    .HasMaxLength(50)
                    .HasComment("预算科目编号");

                entity.Property(e => e.BudgetItemName)
                    .HasMaxLength(50)
                    .HasComment("预算科目");

                entity.Property(e => e.Category).HasComment("类别配置：1 可以全部查询,2配置特殊部门");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .HasComment("部门编号--部门预算编制显示（一般部门）");

                entity.Property(e => e.IsEnable).HasComment("是否可用");
            });

            modelBuilder.Entity<TccBudgetMessageConfig>(entity =>
            {
                entity.ToTable("TCC_BudgetMessageConfig");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BdgMessage)
                    .HasMaxLength(500)
                    .HasComment("短信模版");

                entity.Property(e => e.BdgType).HasComment("预算类型");

                entity.Property(e => e.FormUrl)
                    .HasMaxLength(500)
                    .HasComment("页面地址");

                entity.Property(e => e.IsEnable).HasComment("是否有效");

                entity.Property(e => e.LevelFlag)
                    .HasDefaultValueSql("((1))")
                    .HasComment("级别 ");

                entity.Property(e => e.SendDay).HasComment("日");

                entity.Property(e => e.SendMonth).HasComment("月");

                entity.Property(e => e.SendYear).HasComment("年");
            });

            modelBuilder.Entity<TccBudgetOtherCodeDictionary>(entity =>
            {
                entity.ToTable("TCC_Budget_OtherCode_Dictionary");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键　");

                entity.Property(e => e.BdgCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("编号");

                entity.Property(e => e.OtherCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("其它编号");

                entity.Property(e => e.OtherCode2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("其它编码２");
            });

            modelBuilder.Entity<TccBudgetProcess>(entity =>
            {
                entity.ToTable("TCC_BudgetProcess");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AccountingAuditDate)
                    .HasColumnType("datetime")
                    .HasComment("财务审核日期");

                entity.Property(e => e.AccountingAuditLoginUserName)
                    .HasMaxLength(50)
                    .HasComment("财务审核人登陆名");

                entity.Property(e => e.AccountingAuditUserName)
                    .HasMaxLength(50)
                    .HasComment("财务审核人");

                entity.Property(e => e.AuditType).HasComment("审核类型");

                entity.Property(e => e.BatchNumber)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("批次号");

                entity.Property(e => e.BdgChangeShowType).HasComment("显示调整。0显示，1不显示");

                entity.Property(e => e.BdgShowSumButton).HasComment("汇总按钮,0显示1不显示");

                entity.Property(e => e.BdgShowType).HasComment("列的显示类型，0都显示，1显示本年实耗");

                entity.Property(e => e.BdgTitle)
                    .HasMaxLength(50)
                    .HasComment("标题");

                entity.Property(e => e.BdgType).HasComment("预算类型");

                entity.Property(e => e.Budget)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("限定值");

                entity.Property(e => e.CasierClaimDate)
                    .HasColumnType("datetime")
                    .HasComment("接单提交时间");

                entity.Property(e => e.CasierClaimLoginUserName)
                    .HasMaxLength(50)
                    .HasComment("接单会计登陆名");

                entity.Property(e => e.CasierClaimUserName)
                    .HasMaxLength(50)
                    .HasComment("接单会计名称");

                entity.Property(e => e.LevelFlag).HasComment("当前第三级别。1为部门，3为财务，2为业务部门");

                entity.Property(e => e.ProcessFinishDate).HasColumnType("datetime");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.RequestDate).HasColumnType("datetime");

                entity.Property(e => e.RequestDeptCode).HasMaxLength(50);

                entity.Property(e => e.RequestDeptName).HasMaxLength(200);

                entity.Property(e => e.RequestFormNumber).HasMaxLength(50);

                entity.Property(e => e.RequestLoginName).HasMaxLength(50);

                entity.Property(e => e.RequestRealName).HasMaxLength(50);

                entity.Property(e => e.RequestSfzh).HasMaxLength(50);

                entity.Property(e => e.RequestTelephone).HasMaxLength(50);

                entity.Property(e => e.SurplusBudget)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("剩余");

                entity.Property(e => e.UseBudget)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("已分配");

                entity.Property(e => e.Year)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("年");
            });

            modelBuilder.Entity<TccBudgetProcessAccountAmount>(entity =>
            {
                entity.HasKey(e => e.Sid)
                    .HasName("PK_TCC_BudgetProcess_Bdg");

                entity.ToTable("TCC_BudgetProcess_AccountAmount");

                entity.Property(e => e.Sid)
                    .HasColumnName("SID")
                    .HasComment("主键");

                entity.Property(e => e.BatchNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("批次号");

                entity.Property(e => e.BdgAmount)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("下年度申请值");

                entity.Property(e => e.BdgAmountZjl)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BdgAmountZJL")
                    .HasComment("增减率(企业负责人预算专用)");

                entity.Property(e => e.BdgCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("编号");

                entity.Property(e => e.BdgName)
                    .HasMaxLength(50)
                    .HasComment("预算科目");

                entity.Property(e => e.BdgNote)
                    .HasMaxLength(4000)
                    .HasComment("预算说明");

                entity.Property(e => e.BdgType)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("科目类型");

                entity.Property(e => e.Bid)
                    .HasColumnName("BID")
                    .HasComment("外键");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("部门");

                entity.Property(e => e.FinanceBdgAmount)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("财务批注金额");

                entity.Property(e => e.LastYearBudget)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("上一年预算");

                entity.Property(e => e.LastYearUsed)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("上一年使用");

                entity.Property(e => e.NextChangeColumn)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NextChangeName).HasMaxLength(30);

                entity.Property(e => e.NextYearChange)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("下一年变更比例");

                entity.Property(e => e.Orderby).HasComment("排序");

                entity.Property(e => e.ParentBdgCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("父类编号");

                entity.Property(e => e.SubjectCode)
                    .HasMaxLength(10)
                    .IsFixedLength(true)
                    .HasComment("对应入帐科目");

                entity.Property(e => e.ThisYearBudget)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("本年预算");

                entity.Property(e => e.ThisYearUsed)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("本年实耗");

                entity.Property(e => e.Year)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("年");
            });

            modelBuilder.Entity<TccBudgetProcessTemp>(entity =>
            {
                entity.ToTable("TCC_BudgetProcess_Temp");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AuditType).HasComment("审核类型");

                entity.Property(e => e.BatchNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BdgType).HasComment("预算类型");

                entity.Property(e => e.IsDelete)
                    .HasDefaultValueSql("((0))")
                    .HasComment("是否删除;0未删除;1删除");

                entity.Property(e => e.LevelFlag)
                    .HasDefaultValueSql("((1))")
                    .HasComment("级别");

                entity.Property(e => e.RequestDeptCode).HasMaxLength(50);

                entity.Property(e => e.RequestDeptName).HasMaxLength(200);

                entity.Property(e => e.RequestLoginName).HasMaxLength(50);

                entity.Property(e => e.RequestRealName).HasMaxLength(50);

                entity.Property(e => e.Year).HasMaxLength(10);
            });

            modelBuilder.Entity<TccBudgetProcessTempAccountAmount>(entity =>
            {
                entity.HasKey(e => e.Sid)
                    .HasName("PK_TCC_BudgetProcess_Temp_Bdg");

                entity.ToTable("TCC_BudgetProcess_Temp_AccountAmount");

                entity.Property(e => e.Sid)
                    .HasColumnName("SID")
                    .HasComment("主键");

                entity.Property(e => e.AdjustValue)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ApprovalValue)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BatchNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("批次号");

                entity.Property(e => e.BdgAmount)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("下年度申请值");

                entity.Property(e => e.BdgAmountZjl)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BdgAmountZJL")
                    .HasComment("增减率(企业负责人预算专用)");

                entity.Property(e => e.BdgCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("编号");

                entity.Property(e => e.BdgName)
                    .HasMaxLength(50)
                    .HasComment("预算科目");

                entity.Property(e => e.BdgNote)
                    .HasMaxLength(4000)
                    .HasComment("预算说明");

                entity.Property(e => e.BdgType)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("科目类型");

                entity.Property(e => e.Bid)
                    .HasColumnName("BID")
                    .HasComment("外键");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("部门编号");

                entity.Property(e => e.FinanceBdgAmount)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("财务付款");

                entity.Property(e => e.LastYearBudget)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("上一年预算");

                entity.Property(e => e.LastYearUsed)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("上一年使用");

                entity.Property(e => e.NextChangeColumn)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("调整字段");

                entity.Property(e => e.NextChangeName)
                    .HasMaxLength(30)
                    .HasComment("生成数");

                entity.Property(e => e.NextYearChange)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("下一年变更比例");

                entity.Property(e => e.Orderby).HasComment("排序");

                entity.Property(e => e.ParentBdgCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("父类编号");

                entity.Property(e => e.SubjectCode)
                    .HasMaxLength(10)
                    .IsFixedLength(true)
                    .HasComment("对应入帐科目");

                entity.Property(e => e.ThisYearBudget)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("本年预算");

                entity.Property(e => e.ThisYearUsed)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("本年实耗");

                entity.Property(e => e.Year)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("年");
            });

            modelBuilder.Entity<TccBudgetProcessWage>(entity =>
            {
                entity.ToTable("TCC_BudgetProcessWage");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.Incident).HasComment("实例号");

                entity.Property(e => e.ProcessFinishDate)
                    .HasColumnType("datetime")
                    .HasComment("完成时间");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名");

                entity.Property(e => e.ProcessStatus).HasComment("状态");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasComment("申请时间");

                entity.Property(e => e.RequestFormNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("申请编号");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("申请人账号");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(10)
                    .HasComment("申请人姓名");

                entity.Property(e => e.RequestSfzh)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("身份证号");

                entity.Property(e => e.RequestYear).HasComment("申请年");
            });

            modelBuilder.Entity<TccBudgetProcessWageAccountAmount>(entity =>
            {
                entity.ToTable("TCC_BudgetProcessWage_AccountAmount");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BudgetCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("费用编号");

                entity.Property(e => e.BudgetName)
                    .HasMaxLength(50)
                    .HasComment("费用名称");

                entity.Property(e => e.CostType)
                    .HasMaxLength(50)
                    .HasComment("费用类型");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("部门编号");

                entity.Property(e => e.DeptCode2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DeptName).HasMaxLength(50);

                entity.Property(e => e.Fid).HasColumnName("FID");

                entity.Property(e => e.LastYearAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("上年度费用");

                entity.Property(e => e.LastYearBudget)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("上年度预算");

                entity.Property(e => e.NextYearBudget)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("下年度预算");

                entity.Property(e => e.NextYearChange)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("下年度调整");

                entity.Property(e => e.Note)
                    .HasMaxLength(100)
                    .HasComment("说明");

                entity.Property(e => e.ThisYearAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("本年度费用");

                entity.Property(e => e.ThisYearBudget)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("本年度预算");

                entity.Property(e => e.Year).HasComment("年");
            });

            modelBuilder.Entity<TccBudgetProcessWageBasicDatum>(entity =>
            {
                entity.ToTable("TCC_BudgetProcessWage_BasicData");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("编号");

                entity.Property(e => e.Flag)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("类型");

                entity.Property(e => e.IsDelete).HasComment("是否删除。0未删1删");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .HasComment("名称");
            });

            modelBuilder.Entity<TccBudgetProjectInit>(entity =>
            {
                entity.ToTable("TCC_Budget_ProjectInit");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("金额");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("项目号");

                entity.Property(e => e.SubjectCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("类型");
            });

            modelBuilder.Entity<TccBudgetType>(entity =>
            {
                entity.ToTable("TCC_BudgetType");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AuditType).HasComment("审核类型:1 部门主任");

                entity.Property(e => e.BdgTitle)
                    .HasMaxLength(50)
                    .HasComment("标题");

                entity.Property(e => e.BdgType).HasComment("类型");

                entity.Property(e => e.BdgTypeName).HasMaxLength(50);

                entity.Property(e => e.FormUrl)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasComment("查看地址");

                entity.Property(e => e.IsFinanceFinish)
                    .HasDefaultValueSql("((0))")
                    .HasComment("是否完事时插入到财务控制表中。0不插，1插");

                entity.Property(e => e.IsSingle)
                    .HasDefaultValueSql("((1))")
                    .HasComment("是否为唯一提交，1是，0不是");

                entity.Property(e => e.LevelType).HasComment("级别类型。2为部门，财务，3为部门，业务科室，财务。");

                entity.Property(e => e.ShowChangeType)
                    .HasDefaultValueSql("((0))")
                    .HasComment("是否显示调整行；0显示；1不显示");

                entity.Property(e => e.ShowSumButton)
                    .HasDefaultValueSql("((0))")
                    .HasComment("0显示,1不显示;");

                entity.Property(e => e.ShowType)
                    .HasDefaultValueSql("((0))")
                    .HasComment("显示类型，0全显示.1只显示本年实耗");
            });

            modelBuilder.Entity<TccBudgetTypeRole>(entity =>
            {
                entity.ToTable("TCC_BudgetType_Role");

                entity.HasIndex(e => new { e.BdgType, e.RoleId1 }, "IX_TCC_BudgetType_Role")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BdgType).HasComment("费用类型");

                entity.Property(e => e.RoleId1)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("RoleID1")
                    .HasDefaultValueSql("('')")
                    .HasComment("可申请账号");

                entity.Property(e => e.RoleId2)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("RoleID2")
                    .HasDefaultValueSql("('')")
                    .HasComment("可申请账号");
            });

            modelBuilder.Entity<TccBudgetWarningConfig>(entity =>
            {
                entity.ToTable("TCC_BudgetWarningConfig");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BudgetCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.BudgetType).HasComment("类型");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("部门");

                entity.Property(e => e.LevelFlag).HasComment("级别");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名");

                entity.Property(e => e.RoleId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("RoleID")
                    .HasComment("角色编号");

                entity.Property(e => e.RoleId2)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("RoleID2")
                    .HasDefaultValueSql("('')")
                    .HasComment("优先使用RoleID2，如果为空，使用RoleID");

                entity.Property(e => e.Year).HasComment("年");
            });

            modelBuilder.Entity<TccBudgetWarningConfigProcessName>(entity =>
            {
                entity.ToTable("TCC_BudgetWarningConfigProcessName");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Flag)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.StepLabel).HasMaxLength(50);
            });

            modelBuilder.Entity<TccBudgetofDivestitureEnterprise>(entity =>
            {
                entity.ToTable("TCC_BudgetofDivestitureEnterprise");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyUnit)
                    .HasMaxLength(200)
                    .HasComment("申请单位");

                entity.Property(e => e.BudgetAmout)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("预算总额");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .HasComment("责任部门编号");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .HasComment("责任部门");

                entity.Property(e => e.MakeUnit)
                    .HasMaxLength(500)
                    .HasComment("填报单位");

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.ProjectAdress)
                    .HasMaxLength(200)
                    .HasComment("项目所在地");

                entity.Property(e => e.ProjectCategory)
                    .HasMaxLength(200)
                    .HasComment("项目类型");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(200)
                    .HasComment("项目名称");

                entity.Property(e => e.RaisenAmout)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("自筹金额");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .HasComment("备注");

                entity.Property(e => e.SerialNum)
                    .HasMaxLength(50)
                    .HasComment("序号");

                entity.Property(e => e.SignDate)
                    .HasColumnType("datetime")
                    .HasComment("协议（方案）签订时间");

                entity.Property(e => e.SubsidyAmout)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("申请集团公司补助金额");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .HasComment("类别");
            });

            modelBuilder.Entity<TccBudgetofDivestitureEnterpriseTemp>(entity =>
            {
                entity.ToTable("TCC_BudgetofDivestitureEnterpriseTEMP");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyUnit)
                    .HasMaxLength(200)
                    .HasComment("申请单位");

                entity.Property(e => e.BudgetAmout)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("预算总额");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .HasComment("责任部门编号");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .HasComment("责任部门");

                entity.Property(e => e.MakeUnit)
                    .HasMaxLength(500)
                    .HasComment("填报单位");

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.ProjectAdress)
                    .HasMaxLength(200)
                    .HasComment("项目所在地");

                entity.Property(e => e.ProjectCategory)
                    .HasMaxLength(200)
                    .HasComment("项目类型");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(200)
                    .HasComment("项目名称");

                entity.Property(e => e.RaisenAmout)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("自筹金额");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .HasComment("备注");

                entity.Property(e => e.SerialNum)
                    .HasMaxLength(50)
                    .HasComment("序号");

                entity.Property(e => e.SignDate)
                    .HasColumnType("datetime")
                    .HasComment("协议（方案）签订时间");

                entity.Property(e => e.SubsidyAmout)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("申请集团公司补助金额");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .HasComment("类别");
            });

            modelBuilder.Entity<TccBudgetofExternalDonation>(entity =>
            {
                entity.ToTable("TCC_BudgetofExternalDonation");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .HasComment("责任部门编号");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .HasComment("责任部门");

                entity.Property(e => e.DonationAmout)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("捐赠金额");

                entity.Property(e => e.DonationNature)
                    .HasMaxLength(200)
                    .HasComment("捐赠性质");

                entity.Property(e => e.DonationUnit)
                    .HasMaxLength(200)
                    .HasComment("捐款单位");

                entity.Property(e => e.IsOftenProject)
                    .HasMaxLength(50)
                    .HasComment("是否为经常性项目");

                entity.Property(e => e.MakeUnit)
                    .HasMaxLength(500)
                    .HasComment("填报单位");

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.Recipients)
                    .HasMaxLength(200)
                    .HasComment("受赠对象");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .HasComment("备注");

                entity.Property(e => e.SerialNum)
                    .HasMaxLength(50)
                    .HasComment("序号");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .HasComment("类别");
            });

            modelBuilder.Entity<TccBudgetofExternalDonationTemp>(entity =>
            {
                entity.ToTable("TCC_BudgetofExternalDonationTEMP");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .HasComment("责任部门编号");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .HasComment("责任部门");

                entity.Property(e => e.DonationAmout)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("捐赠金额");

                entity.Property(e => e.DonationNature)
                    .HasMaxLength(200)
                    .HasComment("捐赠性质");

                entity.Property(e => e.DonationUnit)
                    .HasMaxLength(200)
                    .HasComment("捐款单位");

                entity.Property(e => e.IsOftenProject)
                    .HasMaxLength(50)
                    .HasComment("是否为经常性项目");

                entity.Property(e => e.MakeUnit)
                    .HasMaxLength(500)
                    .HasComment("填报单位");

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.Recipients)
                    .HasMaxLength(200)
                    .HasComment("受赠对象");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .HasComment("备注");

                entity.Property(e => e.SerialNum)
                    .HasMaxLength(50)
                    .HasComment("序号");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .HasComment("类别");
            });

            modelBuilder.Entity<TccBudgetofInformatization>(entity =>
            {
                entity.ToTable("TCC_BudgetofInformatization");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .HasComment("责任部门编号");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .HasComment("责任部门");

                entity.Property(e => e.ExpandColI)
                    .HasMaxLength(200)
                    .HasComment("拓展列");

                entity.Property(e => e.FixedAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("信息化固定资产（即拟资本化投入金额）");

                entity.Property(e => e.InformationAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("信息化费用（即拟费用化投入金额）");

                entity.Property(e => e.IntangibleAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("信息化无形资产（即拟资本化投入金额）");

                entity.Property(e => e.IsEditThisYearBudget).HasComment("是否可以编辑");

                entity.Property(e => e.IsEditThisYearUsed).HasComment("是否可以编辑");

                entity.Property(e => e.MakeUnit)
                    .HasMaxLength(500)
                    .HasComment("填报单位");

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.PlanAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("2021年度计划投入资金总额");

                entity.Property(e => e.PlanCompletionProgress)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("2021年计划完成进度");

                entity.Property(e => e.PreviousYearsAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("以前年度投入资金总额");

                entity.Property(e => e.PreviousYearsPct)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("以前年度完成进度");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(500)
                    .HasComment("项目");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .HasComment("备注");

                entity.Property(e => e.SerialNum)
                    .HasMaxLength(50)
                    .HasComment("行次");

                entity.Property(e => e.TotalPlannedInvestment)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("项目计划投入资金总额");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .HasComment("类别");

                entity.Property(e => e.YearofProject)
                    .HasMaxLength(50)
                    .HasComment("项目开始实施年份");
            });

            modelBuilder.Entity<TccBudgetofInformatizationTemp>(entity =>
            {
                entity.ToTable("TCC_BudgetofInformatizationTEMP");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .HasComment("责任部门编号");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .HasComment("责任部门");

                entity.Property(e => e.ExpandColI)
                    .HasMaxLength(200)
                    .HasComment("拓展列");

                entity.Property(e => e.FixedAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("信息化固定资产（即拟资本化投入金额）");

                entity.Property(e => e.InformationAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("信息化费用（即拟费用化投入金额）");

                entity.Property(e => e.IntangibleAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("信息化无形资产（即拟资本化投入金额）");

                entity.Property(e => e.IsEditThisYearBudget).HasComment("是否可以编辑");

                entity.Property(e => e.IsEditThisYearUsed).HasComment("是否可以编辑");

                entity.Property(e => e.MakeUnit)
                    .HasMaxLength(500)
                    .HasComment("填报单位");

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.PlanAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("2021年度计划投入资金总额");

                entity.Property(e => e.PlanCompletionProgress)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("2021年计划完成进度");

                entity.Property(e => e.PreviousYearsAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("以前年度投入资金总额");

                entity.Property(e => e.PreviousYearsPct)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("以前年度完成进度");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(500)
                    .HasComment("项目");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .HasComment("备注");

                entity.Property(e => e.SerialNum)
                    .HasMaxLength(50)
                    .HasComment("行次");

                entity.Property(e => e.TotalPlannedInvestment)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("项目计划投入资金总额");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .HasComment("类别");

                entity.Property(e => e.YearofProject)
                    .HasMaxLength(50)
                    .HasComment("项目开始实施年份");
            });

            modelBuilder.Entity<TccBudgetofPartyconstructionFund>(entity =>
            {
                entity.ToTable("TCC_BudgetofPartyconstructionFunds");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ActAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("实际金额");

                entity.Property(e => e.BudgetAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("预算金额");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .HasComment("责任部门编号");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .HasComment("责任部门");

                entity.Property(e => e.MakeUnit)
                    .HasMaxLength(500)
                    .HasComment("填报单位");

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.Project)
                    .HasMaxLength(500)
                    .HasComment("项目");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .HasComment("备注");

                entity.Property(e => e.SerialNum)
                    .HasMaxLength(50)
                    .HasComment("序号");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .HasComment("类别");
            });

            modelBuilder.Entity<TccBudgetofPartyconstructionFundsTemp>(entity =>
            {
                entity.ToTable("TCC_BudgetofPartyconstructionFundsTEMP");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ActAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("实际金额");

                entity.Property(e => e.BudgetAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("预算金额");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .HasComment("责任部门编号");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .HasComment("责任部门");

                entity.Property(e => e.MakeUnit)
                    .HasMaxLength(500)
                    .HasComment("填报单位");

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.Project)
                    .HasMaxLength(500)
                    .HasComment("项目");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .HasComment("备注");

                entity.Property(e => e.SerialNum)
                    .HasMaxLength(50)
                    .HasComment("序号");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .HasComment("类别");
            });

            modelBuilder.Entity<TccBudgetofPayroll>(entity =>
            {
                entity.ToTable("TCC_BudgetofPayroll");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyUnit)
                    .HasMaxLength(200)
                    .HasComment("单位名称");

                entity.Property(e => e.Bnys1)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BNYS1")
                    .HasComment("平均人数（人）--本年预算");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .HasComment("责任部门编号");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .HasComment("责任部门");

                entity.Property(e => e.ExpandColI)
                    .HasMaxLength(200)
                    .HasComment("拓展列");

                entity.Property(e => e.LastNumber1)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("平均人数（人）--上年数");

                entity.Property(e => e.MakeUnit)
                    .HasMaxLength(500)
                    .HasComment("填报单位");

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .HasComment("备注");

                entity.Property(e => e.SerialNum)
                    .HasMaxLength(50)
                    .HasComment("行次");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .HasComment("类别");

                entity.Property(e => e.Zjfd1)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ZJFD1")
                    .HasComment("工资总额（万元）--增减幅度");
            });

            modelBuilder.Entity<TccBudgetofPayrollBreakdown>(entity =>
            {
                entity.ToTable("TCC_BudgetofPayrollBreakdown");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyUnit)
                    .HasMaxLength(200)
                    .HasComment("单位名称");

                entity.Property(e => e.Bnys1)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BNYS1")
                    .HasComment("平均人数（人）--本年预算");

                entity.Property(e => e.Bnys2)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BNYS2")
                    .HasComment("工资总额（万元）--本年预算");

                entity.Property(e => e.Bnys3)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BNYS3")
                    .HasComment("人均工资（元）--本年预算");

                entity.Property(e => e.Bnyszj1)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BNYSZJ1")
                    .HasComment("平均人数（人）--同比增减");

                entity.Property(e => e.Bnyszj2)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BNYSZJ2")
                    .HasComment("工资总额（万元）--同比增减");

                entity.Property(e => e.Bnyszj3)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BNYSZJ3")
                    .HasComment("人均工资（元）--同比增减");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .HasComment("责任部门编号");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .HasComment("责任部门");

                entity.Property(e => e.LastNumber1)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("平均人数（人）--上年数");

                entity.Property(e => e.LastNumber2)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("工资总额（万元）--上年数");

                entity.Property(e => e.LastNumber3)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("人均工资（元）--上年数");

                entity.Property(e => e.MakeUnit)
                    .HasMaxLength(500)
                    .HasComment("填报单位");

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .HasComment("备注");

                entity.Property(e => e.SerialNum)
                    .HasMaxLength(50)
                    .HasComment("行次");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .HasComment("类别");

                entity.Property(e => e.Zjfd2)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ZJFD2")
                    .HasComment("工资总额（万元）--增减幅度");

                entity.Property(e => e.Zjfd3)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ZJFD3")
                    .HasComment("人均工资（元）--增减幅度");
            });

            modelBuilder.Entity<TccBudgetofPayrollBreakdownTemp>(entity =>
            {
                entity.ToTable("TCC_BudgetofPayrollBreakdownTEMP");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyUnit)
                    .HasMaxLength(200)
                    .HasComment("单位名称");

                entity.Property(e => e.Bnys1)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BNYS1")
                    .HasComment("平均人数（人）--本年预算");

                entity.Property(e => e.Bnys2)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BNYS2")
                    .HasComment("工资总额（万元）--本年预算");

                entity.Property(e => e.Bnys3)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BNYS3")
                    .HasComment("人均工资（元）--本年预算");

                entity.Property(e => e.Bnyszj1)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BNYSZJ1")
                    .HasComment("平均人数（人）--同比增减");

                entity.Property(e => e.Bnyszj2)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BNYSZJ2")
                    .HasComment("工资总额（万元）--同比增减");

                entity.Property(e => e.Bnyszj3)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BNYSZJ3")
                    .HasComment("人均工资（元）--同比增减");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .HasComment("责任部门编号");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .HasComment("责任部门");

                entity.Property(e => e.LastNumber1)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("平均人数（人）--上年数");

                entity.Property(e => e.LastNumber2)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("工资总额（万元）--上年数");

                entity.Property(e => e.LastNumber3)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("人均工资（元）--上年数");

                entity.Property(e => e.MakeUnit)
                    .HasMaxLength(500)
                    .HasComment("填报单位");

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .HasComment("备注");

                entity.Property(e => e.SerialNum)
                    .HasMaxLength(50)
                    .HasComment("行次");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .HasComment("类别");

                entity.Property(e => e.Zjfd2)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ZJFD2")
                    .HasComment("工资总额（万元）--增减幅度");

                entity.Property(e => e.Zjfd3)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ZJFD3")
                    .HasComment("人均工资（元）--增减幅度");
            });

            modelBuilder.Entity<TccBudgetofPayrollTemp>(entity =>
            {
                entity.ToTable("TCC_BudgetofPayrollTEMP");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyUnit)
                    .HasMaxLength(200)
                    .HasComment("单位名称");

                entity.Property(e => e.Bnys1)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BNYS1")
                    .HasComment("平均人数（人）--本年预算");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .HasComment("责任部门编号");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .HasComment("责任部门");

                entity.Property(e => e.ExpandColI)
                    .HasMaxLength(200)
                    .HasComment("拓展列");

                entity.Property(e => e.LastNumber1)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("平均人数（人）--上年数");

                entity.Property(e => e.MakeUnit)
                    .HasMaxLength(500)
                    .HasComment("填报单位");

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .HasComment("备注");

                entity.Property(e => e.SerialNum)
                    .HasMaxLength(50)
                    .HasComment("行次");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .HasComment("类别");

                entity.Property(e => e.Zjfd1)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ZJFD1")
                    .HasComment("工资总额（万元）--增减幅度");
            });

            modelBuilder.Entity<TccBudgetofStatementForDisposalPart1>(entity =>
            {
                entity.ToTable("TCC_BudgetofStatementForDisposalPart1");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AccumulatedDividendAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("累计分红金额");

                entity.Property(e => e.AmountofDividendsReceived)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("2020年收到分红金额");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .HasComment("责任部门编号");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .HasComment("责任部门");

                entity.Property(e => e.DisposalIncome)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("预计处置收入");

                entity.Property(e => e.DisposalMethodCode).HasComment("预计处置方式编号");

                entity.Property(e => e.DisposalMethodName)
                    .HasMaxLength(50)
                    .HasComment("预计处置方式名称");

                entity.Property(e => e.DisposalofSubject)
                    .HasMaxLength(500)
                    .HasComment("处置标的");

                entity.Property(e => e.DocumentNum)
                    .HasMaxLength(200)
                    .HasComment("处置行为集团批复文件及文号（未批复填否）");

                entity.Property(e => e.Industry)
                    .HasMaxLength(200)
                    .HasComment("所属行业");

                entity.Property(e => e.InvestmentTime)
                    .HasColumnType("datetime")
                    .HasComment("投资/购置时间");

                entity.Property(e => e.LastBookValue)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("2020年12月31日账面价值");

                entity.Property(e => e.MakeUnit)
                    .HasMaxLength(500)
                    .HasComment("填报单位");

                entity.Property(e => e.OriginalBookValue)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("账面原值");

                entity.Property(e => e.PaidinCapitalAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("实缴出资");

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.ProvisionofImpairmentAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("计提减值金额");

                entity.Property(e => e.RegisterOrNot)
                    .HasMaxLength(50)
                    .HasComment("是否办理产权登记");

                entity.Property(e => e.RegisteredAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("注册资本");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .HasComment("备注");

                entity.Property(e => e.SerialNum)
                    .HasMaxLength(50)
                    .HasComment("行次");

                entity.Property(e => e.ShareholdingRatio)
                    .HasMaxLength(50)
                    .HasComment("持股比例（%）");

                entity.Property(e => e.SubscribedCapitalAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("认缴出资");

                entity.Property(e => e.TableOrNot)
                    .HasMaxLength(50)
                    .HasComment("是否并表");

                entity.Property(e => e.TheAuditedAssets)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("该公司最近一期经审计净资产");

                entity.Property(e => e.TotalProfit1)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("2017年利润总额");

                entity.Property(e => e.TotalProfit2)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("2018年利润总额");

                entity.Property(e => e.TotalProfit3)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("2019年利润总额");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .HasComment("类别");
            });

            modelBuilder.Entity<TccBudgetofStatementForDisposalPart1Temp>(entity =>
            {
                entity.ToTable("TCC_BudgetofStatementForDisposalPart1TEMP");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AccumulatedDividendAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("累计分红金额");

                entity.Property(e => e.AmountofDividendsReceived)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("2020年收到分红金额");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .HasComment("责任部门编号");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .HasComment("责任部门");

                entity.Property(e => e.DisposalIncome)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("预计处置收入");

                entity.Property(e => e.DisposalMethodCode).HasComment("预计处置方式编号");

                entity.Property(e => e.DisposalMethodName)
                    .HasMaxLength(50)
                    .HasComment("预计处置方式名称");

                entity.Property(e => e.DisposalofSubject)
                    .HasMaxLength(500)
                    .HasComment("处置标的");

                entity.Property(e => e.DocumentNum)
                    .HasMaxLength(200)
                    .HasComment("处置行为集团批复文件及文号（未批复填否）");

                entity.Property(e => e.Industry)
                    .HasMaxLength(200)
                    .HasComment("所属行业");

                entity.Property(e => e.InvestmentTime)
                    .HasColumnType("datetime")
                    .HasComment("投资/购置时间");

                entity.Property(e => e.LastBookValue)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("2020年12月31日账面价值");

                entity.Property(e => e.MakeUnit)
                    .HasMaxLength(500)
                    .HasComment("填报单位");

                entity.Property(e => e.OriginalBookValue)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("账面原值");

                entity.Property(e => e.PaidinCapitalAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("实缴出资");

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.ProvisionofImpairmentAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("计提减值金额");

                entity.Property(e => e.RegisterOrNot)
                    .HasMaxLength(50)
                    .HasComment("是否办理产权登记");

                entity.Property(e => e.RegisteredAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("注册资本");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .HasComment("备注");

                entity.Property(e => e.SerialNum)
                    .HasMaxLength(50)
                    .HasComment("行次");

                entity.Property(e => e.ShareholdingRatio)
                    .HasMaxLength(50)
                    .HasComment("持股比例（%）");

                entity.Property(e => e.SubscribedCapitalAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("认缴出资");

                entity.Property(e => e.TableOrNot)
                    .HasMaxLength(50)
                    .HasComment("是否并表");

                entity.Property(e => e.TheAuditedAssets)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("该公司最近一期经审计净资产");

                entity.Property(e => e.TotalProfit1)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("2017年利润总额");

                entity.Property(e => e.TotalProfit2)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("2018年利润总额");

                entity.Property(e => e.TotalProfit3)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("2019年利润总额");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .HasComment("类别");
            });

            modelBuilder.Entity<TccBudgetofStatementForDisposalPart2>(entity =>
            {
                entity.ToTable("TCC_BudgetofStatementForDisposalPart2");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AccumulatedAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("累计折旧");

                entity.Property(e => e.ActualUsers)
                    .HasMaxLength(50)
                    .HasComment("实际使用人");

                entity.Property(e => e.AssetLocation)
                    .HasMaxLength(200)
                    .HasComment("资产所在地");

                entity.Property(e => e.AssetName)
                    .HasMaxLength(500)
                    .HasComment("资产名称");

                entity.Property(e => e.AssetStatusCode).HasComment("资产现状编号");

                entity.Property(e => e.AssetStatusName)
                    .HasMaxLength(50)
                    .HasComment("资产现状名称");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .HasComment("责任部门编号");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .HasComment("责任部门");

                entity.Property(e => e.DisposalMethodCode).HasComment("预计处置方式编号");

                entity.Property(e => e.DisposalMethodName)
                    .HasMaxLength(50)
                    .HasComment("预计处置方式名称");

                entity.Property(e => e.DocumentNum)
                    .HasMaxLength(200)
                    .HasComment("处置行为集团批复文件及文号（未批复填否）");

                entity.Property(e => e.InvestmentTime)
                    .HasColumnType("datetime")
                    .HasComment("投资/购置时间");

                entity.Property(e => e.LastBookValue)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("2020年12月31日账面价值");

                entity.Property(e => e.MakeUnit)
                    .HasMaxLength(500)
                    .HasComment("填报单位");

                entity.Property(e => e.Number)
                    .HasMaxLength(50)
                    .HasComment("数量");

                entity.Property(e => e.OriginalBookValue)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("账面原值");

                entity.Property(e => e.OwnerofCertificate)
                    .HasMaxLength(50)
                    .HasComment("证载权属人");

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .HasComment("备注");

                entity.Property(e => e.SerialNum)
                    .HasMaxLength(50)
                    .HasComment("行次");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .HasComment("类别");
            });

            modelBuilder.Entity<TccBudgetofStatementForDisposalPart2Temp>(entity =>
            {
                entity.ToTable("TCC_BudgetofStatementForDisposalPart2TEMP");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AccumulatedAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("累计折旧");

                entity.Property(e => e.ActualUsers)
                    .HasMaxLength(50)
                    .HasComment("实际使用人");

                entity.Property(e => e.AssetLocation)
                    .HasMaxLength(200)
                    .HasComment("资产所在地");

                entity.Property(e => e.AssetName)
                    .HasMaxLength(500)
                    .HasComment("资产名称");

                entity.Property(e => e.AssetStatusCode).HasComment("资产现状编号");

                entity.Property(e => e.AssetStatusName)
                    .HasMaxLength(50)
                    .HasComment("资产现状名称");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .HasComment("责任部门编号");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .HasComment("责任部门");

                entity.Property(e => e.DisposalMethodCode).HasComment("预计处置方式编号");

                entity.Property(e => e.DisposalMethodName)
                    .HasMaxLength(50)
                    .HasComment("预计处置方式名称");

                entity.Property(e => e.DocumentNum)
                    .HasMaxLength(200)
                    .HasComment("处置行为集团批复文件及文号（未批复填否）");

                entity.Property(e => e.InvestmentTime)
                    .HasColumnType("datetime")
                    .HasComment("投资/购置时间");

                entity.Property(e => e.LastBookValue)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("2020年12月31日账面价值");

                entity.Property(e => e.MakeUnit)
                    .HasMaxLength(500)
                    .HasComment("填报单位");

                entity.Property(e => e.Number)
                    .HasMaxLength(50)
                    .HasComment("数量");

                entity.Property(e => e.OriginalBookValue)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("账面原值");

                entity.Property(e => e.OwnerofCertificate)
                    .HasMaxLength(50)
                    .HasComment("证载权属人");

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .HasComment("备注");

                entity.Property(e => e.SerialNum)
                    .HasMaxLength(50)
                    .HasComment("行次");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .HasComment("类别");
            });

            modelBuilder.Entity<TccBusinessAskForLeave>(entity =>
            {
                entity.ToTable("TCC_BusinessAskForLeave");

                entity.HasIndex(e => new { e.MainIncident, e.MainProcessName }, "IX_TCC_BusinessAskForLeave");

                entity.HasIndex(e => new { e.ProcessName, e.Incident }, "IX_TCC_BusinessAskForLeave_1");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AskForLeaveBeginDate)
                    .HasColumnType("datetime")
                    .HasComment("请假开始日期");

                entity.Property(e => e.AskForLeaveDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AskForLeave_Date")
                    .HasComment("请假审批时间");

                entity.Property(e => e.AskForLeaveEndDate)
                    .HasColumnType("datetime")
                    .HasComment("请假结束日期");

                entity.Property(e => e.AskForLeaveIdentity)
                    .HasMaxLength(50)
                    .HasColumnName("AskForLeave_Identity")
                    .HasComment("请假审批人 身份证号");

                entity.Property(e => e.AskForLeaveLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("AskForLeave_LoginName")
                    .HasComment("请假审批人 账号");

                entity.Property(e => e.AskForLeaveRealName)
                    .HasMaxLength(50)
                    .HasColumnName("AskForLeave_RealName")
                    .HasComment("请假审批人 姓名");

                entity.Property(e => e.AttachmentNum).HasComment("附件张数");

                entity.Property(e => e.AuditAccountLoginName).HasMaxLength(50);

                entity.Property(e => e.AuditAccountName).HasMaxLength(50);

                entity.Property(e => e.AuditAccountUserIdentity).HasMaxLength(50);

                entity.Property(e => e.BorrowMoneyBig)
                    .HasMaxLength(200)
                    .HasColumnName("BorrowMoney_Big")
                    .HasComment("借款金额大写（RMB）");

                entity.Property(e => e.BorrowMoneySmall)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BorrowMoney_Small")
                    .HasComment("借款金额 (RMB)");

                entity.Property(e => e.BusinesTripRealName).HasMaxLength(50);

                entity.Property(e => e.BusinesTripTravelPersons).HasMaxLength(3000);

                entity.Property(e => e.BusinessObject)
                    .HasDefaultValueSql("((2))")
                    .HasComment("业务对象 ");

                entity.Property(e => e.BussinessCard)
                    .HasMaxLength(50)
                    .HasComment("公务卡号");

                entity.Property(e => e.ConfirmFinaceDate).HasColumnType("datetime");

                entity.Property(e => e.ConfirmFinaceLoginName).HasMaxLength(50);

                entity.Property(e => e.ConfirmFinaceName).HasMaxLength(50);

                entity.Property(e => e.ConfirmFinaceUserIdentity).HasMaxLength(50);

                entity.Property(e => e.ConfirmStatus)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((2))");

                entity.Property(e => e.Currency)
                    .HasMaxLength(50)
                    .HasComment("币种");

                entity.Property(e => e.CurrencySubjectCode)
                    .HasMaxLength(50)
                    .HasComment("币种");

                entity.Property(e => e.CurrencyType)
                    .HasMaxLength(50)
                    .HasColumnName("currencyType")
                    .HasComment("币种");

                entity.Property(e => e.FAccountSubject)
                    .HasMaxLength(1000)
                    .HasColumnName("F_AccountSubject")
                    .HasComment("入账科目 ");

                entity.Property(e => e.FAccountSubjectName)
                    .HasMaxLength(1000)
                    .HasColumnName("F_AccountSubjectName")
                    .HasComment("入账科目 ");

                entity.Property(e => e.FCheque)
                    .HasMaxLength(100)
                    .HasColumnName("F_Cheque")
                    .HasComment("银行账号");

                entity.Property(e => e.FPayBankCode)
                    .HasMaxLength(1000)
                    .HasColumnName("F_PayBankCode")
                    .HasComment("付款行");

                entity.Property(e => e.FPayBankName)
                    .HasMaxLength(1000)
                    .HasColumnName("F_PayBankName")
                    .HasComment("付款行");

                entity.Property(e => e.FPayDate)
                    .HasColumnType("datetime")
                    .HasColumnName("F_PayDate")
                    .HasComment("付款日期");

                entity.Property(e => e.FPayMentType)
                    .HasMaxLength(50)
                    .HasColumnName("F_PayMentType")
                    .HasComment("付款方式");

                entity.Property(e => e.FPayMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("F_PayMoney")
                    .HasComment("付款金额");

                entity.Property(e => e.FTransactor)
                    .HasMaxLength(100)
                    .HasColumnName("F_Transactor")
                    .HasComment("领款人");

                entity.Property(e => e.Flag)
                    .HasDefaultValueSql("((0))")
                    .HasComment("标识（用于表示是否销假）");

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(50)
                    .HasComment("表单编号");

                entity.Property(e => e.HaveBorrow).HasComment("有无借款");

                entity.Property(e => e.HaveBorrowText)
                    .HasMaxLength(50)
                    .HasComment("有无借款");

                entity.Property(e => e.Incident).HasComment("实例号");

                entity.Property(e => e.InviteUnit)
                    .HasMaxLength(1000)
                    .HasComment("邀请(主办)单位");

                entity.Property(e => e.IsAbort)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'N')")
                    .HasComment("是否已销假   Y=是 N=否");

                entity.Property(e => e.IsAccepted)
                    .HasMaxLength(50)
                    .HasComment("是否请假   ");

                entity.Property(e => e.IsAccount).HasComment("是否冲账  1=未冲账  2=已冲账");

                entity.Property(e => e.IsBorrowMoney)
                    .HasMaxLength(50)
                    .HasComment("是否借款");

                entity.Property(e => e.IsLink).HasComment("是否被报销流程关联过  1=未关联  2=已关联");

                entity.Property(e => e.Location).HasComment("借款地点");

                entity.Property(e => e.LocationAdress)
                    .HasMaxLength(50)
                    .HasComment("借款地点");

                entity.Property(e => e.MainIncident)
                    .HasColumnName("mainIncident")
                    .HasComment("主流程");

                entity.Property(e => e.MainProcessName)
                    .HasMaxLength(50)
                    .HasColumnName("mainProcessName")
                    .HasComment("主流程");

                entity.Property(e => e.MoneyYb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MONEY_YB")
                    .HasComment("借款金额原币");

                entity.Property(e => e.NoRepayMentAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("未还款金额");

                entity.Property(e => e.PayType)
                    .HasMaxLength(50)
                    .HasComment("付款方式");

                entity.Property(e => e.PaymentType).HasComment("付款方式");

                entity.Property(e => e.ProcessFinishDate)
                    .HasColumnType("datetime")
                    .HasComment("流程归档时间");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名");

                entity.Property(e => e.ProcessStatus)
                    .HasDefaultValueSql("((0))")
                    .HasComment("流程状态  0=进行中  1=归档  2=撤销");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .HasComment("项目编号");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(2000)
                    .HasComment("项目名称");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("汇率");

                entity.Property(e => e.RejectRemark).HasComment("不接受出差原因");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date")
                    .HasComment("申请日期");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptCode")
                    .HasComment("申请人部门");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(200)
                    .HasColumnName("Request_DeptName")
                    .HasComment("申请人部门");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName")
                    .HasComment("申请人");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName")
                    .HasComment("申请人");

                entity.Property(e => e.RequestUserIdentity)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserIdentity")
                    .HasComment("申请人");

                entity.Property(e => e.TaskTarget).HasComment("出差任务");

                entity.Property(e => e.Telephone)
                    .HasMaxLength(50)
                    .HasComment("联系电话");

                entity.Property(e => e.ToCity)
                    .HasMaxLength(50)
                    .HasComment("城市");

                entity.Property(e => e.ToCountry)
                    .HasMaxLength(100)
                    .HasComment("国家");

                entity.Property(e => e.ToDomesticOversea).HasComment("目的地");

                entity.Property(e => e.TotalDays).HasComment("请假天数");

                entity.Property(e => e.TravelType).HasComment("出差类型");

                entity.Property(e => e.TravelType1)
                    .HasMaxLength(100)
                    .HasColumnName("Travel_Type")
                    .HasComment("出差类型");

                entity.Property(e => e.Voucherid).HasColumnName("VOUCHERID");
            });

            modelBuilder.Entity<TccBusinessTrip>(entity =>
            {
                entity.ToTable("TCC_BusinessTrip");

                entity.HasIndex(e => new { e.ProcessName, e.Incident }, "IX_TCC_BusinessTrip");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.AllowForReimburse)
                    .HasMaxLength(50)
                    .HasComment("是否可以报销  N不可以 Y可以");

                entity.Property(e => e.AskForLeaveDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AskForLeave_Date")
                    .HasComment("请假审批时间");

                entity.Property(e => e.AskForLeaveIdentity)
                    .HasMaxLength(50)
                    .HasColumnName("AskForLeave_Identity")
                    .HasComment("请假审批人 身份证号");

                entity.Property(e => e.AskForLeaveLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("AskForLeave_LoginName")
                    .HasComment("请假审批人 账号");

                entity.Property(e => e.AskForLeaveRealName)
                    .HasMaxLength(50)
                    .HasColumnName("AskForLeave_RealName")
                    .HasComment("请假审批人 姓名");

                entity.Property(e => e.AttachmentNum).HasComment("附件张数");

                entity.Property(e => e.AttachmentShow)
                    .HasColumnName("Attachment_Show")
                    .HasComment("票据张数");

                entity.Property(e => e.AuditAccountLoginName)
                    .HasMaxLength(50)
                    .HasComment("业务审核会计");

                entity.Property(e => e.AuditAccountName)
                    .HasMaxLength(50)
                    .HasComment("业务审核会计");

                entity.Property(e => e.AuditAccountUserIdentity)
                    .HasMaxLength(50)
                    .HasComment("业务审核会计");

                entity.Property(e => e.BeyondSeats)
                    .HasMaxLength(2000)
                    .HasComment("超标席位");

                entity.Property(e => e.BillFlag).HasComment("是否录入发票（1录入 2不录入）");

                entity.Property(e => e.BorrowMoneyBig)
                    .HasMaxLength(1000)
                    .HasColumnName("BorrowMoney_Big")
                    .HasComment("折合RMB金额");

                entity.Property(e => e.BorrowMoneySmall)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BorrowMoney_Small")
                    .HasComment("折合RMB金额");

                entity.Property(e => e.BusinessObject)
                    .HasDefaultValueSql("((2))")
                    .HasComment("业务对象");

                entity.Property(e => e.BussinessCard)
                    .HasMaxLength(50)
                    .HasComment("公务卡号");

                entity.Property(e => e.CardNo)
                    .HasMaxLength(50)
                    .HasComment("工作证号");

                entity.Property(e => e.ConfirmFinaceDate).HasColumnType("datetime");

                entity.Property(e => e.ConfirmFinaceLoginName)
                    .HasMaxLength(50)
                    .HasComment("接单会计");

                entity.Property(e => e.ConfirmFinaceName)
                    .HasMaxLength(50)
                    .HasComment("接单会计");

                entity.Property(e => e.ConfirmFinaceUserIdentity)
                    .HasMaxLength(50)
                    .HasComment("接单会计");

                entity.Property(e => e.ConfirmStatus)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((2))");

                entity.Property(e => e.Currency)
                    .HasMaxLength(50)
                    .HasComment("币种");

                entity.Property(e => e.CurrencySubjectCode).HasMaxLength(50);

                entity.Property(e => e.CurrencyType)
                    .HasMaxLength(50)
                    .HasColumnName("currencyType")
                    .HasComment("币种");

                entity.Property(e => e.DeptCodeOfFeiyong).HasMaxLength(20);

                entity.Property(e => e.DeptNameOfFeiyong).HasMaxLength(50);

                entity.Property(e => e.ExpenseMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FAccountSubject)
                    .HasMaxLength(1000)
                    .HasColumnName("F_AccountSubject")
                    .HasComment("入账科目编号");

                entity.Property(e => e.FAccountSubjectName)
                    .HasMaxLength(1000)
                    .HasColumnName("F_AccountSubjectName")
                    .HasComment("入账科目名称");

                entity.Property(e => e.FCheque)
                    .HasMaxLength(100)
                    .HasColumnName("F_Cheque")
                    .HasComment("银行账号");

                entity.Property(e => e.FPayBankCode)
                    .HasMaxLength(1000)
                    .HasColumnName("F_PayBankCode")
                    .HasComment("付款行编号");

                entity.Property(e => e.FPayBankName)
                    .HasMaxLength(1000)
                    .HasColumnName("F_PayBankName")
                    .HasComment("付款行名称");

                entity.Property(e => e.FPayDate)
                    .HasColumnType("datetime")
                    .HasColumnName("F_PayDate")
                    .HasComment("付款日期");

                entity.Property(e => e.FPayMentType)
                    .HasMaxLength(50)
                    .HasColumnName("F_PayMentType")
                    .HasComment("付款方式");

                entity.Property(e => e.FPayMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("F_PayMoney")
                    .HasComment("付款金额");

                entity.Property(e => e.FTransactor)
                    .HasMaxLength(100)
                    .HasColumnName("F_Transactor")
                    .HasComment("领款人");

                entity.Property(e => e.FinanceCurrencyText)
                    .HasMaxLength(50)
                    .HasComment("币种名称");

                entity.Property(e => e.Flag)
                    .HasDefaultValueSql("((0))")
                    .HasComment("标识（用于表示是否销假）1表示销假");

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(50)
                    .HasComment("流水号");

                entity.Property(e => e.FromCity)
                    .HasMaxLength(100)
                    .HasComment("出发地");

                entity.Property(e => e.HaveBorrow).HasComment("有无借款");

                entity.Property(e => e.HaveBorrowText)
                    .HasMaxLength(50)
                    .HasComment("有无借款");

                entity.Property(e => e.Incident).HasComment("实例号");

                entity.Property(e => e.InviteUnit)
                    .HasMaxLength(3000)
                    .HasComment("邀请（主办）单位");

                entity.Property(e => e.InvoiceCategoryText)
                    .HasMaxLength(50)
                    .HasComment("票据类型名称");

                entity.Property(e => e.InvoiceCategoryValue).HasComment("票据类型编号");

                entity.Property(e => e.InvoicesUnitName)
                    .HasMaxLength(500)
                    .HasComment("开票单位");

                entity.Property(e => e.IsAbort)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'N')")
                    .HasComment("是否已销假  Y=是  N=否");

                entity.Property(e => e.IsAccount).HasComment("是否冲账  1=未冲账  2=已冲账");

                entity.Property(e => e.IsBeyond)
                    .HasMaxLength(10)
                    .HasComment("是否超标      Y = 超标   N = 未超标");

                entity.Property(e => e.IsBorrowMoney)
                    .HasMaxLength(50)
                    .HasComment("是否借款");

                entity.Property(e => e.IsLink).HasComment("是否被报销流程关联过  1=未关联  2=已关联");

                entity.Property(e => e.IsReimbursed).HasComment("是否已关联报销  0无 1有");

                entity.Property(e => e.IsTianjinRegion)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'N')")
                    .HasComment("是否是天津所辖区域出差 N 否  Y是");

                entity.Property(e => e.IsTjSideTravel)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'N')")
                    .HasComment("是否是出发地为天津，目的地为天津边缘地区出差  N否  Y是");

                entity.Property(e => e.Location)
                    .HasMaxLength(50)
                    .HasComment("借款地点  1=天津  2=北京");

                entity.Property(e => e.MoneyYb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MONEY_YB")
                    .HasComment("原币金额");

                entity.Property(e => e.NeedAskForLeave)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'Y')")
                    .HasComment("是否需要共同出差人申请请假流程  N=否 Y=是");

                entity.Property(e => e.NoRepayMentAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("未还款金额");

                entity.Property(e => e.OnlyOne).HasComment("是否是单个报销  0不是  1是");

                entity.Property(e => e.PayType)
                    .HasMaxLength(50)
                    .HasComment("付款方式");

                entity.Property(e => e.PaymentAmountLowercaseShow)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PaymentAmountLowercase_Show")
                    .HasComment("本次付款金额");

                entity.Property(e => e.PaymentAmountUppercase)
                    .HasMaxLength(50)
                    .HasComment("本次付款金额（大写）");

                entity.Property(e => e.PaymentBankAccount)
                    .HasMaxLength(200)
                    .HasComment("开户行账号");

                entity.Property(e => e.PaymentBankAddress)
                    .HasMaxLength(500)
                    .HasComment("开户行地址");

                entity.Property(e => e.PaymentBankName)
                    .HasMaxLength(200)
                    .HasComment("开户行");

                entity.Property(e => e.PaymentChangeLocalCurrencyAmountShow)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PaymentChangeLocalCurrencyAmount_Show")
                    .HasComment("折人民币金额");

                entity.Property(e => e.PaymentCommercialInvoiceCode)
                    .HasMaxLength(50)
                    .HasComment("发票编号");

                entity.Property(e => e.PaymentContractPaymentDate)
                    .HasColumnType("datetime")
                    .HasComment("约定付款时间");

                entity.Property(e => e.PaymentDescription)
                    .HasMaxLength(500)
                    .HasComment("付款说明");

                entity.Property(e => e.PaymentExchangeShow)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("PaymentExchange_Show")
                    .HasComment("汇率编码");

                entity.Property(e => e.PaymentLineNumbers)
                    .HasMaxLength(200)
                    .HasComment("联行行号");

                entity.Property(e => e.PaymentMethod)
                    .HasMaxLength(50)
                    .HasComment("付款方式名称");

                entity.Property(e => e.PaymentMethodCode).HasComment("付款方式编号 1:电汇  2:现金");

                entity.Property(e => e.PaymentReceivingCompanyAddress)
                    .HasMaxLength(500)
                    .HasComment("收款单位地址");

                entity.Property(e => e.PaymentReceivingCompanyCode)
                    .HasMaxLength(50)
                    .HasComment("收款单位编号");

                entity.Property(e => e.PaymentReceivingCompanyName)
                    .HasMaxLength(500)
                    .HasComment("收款单位名称");

                entity.Property(e => e.PaymentType)
                    .HasMaxLength(50)
                    .HasComment("付款方式");

                entity.Property(e => e.PersonCount)
                    .HasDefaultValueSql("((0))")
                    .HasComment("计数  有几个人已经走完出差人节点");

                entity.Property(e => e.PersonTotal)
                    .HasDefaultValueSql("((0))")
                    .HasComment("出差总人数");

                entity.Property(e => e.ProcessFinishDate)
                    .HasColumnType("datetime")
                    .HasComment("流程结束日期");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名");

                entity.Property(e => e.ProcessStatus)
                    .HasDefaultValueSql("((0))")
                    .HasComment("流程状态   0=未完成  1=已完成 2=已撤销");

                entity.Property(e => e.ProjectByBranch).HasComment("是否是分公司员工报销项目归属为非北京分公司的项目  1==是");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(200)
                    .HasComment("项目编号");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(2000)
                    .HasComment("项目名称");

                entity.Property(e => e.ProjectOwnership)
                    .HasMaxLength(50)
                    .HasComment("项目归属");

                entity.Property(e => e.Quota)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("限额");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("汇率");

                entity.Property(e => e.Reject)
                    .HasMaxLength(50)
                    .HasComment("记录是由哪个步骤退回的  B = 出差模块退回的  F = 借款模块退回的 ");

                entity.Property(e => e.Remark).HasComment("说明 事由");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date")
                    .HasComment("申请时间");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptCode")
                    .HasComment("申请人所在部门编号");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(200)
                    .HasColumnName("Request_DeptName")
                    .HasComment("申请人所在部门名称");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName")
                    .HasComment("申请人账号");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName")
                    .HasComment("申请人姓名");

                entity.Property(e => e.RequestUserIdentity)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserIdentity")
                    .HasComment("申请人身份证号");

                entity.Property(e => e.RequestUserPost)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserPost")
                    .HasComment("申请人岗位等级");

                entity.Property(e => e.ShenPiDanFormNumber)
                    .HasMaxLength(50)
                    .HasComment("出国审批单号");

                entity.Property(e => e.ShenPiDanId)
                    .HasColumnName("ShenPiDanID")
                    .HasComment("出国审批单ID");

                entity.Property(e => e.Source)
                    .HasMaxLength(50)
                    .HasComment("来源       tcc = 直接申请的流程    poweron = 从poweron跳转过来的流程");

                entity.Property(e => e.StandrdType)
                    .HasDefaultValueSql("((0))")
                    .HasComment("判断标准 0=普通员工 1=企业负责人（不包含企业主要负责人） 2=企业主要负责人");

                entity.Property(e => e.TaskTarget).HasComment("任务目标");

                entity.Property(e => e.ToCity)
                    .HasMaxLength(500)
                    .HasComment("具体地点（城市）");

                entity.Property(e => e.ToCountry)
                    .HasMaxLength(500)
                    .HasComment("具体地点（国家）");

                entity.Property(e => e.ToDomain)
                    .HasMaxLength(500)
                    .HasComment("区县");

                entity.Property(e => e.ToDomesticOversea)
                    .HasDefaultValueSql("((0))")
                    .HasComment("1=境内 2=境外");

                entity.Property(e => e.TotalDays).HasComment("总计（天）");

                entity.Property(e => e.TotalHours).HasComment("总计（时）");

                entity.Property(e => e.TotalMinutes).HasComment("总计（分）");

                entity.Property(e => e.TravelBeginDate)
                    .HasColumnType("datetime")
                    .HasComment("出发日期");

                entity.Property(e => e.TravelEndDate)
                    .HasColumnType("datetime")
                    .HasComment("截止日期");

                entity.Property(e => e.TravelPersons).HasComment("共同出差人员");

                entity.Property(e => e.TravelPersonsIdcardNo).HasColumnName("TravelPersons_IDCardNo");

                entity.Property(e => e.TravelPersonsLoginName).HasColumnName("TravelPersons_LoginName");

                entity.Property(e => e.TravelPersonsPosts)
                    .HasColumnName("TravelPersons_Posts")
                    .HasComment("共同出差人的岗位");

                entity.Property(e => e.TravelType)
                    .HasMaxLength(20)
                    .HasComment("出差类型");

                entity.Property(e => e.Vehicle)
                    .HasMaxLength(500)
                    .HasComment("交通工具");

                entity.Property(e => e.VisaDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_DeptCode");

                entity.Property(e => e.VisaDeptName)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_DeptName");

                entity.Property(e => e.VisaLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_LoginName");

                entity.Property(e => e.VisaRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_RealName");

                entity.Property(e => e.VisaUserIdentity)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_UserIdentity");

                entity.Property(e => e.VisaUserPost).HasMaxLength(50);

                entity.Property(e => e.VisaUserPost1)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_UserPost");

                entity.Property(e => e.Voucherid).HasColumnName("VOUCHERID");
            });

            modelBuilder.Entity<TccBusinessTripPaymentInfo>(entity =>
            {
                entity.ToTable("TCC_BusinessTrip_PaymentInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("价税合计金额");

                entity.Property(e => e.BillAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("票据金额");

                entity.Property(e => e.BillCode)
                    .HasMaxLength(50)
                    .HasComment("票据编号");

                entity.Property(e => e.BillContent)
                    .HasMaxLength(500)
                    .HasComment("票据内容");

                entity.Property(e => e.BillTaxAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("票据税额");

                entity.Property(e => e.Inventory).HasComment("清单张数");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("datetime")
                    .HasComment("开票日期");

                entity.Property(e => e.Pid)
                    .HasColumnName("PID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Requestor)
                    .HasMaxLength(50)
                    .HasComment("操作人");

                entity.Property(e => e.TaxRateCode)
                    .HasMaxLength(50)
                    .HasComment("税率");

                entity.Property(e => e.TaxRateText).HasMaxLength(50);
            });

            modelBuilder.Entity<TccBusinessTripPersonDetail>(entity =>
            {
                entity.ToTable("TCC_BusinessTrip_PersonDetail");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdcardDno)
                    .HasMaxLength(50)
                    .HasColumnName("IDCardDNo")
                    .HasComment("身份证号");

                entity.Property(e => e.Incident).HasComment("实例号");

                entity.Property(e => e.IsReimbursed)
                    .HasDefaultValueSql("((0))")
                    .HasComment("有无关联报销  0无 1有");

                entity.Property(e => e.LoginName)
                    .HasMaxLength(50)
                    .HasColumnName("loginName")
                    .HasComment("出差人账号");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程 名");

                entity.Property(e => e.RealName)
                    .HasMaxLength(50)
                    .HasComment("出差人");

                entity.Property(e => e.SignMarked)
                    .HasDefaultValueSql("((0))")
                    .HasComment("标识，用于记录井工传过来的标识");

                entity.Property(e => e.Status).HasComment("标识（用于表示差旅费是否关联改任务单） 0没有关联  1已关联");

                entity.Property(e => e.TheReimbursementBeginTime)
                    .HasColumnType("datetime")
                    .HasComment("报销开始时间");

                entity.Property(e => e.TheReimbursementDays).HasComment("报销天数");

                entity.Property(e => e.TheReimbursementEndTime)
                    .HasColumnType("datetime")
                    .HasComment("报销结束时间");
            });

            modelBuilder.Entity<TccCanDeductedDonation>(entity =>
            {
                entity.ToTable("TCC_CanDeductedDonation");

                entity.HasComment("用于工资发放流程中工资发放的计算");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.Identityid)
                    .HasMaxLength(200)
                    .HasComment("身份证号");

                entity.Property(e => e.Money)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("钱数");

                entity.Property(e => e.Month).HasComment("月份");

                entity.Property(e => e.Year).HasComment("年度");
            });

            modelBuilder.Entity<TccCardInfo>(entity =>
            {
                entity.ToTable("TCC_CardInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyDept).HasMaxLength(50);

                entity.Property(e => e.ApplyDeptNo).HasMaxLength(50);

                entity.Property(e => e.ApplyLoginUser).HasMaxLength(50);

                entity.Property(e => e.ApplyName).HasMaxLength(50);

                entity.Property(e => e.ApplyPhone).HasMaxLength(50);

                entity.Property(e => e.ApplyRemark).HasMaxLength(200);

                entity.Property(e => e.CardEndDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CardFloor).HasMaxLength(50);

                entity.Property(e => e.CardNo).HasMaxLength(50);

                entity.Property(e => e.CardStartDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CardType).HasMaxLength(50);

                entity.Property(e => e.FormNo).HasMaxLength(50);

                entity.Property(e => e.FormNumber)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.Money).HasColumnType("money");

                entity.Property(e => e.ObtainTime).HasColumnType("datetime");

                entity.Property(e => e.ObtainUser).HasMaxLength(50);

                entity.Property(e => e.Operationer).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProcessStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.ProjectName).HasMaxLength(50);

                entity.Property(e => e.ProjectNo).HasMaxLength(50);

                entity.Property(e => e.RepayTime).HasColumnType("datetime");

                entity.Property(e => e.RepayUser).HasMaxLength(50);

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");
            });

            modelBuilder.Entity<TccCardUserList>(entity =>
            {
                entity.ToTable("TCC_CardUserList");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyLogin).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.UserListCode).HasMaxLength(50);

                entity.Property(e => e.UserListCompany).HasMaxLength(500);

                entity.Property(e => e.UserListForeignComp).HasMaxLength(500);

                entity.Property(e => e.UserListName).HasMaxLength(50);
            });

            modelBuilder.Entity<TccChatGantt>(entity =>
            {
                entity.ToTable("TCC_Chat_Gantt");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<TccCity>(entity =>
            {
                entity.ToTable("TCC_City");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CityCode)
                    .HasMaxLength(50)
                    .HasColumnName("City_Code");

                entity.Property(e => e.CityLevel).HasColumnName("City_Level");

                entity.Property(e => e.CityName)
                    .HasMaxLength(500)
                    .HasColumnName("City_Name");

                entity.Property(e => e.ParentCity).HasMaxLength(50);
            });

            modelBuilder.Entity<TccComputerDept>(entity =>
            {
                entity.ToTable("TCC_Computer_Dept");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DeptName).HasMaxLength(50);

                entity.Property(e => e.DeptType).HasMaxLength(50);

                entity.Property(e => e.DeptTypeNo).HasMaxLength(50);

                entity.Property(e => e.DpetNo).HasMaxLength(50);
            });

            modelBuilder.Entity<TccComputerInfo>(entity =>
            {
                entity.ToTable("TCC_Computer_Info");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AssetId)
                    .HasMaxLength(50)
                    .HasColumnName("AssetID");

                entity.Property(e => e.ComputerStatus).HasMaxLength(50);

                entity.Property(e => e.ComputerType).HasMaxLength(50);

                entity.Property(e => e.DeptName).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<TccComputerStatus>(entity =>
            {
                entity.ToTable("TCC_Computer_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ComputerStatus)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'待归还')");

                entity.Property(e => e.ComputerType).HasMaxLength(50);

                entity.Property(e => e.DeptName).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<TccComputerUser>(entity =>
            {
                entity.ToTable("TCC_Computer_Users");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CardNo).HasMaxLength(50);

                entity.Property(e => e.ComputerType).HasMaxLength(50);

                entity.Property(e => e.JobMajor).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.UserDeptName).HasMaxLength(50);

                entity.Property(e => e.UserKey).HasMaxLength(50);

                entity.Property(e => e.UserPosType).HasMaxLength(50);
            });

            modelBuilder.Entity<TccConstructionCostConfirmDetail>(entity =>
            {
                entity.ToTable("TCC_ConstructionCostConfirmDetails");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AlPayAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("已付款金额");

                entity.Property(e => e.AlPayAmountRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AlPayAmountRMB")
                    .HasComment("已付款金额折人民币金额");

                entity.Property(e => e.ConfirmAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("本次确认成本");

                entity.Property(e => e.ConfirmAmountTotal)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("合计成本");

                entity.Property(e => e.ConfirmedAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("已确认成本");

                entity.Property(e => e.ContractAmountChange)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("合同变更金额");

                entity.Property(e => e.ContractAmountContract)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("合同初始金额");

                entity.Property(e => e.ContractAmountTotal)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("合同金额");

                entity.Property(e => e.ContractAmountTotalChangeLocal)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("合同金额折人民币金额");

                entity.Property(e => e.ContractCategory)
                    .HasMaxLength(200)
                    .HasComment("合同形式");

                entity.Property(e => e.ContractCode)
                    .HasMaxLength(200)
                    .HasComment("合同编号");

                entity.Property(e => e.ContractCurrencyType)
                    .HasMaxLength(50)
                    .HasComment("合同币种");

                entity.Property(e => e.ContractForm).HasMaxLength(200);

                entity.Property(e => e.ContractName)
                    .HasMaxLength(500)
                    .HasComment("合同名称");

                entity.Property(e => e.ContractRate)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("汇率");

                entity.Property(e => e.ContractType).HasMaxLength(200);

                entity.Property(e => e.ContractUnitCode).HasMaxLength(50);

                entity.Property(e => e.ContractUnitName).HasMaxLength(50);

                entity.Property(e => e.PaymentBankAccount)
                    .HasMaxLength(500)
                    .HasComment("收款银行账号");

                entity.Property(e => e.PaymentBankName)
                    .HasMaxLength(500)
                    .HasComment("收款银行");

                entity.Property(e => e.PaymentLineNumbers)
                    .HasMaxLength(200)
                    .HasComment("联行行号");

                entity.Property(e => e.PaymentReceivingCompanyAddress)
                    .HasMaxLength(500)
                    .HasComment("收款单位地址");

                entity.Property(e => e.PaymentReceivingCompanyCode)
                    .HasMaxLength(100)
                    .HasComment("收款单位编号");

                entity.Property(e => e.PaymentReceivingCompanyName)
                    .HasMaxLength(500)
                    .HasComment("收款单位名称");

                entity.Property(e => e.PerAlComplete)
                    .HasMaxLength(50)
                    .HasComment("已完成工作量百分比");

                entity.Property(e => e.Pid)
                    .HasColumnName("PID")
                    .HasComment("外键");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjName)
                    .HasMaxLength(500)
                    .HasColumnName("proj_name")
                    .HasComment("项目名称");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .HasComment("项目编号");

                entity.Property(e => e.ReceiveBillAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("收取发票金额");

                entity.Property(e => e.RequestLoginName).HasMaxLength(50);

                entity.Property(e => e.SignSupplierCode)
                    .HasMaxLength(50)
                    .HasComment("合同签订方编号");

                entity.Property(e => e.SignSupplierName)
                    .HasMaxLength(500)
                    .HasComment("合同签订方名称");

                entity.Property(e => e.UnitJnw)
                    .HasMaxLength(50)
                    .HasColumnName("unit_jnw")
                    .HasComment("供应商境内外");
            });

            modelBuilder.Entity<TccConstructionCostConfirmHeader>(entity =>
            {
                entity.ToTable("TCC_ConstructionCostConfirmHeader");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AttachmentNum).HasComment("附件张数");

                entity.Property(e => e.ConfirmAuditDate).HasColumnType("datetime");

                entity.Property(e => e.ConfirmAuditLoginName)
                    .HasMaxLength(50)
                    .HasComment("财务业务审核人登录名");

                entity.Property(e => e.ConfirmAuditName)
                    .HasMaxLength(50)
                    .HasComment("财务业务审核人姓名");

                entity.Property(e => e.ConfirmAuditUserIdentity)
                    .HasMaxLength(50)
                    .HasComment("财务业务审核人身份证号");

                entity.Property(e => e.ConfirmStatus)
                    .HasDefaultValueSql("((0))")
                    .HasComment("入账确认标示");

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(50)
                    .HasComment("表单编号");

                entity.Property(e => e.Kpjine)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("KPjine")
                    .HasComment("总开票金额");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProcessStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.ProjectCategory)
                    .HasMaxLength(50)
                    .HasComment("项目类型");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .HasComment("项目编号");

                entity.Property(e => e.ProjectContractTotalAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("项目合同总额");

                entity.Property(e => e.ProjectJnw)
                    .HasMaxLength(50)
                    .HasColumnName("ProjectJNW")
                    .HasComment("项目境内境外");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(500)
                    .HasComment("项目名称");

                entity.Property(e => e.ProjectSchedule)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("项目进度");

                entity.Property(e => e.ReceiveBillAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("收取发票金额");

                entity.Property(e => e.ReceivedAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("已收费额");

                entity.Property(e => e.ReceivedPercentage)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("已收费比例");

                entity.Property(e => e.RenderedBillAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("开出发票金额");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date")
                    .HasComment("申请时间");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptCode")
                    .HasComment("主管部门编号");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptName")
                    .HasComment("主管部门名称");

                entity.Property(e => e.RequestFinishDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_FinishDate")
                    .HasComment("流程结束时间");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName")
                    .HasComment("申请人账号");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName")
                    .HasComment("申请人姓名");

                entity.Property(e => e.RequestTelPhone)
                    .HasMaxLength(50)
                    .HasColumnName("Request_TelPhone")
                    .HasComment("联系电话");

                entity.Property(e => e.RequestUserIdentity)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserIdentity")
                    .HasComment("申请人身份证号");

                entity.Property(e => e.RequestUserPost)
                    .HasColumnName("Request_UserPost")
                    .HasComment("岗位等级");

                entity.Property(e => e.SgcontAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("SGContAmount")
                    .HasComment("施工合同额");

                entity.Property(e => e.Voucherid).HasColumnName("VOUCHERID");
            });

            modelBuilder.Entity<TccContractCurcencyOfJq>(entity =>
            {
                entity.ToTable("TCC_ContractCurcencyOfJQ");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AlterTime).HasColumnType("datetime");

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.CurcencyAb)
                    .HasMaxLength(20)
                    .HasColumnName("CurcencyAB");

                entity.Property(e => e.CurcencyCode).HasMaxLength(20);

                entity.Property(e => e.CurcencyName).HasMaxLength(20);

                entity.Property(e => e.Operate).HasColumnName("operate");
            });

            modelBuilder.Entity<TccContractInfoChangeCode>(entity =>
            {
                entity.ToTable("TCC_ContractInfo_ChangeCode");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.NewContractCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.OldContractCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TccContractInfoChangeHistoryLog>(entity =>
            {
                entity.ToTable("TCC_ContractInfo_ChangeHistory_Log");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Bl)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("bl");

                entity.Property(e => e.ContractCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.NewAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OldAmount).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<TccCurrency>(entity =>
            {
                entity.ToTable("TCC_Currency");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CurrencyAb)
                    .HasMaxLength(20)
                    .HasColumnName("CurrencyAB");

                entity.Property(e => e.CurrencyName).HasMaxLength(100);
            });

            modelBuilder.Entity<TccCwAccountsubject>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_CW_Accountsubject");

                entity.Property(e => e.Acctyear).HasColumnName("acctyear");

                entity.Property(e => e.Asstype)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("asstype");

                entity.Property(e => e.Kmcode)
                    .HasMaxLength(100)
                    .HasColumnName("kmcode");

                entity.Property(e => e.Kmmc)
                    .HasMaxLength(100)
                    .HasColumnName("kmmc");

                entity.Property(e => e.Level).HasColumnName("LEVEL");

                entity.Property(e => e.Orgname)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("orgname");

                entity.Property(e => e.Showname)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("showname");

                entity.Property(e => e.Unitid)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("unitid");

                entity.Property(e => e.Zt)
                    .HasMaxLength(500)
                    .HasColumnName("zt");
            });

            modelBuilder.Entity<TccCyvehicleFare>(entity =>
            {
                entity.ToTable("TCC_CYVehicleFare");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AcceptCompayCode).HasMaxLength(50);

                entity.Property(e => e.ApplyDept).HasMaxLength(50);

                entity.Property(e => e.ApplyDeptNo).HasMaxLength(50);

                entity.Property(e => e.ApplyEndDate).HasColumnType("datetime");

                entity.Property(e => e.ApplyLoginUser).HasMaxLength(50);

                entity.Property(e => e.ApplyMobile).HasMaxLength(50);

                entity.Property(e => e.ApplyName).HasMaxLength(50);

                entity.Property(e => e.ApplyStartDate).HasColumnType("datetime");

                entity.Property(e => e.ApplyTimeType).HasMaxLength(50);

                entity.Property(e => e.ApplyUserKey).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.PayCompnayCode).HasMaxLength(50);

                entity.Property(e => e.QuarterFare).HasColumnType("money");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");
            });

            modelBuilder.Entity<TccDateCalendar>(entity =>
            {
                entity.ToTable("TCC_DateCalendar");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DataTime).HasColumnType("datetime");

                entity.Property(e => e.Status).HasMaxLength(30);
            });

            modelBuilder.Entity<TccDateCalendarTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_DateCalendar_temp");

                entity.Property(e => e.DataTime).HasColumnType("datetime");

                entity.Property(e => e.Status).HasMaxLength(30);
            });

            modelBuilder.Entity<TccDepartment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TCC_Department");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.RoleScope)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Role_Scope");
            });

            modelBuilder.Entity<TccDeptAnnualBudget>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_Dept_AnnualBudget");

                entity.Property(e => e.Budget).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.DeptCode).HasMaxLength(50);

                entity.Property(e => e.DeptName).HasMaxLength(500);

                entity.Property(e => e.HasedBudget).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Item1).HasMaxLength(500);

                entity.Property(e => e.Item2).HasMaxLength(500);

                entity.Property(e => e.Item3).HasMaxLength(500);

                entity.Property(e => e.ItemCode)
                    .HasMaxLength(50)
                    .HasComment("Item2对应编码");

                entity.Property(e => e.ItemSubCode)
                    .HasMaxLength(50)
                    .HasComment("Item3对应编码");

                entity.Property(e => e.RemainBudget).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Using).HasMaxLength(50);

                entity.Property(e => e.Year).HasMaxLength(50);
            });

            modelBuilder.Entity<TccDeptAnnualBudgetAdjustLog>(entity =>
            {
                entity.ToTable("TCC_Dept_AnnualBudget_AdjustLog");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Bid).HasColumnName("BID");

                entity.Property(e => e.Budget).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.DeptCode).HasMaxLength(50);

                entity.Property(e => e.DeptName).HasMaxLength(500);

                entity.Property(e => e.HasedBudget).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Item1).HasMaxLength(500);

                entity.Property(e => e.Item2).HasMaxLength(500);

                entity.Property(e => e.Item3).HasMaxLength(500);

                entity.Property(e => e.ItemCode).HasMaxLength(50);

                entity.Property(e => e.ItemSubCode).HasMaxLength(50);

                entity.Property(e => e.RemainBudget).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Using).HasMaxLength(50);

                entity.Property(e => e.Year).HasMaxLength(50);
            });

            modelBuilder.Entity<TccDeptAnnualBudgetbak20160325>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_Dept_AnnualBudgetbak_20160325");

                entity.Property(e => e.Budget).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DeptCode).HasMaxLength(50);

                entity.Property(e => e.DeptName).HasMaxLength(500);

                entity.Property(e => e.HasedBudget).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Item1).HasMaxLength(500);

                entity.Property(e => e.Item2).HasMaxLength(500);

                entity.Property(e => e.Item3).HasMaxLength(500);

                entity.Property(e => e.RemainBudget).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Using).HasMaxLength(50);

                entity.Property(e => e.Year).HasMaxLength(50);
            });

            modelBuilder.Entity<TccDeptBudgetEditLog>(entity =>
            {
                entity.ToTable("TCC_DeptBudgetEdit_Log");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("自增主键");

                entity.Property(e => e.BdgCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("预算项编码");

                entity.Property(e => e.BdgType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("预算类型 01是部门预算 21 22 23 2N对财务处不同类型预算");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasComment("创建时间");

                entity.Property(e => e.DeptCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("部门编码");

                entity.Property(e => e.Flag).HasComment("1标识为删除部门数据 2标识为增加对应费用类型的财务用途 3标识为删除对应费用类型的财务用途; 4为通过编辑预算项删除的内容，5为编辑预算项增加对应费用用途的财务用途,6为通过该编辑预算项删除对应费用类型的财务用途，7为直接删除预算配置项后记录(可回滚)");

                entity.Property(e => e.Guid)
                    .HasMaxLength(50)
                    .HasColumnName("GUID")
                    .HasComment("作为回滚的唯一标识符使用");

                entity.Property(e => e.Pid)
                    .HasColumnName("PID")
                    .HasComment("原表中的ID");
            });

            modelBuilder.Entity<TccDeptPayDeadLine>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_DeptPay_DeadLine");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Msg).HasMaxLength(200);
            });

            modelBuilder.Entity<TccDeptValueConfig>(entity =>
            {
                entity.HasKey(e => e.ConfId);

                entity.ToTable("TCC_DeptValue_Config");

                entity.Property(e => e.ConfId).HasColumnName("confID");

                entity.Property(e => e.OrderId).HasColumnName("OrderID");
            });

            modelBuilder.Entity<TccDeptValueInfo>(entity =>
            {
                entity.ToTable("TCC_DeptValue_Info");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ConfigId).HasColumnName("Config_ID");

                entity.Property(e => e.DtC01)
                    .HasColumnName("DT_C01")
                    .HasComment("部门工作对公司战略实施的支撑");

                entity.Property(e => e.DtC02).HasColumnName("DT_C02");

                entity.Property(e => e.DtD01)
                    .HasColumnName("DT_D01")
                    .HasComment("部门工作对公司生产经营的支持");

                entity.Property(e => e.DtD02).HasColumnName("DT_D02");

                entity.Property(e => e.DtE01)
                    .HasColumnName("DT_E01")
                    .HasComment("工作质量与工作效率");

                entity.Property(e => e.DtE02).HasColumnName("DT_E02");

                entity.Property(e => e.DtF01)
                    .HasColumnName("DT_F01")
                    .HasComment("管理工作创新");

                entity.Property(e => e.DtF02).HasColumnName("DT_F02");

                entity.Property(e => e.DtG01)
                    .HasColumnName("DT_G01")
                    .HasComment("管理能力与管理水平");

                entity.Property(e => e.DtG02).HasColumnName("DT_G02");

                entity.Property(e => e.DtH01)
                    .HasColumnName("DT_H01")
                    .HasComment("担当与服务意识");

                entity.Property(e => e.DtH02).HasColumnName("DT_H02");

                entity.Property(e => e.DtI01)
                    .HasColumnName("DT_I01")
                    .HasComment("沟通与合作");

                entity.Property(e => e.DtI02).HasColumnName("DT_I02");

                entity.Property(e => e.DtJ01)
                    .HasColumnName("DT_J01")
                    .HasComment("人才队伍建设");

                entity.Property(e => e.DtJ02).HasColumnName("DT_J02");

                entity.Property(e => e.DtK01)
                    .HasColumnName("DT_K01")
                    .HasComment("遵规守纪与廉洁从业");

                entity.Property(e => e.DtK02).HasColumnName("DT_K02");

                entity.Property(e => e.DtL01)
                    .HasColumnName("DT_L01")
                    .HasComment("部门管理规范性");

                entity.Property(e => e.DtL02).HasColumnName("DT_L02");

                entity.Property(e => e.DtM)
                    .HasColumnName("DT_M")
                    .HasComment("管理意见与建议（文字描述）");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");

                entity.Property(e => e.SId).HasColumnName("sID");
            });

            modelBuilder.Entity<TccDictDocument>(entity =>
            {
                entity.ToTable("TCC_Dict_Document");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DateName).HasMaxLength(50);

                entity.Property(e => e.DateType).HasMaxLength(50);

                entity.Property(e => e.DateVaule).HasMaxLength(50);

                entity.Property(e => e.ParentId).HasColumnName("ParentID");
            });

            modelBuilder.Entity<TccDictDrawingArchiveDesignApprovelPerson>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_Dict_DrawingArchive_DesignApprovelPerson");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DeptNo)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Kind)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.UserLoginName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(12)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TccDocOpinion>(entity =>
            {
                entity.ToTable("TCC_DocOpinion");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Demo).HasMaxLength(50);

                entity.Property(e => e.HuigaoPerson)
                    .HasMaxLength(50)
                    .HasColumnName("huigao_person");

                entity.Property(e => e.HuigaoPersonId)
                    .HasMaxLength(50)
                    .HasColumnName("huigao_person_id");

                entity.Property(e => e.HuigaoTime)
                    .HasColumnType("datetime")
                    .HasColumnName("huigao_time");

                entity.Property(e => e.OpinionDept).HasMaxLength(50);

                entity.Property(e => e.SendDeptAdvice).HasMaxLength(50);
            });

            modelBuilder.Entity<TccDraft>(entity =>
            {
                entity.ToTable("TCC_Draft");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AwardCategory)
                    .HasMaxLength(50)
                    .HasComment("奖项编号");

                entity.Property(e => e.DraftContent).HasComment("保存内容");

                entity.Property(e => e.Incident).HasComment("实例号");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(200)
                    .HasComment("流程名");

                entity.Property(e => e.Requestor)
                    .HasMaxLength(50)
                    .HasComment("申请人登录账号");
            });

            modelBuilder.Entity<TccDraftInfo>(entity =>
            {
                entity.ToTable("TCC_DraftInfo");

                entity.HasIndex(e => new { e.Status, e.DueDate, e.IsLock }, "IX_AutoGen_20140724_17676");

                entity.HasIndex(e => e.PutawayDate, "IX_AutoGen_20140724_22379");

                entity.HasIndex(e => e.PutawayDate, "IX_AutoGen_20140724_22387");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.AcceptAgreementNumber)
                    .HasMaxLength(500)
                    .HasComment("承兑协议编号");

                entity.Property(e => e.Acceptor)
                    .HasMaxLength(50)
                    .HasComment("承兑人");

                entity.Property(e => e.CollectionAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("托收金额");

                entity.Property(e => e.CollectionDate)
                    .HasColumnType("datetime")
                    .HasComment("托收日期");

                entity.Property(e => e.CollectionSubjectCode)
                    .HasMaxLength(50)
                    .HasComment("托收科目");

                entity.Property(e => e.CollectionSubjectName)
                    .HasMaxLength(500)
                    .HasComment("托收科目");

                entity.Property(e => e.ContractCode)
                    .HasMaxLength(50)
                    .HasComment("合同代码");

                entity.Property(e => e.ContractName)
                    .HasMaxLength(500)
                    .HasComment("合同名称");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasComment("创建时间");

                entity.Property(e => e.CreationVoucherDate)
                    .HasColumnType("datetime")
                    .HasComment("生成凭证号");

                entity.Property(e => e.CreatorUserLoginName)
                    .HasMaxLength(50)
                    .HasComment("创建人用户名");

                entity.Property(e => e.CreatorUserName)
                    .HasMaxLength(50)
                    .HasComment("创建人姓名");

                entity.Property(e => e.Currency)
                    .HasMaxLength(50)
                    .HasComment("货币");

                entity.Property(e => e.DeleteDate)
                    .HasColumnType("datetime")
                    .HasComment("删除时间");

                entity.Property(e => e.DeleteModefier)
                    .HasMaxLength(50)
                    .HasComment("删除人");

                entity.Property(e => e.DepartCode)
                    .HasMaxLength(50)
                    .HasComment("部门编码");

                entity.Property(e => e.DepartName)
                    .HasMaxLength(500)
                    .HasComment("部门名称");

                entity.Property(e => e.DiscountAmount)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("贴现金额");

                entity.Property(e => e.DiscountBank)
                    .HasMaxLength(50)
                    .HasComment("贴现银行");

                entity.Property(e => e.DiscountCharges)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("贴息");

                entity.Property(e => e.DiscountDate)
                    .HasColumnType("datetime")
                    .HasComment("贴现日期");

                entity.Property(e => e.DiscountDay).HasComment("贴现天数");

                entity.Property(e => e.DiscountRate)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("贴现利率");

                entity.Property(e => e.DiscountSubjectCode)
                    .HasMaxLength(50)
                    .HasComment("贴现科目");

                entity.Property(e => e.DiscountSubjectName)
                    .HasMaxLength(500)
                    .HasComment("贴现科目");

                entity.Property(e => e.DraftAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("汇票金额（小写）");

                entity.Property(e => e.DraftAmountChineseNumeral)
                    .HasMaxLength(200)
                    .HasComment("汇票金额（大写）");

                entity.Property(e => e.DraftCode)
                    .HasMaxLength(50)
                    .HasComment("汇票编号");

                entity.Property(e => e.DraftSource)
                    .HasMaxLength(50)
                    .HasComment("汇票来源（1开据、2收款）");

                entity.Property(e => e.DraftType)
                    .HasMaxLength(50)
                    .HasComment("汇票种类");

                entity.Property(e => e.Drawee)
                    .HasMaxLength(50)
                    .HasComment("付款人");

                entity.Property(e => e.DrawerAccounts)
                    .HasMaxLength(500)
                    .HasComment("出票人帐号");

                entity.Property(e => e.DrawerDate)
                    .HasColumnType("datetime")
                    .HasComment("出票日期");

                entity.Property(e => e.DrawerName)
                    .HasMaxLength(500)
                    .HasComment("出票人全称");

                entity.Property(e => e.DrawerPlace)
                    .HasMaxLength(500)
                    .HasComment("出票地");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasComment("汇票到期日（设置提醒日期5天）");

                entity.Property(e => e.DueDay).HasComment("付款期限");

                entity.Property(e => e.EndorseAuditor)
                    .HasMaxLength(500)
                    .HasComment("背书审核人");

                entity.Property(e => e.EndorseAuditorLoginUserName)
                    .HasMaxLength(50)
                    .HasComment("背书审核人登陆名");

                entity.Property(e => e.EndorseClientele)
                    .HasMaxLength(500)
                    .HasComment("背书客户名称");

                entity.Property(e => e.EndorseOperator)
                    .HasMaxLength(50)
                    .HasComment("背书人操作人");

                entity.Property(e => e.EndorseOperatorLoginName)
                    .HasMaxLength(50)
                    .HasComment("背书人操作人登陆名");

                entity.Property(e => e.EndorseSupplier)
                    .HasMaxLength(500)
                    .HasComment("背书供应商名称");

                entity.Property(e => e.EndorseSupplierCode)
                    .HasMaxLength(500)
                    .HasComment("背书供应商名称");

                entity.Property(e => e.ExchangeRate)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("汇率");

                entity.Property(e => e.FundsProjectCode)
                    .HasMaxLength(50)
                    .HasComment("来源方项目编号");

                entity.Property(e => e.FundsProjectName)
                    .HasMaxLength(500)
                    .HasComment("来源方项目名");

                entity.Property(e => e.IsLock).HasComment("是否锁定");

                entity.Property(e => e.IsMultiple).HasComment("是否批量确认付款");

                entity.Property(e => e.IsPayment).HasComment("是否付款 1付,2未付");

                entity.Property(e => e.Isdel)
                    .HasColumnName("ISDel")
                    .HasDefaultValueSql("((0))")
                    .HasComment("是否删除 0不删除 ,1删除  此字段未生成类");

                entity.Property(e => e.LastStatusChangeDate)
                    .HasColumnType("datetime")
                    .HasComment("状态最后修改时间");

                entity.Property(e => e.LockUserLoginName)
                    .HasMaxLength(50)
                    .HasComment("锁定人登陆人");

                entity.Property(e => e.LockUserName)
                    .HasMaxLength(50)
                    .HasComment("锁定人");

                entity.Property(e => e.MultipleId)
                    .HasMaxLength(200)
                    .HasColumnName("MultipleID")
                    .HasComment("批量付款TCC_DraftInfo_OperateProcess关联ID");

                entity.Property(e => e.OperateLoginUserName)
                    .HasMaxLength(50)
                    .HasComment("操作人登陆名");

                entity.Property(e => e.OperateSubjectCode)
                    .HasMaxLength(50)
                    .HasComment("操作科目编号");

                entity.Property(e => e.OperateSubjectName)
                    .HasMaxLength(100)
                    .HasComment("操作科目名称");

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .HasComment("操作人");

                entity.Property(e => e.OperatorTime)
                    .HasColumnType("datetime")
                    .HasComment("操作人时间");

                entity.Property(e => e.PartBid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PartBID")
                    .HasComment("签定方");

                entity.Property(e => e.PartBname)
                    .HasMaxLength(500)
                    .HasColumnName("PartBName")
                    .HasComment("签定方");

                entity.Property(e => e.PayeeAccounts)
                    .HasMaxLength(500)
                    .HasComment("收款人帐号");

                entity.Property(e => e.PayeeBank)
                    .HasMaxLength(500)
                    .HasComment("收款人开户行\r\n");

                entity.Property(e => e.PayeeCode)
                    .HasMaxLength(50)
                    .HasComment("收款人编号");

                entity.Property(e => e.PayeeName)
                    .HasMaxLength(500)
                    .HasComment("收款人全称");

                entity.Property(e => e.PayingBankAddress)
                    .HasMaxLength(500)
                    .HasComment("付款行地址");

                entity.Property(e => e.PayingBankName)
                    .HasMaxLength(500)
                    .HasComment("付款行全称");

                entity.Property(e => e.PayingBankNumber)
                    .HasMaxLength(500)
                    .HasComment("付款行行号");

                entity.Property(e => e.PaymentDepositRate)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("保证金比率");

                entity.Property(e => e.PaymentDepositSubjectCode)
                    .HasMaxLength(50)
                    .HasComment("保证金科目");

                entity.Property(e => e.PaymentDepositSubjectName)
                    .HasMaxLength(500)
                    .HasComment("保证金科目");

                entity.Property(e => e.PaymentOperator)
                    .HasMaxLength(50)
                    .HasComment("付款操作人");

                entity.Property(e => e.PaymentOperatorLoginName)
                    .HasMaxLength(50)
                    .HasComment("付款操作登陆人");

                entity.Property(e => e.PaymentSubjectCode)
                    .HasMaxLength(50)
                    .HasComment("付款费用科目");

                entity.Property(e => e.PaymentSubjectName)
                    .HasMaxLength(500)
                    .HasComment("付款费用科目");

                entity.Property(e => e.PaymentTime)
                    .HasColumnType("datetime")
                    .HasComment("付款时间");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .HasComment("项目代号");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(500)
                    .HasComment("项目名称");

                entity.Property(e => e.ProjectType).HasComment("项目类型，１项目；２非项目");

                entity.Property(e => e.PutawayDate)
                    .HasColumnType("datetime")
                    .HasComment("入库日期");

                entity.Property(e => e.RecourseType)
                    .HasMaxLength(50)
                    .HasComment("带追索权");

                entity.Property(e => e.SourceCode)
                    .HasMaxLength(50)
                    .HasComment("来源方编码");

                entity.Property(e => e.SourceName)
                    .HasMaxLength(500)
                    .HasComment("来源方全称");

                entity.Property(e => e.Status).HasComment("票据状态（1取得（收款）、2开据、3退票、4背书（付款）、5托收、6贴现、7质押、8转应收）");

                entity.Property(e => e.StatusName)
                    .HasMaxLength(500)
                    .HasComment("状态名称");

                entity.Property(e => e.SubjectCode)
                    .HasMaxLength(50)
                    .HasComment("科目编号");

                entity.Property(e => e.SubjectName)
                    .HasMaxLength(50)
                    .HasComment("科目名称");

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasComment("提交时间");

                entity.Property(e => e.SubmitDepartCode)
                    .HasMaxLength(50)
                    .HasComment("提交单位");

                entity.Property(e => e.SubmitDepartName)
                    .HasMaxLength(50)
                    .HasComment("提交单位");

                entity.Property(e => e.SubmitLoginUserName)
                    .HasMaxLength(50)
                    .HasComment("提效人登陆名");

                entity.Property(e => e.Submitter)
                    .HasMaxLength(50)
                    .HasComment("提交人");

                entity.Property(e => e.VoucherAbstract)
                    .HasMaxLength(500)
                    .HasComment("凭证摘要");

                entity.Property(e => e.VoucherNumber)
                    .HasMaxLength(50)
                    .HasComment("凭证号");

                entity.Property(e => e.Voucherid)
                    .HasColumnName("VOUCHERID")
                    .HasComment("凭证main表主键");
            });

            modelBuilder.Entity<TccDraftInfoBusiness>(entity =>
            {
                entity.ToTable("TCC_DraftInfo_Business");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasComment("创建时间");

                entity.Property(e => e.Description).HasComment("描述");

                entity.Property(e => e.Diid)
                    .HasColumnName("DIID")
                    .HasComment("外键");

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .HasComment("操作人");

                entity.Property(e => e.OperatorLoginName)
                    .HasMaxLength(50)
                    .HasComment("操作人");
            });

            modelBuilder.Entity<TccDraftInfoImport>(entity =>
            {
                entity.ToTable("TCC_DraftInfo_Import");

                entity.HasIndex(e => new { e.ProcessName, e.Incident }, "IX_TCC_DraftInfo_Import");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.AcceptAgreementNumber)
                    .HasMaxLength(500)
                    .HasComment("承兑协议编号");

                entity.Property(e => e.Acceptor)
                    .HasMaxLength(50)
                    .HasComment("承兑人");

                entity.Property(e => e.Attachment).HasComment("附件张数");

                entity.Property(e => e.Auditor)
                    .HasMaxLength(50)
                    .HasComment("审核人");

                entity.Property(e => e.AuditorLoginname)
                    .HasMaxLength(50)
                    .HasComment("审核人登陆名");

                entity.Property(e => e.ContractCode)
                    .HasMaxLength(50)
                    .HasComment("合同代码");

                entity.Property(e => e.ContractName)
                    .HasMaxLength(500)
                    .HasComment("合同名称");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasComment("创建时间");

                entity.Property(e => e.CreatorUserLoginName)
                    .HasMaxLength(50)
                    .HasComment("创建人用户名");

                entity.Property(e => e.CreatorUserName)
                    .HasMaxLength(50)
                    .HasComment("创建人姓名");

                entity.Property(e => e.Currency)
                    .HasMaxLength(50)
                    .HasComment("货币");

                entity.Property(e => e.DepartCode)
                    .HasMaxLength(50)
                    .HasComment("部门编码");

                entity.Property(e => e.DepartName)
                    .HasMaxLength(500)
                    .HasComment("部门名称");

                entity.Property(e => e.DraftSource)
                    .HasMaxLength(50)
                    .HasComment("汇票来源（1开据、2收款）");

                entity.Property(e => e.DraftType)
                    .HasMaxLength(50)
                    .HasComment("汇票种类");

                entity.Property(e => e.Drawee)
                    .HasMaxLength(50)
                    .HasComment("付款人");

                entity.Property(e => e.DrawerAccounts)
                    .HasMaxLength(500)
                    .HasComment("出票人帐号");

                entity.Property(e => e.DrawerDate)
                    .HasColumnType("datetime")
                    .HasComment("出票日期");

                entity.Property(e => e.DrawerName)
                    .HasMaxLength(500)
                    .HasComment("出票人全称");

                entity.Property(e => e.DrawerPlace)
                    .HasMaxLength(500)
                    .HasComment("出票地");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasComment("汇票到期日（设置提醒日期5天）");

                entity.Property(e => e.DueDay).HasComment("付款期限");

                entity.Property(e => e.ExchangeRate)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("汇率");

                entity.Property(e => e.Flag).HasComment("0:待审核；1:驳回；2通过；");

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(50)
                    .HasComment("表单号");

                entity.Property(e => e.FundsProjectCode)
                    .HasMaxLength(50)
                    .HasComment("来源方项目编号");

                entity.Property(e => e.FundsProjectName)
                    .HasMaxLength(500)
                    .HasComment("来源方项目名");

                entity.Property(e => e.Incident).HasComment("实例号");

                entity.Property(e => e.PayeeAccounts)
                    .HasMaxLength(500)
                    .HasComment("收款人帐号");

                entity.Property(e => e.PayeeBank)
                    .HasMaxLength(500)
                    .HasComment("收款人开户行\r\n");

                entity.Property(e => e.PayeeCode)
                    .HasMaxLength(50)
                    .HasComment("收款人编号");

                entity.Property(e => e.PayeeName)
                    .HasMaxLength(500)
                    .HasComment("收款人全称");

                entity.Property(e => e.PayingBankAddress)
                    .HasMaxLength(500)
                    .HasComment("付款行地址");

                entity.Property(e => e.PayingBankName)
                    .HasMaxLength(500)
                    .HasComment("付款行全称");

                entity.Property(e => e.PayingBankNumber)
                    .HasMaxLength(500)
                    .HasComment("付款行行号");

                entity.Property(e => e.ProcessFinishDate)
                    .HasColumnType("datetime")
                    .HasComment("流程完成时间");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名");

                entity.Property(e => e.ProcessStatus).HasComment("流程状态  0=未完成 1=归档  2=撤销");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .HasComment("项目代号");

                entity.Property(e => e.ProjectIsEpc)
                    .HasColumnName("ProjectIsEPC")
                    .HasComment("项目是否是EPC:1是;2不是");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(500)
                    .HasComment("项目名称");

                entity.Property(e => e.ProjectType).HasComment("项目类型，１项目；２非项目");

                entity.Property(e => e.PutawayDate)
                    .HasColumnType("datetime")
                    .HasComment("入库日期");

                entity.Property(e => e.RecourseType)
                    .HasMaxLength(50)
                    .HasComment("带追索权");

                entity.Property(e => e.SourceCode)
                    .HasMaxLength(50)
                    .HasComment("来源方编码");

                entity.Property(e => e.SourceName)
                    .HasMaxLength(500)
                    .HasComment("来源方全称");

                entity.Property(e => e.Status).HasComment("票据状态（1取得（收款）、2开据、3退票、4背书（付款）、5托收、6贴现、7质押、8转应收）");

                entity.Property(e => e.StatusName)
                    .HasMaxLength(500)
                    .HasComment("状态名称");

                entity.Property(e => e.SubjectCode)
                    .HasMaxLength(50)
                    .HasComment("科目编号");

                entity.Property(e => e.SubjectName)
                    .HasMaxLength(50)
                    .HasComment("科目名称");

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasComment("提交时间");

                entity.Property(e => e.VoucherCode)
                    .HasMaxLength(50)
                    .HasComment("凭证单号");

                entity.Property(e => e.VoucherId)
                    .HasColumnName("VoucherID")
                    .HasComment("凭证ID");
            });

            modelBuilder.Entity<TccDraftInfoImport1>(entity =>
            {
                entity.ToTable("TCC_DraftInfo_Import1");

                entity.HasIndex(e => new { e.ProcessName, e.Incident }, "IX_TCC_DraftInfo_Import1");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Attachment).HasComment("附件张数");

                entity.Property(e => e.Auditor)
                    .HasMaxLength(50)
                    .HasComment("审核人");

                entity.Property(e => e.AuditorLoginname)
                    .HasMaxLength(50)
                    .HasComment("审核人登陆名");

                entity.Property(e => e.BankAccount)
                    .HasMaxLength(100)
                    .HasComment("付款银行账号");

                entity.Property(e => e.CasierClaimDateTime)
                    .HasColumnType("datetime")
                    .HasComment("时间");

                entity.Property(e => e.CasierClaimLoginUserName)
                    .HasMaxLength(50)
                    .HasComment("接单人");

                entity.Property(e => e.CasierClaimUserName)
                    .HasMaxLength(50)
                    .HasComment("接单人");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasComment("创建时间");

                entity.Property(e => e.CreatorUserLoginName)
                    .HasMaxLength(50)
                    .HasComment("创建人用户名");

                entity.Property(e => e.CreatorUserName)
                    .HasMaxLength(50)
                    .HasComment("创建人姓名");

                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("部门编号");

                entity.Property(e => e.DepartmentName)
                    .HasMaxLength(50)
                    .HasComment("部门名称");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("部门编号");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .HasComment("部门名称");

                entity.Property(e => e.DraftType)
                    .HasMaxLength(50)
                    .HasComment("汇票种类");

                entity.Property(e => e.FFormNumber)
                    .HasMaxLength(50)
                    .HasColumnName("F_FormNumber");

                entity.Property(e => e.FId).HasColumnName("F_ID");

                entity.Property(e => e.Flag).HasComment("0:待审核；1:驳回；2通过；");

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(50)
                    .HasComment("表单号");

                entity.Property(e => e.FundsProjectCode)
                    .HasMaxLength(50)
                    .HasComment("来源方项目编号");

                entity.Property(e => e.FundsProjectName)
                    .HasMaxLength(500)
                    .HasComment("来源方项目名");

                entity.Property(e => e.Incident).HasComment("实例号");

                entity.Property(e => e.IsShowBankInfo)
                    .HasDefaultValueSql("((0))")
                    .HasComment("是否显示付款银行  1：显示  2：隐藏");

                entity.Property(e => e.PartBid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PartBID")
                    .HasComment("合同签定方");

                entity.Property(e => e.PartBname)
                    .HasMaxLength(500)
                    .HasColumnName("PartBName")
                    .HasComment("合同签定方");

                entity.Property(e => e.PayorBank)
                    .HasMaxLength(500)
                    .HasComment("付款银行名称");

                entity.Property(e => e.PayorBankCode)
                    .HasMaxLength(100)
                    .HasComment("付款银行编号");

                entity.Property(e => e.ProcessFinishDate)
                    .HasColumnType("datetime")
                    .HasComment("流程完成时间");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名");

                entity.Property(e => e.ProcessStatus).HasComment("流程状态  0=未完成 1=归档  2=撤销");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .HasComment("项目代号");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(500)
                    .HasComment("项目名称");

                entity.Property(e => e.ReceiptAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("分担金额");

                entity.Property(e => e.RequestFlag)
                    .HasDefaultValueSql("((1))")
                    .HasComment("申请类型。1项目收票；2内部往来");

                entity.Property(e => e.RequestSfzh)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("申请人身份证号");

                entity.Property(e => e.RequestTelephone)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("联系电话");

                entity.Property(e => e.RequestType).HasComment("申请类型１为单项目。２为多项目。触发器插入。");

                entity.Property(e => e.SignCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("合同签定方");

                entity.Property(e => e.SignName)
                    .HasMaxLength(500)
                    .HasComment("合同签定方");

                entity.Property(e => e.SourceCode)
                    .HasMaxLength(50)
                    .HasComment("来源方编码");

                entity.Property(e => e.SourceName)
                    .HasMaxLength(500)
                    .HasComment("来源方全称");

                entity.Property(e => e.SubjectCode)
                    .HasMaxLength(50)
                    .HasComment("科目编号");

                entity.Property(e => e.SubjectName)
                    .HasMaxLength(50)
                    .HasComment("科目名称");

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasComment("提交时间");

                entity.Property(e => e.Total)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("汇票总额");

                entity.Property(e => e.VoucherCode)
                    .HasMaxLength(50)
                    .HasComment("凭证单号");

                entity.Property(e => e.VoucherId)
                    .HasColumnName("VoucherID")
                    .HasComment("凭证ID");
            });

            modelBuilder.Entity<TccDraftInfoImport1DraftInfo>(entity =>
            {
                entity.ToTable("TCC_DraftInfo_Import1_DraftInfo");

                entity.HasIndex(e => e.Diiid, "IX_TCC_DraftInfo_Import1_DraftInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Currency)
                    .HasMaxLength(50)
                    .HasComment("货币");

                entity.Property(e => e.Diiid).HasColumnName("DIIID");

                entity.Property(e => e.DraftAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("汇票金额");

                entity.Property(e => e.DraftAmountChineseNumeral)
                    .HasMaxLength(100)
                    .HasComment("汇票金额大写");

                entity.Property(e => e.DraftCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("汇票编号");

                entity.Property(e => e.DrawerAccounts)
                    .HasMaxLength(500)
                    .HasComment("出票人帐号");

                entity.Property(e => e.DrawerDate)
                    .HasColumnType("datetime")
                    .HasComment("出票日期");

                entity.Property(e => e.DrawerName)
                    .HasMaxLength(500)
                    .HasComment("出票人全称");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasComment("汇票到期日（设置提醒日期5天）");

                entity.Property(e => e.DueDay).HasComment("付款期限");

                entity.Property(e => e.ExchangeRate)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("汇率");

                entity.Property(e => e.PayeeAccounts)
                    .HasMaxLength(500)
                    .HasComment("收款人帐号");

                entity.Property(e => e.PayeeBank)
                    .HasMaxLength(500)
                    .HasComment("收款人开户行\r\n");

                entity.Property(e => e.PayeeName)
                    .HasMaxLength(500)
                    .HasComment("收款人全称");

                entity.Property(e => e.PayingBankAddress)
                    .HasMaxLength(500)
                    .HasComment("付款行地址");

                entity.Property(e => e.PayingBankName)
                    .HasMaxLength(500)
                    .HasComment("付款行全称");

                entity.Property(e => e.PayingBankNumber)
                    .HasMaxLength(500)
                    .HasComment("付款行行号");

                entity.Property(e => e.RecourseType)
                    .HasMaxLength(50)
                    .HasComment("带追索权");
            });

            modelBuilder.Entity<TccDraftInfoImport1Receipt>(entity =>
            {
                entity.ToTable("TCC_DraftInfo_Import1_Receipt");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.FAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("F_Amount")
                    .HasComment("剩余金额");

                entity.Property(e => e.FDraftAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("F_DraftAmount")
                    .HasComment("分担金额");

                entity.Property(e => e.FFormNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("F_FormNumber")
                    .HasComment("表单号");

                entity.Property(e => e.FId1)
                    .HasColumnName("F_ID")
                    .HasComment("出纳确认表主键");

                entity.Property(e => e.Fid)
                    .HasColumnName("FID")
                    .HasComment("外键");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("项目号");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(500)
                    .HasComment("项目名");
            });

            modelBuilder.Entity<TccDraftInfoImport1Temp>(entity =>
            {
                entity.ToTable("TCC_DraftInfo_Import1_Temp");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Attachment).HasComment("附件张数");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasComment("创建时间");

                entity.Property(e => e.CreatorUserLoginName)
                    .HasMaxLength(50)
                    .HasComment("创建人用户名");

                entity.Property(e => e.CreatorUserName)
                    .HasMaxLength(50)
                    .HasComment("创建人姓名");

                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("内部往来");

                entity.Property(e => e.DepartmentName)
                    .HasMaxLength(50)
                    .HasComment("内部往来");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("部门编号");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .HasComment("部门名称");

                entity.Property(e => e.DraftType)
                    .HasMaxLength(50)
                    .HasComment("汇票种类");

                entity.Property(e => e.FFormNumber)
                    .HasMaxLength(50)
                    .HasColumnName("F_FormNumber");

                entity.Property(e => e.FId).HasColumnName("F_ID");

                entity.Property(e => e.FundsProjectCode)
                    .HasMaxLength(50)
                    .HasComment("来源方项目编号");

                entity.Property(e => e.FundsProjectName)
                    .HasMaxLength(500)
                    .HasComment("来源方项目名");

                entity.Property(e => e.PartBid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PartBID");

                entity.Property(e => e.PartBname)
                    .HasMaxLength(50)
                    .HasColumnName("PartBName");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .HasComment("项目代号");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(500)
                    .HasComment("项目名称");

                entity.Property(e => e.ReceiptAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("分担金额");

                entity.Property(e => e.RequestFlag).HasComment("申请类型：1收票，2内部往来");

                entity.Property(e => e.RequestSfzh)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("申请人身份证号");

                entity.Property(e => e.RequestTelephone)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("联系电话");

                entity.Property(e => e.SignCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SignName)
                    .HasMaxLength(500)
                    .HasComment("签定方");

                entity.Property(e => e.SourceCode)
                    .HasMaxLength(50)
                    .HasComment("来源方编码");

                entity.Property(e => e.SourceName)
                    .HasMaxLength(500)
                    .HasComment("来源方全称");

                entity.Property(e => e.SubjectCode)
                    .HasMaxLength(50)
                    .HasComment("科目编号");

                entity.Property(e => e.SubjectName)
                    .HasMaxLength(50)
                    .HasComment("科目名称");

                entity.Property(e => e.Total)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("票据金额");
            });

            modelBuilder.Entity<TccDraftInfoImport1TempDraftInfo>(entity =>
            {
                entity.ToTable("TCC_DraftInfo_Import1_Temp_DraftInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Currency)
                    .HasMaxLength(50)
                    .HasComment("货币");

                entity.Property(e => e.Diiid).HasColumnName("DIIID");

                entity.Property(e => e.DraftAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("汇票金额");

                entity.Property(e => e.DraftAmountChineseNumeral)
                    .HasMaxLength(100)
                    .HasComment("汇票金额大写");

                entity.Property(e => e.DraftCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("汇票编号");

                entity.Property(e => e.DrawerAccounts)
                    .HasMaxLength(500)
                    .HasComment("出票人帐号");

                entity.Property(e => e.DrawerDate)
                    .HasColumnType("datetime")
                    .HasComment("出票日期");

                entity.Property(e => e.DrawerName)
                    .HasMaxLength(500)
                    .HasComment("出票人全称");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasComment("汇票到期日（设置提醒日期5天）");

                entity.Property(e => e.DueDay).HasComment("付款期限");

                entity.Property(e => e.ExchangeRate)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("汇率");

                entity.Property(e => e.PayeeAccounts)
                    .HasMaxLength(500)
                    .HasComment("收款人帐号");

                entity.Property(e => e.PayeeBank)
                    .HasMaxLength(500)
                    .HasComment("收款人开户行\r\n");

                entity.Property(e => e.PayeeName)
                    .HasMaxLength(500)
                    .HasComment("收款人全称");

                entity.Property(e => e.PayingBankAddress)
                    .HasMaxLength(500)
                    .HasComment("付款行地址");

                entity.Property(e => e.PayingBankName)
                    .HasMaxLength(500)
                    .HasComment("付款行全称");

                entity.Property(e => e.PayingBankNumber)
                    .HasMaxLength(500)
                    .HasComment("付款行行号");

                entity.Property(e => e.RecourseType)
                    .HasMaxLength(50)
                    .HasComment("带追索权");
            });

            modelBuilder.Entity<TccDraftInfoImportDraftInfo>(entity =>
            {
                entity.ToTable("TCC_DraftInfo_Import_DraftInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Diiid).HasColumnName("DIIID");

                entity.Property(e => e.DraftAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("汇票金额（小写）");

                entity.Property(e => e.DraftAmountChineseNumeral)
                    .HasMaxLength(200)
                    .HasComment("汇票金额（大写）");

                entity.Property(e => e.DraftCode)
                    .HasMaxLength(50)
                    .HasComment("汇票编号");
            });

            modelBuilder.Entity<TccDraftInfoImportZkTmp>(entity =>
            {
                entity.ToTable("TCC_DraftInfo_Import_ZK_Tmp");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Currency)
                    .HasMaxLength(50)
                    .HasComment("货币");

                entity.Property(e => e.DraftAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("汇票金额");

                entity.Property(e => e.DraftAmountChineseNumeral)
                    .HasMaxLength(100)
                    .HasComment("汇票金额大写");

                entity.Property(e => e.DraftCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("汇票编号");

                entity.Property(e => e.DrawerAccounts)
                    .HasMaxLength(500)
                    .HasComment("出票人帐号");

                entity.Property(e => e.DrawerDate)
                    .HasColumnType("datetime")
                    .HasComment("出票日期");

                entity.Property(e => e.DrawerName)
                    .HasMaxLength(500)
                    .HasComment("出票人全称");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasComment("汇票到期日（设置提醒日期5天）");

                entity.Property(e => e.DueDay).HasComment("付款期限");

                entity.Property(e => e.ExchangeRate)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("汇率");

                entity.Property(e => e.PayeeAccounts)
                    .HasMaxLength(500)
                    .HasComment("收款人帐号");

                entity.Property(e => e.PayeeBank)
                    .HasMaxLength(500)
                    .HasComment("收款人开户行\r\n");

                entity.Property(e => e.PayeeName)
                    .HasMaxLength(500)
                    .HasComment("收款人全称");

                entity.Property(e => e.PayingBankAddress)
                    .HasMaxLength(500)
                    .HasComment("付款行地址");

                entity.Property(e => e.PayingBankName)
                    .HasMaxLength(500)
                    .HasComment("付款行全称");

                entity.Property(e => e.PayingBankNumber)
                    .HasMaxLength(500)
                    .HasComment("付款行行号");

                entity.Property(e => e.RecourseType)
                    .HasMaxLength(50)
                    .HasComment("带追索权");

                entity.Property(e => e.RequestLogin)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TccDraftInfoInit>(entity =>
            {
                entity.ToTable("TCC_DraftInfo_Init");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AcceptAgreementNumber)
                    .HasMaxLength(500)
                    .HasComment("承兑协议编号");

                entity.Property(e => e.Acceptor)
                    .HasMaxLength(50)
                    .HasComment("承兑人");

                entity.Property(e => e.ContractCode)
                    .HasMaxLength(50)
                    .HasComment("合同代码");

                entity.Property(e => e.ContractName)
                    .HasMaxLength(500)
                    .HasComment("合同名称");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasComment("创建时间");

                entity.Property(e => e.CreationVoucherDate)
                    .HasColumnType("datetime")
                    .HasComment("生成凭证号");

                entity.Property(e => e.CreatorUserLoginName)
                    .HasMaxLength(50)
                    .HasComment("创建人用户名");

                entity.Property(e => e.CreatorUserName)
                    .HasMaxLength(50)
                    .HasComment("创建人姓名");

                entity.Property(e => e.Currency)
                    .HasMaxLength(50)
                    .HasComment("货币");

                entity.Property(e => e.DepartCode).HasMaxLength(50);

                entity.Property(e => e.DepartName)
                    .HasMaxLength(500)
                    .HasComment("收款人全称");

                entity.Property(e => e.DiscountAmount)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("贴现金额");

                entity.Property(e => e.DiscountRate)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("贴现利率");

                entity.Property(e => e.DraftAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("汇票金额（小写）");

                entity.Property(e => e.DraftAmountChineseNumeral)
                    .HasMaxLength(200)
                    .HasComment("汇票金额（大写）");

                entity.Property(e => e.DraftCode)
                    .HasMaxLength(50)
                    .HasComment("汇票编号");

                entity.Property(e => e.DraftSource)
                    .HasMaxLength(50)
                    .HasComment("汇票来源（1开据、2收款）");

                entity.Property(e => e.DraftType)
                    .HasMaxLength(50)
                    .HasComment("汇票种类");

                entity.Property(e => e.Drawee)
                    .HasMaxLength(50)
                    .HasComment("付款人");

                entity.Property(e => e.DrawerAccounts)
                    .HasMaxLength(500)
                    .HasComment("出票人帐号");

                entity.Property(e => e.DrawerDate)
                    .HasColumnType("datetime")
                    .HasComment("出票日期");

                entity.Property(e => e.DrawerName)
                    .HasMaxLength(500)
                    .HasComment("出票人全称");

                entity.Property(e => e.DrawerPlace)
                    .HasMaxLength(500)
                    .HasComment("出票地");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasComment("汇票到期日（设置提醒日期5天）");

                entity.Property(e => e.DueDay).HasComment("付款期限");

                entity.Property(e => e.EndorseAuditor)
                    .HasMaxLength(500)
                    .HasComment("背书审核人");

                entity.Property(e => e.EndorseAuditorLoginUserName)
                    .HasMaxLength(50)
                    .HasComment("背书审核人登陆名");

                entity.Property(e => e.EndorseClientele)
                    .HasMaxLength(500)
                    .HasComment("背书客户名称");

                entity.Property(e => e.EndorseOperator)
                    .HasMaxLength(50)
                    .HasComment("背书人操作人");

                entity.Property(e => e.EndorseOperatorLoginName)
                    .HasMaxLength(50)
                    .HasComment("背书人操作人登陆名");

                entity.Property(e => e.EndorseSupplier)
                    .HasMaxLength(500)
                    .HasComment("背书供应商名称");

                entity.Property(e => e.EndorseSupplierCode)
                    .HasMaxLength(500)
                    .HasComment("背书供应商名称");

                entity.Property(e => e.ExchangeRate)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("汇率");

                entity.Property(e => e.FundsProjectCode)
                    .HasMaxLength(50)
                    .HasComment("来源方项目编号");

                entity.Property(e => e.FundsProjectName)
                    .HasMaxLength(500)
                    .HasComment("来源方项目名");

                entity.Property(e => e.IsLock).HasComment("是否锁定");

                entity.Property(e => e.IsPayment).HasComment("是否付款 1付,2未付");

                entity.Property(e => e.LastStatusChangeDate)
                    .HasColumnType("datetime")
                    .HasComment("状态最后修改时间");

                entity.Property(e => e.LockUserLoginName)
                    .HasMaxLength(50)
                    .HasComment("锁定人登陆人");

                entity.Property(e => e.LockUserName)
                    .HasMaxLength(50)
                    .HasComment("锁定人");

                entity.Property(e => e.OperateLoginUserName)
                    .HasMaxLength(50)
                    .HasComment("操作人登陆名");

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .HasComment("操作人");

                entity.Property(e => e.OperatorTime)
                    .HasColumnType("datetime")
                    .HasComment("操作人时间");

                entity.Property(e => e.PayeeAccounts)
                    .HasMaxLength(500)
                    .HasComment("收款人帐号");

                entity.Property(e => e.PayeeBank)
                    .HasMaxLength(500)
                    .HasComment("收款人开户行\r\n");

                entity.Property(e => e.PayeeCode)
                    .HasMaxLength(50)
                    .HasComment("收款人编号");

                entity.Property(e => e.PayeeName)
                    .HasMaxLength(500)
                    .HasComment("收款人全称");

                entity.Property(e => e.PayingBankAddress)
                    .HasMaxLength(500)
                    .HasComment("付款行地址");

                entity.Property(e => e.PayingBankName)
                    .HasMaxLength(500)
                    .HasComment("付款行全称");

                entity.Property(e => e.PayingBankNumber)
                    .HasMaxLength(500)
                    .HasComment("付款行行号");

                entity.Property(e => e.PaymentOperator)
                    .HasMaxLength(50)
                    .HasComment("付款操作人");

                entity.Property(e => e.PaymentOperatorLoginName)
                    .HasMaxLength(50)
                    .HasComment("付款操作登陆人");

                entity.Property(e => e.PaymentTime)
                    .HasColumnType("datetime")
                    .HasComment("付款时间");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .HasComment("项目代号");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(500)
                    .HasComment("项目名称");

                entity.Property(e => e.ProjectType).HasComment("项目类型，１项目；２非项目");

                entity.Property(e => e.PutawayDate)
                    .HasColumnType("datetime")
                    .HasComment("入库日期");

                entity.Property(e => e.RecourseType)
                    .HasMaxLength(50)
                    .HasComment("带追索权");

                entity.Property(e => e.SourceCode).HasMaxLength(50);

                entity.Property(e => e.SourceName)
                    .HasMaxLength(500)
                    .HasComment("来源方全称");

                entity.Property(e => e.Status).HasComment("票据状态（1取得（收款）、2开据、3退票、4背书（付款）、5托收、6贴现、7质押、8转应收）");

                entity.Property(e => e.StatusName)
                    .HasMaxLength(500)
                    .HasComment("状态名称");

                entity.Property(e => e.SubjectCode)
                    .HasMaxLength(50)
                    .HasComment("入帐凭证编号");

                entity.Property(e => e.SubjectName).HasMaxLength(50);

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasComment("提交时间");

                entity.Property(e => e.SubmitDepartCode)
                    .HasMaxLength(50)
                    .HasComment("提交单位");

                entity.Property(e => e.SubmitDepartName)
                    .HasMaxLength(50)
                    .HasComment("提交单位");

                entity.Property(e => e.SubmitLoginUserName)
                    .HasMaxLength(50)
                    .HasComment("提效人登陆名");

                entity.Property(e => e.Submitter)
                    .HasMaxLength(50)
                    .HasComment("提交人");

                entity.Property(e => e.VoucherAbstract)
                    .HasMaxLength(500)
                    .HasComment("凭证摘要");

                entity.Property(e => e.VoucherNumber)
                    .HasMaxLength(50)
                    .HasComment("凭证号");
            });

            modelBuilder.Entity<TccDraftInfoLog>(entity =>
            {
                entity.ToTable("TCC_DraftInfo_Log");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.CreatorUserLoginName)
                    .HasMaxLength(50)
                    .HasComment("变更人登陆人");

                entity.Property(e => e.CreatorUserName)
                    .HasMaxLength(50)
                    .HasComment("变更人姓名");

                entity.Property(e => e.DraftInfoId)
                    .HasColumnName("DraftInfoID")
                    .HasComment("汇票主键");

                entity.Property(e => e.NewChangeDate)
                    .HasColumnType("datetime")
                    .HasComment("变更时间");

                entity.Property(e => e.NewStatus).HasComment("变更后状态");

                entity.Property(e => e.OriginalChangeDate)
                    .HasColumnType("datetime")
                    .HasComment("原始状态时间\r\n");

                entity.Property(e => e.OriginalStatus).HasComment("原始状态");
            });

            modelBuilder.Entity<TccDraftInfoOperateProcess>(entity =>
            {
                entity.ToTable("TCC_DraftInfo_OperateProcess");

                entity.HasIndex(e => new { e.ProcessName, e.Incident }, "IX_TCC_DraftInfo_OperateProcess");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.AccountingAuditDate)
                    .HasColumnType("datetime")
                    .HasComment("审核时间");

                entity.Property(e => e.AccountingAuditLoginUserName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("审核人");

                entity.Property(e => e.AccountingAuditUserName)
                    .HasMaxLength(50)
                    .HasComment("审核人");

                entity.Property(e => e.Attachment).HasComment("附件张数");

                entity.Property(e => e.CollectionAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("托收金额");

                entity.Property(e => e.CollectionDate)
                    .HasColumnType("datetime")
                    .HasComment("托收时间");

                entity.Property(e => e.CollectionSubjectCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("托收科目");

                entity.Property(e => e.CollectionSubjectName)
                    .HasMaxLength(500)
                    .HasComment("托收科目");

                entity.Property(e => e.Diid)
                    .HasColumnName("DIID")
                    .HasComment("汇票主键");

                entity.Property(e => e.DiscountAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("贴现金额");

                entity.Property(e => e.DiscountBank)
                    .HasMaxLength(500)
                    .HasComment("贴现银行");

                entity.Property(e => e.DiscountCharges)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("贴金利息");

                entity.Property(e => e.DiscountDate)
                    .HasColumnType("datetime")
                    .HasComment("贴现日期");

                entity.Property(e => e.DiscountDay).HasComment("贴现天数");

                entity.Property(e => e.DiscountRate)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("贴现利率（年）");

                entity.Property(e => e.DiscountSubjectCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("贴现科目");

                entity.Property(e => e.DiscountSubjectName)
                    .HasMaxLength(500)
                    .HasComment("贴现科目");

                entity.Property(e => e.Flag).HasComment("1付款;2托收;3贴现");

                entity.Property(e => e.Idlist)
                    .HasMaxLength(200)
                    .HasColumnName("IDList")
                    .HasComment("多个ID存放位置");

                entity.Property(e => e.Incident).HasComment("实例号");

                entity.Property(e => e.IsVoucher)
                    .HasDefaultValueSql("((0))")
                    .HasComment("是否入帐");

                entity.Property(e => e.PaymentDepositRate)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("保证金比例");

                entity.Property(e => e.PaymentDepositSubjectCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("保证金科目");

                entity.Property(e => e.PaymentDepositSubjectName)
                    .HasMaxLength(500)
                    .HasComment("保证金科目");

                entity.Property(e => e.PaymentSubjectCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("付款科目");

                entity.Property(e => e.PaymentSubjectName)
                    .HasMaxLength(500)
                    .HasComment("付款科目");

                entity.Property(e => e.ProcessFinishDate)
                    .HasColumnType("datetime")
                    .HasComment("完成金额");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名");

                entity.Property(e => e.ProcessStatus).HasComment("状态0:流程中，1完成，2撤销");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasComment("申请时间");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("申请人所在部门");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(50)
                    .HasComment("申请人所有部门");

                entity.Property(e => e.RequestFormNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("表单号");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("申请人登陆名");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasComment("申请人");

                entity.Property(e => e.RequestSfzh)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("申请人身份证号");

                entity.Property(e => e.VoucherCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("入帐科目号");

                entity.Property(e => e.Voucherid)
                    .HasColumnName("VOUCHERID")
                    .HasComment("入帐主键");
            });

            modelBuilder.Entity<TccDraftInfoRemark>(entity =>
            {
                entity.ToTable("TCC_DraftInfo_Remark");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasComment("创建时间");

                entity.Property(e => e.Creator)
                    .HasMaxLength(50)
                    .HasComment("创建人");

                entity.Property(e => e.CreatorLoginName)
                    .HasMaxLength(50)
                    .HasComment("创建人登陆名");

                entity.Property(e => e.Diid)
                    .HasColumnName("DIID")
                    .HasComment("外键");

                entity.Property(e => e.Remark).HasComment("备注内容");
            });

            modelBuilder.Entity<TccDrawingArchiveApply>(entity =>
            {
                entity.ToTable("TCC_DrawingArchiveApply");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyDate).HasMaxLength(50);

                entity.Property(e => e.ApplyLoginUser).HasMaxLength(50);

                entity.Property(e => e.ApplyMajor).HasMaxLength(50);

                entity.Property(e => e.ApplyMajorNo).HasMaxLength(50);

                entity.Property(e => e.ApplyName).HasMaxLength(50);

                entity.Property(e => e.ApplyPhone).HasMaxLength(50);

                entity.Property(e => e.ArchiveByProjectMajorsDeptIds).HasColumnName("ArchiveByProjectMajorsDeptIDs");

                entity.Property(e => e.ArchiveByProjectMajorsIds).HasColumnName("ArchiveByProjectMajorsIDs");

                entity.Property(e => e.ArchiveMajor).HasMaxLength(50);

                entity.Property(e => e.ArchiveMajorCode).HasMaxLength(50);

                entity.Property(e => e.ArchiveMajorDeptId)
                    .HasMaxLength(50)
                    .HasColumnName("ArchiveMajorDeptID");

                entity.Property(e => e.ArchiveMajorId)
                    .HasMaxLength(50)
                    .HasColumnName("ArchiveMajorID");

                entity.Property(e => e.ArchiveType).HasMaxLength(50);

                entity.Property(e => e.BgNum)
                    .HasMaxLength(50)
                    .HasColumnName("bgNum");

                entity.Property(e => e.DesignStage).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.HasPc).HasColumnName("hasPC");

                entity.Property(e => e.HasPp).HasColumnName("hasPP");

                entity.Property(e => e.HasWorkArea)
                    .HasMaxLength(50)
                    .HasColumnName("hasWorkArea");

                entity.Property(e => e.IsPressure)
                    .HasMaxLength(50)
                    .HasColumnName("isPressure");

                entity.Property(e => e.JssNum)
                    .HasMaxLength(50)
                    .HasColumnName("jssNum");

                entity.Property(e => e.MsgSendCtsDt).HasColumnName("MsgSendCts_dt");

                entity.Property(e => e.MsgSendCtsJsb).HasColumnName("MsgSendCts_jsb");

                entity.Property(e => e.MsgSendCtsWyc).HasColumnName("MsgSendCts_wyc");

                entity.Property(e => e.MsgSendTimeDt)
                    .HasMaxLength(50)
                    .HasColumnName("MsgSendTime_dt");

                entity.Property(e => e.MsgSendTimeJsb)
                    .HasMaxLength(50)
                    .HasColumnName("MsgSendTime_jsb");

                entity.Property(e => e.MsgSendTimeWyc)
                    .HasMaxLength(50)
                    .HasColumnName("MsgSendTime_wyc");

                entity.Property(e => e.MutiArchiveMajorDeptId).HasColumnName("MutiArchiveMajorDeptID");

                entity.Property(e => e.MutiArchiveMajorId).HasColumnName("MutiArchiveMajorID");

                entity.Property(e => e.MutiWorkAreaId).HasColumnName("MutiWorkAreaID");

                entity.Property(e => e.OnlyPressureSeal).HasMaxLength(50);

                entity.Property(e => e.PackCount)
                    .HasMaxLength(50)
                    .HasColumnName("packCount");

                entity.Property(e => e.PackType)
                    .HasMaxLength(50)
                    .HasColumnName("packType");

                entity.Property(e => e.PressureApprovalLoginName).HasMaxLength(200);

                entity.Property(e => e.PressureApprovalRealName).HasMaxLength(200);

                entity.Property(e => e.PrintForSeal).HasMaxLength(50);

                entity.Property(e => e.PrintFormNumber).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectName).HasMaxLength(200);

                entity.Property(e => e.ProjectNo).HasMaxLength(50);

                entity.Property(e => e.ReceiveCompany).HasMaxLength(200);

                entity.Property(e => e.Seal).HasMaxLength(50);

                entity.Property(e => e.SealUse).HasMaxLength(50);

                entity.Property(e => e.SendDraw).HasMaxLength(50);

                entity.Property(e => e.SendDrawCount).HasMaxLength(50);

                entity.Property(e => e.UnArchiveMajorDeptIds).HasColumnName("unArchiveMajorDeptIDs");

                entity.Property(e => e.UnArchiveMajorIds).HasColumnName("unArchiveMajorIDs");

                entity.Property(e => e.UnArchiveMajors).HasColumnName("unArchiveMajors");

                entity.Property(e => e.UnSeal)
                    .HasMaxLength(50)
                    .HasColumnName("unSeal");

                entity.Property(e => e.UnSealReasonJsb)
                    .HasMaxLength(50)
                    .HasColumnName("unSealReason_jsb");

                entity.Property(e => e.UnSealReasonWyc)
                    .HasMaxLength(50)
                    .HasColumnName("unSealReason_wyc");

                entity.Property(e => e.WorkArea).HasMaxLength(50);

                entity.Property(e => e.WorkAreaId)
                    .HasMaxLength(50)
                    .HasColumnName("WorkAreaID");

                entity.Property(e => e.WzNum)
                    .HasMaxLength(50)
                    .HasColumnName("wzNum");
            });

            modelBuilder.Entity<TccDrawingArchiveApplyDictArchiveMajor>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_DrawingArchiveApply_Dict_ArchiveMajor");

                entity.Property(e => e.Flag).HasColumnName("flag");

                entity.Property(e => e.MajorCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MajorName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TccDrawingArchiveApplyDictSealuse>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_DrawingArchiveApply_Dict_sealuse");

                entity.Property(e => e.SealUse).HasMaxLength(50);
            });

            modelBuilder.Entity<TccDrawingArchiveApplyDrawingDirectory>(entity =>
            {
                entity.ToTable("TCC_DrawingArchiveApply_DrawingDirectory");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyDate).HasMaxLength(50);

                entity.Property(e => e.ApplyLoginUser).HasMaxLength(50);

                entity.Property(e => e.ArchiveType).HasMaxLength(50);

                entity.Property(e => e.CompleteDate).HasMaxLength(50);

                entity.Property(e => e.DesignPerson).HasMaxLength(50);

                entity.Property(e => e.DrawingCount).HasMaxLength(50);

                entity.Property(e => e.DrawingName).HasMaxLength(100);

                entity.Property(e => e.DrawingNo).HasMaxLength(100);

                entity.Property(e => e.DrawingReferNo).HasMaxLength(100);

                entity.Property(e => e.DrawingSize).HasMaxLength(50);

                entity.Property(e => e.DrawingVersion).HasMaxLength(50);

                entity.Property(e => e.DrawubgCountA1).HasMaxLength(50);

                entity.Property(e => e.FileId)
                    .HasMaxLength(50)
                    .HasColumnName("FileID");

                entity.Property(e => e.FormNumberFk)
                    .HasMaxLength(50)
                    .HasColumnName("FormNumber_FK");

                entity.Property(e => e.Jhperson)
                    .HasMaxLength(50)
                    .HasColumnName("JHPerson");

                entity.Property(e => e.NodeId)
                    .HasMaxLength(50)
                    .HasColumnName("NodeID");

                entity.Property(e => e.ParentId)
                    .HasMaxLength(50)
                    .HasColumnName("parentID");

                entity.Property(e => e.Sdperson)
                    .HasMaxLength(50)
                    .HasColumnName("SDPerson");

                entity.Property(e => e.Shperson)
                    .HasMaxLength(50)
                    .HasColumnName("SHPerson");

                entity.Property(e => e.State)
                    .HasMaxLength(50)
                    .HasColumnName("state");

                entity.Property(e => e.TreeFieldId)
                    .HasMaxLength(50)
                    .HasColumnName("TreeFieldID");

                entity.Property(e => e.TreeFieldName).HasMaxLength(50);

                entity.Property(e => e.TreeLevel).HasMaxLength(50);
            });

            modelBuilder.Entity<TccDrawingArchiveApplyDrawingDirectorySpf>(entity =>
            {
                entity.ToTable("TCC_DrawingArchiveApply_DrawingDirectory_spf");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyDate).HasMaxLength(50);

                entity.Property(e => e.ApplyLoginUser).HasMaxLength(50);

                entity.Property(e => e.ArchiveType).HasMaxLength(50);

                entity.Property(e => e.CompleteDate).HasMaxLength(50);

                entity.Property(e => e.DesignPerson).HasMaxLength(50);

                entity.Property(e => e.DesignPersonAccount).HasMaxLength(50);

                entity.Property(e => e.DrawingCount).HasMaxLength(50);

                entity.Property(e => e.DrawingName).HasMaxLength(100);

                entity.Property(e => e.DrawingNo).HasMaxLength(50);

                entity.Property(e => e.DrawingSize).HasMaxLength(50);

                entity.Property(e => e.DrawingVersion).HasMaxLength(50);

                entity.Property(e => e.DrawubgCountA1).HasMaxLength(50);

                entity.Property(e => e.FormNumberFk)
                    .HasMaxLength(50)
                    .HasColumnName("FormNumber_FK");

                entity.Property(e => e.Jhperson)
                    .HasMaxLength(50)
                    .HasColumnName("JHPerson");

                entity.Property(e => e.JhpersonAccount)
                    .HasMaxLength(50)
                    .HasColumnName("JHPersonAccount");

                entity.Property(e => e.MajorCode).HasMaxLength(50);

                entity.Property(e => e.NodeId)
                    .HasMaxLength(50)
                    .HasColumnName("NodeID");

                entity.Property(e => e.ParentId)
                    .HasMaxLength(50)
                    .HasColumnName("parentID");

                entity.Property(e => e.ProjectNo).HasMaxLength(50);

                entity.Property(e => e.Sdperson)
                    .HasMaxLength(50)
                    .HasColumnName("SDPerson");

                entity.Property(e => e.SdpersonAccount)
                    .HasMaxLength(50)
                    .HasColumnName("SDPersonAccount");

                entity.Property(e => e.Shperson)
                    .HasMaxLength(50)
                    .HasColumnName("SHPerson");

                entity.Property(e => e.ShpersonAccount)
                    .HasMaxLength(50)
                    .HasColumnName("SHPersonAccount");

                entity.Property(e => e.State)
                    .HasMaxLength(50)
                    .HasColumnName("state");

                entity.Property(e => e.TreeFieldId)
                    .HasMaxLength(50)
                    .HasColumnName("TreeFieldID");

                entity.Property(e => e.TreeFieldName).HasMaxLength(50);

                entity.Property(e => e.TreeLevel).HasMaxLength(50);

                entity.Property(e => e.WorkAreaNo).HasMaxLength(50);
            });

            modelBuilder.Entity<TccDrawingArchiveApplyDrawingDirectoryTmp>(entity =>
            {
                entity.ToTable("TCC_DrawingArchiveApply_DrawingDirectory_tmp");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyDate).HasMaxLength(50);

                entity.Property(e => e.ApplyUserLoginName).HasMaxLength(50);

                entity.Property(e => e.CompleteDate).HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasMaxLength(50);

                entity.Property(e => e.DesignPerson).HasMaxLength(50);

                entity.Property(e => e.DrawingCount).HasMaxLength(50);

                entity.Property(e => e.DrawingName).HasMaxLength(100);

                entity.Property(e => e.DrawingNo).HasMaxLength(50);

                entity.Property(e => e.DrawingSize).HasMaxLength(50);

                entity.Property(e => e.DrawingVersion).HasMaxLength(50);

                entity.Property(e => e.DrawubgCountA1).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.Jhperson)
                    .HasMaxLength(50)
                    .HasColumnName("JHPerson");

                entity.Property(e => e.MajorId)
                    .HasMaxLength(50)
                    .HasColumnName("MajorID");

                entity.Property(e => e.ParentId).HasColumnName("ParentID");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.Sdperson)
                    .HasMaxLength(50)
                    .HasColumnName("SDPerson");

                entity.Property(e => e.Shperson)
                    .HasMaxLength(50)
                    .HasColumnName("SHPerson");

                entity.Property(e => e.Xh).HasColumnName("XH");
            });

            modelBuilder.Entity<TccDrawingArchiveApplyPressureContainer>(entity =>
            {
                entity.ToTable("TCC_DrawingArchiveApply_PressureContainer");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyDate).HasMaxLength(50);

                entity.Property(e => e.ApplyLoginUser).HasMaxLength(50);

                entity.Property(e => e.DesignDate).HasMaxLength(50);

                entity.Property(e => e.DesignPerson).HasMaxLength(50);

                entity.Property(e => e.DraftNo).HasMaxLength(50);

                entity.Property(e => e.EquCount).HasMaxLength(50);

                entity.Property(e => e.EquName).HasMaxLength(100);

                entity.Property(e => e.EquWeight).HasMaxLength(50);

                entity.Property(e => e.FormNumberFk)
                    .HasMaxLength(50)
                    .HasColumnName("FormNumber_FK");

                entity.Property(e => e.Jdperson)
                    .HasMaxLength(50)
                    .HasColumnName("JDPerson");

                entity.Property(e => e.MainbodyMt).HasMaxLength(50);

                entity.Property(e => e.Pcc)
                    .HasMaxLength(50)
                    .HasColumnName("PCC");

                entity.Property(e => e.Pckind)
                    .HasMaxLength(50)
                    .HasColumnName("PCKind");

                entity.Property(e => e.Pclevel)
                    .HasMaxLength(50)
                    .HasColumnName("PCLevel");

                entity.Property(e => e.Pcmedium)
                    .HasMaxLength(50)
                    .HasColumnName("PCMedium");

                entity.Property(e => e.Pcmpa)
                    .HasMaxLength(50)
                    .HasColumnName("PCMpa");

                entity.Property(e => e.Remark).HasColumnName("remark");

                entity.Property(e => e.Sdperson)
                    .HasMaxLength(50)
                    .HasColumnName("SDPerson");

                entity.Property(e => e.SealCount).HasMaxLength(50);

                entity.Property(e => e.Shperson)
                    .HasMaxLength(50)
                    .HasColumnName("SHPerson");

                entity.Property(e => e.Size).HasMaxLength(50);
            });

            modelBuilder.Entity<TccDrawingArchiveApplyPressureContainerTmp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_DrawingArchiveApply_PressureContainer_tmp");

                entity.Property(e => e.ApplyUserLoginName).HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasMaxLength(50);

                entity.Property(e => e.DesignDate).HasMaxLength(50);

                entity.Property(e => e.DesignPerson).HasMaxLength(50);

                entity.Property(e => e.DraftNo).HasMaxLength(50);

                entity.Property(e => e.EquCount).HasMaxLength(50);

                entity.Property(e => e.EquName).HasMaxLength(100);

                entity.Property(e => e.EquWeight).HasMaxLength(50);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Jdperson)
                    .HasMaxLength(50)
                    .HasColumnName("JDPerson");

                entity.Property(e => e.MainbodyMt).HasMaxLength(50);

                entity.Property(e => e.Pcc)
                    .HasMaxLength(50)
                    .HasColumnName("PCC");

                entity.Property(e => e.Pckind)
                    .HasMaxLength(50)
                    .HasColumnName("PCKind");

                entity.Property(e => e.Pclevel)
                    .HasMaxLength(50)
                    .HasColumnName("PCLevel");

                entity.Property(e => e.Pcmedium)
                    .HasMaxLength(50)
                    .HasColumnName("PCMedium");

                entity.Property(e => e.Pcmpa)
                    .HasMaxLength(50)
                    .HasColumnName("PCMpa");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.Remark).HasColumnName("remark");

                entity.Property(e => e.Sdperson)
                    .HasMaxLength(50)
                    .HasColumnName("SDPerson");

                entity.Property(e => e.SealCount).HasMaxLength(50);

                entity.Property(e => e.Shperson)
                    .HasMaxLength(50)
                    .HasColumnName("SHPerson");

                entity.Property(e => e.Size).HasMaxLength(50);
            });

            modelBuilder.Entity<TccDrawingArchiveApplyPressurePipe>(entity =>
            {
                entity.ToTable("TCC_DrawingArchiveApply_PressurePipe");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyDate).HasMaxLength(50);

                entity.Property(e => e.ApplyLoginUser).HasMaxLength(50);

                entity.Property(e => e.DesignDate).HasMaxLength(50);

                entity.Property(e => e.DesignPerson).HasMaxLength(50);

                entity.Property(e => e.DraftNo).HasMaxLength(200);

                entity.Property(e => e.FormNumberFk)
                    .HasMaxLength(50)
                    .HasColumnName("FormNumber_FK");

                entity.Property(e => e.Jdperson)
                    .HasMaxLength(50)
                    .HasColumnName("JDPerson");

                entity.Property(e => e.MainbodyMt).HasMaxLength(50);

                entity.Property(e => e.PipeLong).HasMaxLength(50);

                entity.Property(e => e.PipeNo).HasMaxLength(50);

                entity.Property(e => e.Ppc)
                    .HasMaxLength(50)
                    .HasColumnName("PPC");

                entity.Property(e => e.Ppkind)
                    .HasMaxLength(50)
                    .HasColumnName("PPKind");

                entity.Property(e => e.Ppmedium)
                    .HasMaxLength(50)
                    .HasColumnName("PPMedium");

                entity.Property(e => e.Ppmpa)
                    .HasMaxLength(50)
                    .HasColumnName("PPMpa");

                entity.Property(e => e.Remark).HasColumnName("remark");

                entity.Property(e => e.Sdperson)
                    .HasMaxLength(50)
                    .HasColumnName("SDPerson");

                entity.Property(e => e.SealCount).HasMaxLength(50);

                entity.Property(e => e.Shperson)
                    .HasMaxLength(50)
                    .HasColumnName("SHPerson");

                entity.Property(e => e.Size).HasMaxLength(50);
            });

            modelBuilder.Entity<TccDrawingArchiveApplyPressurePipeTmp>(entity =>
            {
                entity.ToTable("TCC_DrawingArchiveApply_PressurePipe_tmp");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyUserLoginName).HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasMaxLength(50);

                entity.Property(e => e.DesignDate).HasMaxLength(50);

                entity.Property(e => e.DesignPerson).HasMaxLength(50);

                entity.Property(e => e.DraftNo).HasMaxLength(50);

                entity.Property(e => e.Jdperson)
                    .HasMaxLength(50)
                    .HasColumnName("JDPerson");

                entity.Property(e => e.MainbodyMt).HasMaxLength(50);

                entity.Property(e => e.PipeLong).HasMaxLength(50);

                entity.Property(e => e.PipeNo).HasMaxLength(50);

                entity.Property(e => e.Ppc)
                    .HasMaxLength(50)
                    .HasColumnName("PPC");

                entity.Property(e => e.Ppkind)
                    .HasMaxLength(50)
                    .HasColumnName("PPKind");

                entity.Property(e => e.Ppmedium)
                    .HasMaxLength(50)
                    .HasColumnName("PPMedium");

                entity.Property(e => e.Ppmpa)
                    .HasMaxLength(50)
                    .HasColumnName("PPMpa");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.Remark)
                    .HasMaxLength(50)
                    .HasColumnName("remark");

                entity.Property(e => e.Sdperson)
                    .HasMaxLength(50)
                    .HasColumnName("SDPerson");

                entity.Property(e => e.Shperson)
                    .HasMaxLength(50)
                    .HasColumnName("SHPerson");

                entity.Property(e => e.Size).HasMaxLength(50);
            });

            modelBuilder.Entity<TccDriverOverTime>(entity =>
            {
                entity.ToTable("TCC_DriverOverTime");

                entity.HasIndex(e => new { e.ProcessName, e.Incident }, "IX_TCC_DriverOverTime");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AllSum)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("allSum");

                entity.Property(e => e.ApplyDept).HasMaxLength(50);

                entity.Property(e => e.ApplyDeptNo).HasMaxLength(50);

                entity.Property(e => e.ApplyLoginUser).HasMaxLength(50);

                entity.Property(e => e.ApplyName).HasMaxLength(50);

                entity.Property(e => e.ApplyPhone).HasMaxLength(50);

                entity.Property(e => e.BussinessCard).HasMaxLength(50);

                entity.Property(e => e.ConfirmFinaceDate).HasMaxLength(50);

                entity.Property(e => e.ConfirmFinaceLoginName).HasMaxLength(20);

                entity.Property(e => e.ConfirmFinaceName).HasMaxLength(50);

                entity.Property(e => e.ConfirmFinaceUserIdentity).HasMaxLength(20);

                entity.Property(e => e.ConfirmStatus).HasMaxLength(10);

                entity.Property(e => e.FinanceAultierDate).HasMaxLength(50);

                entity.Property(e => e.FinanceAultierLoginName).HasMaxLength(50);

                entity.Property(e => e.FinanceAultierName).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.OthercompanySum)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("othercompanySum");

                entity.Property(e => e.OwncompanySum)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("owncompanySum");

                entity.Property(e => e.PayBankCode).HasMaxLength(50);

                entity.Property(e => e.PayBankName).HasMaxLength(100);

                entity.Property(e => e.PayCheque).HasMaxLength(50);

                entity.Property(e => e.PayMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PaymentType).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");

                entity.Property(e => e.RequestUserIdentity)
                    .HasMaxLength(20)
                    .HasColumnName("Request_UserIdentity");

                entity.Property(e => e.TimeMonth).HasMaxLength(50);

                entity.Property(e => e.Transactor)
                    .HasMaxLength(200)
                    .HasColumnName("transactor");

                entity.Property(e => e.Voucherid).HasColumnName("VOUCHERID");
            });

            modelBuilder.Entity<TccDriversInfo>(entity =>
            {
                entity.ToTable("TCC_DriversInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CarNumber).HasMaxLength(50);

                entity.Property(e => e.CarType).HasMaxLength(50);

                entity.Property(e => e.ContratBelong).HasMaxLength(50);

                entity.Property(e => e.DriverName).HasMaxLength(50);

                entity.Property(e => e.DriverPhone).HasMaxLength(50);

                entity.Property(e => e.Factor).HasDefaultValueSql("((5))");

                entity.Property(e => e.PlanEndTime).HasColumnType("datetime");

                entity.Property(e => e.PlanStartTime).HasColumnType("datetime");

                entity.Property(e => e.UserKey).HasMaxLength(50);

                entity.Property(e => e.VehicleBong).HasMaxLength(50);

                entity.Property(e => e.VehicleUseCom).HasMaxLength(50);
            });

            modelBuilder.Entity<TccEarlywarning>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_Earlywarning");

                entity.Property(e => e.GrtLtCode).HasMaxLength(500);

                entity.Property(e => e.MessageName)
                    .HasMaxLength(500)
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("创建时间");

                entity.Property(e => e.MsgTitle).HasMaxLength(2000);

                entity.Property(e => e.ReceiveUser)
                    .HasMaxLength(500)
                    .HasDefaultValueSql("((0))")
                    .HasComment("是否发送  1 是  2 否");

                entity.Property(e => e.Thirdpartyid)
                    .HasMaxLength(500)
                    .HasColumnName("thirdpartyid")
                    .HasComment("发送时间");

                entity.Property(e => e.Title)
                    .HasMaxLength(2000)
                    .HasColumnName("title");
            });

            modelBuilder.Entity<TccEmployeeCheckScore>(entity =>
            {
                entity.ToTable("TCC_Employee_CheckScore");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CheckId)
                    .HasMaxLength(50)
                    .HasColumnName("CheckID");

                entity.Property(e => e.CheckUserKey).HasMaxLength(50);

                entity.Property(e => e.ScoreId).HasColumnName("ScoreID");
            });

            modelBuilder.Entity<TccEmployeeConfigScore>(entity =>
            {
                entity.HasKey(e => e.ScoreId);

                entity.ToTable("TCC_Employee_ConfigScore");

                entity.Property(e => e.ScoreId).HasColumnName("ScoreID");

                entity.Property(e => e.ScoreGroup).HasComment("1.试用期员工考核 ；2合同期员工考核");

                entity.Property(e => e.ScoreIdinfo).HasColumnName("ScoreIDInfo");

                entity.Property(e => e.ScoreIdtitle).HasColumnName("ScoreIDTitle");

                entity.Property(e => e.ScoreIdtype)
                    .HasMaxLength(50)
                    .HasColumnName("ScoreIDType");

                entity.Property(e => e.ScoreScore).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TccEmployeeDueInfo>(entity =>
            {
                entity.ToTable("TCC_Employee_DueInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DeptNo).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProcessStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");
            });

            modelBuilder.Entity<TccEmployeePreInfo>(entity =>
            {
                entity.ToTable("TCC_Employee_PreInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BornDate).HasColumnType("datetime");

                entity.Property(e => e.CheckId)
                    .HasMaxLength(100)
                    .HasColumnName("CheckID");

                entity.Property(e => e.Degree).HasMaxLength(50);

                entity.Property(e => e.DeptNo).HasMaxLength(50);

                entity.Property(e => e.EnterDate).HasColumnType("datetime");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.GraduateYear).HasMaxLength(50);

                entity.Property(e => e.HrpId)
                    .HasMaxLength(50)
                    .HasColumnName("HrpID");

                entity.Property(e => e.HrpType).HasMaxLength(50);

                entity.Property(e => e.LoginName).HasMaxLength(50);

                entity.Property(e => e.Major).HasMaxLength(200);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProcessStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");

                entity.Property(e => e.SignYear).HasMaxLength(50);

                entity.Property(e => e.Title).HasMaxLength(50);

                entity.Property(e => e.UserKey).HasMaxLength(50);
            });

            modelBuilder.Entity<TccEmployeeStartCheck>(entity =>
            {
                entity.ToTable("TCC_Employee_StartCheck");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CheckId)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("CheckID");

                entity.Property(e => e.CheckRemark).HasMaxLength(50);

                entity.Property(e => e.CheckScore).HasDefaultValueSql("((0))");

                entity.Property(e => e.CheckType).HasComment("1,试用期员工考核 2,合同员工考核");

                entity.Property(e => e.CheckUser).HasMaxLength(50);

                entity.Property(e => e.CheckUserKey).HasMaxLength(50);
            });

            modelBuilder.Entity<TccEmployeeStartTask>(entity =>
            {
                entity.ToTable("TCC_Employee_StartTask");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Approve).HasMaxLength(50);

                entity.Property(e => e.BeginDate).HasColumnType("date");

                entity.Property(e => e.CheckDecision).HasMaxLength(50);

                entity.Property(e => e.CheckDecisionInfo).HasMaxLength(50);

                entity.Property(e => e.CheckDeptScore)
                    .HasMaxLength(50)
                    .HasComment("部门综合打分");

                entity.Property(e => e.CheckId)
                    .HasMaxLength(100)
                    .HasColumnName("CheckID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CheckScore).HasDefaultValueSql("((0))");

                entity.Property(e => e.CheckSugest).HasMaxLength(50);

                entity.Property(e => e.DeptLeader).HasMaxLength(50);

                entity.Property(e => e.DeptLeaderKey).HasMaxLength(50);

                entity.Property(e => e.DeptNo).HasMaxLength(50);

                entity.Property(e => e.EmployeeType).HasComment("1,试用期员工考核 2,合同员工考核");

                entity.Property(e => e.EndDate).HasColumnType("date");

                entity.Property(e => e.Flag)
                    .HasDefaultValueSql("((0))")
                    .HasComment("0,2,3 部门考核评审 4,人力资源部审核，5人力资源部审批,6,考核完成");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.HrpId)
                    .HasMaxLength(50)
                    .HasColumnName("HrpID");

                entity.Property(e => e.IsAgree).HasMaxLength(50);

                entity.Property(e => e.IsDelete)
                    .HasColumnName("Is_Delete")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.MainNo).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameKey).HasMaxLength(50);

                entity.Property(e => e.RequstDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Requst_Date");

                entity.Property(e => e.UserType).HasComment("1,员工 2,部门负责人");
            });

            modelBuilder.Entity<TccEntertainmentClaimHeader>(entity =>
            {
                entity.ToTable("TCC_EntertainmentClaim_header");

                entity.HasComment("招待费报销");

                entity.HasIndex(e => new { e.ProcessName, e.Incident, e.FormNumber }, "idx_TCC_EntertainmentClaim_header_i_all");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.AccountStatus)
                    .HasDefaultValueSql("((1))")
                    .HasComment("冲账状态  1=未冲账 2=已冲账");

                entity.Property(e => e.AccountSubject)
                    .HasMaxLength(50)
                    .HasComment("入账科目号");

                entity.Property(e => e.ActPayAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("实际付款金额(付款币种金额)");

                entity.Property(e => e.ActPayCurrency)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("付款币种");

                entity.Property(e => e.ActPayCurrencyName)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("付款币种名称");

                entity.Property(e => e.ActPayRate)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("实际付款汇率");

                entity.Property(e => e.Agency).HasComment("是否代办");

                entity.Property(e => e.AttachmentNum)
                    .HasDefaultValueSql("((0))")
                    .HasComment("附件张数");

                entity.Property(e => e.AuditAccountLoginName).HasMaxLength(20);

                entity.Property(e => e.AuditAccountName).HasMaxLength(20);

                entity.Property(e => e.AuditAccountUserIdentity).HasMaxLength(30);

                entity.Property(e => e.BearUnitCode)
                    .HasMaxLength(50)
                    .HasComment("借款承担单位编号");

                entity.Property(e => e.BearUnitName)
                    .HasMaxLength(200)
                    .HasComment("借款承担单位名称");

                entity.Property(e => e.BillConfirmUserLogin)
                    .HasMaxLength(50)
                    .HasComment("票据归档确认-接单会计帐号");

                entity.Property(e => e.BillConfirmUserName)
                    .HasMaxLength(50)
                    .HasComment("票据归档确认-接单会计姓名");

                entity.Property(e => e.BorrowMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("借款金额");

                entity.Property(e => e.BorrowMoneyZzj)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BorrowMoneyZZJ")
                    .HasComment("项目周转金借款余额");

                entity.Property(e => e.BorrowMoneyofRmbproject)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BorrowMoneyofRMBproject")
                    .HasComment("冲借款(折合人民币金额)");

                entity.Property(e => e.BorrowPerson)
                    .HasMaxLength(50)
                    .HasComment("借款人");

                entity.Property(e => e.BorrowPersonIdentity)
                    .HasMaxLength(50)
                    .HasComment("借款人身份证号");

                entity.Property(e => e.BorrowTypeCode)
                    .HasDefaultValueSql("((0))")
                    .HasComment("冲借款类型");

                entity.Property(e => e.BorrowTypeName)
                    .HasMaxLength(50)
                    .HasComment("冲借款类型名称");

                entity.Property(e => e.BorrowUse).HasComment("借款用途");

                entity.Property(e => e.BudgetMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("预算金额");

                entity.Property(e => e.BussinessCard).HasMaxLength(50);

                entity.Property(e => e.Bz).HasComment("标识 0代表部门借款  1代表项目借款");

                entity.Property(e => e.Cj).HasComment("是否冲借周转金");

                entity.Property(e => e.ClaimsDepartmentCode).HasMaxLength(20);

                entity.Property(e => e.ClaimsDepartmentName).HasMaxLength(20);

                entity.Property(e => e.CompanyBudgetMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CompanyRemainingBudget).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ConfirmFinaceDate).HasColumnType("datetime");

                entity.Property(e => e.ConfirmFinaceLoginName).HasMaxLength(20);

                entity.Property(e => e.ConfirmFinaceName).HasMaxLength(50);

                entity.Property(e => e.ConfirmFinaceUserIdentity).HasMaxLength(30);

                entity.Property(e => e.ConfirmStatus).HasMaxLength(50);

                entity.Property(e => e.ConlistNumbers)
                    .HasMaxLength(1000)
                    .HasComment("疑似连号票号的表单号");

                entity.Property(e => e.Currency)
                    .HasMaxLength(50)
                    .HasComment("票据币种");

                entity.Property(e => e.CurrencyName)
                    .HasMaxLength(50)
                    .HasComment("票据币种");

                entity.Property(e => e.EntertainCategory)
                    .HasMaxLength(50)
                    .HasComment("招待类型");

                entity.Property(e => e.EntertainName).HasMaxLength(50);

                entity.Property(e => e.Exchange)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("汇率");

                entity.Property(e => e.ForeignId).HasColumnName("ForeignID");

                entity.Property(e => e.ForeignText)
                    .HasMaxLength(50)
                    .HasComment("冲借外币币种");

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(20)
                    .HasComment("流程号");

                entity.Property(e => e.Fps).HasColumnName("FPS");

                entity.Property(e => e.Incident).HasComment("实例号");

                entity.Property(e => e.IsForeignBank)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'N')")
                    .HasComment("是否是外埠银行  Y  N");

                entity.Property(e => e.LinkBorrow).HasComment("关联的借款流程表单号");

                entity.Property(e => e.LinkBorrowMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("关联的借款流程表单金额和");

                entity.Property(e => e.LinkBorrowMoneyOfForeign).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LinkBorrowMoneyofproject)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("冲借款");

                entity.Property(e => e.LoanCurrency)
                    .HasMaxLength(30)
                    .HasComment("借款币种");

                entity.Property(e => e.LoanCurrencyzzj)
                    .HasMaxLength(50)
                    .HasComment("项目周转金币种");

                entity.Property(e => e.MoneyActual)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("实际报销金额");

                entity.Property(e => e.MoneyOfForeignRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MoneyOfForeignRMB");

                entity.Property(e => e.MoneyShallBig)
                    .HasMaxLength(100)
                    .HasColumnName("MoneyShall_big")
                    .HasComment("报销金额大写");

                entity.Property(e => e.MoneyShallSmall)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MoneyShall_small")
                    .HasComment("报销金额小写");

                entity.Property(e => e.NumberOfVisitor).HasMaxLength(10);

                entity.Property(e => e.OfficialCard)
                    .HasMaxLength(200)
                    .HasComment("公务卡号");

                entity.Property(e => e.PayBankCode).HasMaxLength(20);

                entity.Property(e => e.PayBankName).HasMaxLength(50);

                entity.Property(e => e.PayCheque).HasMaxLength(30);

                entity.Property(e => e.Payee)
                    .HasDefaultValueSql("((0))")
                    .HasComment("收款人  1=经办人  2=报销人");

                entity.Property(e => e.PaymentType).HasMaxLength(20);

                entity.Property(e => e.PaymentTypeText)
                    .HasMaxLength(50)
                    .HasComment("付款方式");

                entity.Property(e => e.PersonLevel)
                    .HasMaxLength(50)
                    .HasComment("被接待人的级别");

                entity.Property(e => e.ProcessFinishDate)
                    .HasColumnType("datetime")
                    .HasComment("流程结束时间");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名");

                entity.Property(e => e.ProcessStatus)
                    .HasDefaultValueSql("((0))")
                    .HasComment("流程状态  0=未完成 1=归档  2=撤销");

                entity.Property(e => e.ProjectByBranch).HasComment("是否是分公司员工报销项目归属为非北京分公司的项目  1==是");

                entity.Property(e => e.ProjectCategory).HasMaxLength(20);

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(200)
                    .HasComment("项目代号");

                entity.Property(e => e.ProjectManagerName).HasMaxLength(20);

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(200)
                    .HasComment("项目名称");

                entity.Property(e => e.ProjectOwnership)
                    .HasMaxLength(50)
                    .HasComment("项目归属");

                entity.Property(e => e.RateOfForeign).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RemainMoneyOfForeign).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RemainingBorrowMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("关联完借款流程之后剩余的借款金额");

                entity.Property(e => e.RemainingBorrowMoneyofproject)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("冲抵后余额");

                entity.Property(e => e.RemainingBudget)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("剩余预算金额");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date")
                    .HasComment("申请时间");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptCode")
                    .HasComment("申请人所在部门编号");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(200)
                    .HasColumnName("Request_DeptName")
                    .HasComment("申请人所在部门名称");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName")
                    .HasComment("申请人登录名");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName")
                    .HasComment("申请人真实姓名");

                entity.Property(e => e.RequestUserIdentity)
                    .HasMaxLength(20)
                    .HasColumnName("Request_UserIdentity");

                entity.Property(e => e.ShowPayee).HasComment("是否显示收款人  0=不显示并清空选中值  1=报销人与经办人是同一人 不需要显示但设值为经办人  2=需要显示 供经办人选择");

                entity.Property(e => e.SubjectName).HasMaxLength(50);

                entity.Property(e => e.Subjectcode).HasMaxLength(50);

                entity.Property(e => e.TheMaster).HasMaxLength(20);

                entity.Property(e => e.ToAccompany).HasMaxLength(10);

                entity.Property(e => e.Transactor)
                    .HasMaxLength(20)
                    .HasColumnName("transactor");

                entity.Property(e => e.VisaDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_DeptCode")
                    .HasComment("经办人主管部门编号");

                entity.Property(e => e.VisaDeptName)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_DeptName")
                    .HasComment("经办人主管部门名称");

                entity.Property(e => e.VisaLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_LoginName")
                    .HasComment("经办人登录账号");

                entity.Property(e => e.VisaRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_RealName")
                    .HasComment("经办人姓名");

                entity.Property(e => e.VisaUserIdentity)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_UserIdentity")
                    .HasComment("经办人身份证号");

                entity.Property(e => e.VisitorUnitName).HasMaxLength(200);

                entity.Property(e => e.Voucherid).HasColumnName("VOUCHERID");
            });

            modelBuilder.Entity<TccEntertainmentClaimHeaderTemp>(entity =>
            {
                entity.ToTable("TCC_EntertainmentClaim_header_temp");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AccountSubject).HasMaxLength(50);

                entity.Property(e => e.AuditAccountLoginName).HasMaxLength(20);

                entity.Property(e => e.AuditAccountName).HasMaxLength(20);

                entity.Property(e => e.AuditAccountUserIdentity).HasMaxLength(30);

                entity.Property(e => e.BearUnitCode).HasMaxLength(50);

                entity.Property(e => e.BearUnitName).HasMaxLength(200);

                entity.Property(e => e.BillConfirmUserLogin)
                    .HasMaxLength(50)
                    .HasComment("票据归档确认-接单会计帐号");

                entity.Property(e => e.BillConfirmUserName)
                    .HasMaxLength(50)
                    .HasComment("票据归档确认-接单会计姓名");

                entity.Property(e => e.BorrowMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BorrowMoneyZzj)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BorrowMoneyZZJ");

                entity.Property(e => e.BorrowMoneyofRmbproject)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BorrowMoneyofRMBproject");

                entity.Property(e => e.BorrowPerson).HasMaxLength(50);

                entity.Property(e => e.BorrowPersonIdentity).HasMaxLength(50);

                entity.Property(e => e.BorrowTypeName).HasMaxLength(50);

                entity.Property(e => e.BudgetMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BussinessCard).HasMaxLength(50);

                entity.Property(e => e.ClaimsDepartmentCode).HasMaxLength(20);

                entity.Property(e => e.ClaimsDepartmentName).HasMaxLength(20);

                entity.Property(e => e.CompanyBudgetMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CompanyRemainingBudget).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ConfirmFinaceDate).HasColumnType("datetime");

                entity.Property(e => e.ConfirmFinaceLoginName).HasMaxLength(20);

                entity.Property(e => e.ConfirmFinaceName).HasMaxLength(50);

                entity.Property(e => e.ConfirmFinaceUserIdentity).HasMaxLength(30);

                entity.Property(e => e.ConfirmStatus).HasMaxLength(50);

                entity.Property(e => e.ConlistNumbers)
                    .HasMaxLength(1000)
                    .HasComment("疑似连号票号的表单号");

                entity.Property(e => e.Currency).HasMaxLength(50);

                entity.Property(e => e.CurrencyName).HasMaxLength(50);

                entity.Property(e => e.EntertainCategory).HasMaxLength(50);

                entity.Property(e => e.EntertainName).HasMaxLength(50);

                entity.Property(e => e.Exchange).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ForeignId).HasColumnName("ForeignID");

                entity.Property(e => e.ForeignText).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(20);

                entity.Property(e => e.Fps).HasColumnName("FPS");

                entity.Property(e => e.LinkBorrowMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LinkBorrowMoneyOfForeign).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LinkBorrowMoneyofproject).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LoanCurrency).HasMaxLength(30);

                entity.Property(e => e.LoanCurrencyzzj).HasMaxLength(50);

                entity.Property(e => e.MoneyActual).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MoneyOfForeignRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MoneyOfForeignRMB");

                entity.Property(e => e.MoneyShallBig)
                    .HasMaxLength(100)
                    .HasColumnName("MoneyShall_big");

                entity.Property(e => e.MoneyShallSmall)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MoneyShall_small");

                entity.Property(e => e.NumberOfVisitor).HasMaxLength(10);

                entity.Property(e => e.OfficialCard).HasMaxLength(200);

                entity.Property(e => e.PayBankCode).HasMaxLength(20);

                entity.Property(e => e.PayBankName).HasMaxLength(50);

                entity.Property(e => e.PayCheque).HasMaxLength(30);

                entity.Property(e => e.Payee).HasComment("收款人  1=经办人  2=报销人");

                entity.Property(e => e.PaymentType).HasMaxLength(20);

                entity.Property(e => e.PaymentTypeText).HasMaxLength(50);

                entity.Property(e => e.PersonLevel).HasMaxLength(50);

                entity.Property(e => e.ProcessFinishDate).HasColumnType("datetime");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectCategory).HasMaxLength(20);

                entity.Property(e => e.ProjectCode).HasMaxLength(200);

                entity.Property(e => e.ProjectManagerName).HasMaxLength(20);

                entity.Property(e => e.ProjectName).HasMaxLength(200);

                entity.Property(e => e.ProjectOwnership).HasMaxLength(50);

                entity.Property(e => e.RateOfForeign).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RemainMoneyOfForeign).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RemainingBorrowMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RemainingBorrowMoneyofproject).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RemainingBudget).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptCode");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(200)
                    .HasColumnName("Request_DeptName");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName");

                entity.Property(e => e.RequestUserIdentity)
                    .HasMaxLength(20)
                    .HasColumnName("Request_UserIdentity");

                entity.Property(e => e.ShowPayee).HasComment("是否显示收款人  0=不显示并清空选中值  1=报销人与经办人是同一人 不需要显示但设值为经办人  2=需要显示 供经办人选择");

                entity.Property(e => e.SubjectName).HasMaxLength(50);

                entity.Property(e => e.Subjectcode).HasMaxLength(50);

                entity.Property(e => e.TheMaster).HasMaxLength(20);

                entity.Property(e => e.ToAccompany).HasMaxLength(10);

                entity.Property(e => e.Transactor)
                    .HasMaxLength(20)
                    .HasColumnName("transactor");

                entity.Property(e => e.VisaDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_DeptCode");

                entity.Property(e => e.VisaDeptName)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_DeptName");

                entity.Property(e => e.VisaLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_LoginName");

                entity.Property(e => e.VisaRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_RealName");

                entity.Property(e => e.VisaUserIdentity)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_UserIdentity");

                entity.Property(e => e.VisitorUnitName).HasMaxLength(200);

                entity.Property(e => e.Voucherid).HasColumnName("VOUCHERID");
            });

            modelBuilder.Entity<TccExamAnswer>(entity =>
            {
                entity.ToTable("TCC_Exam_Answer");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Country).HasMaxLength(200);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.Pcode)
                    .HasMaxLength(50)
                    .HasColumnName("PCode");

                entity.Property(e => e.Qcode)
                    .HasMaxLength(50)
                    .HasColumnName("QCode");

                entity.Property(e => e.Sid)
                    .HasMaxLength(50)
                    .HasColumnName("SID");

                entity.Property(e => e.UserKey).HasMaxLength(50);

                entity.Property(e => e.UserName).HasMaxLength(50);
            });

            modelBuilder.Entity<TccExamAtt>(entity =>
            {
                entity.ToTable("TCC_Exam_Att");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AttId).HasColumnName("AttID");

                entity.Property(e => e.CreateName).HasMaxLength(50);

                entity.Property(e => e.RequsetDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Requset_Date");
            });

            modelBuilder.Entity<TccExamError>(entity =>
            {
                entity.ToTable("TCC_Exam_Error");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Qcode)
                    .HasMaxLength(50)
                    .HasColumnName("QCode");

                entity.Property(e => e.Sid)
                    .HasMaxLength(50)
                    .HasColumnName("SID");
            });

            modelBuilder.Entity<TccExamOption>(entity =>
            {
                entity.ToTable("TCC_Exam_Options");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Ocode)
                    .HasMaxLength(50)
                    .HasColumnName("OCode");

                entity.Property(e => e.Qcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("QCode");

                entity.Property(e => e.Score).HasColumnType("decimal(18, 1)");

                entity.Property(e => e.SerNum).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<TccExamPaper>(entity =>
            {
                entity.HasKey(e => e.Pcode);

                entity.ToTable("TCC_Exam_Paper");

                entity.Property(e => e.Pcode)
                    .ValueGeneratedNever()
                    .HasColumnName("PCode");

                entity.Property(e => e.Pexplain).HasColumnName("PExplain");

                entity.Property(e => e.Ptitle).HasColumnName("PTitle");
            });

            modelBuilder.Entity<TccExamQuestion>(entity =>
            {
                entity.ToTable("TCC_Exam_Question");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Pcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PCode");

                entity.Property(e => e.Qcode)
                    .HasMaxLength(50)
                    .HasColumnName("QCode");

                entity.Property(e => e.Qexplain)
                    .HasMaxLength(2000)
                    .HasColumnName("QExplain");

                entity.Property(e => e.Qtitle)
                    .HasMaxLength(1000)
                    .HasColumnName("QTitle");

                entity.Property(e => e.Qtype).HasColumnName("QType");

                entity.Property(e => e.Score).HasColumnType("decimal(18, 1)");
            });

            modelBuilder.Entity<TccExamQuestionAnswer>(entity =>
            {
                entity.ToTable("TCC_Exam_Question_Answer");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IsRight).HasDefaultValueSql("((0))");

                entity.Property(e => e.QuestionId).HasColumnName("QuestionID");
            });

            modelBuilder.Entity<TccExamQuestionInfo>(entity =>
            {
                entity.ToTable("TCC_Exam_Question_Info");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CorrectAnswer).HasMaxLength(50);
            });

            modelBuilder.Entity<TccExamQuestionResult>(entity =>
            {
                entity.ToTable("TCC_Exam_Question_Result");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DeptNo).HasMaxLength(50);

                entity.Property(e => e.LoginName).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");

                entity.Property(e => e.SubmitDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Submit_Date");
            });

            modelBuilder.Entity<TccExamScore>(entity =>
            {
                entity.ToTable("TCC_Exam_Score");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Country).HasMaxLength(200);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.Pcode).HasColumnName("PCode");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");

                entity.Property(e => e.Score).HasColumnType("decimal(18, 1)");

                entity.Property(e => e.Sid)
                    .HasMaxLength(50)
                    .HasColumnName("SID");

                entity.Property(e => e.UserKey).HasMaxLength(50);
            });

            modelBuilder.Entity<TccExpenseBudget>(entity =>
            {
                entity.ToTable("TCC_ExpenseBudget");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.Code)
                    .HasMaxLength(100)
                    .HasComment("部门编号或项目编号");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasComment("创建时间");

                entity.Property(e => e.CreateUserLoginName)
                    .HasMaxLength(200)
                    .HasComment("创建人LoginName");

                entity.Property(e => e.CreateUserRealName)
                    .HasMaxLength(200)
                    .HasComment("创建人RealName");

                entity.Property(e => e.ExpenseCategory).HasComment("费用类型ID");

                entity.Property(e => e.Flag).HasComment("标识  1 = 部门 2=项目");

                entity.Property(e => e.Money)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("预算金额");

                entity.Property(e => e.Name)
                    .HasMaxLength(200)
                    .HasComment("部门名称或项目名称");

                entity.Property(e => e.RemainMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.UpdateDate)
                    .HasColumnType("datetime")
                    .HasComment("修改时间");

                entity.Property(e => e.UpdateUserLoginName)
                    .HasMaxLength(200)
                    .HasComment("修改人LoginName");

                entity.Property(e => e.UpdateUserRealName)
                    .HasMaxLength(200)
                    .HasComment("修改人RealName");
            });

            modelBuilder.Entity<TccExpenseCategory>(entity =>
            {
                entity.ToTable("TCC_ExpenseCategory");

                entity.HasComment("费用类型表");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasComment("创建时间");

                entity.Property(e => e.CreateUserLoginName)
                    .HasMaxLength(200)
                    .HasComment("创建人LoginName");

                entity.Property(e => e.CreateUserRealName)
                    .HasMaxLength(200)
                    .HasComment("创建人RealName");

                entity.Property(e => e.ExpenseCode)
                    .HasMaxLength(100)
                    .HasComment("费用类型编号");

                entity.Property(e => e.ExpenseName)
                    .HasMaxLength(500)
                    .HasComment("费用类型名称");

                entity.Property(e => e.UpdateDate)
                    .HasColumnType("datetime")
                    .HasComment("修改时间");

                entity.Property(e => e.UpdateUserLoginName)
                    .HasMaxLength(200)
                    .HasComment("修改人LoginName");

                entity.Property(e => e.UpdateUserRealName)
                    .HasMaxLength(200)
                    .HasComment("修改人RealName");
            });

            modelBuilder.Entity<TccExpenseClaimAbroadConsolidated>(entity =>
            {
                entity.ToTable("TCC_ExpenseClaimAbroad_Consolidated");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Currency).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.Jsmoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("JSMoney")
                    .HasComment("计算币种金额");

                entity.Property(e => e.Money).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MoneyRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MoneyRMB");

                entity.Property(e => e.PaymentType).HasMaxLength(50);

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(50);
            });

            modelBuilder.Entity<TccExpenseClaimAbroadHeader>(entity =>
            {
                entity.ToTable("TCC_ExpenseClaimAbroad_header");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AbroadInfoCard)
                    .HasMaxLength(200)
                    .HasComment("境外周转金卡号");

                entity.Property(e => e.AdressLocation)
                    .HasMaxLength(50)
                    .HasComment("报销地点名称");

                entity.Property(e => e.Agency).HasComment("是否代办  1=否 2=是");

                entity.Property(e => e.AttachmentNum).HasComment("附件张数");

                entity.Property(e => e.BankAccount)
                    .HasMaxLength(200)
                    .HasComment("付款银行账号");

                entity.Property(e => e.BorrowBalance)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("冲借款金额(原币)");

                entity.Property(e => e.BorrowCurrency)
                    .HasMaxLength(50)
                    .HasComment("币种");

                entity.Property(e => e.CardYuE)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("借款余额");

                entity.Property(e => e.CardholdLogin)
                    .HasMaxLength(50)
                    .HasComment("持卡人登录名");

                entity.Property(e => e.CardholdUserIdentity)
                    .HasMaxLength(50)
                    .HasComment("持卡人身份账号");

                entity.Property(e => e.Cardholder)
                    .HasMaxLength(50)
                    .HasComment("持卡人");

                entity.Property(e => e.CardholderDept)
                    .HasMaxLength(50)
                    .HasComment("持卡人主管部门编号");

                entity.Property(e => e.CardholderDeptName)
                    .HasMaxLength(10)
                    .IsFixedLength(true)
                    .HasComment("持卡人主管部门名称");

                entity.Property(e => e.ClaimsDepartmentCode)
                    .HasMaxLength(20)
                    .HasComment("费用承担部门编号");

                entity.Property(e => e.ClaimsDepartmentName)
                    .HasMaxLength(50)
                    .HasComment("费用承担部门名称");

                entity.Property(e => e.ConfirmAuditorDate)
                    .HasColumnType("datetime")
                    .HasComment("财务业务审核时间");

                entity.Property(e => e.ConfirmAuditorLoginName)
                    .HasMaxLength(50)
                    .HasComment("财务审核人账号");

                entity.Property(e => e.ConfirmAuditorName)
                    .HasMaxLength(50)
                    .HasComment("财务审核人姓名");

                entity.Property(e => e.ConfirmAuditorUserIdentity)
                    .HasMaxLength(50)
                    .HasComment("财务审核人身份账号");

                entity.Property(e => e.ConfirmFinaceDate)
                    .HasColumnType("datetime")
                    .HasComment("财务接单时间");

                entity.Property(e => e.ConfirmFinaceName)
                    .HasMaxLength(50)
                    .HasComment("财务接单人姓名");

                entity.Property(e => e.ConfirmLoginName)
                    .HasMaxLength(50)
                    .HasComment("财务接单人账号");

                entity.Property(e => e.ConfirmUserIdentity)
                    .HasMaxLength(50)
                    .HasComment("财务接单人身份证号");

                entity.Property(e => e.Currency)
                    .HasMaxLength(50)
                    .HasComment("申领币种编号");

                entity.Property(e => e.CurrencyName)
                    .HasMaxLength(50)
                    .HasComment("申领币种名称");

                entity.Property(e => e.ExpenseCategory)
                    .HasMaxLength(20)
                    .HasComment("费用类型");

                entity.Property(e => e.FinanceAmountRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("FinanceAmountRMB")
                    .HasComment("折人民币金额");

                entity.Property(e => e.FinanceRate)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("财务：申领币种折人民币汇率");

                entity.Property(e => e.FinanceRateForCountBz)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("FinanceRateForCountBZ")
                    .HasComment("财务：申领币种折计算币种汇率");

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(50)
                    .HasComment("表单号");

                entity.Property(e => e.Incident).HasComment("实例号");

                entity.Property(e => e.IsConsolidated)
                    .HasDefaultValueSql("((1))")
                    .HasComment("是否合并报销 2是 1否");

                entity.Property(e => e.Location).HasComment("报销地点");

                entity.Property(e => e.MoneyActual)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("实报金额");

                entity.Property(e => e.MoneyShallBig)
                    .HasMaxLength(100)
                    .HasColumnName("MoneyShall_big");

                entity.Property(e => e.MoneyShallSmall)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("MoneyShall_small")
                    .HasComment("应报金额小写");

                entity.Property(e => e.PaymentMethod).HasComment("付款方式编号");

                entity.Property(e => e.PaymentType)
                    .HasMaxLength(50)
                    .HasComment("付款方式名称");

                entity.Property(e => e.PayorBank)
                    .HasMaxLength(500)
                    .HasComment("付款银行");

                entity.Property(e => e.PayorBankCode)
                    .HasMaxLength(200)
                    .HasComment("付款银行账号");

                entity.Property(e => e.ProcessFinishDate)
                    .HasColumnType("datetime")
                    .HasComment("流程结束时间");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名");

                entity.Property(e => e.ProcessStatus).HasComment("流程状态  0=未完成 1=归档  2=撤销");

                entity.Property(e => e.ProjectCategory).HasMaxLength(50);

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(200)
                    .HasComment("项目代码");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(2000)
                    .HasComment("项目名称");

                entity.Property(e => e.ReCountCurrency)
                    .HasMaxLength(50)
                    .HasComment("计算币种");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date")
                    .HasComment("申请时间");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptCode")
                    .HasComment("申请人所在部门编号");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(200)
                    .HasColumnName("Request_DeptName")
                    .HasComment("申请人所在部门名称");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName")
                    .HasComment("申请人登录名");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName")
                    .HasComment("申请人真实姓名");

                entity.Property(e => e.RequestUserIdentity)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserIdentity")
                    .HasComment("身份证号");

                entity.Property(e => e.ShenlingtoCountRate)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("申领币种折计算币种汇率");

                entity.Property(e => e.ShenlingtoRmbrate)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("ShenlingtoRMBRate")
                    .HasComment("txt_ShenlingtoRMBRate");

                entity.Property(e => e.TelPhone)
                    .HasMaxLength(50)
                    .HasComment("联系电话");

                entity.Property(e => e.TravelCategory)
                    .HasMaxLength(20)
                    .HasColumnName("Travel_Category")
                    .HasComment("出差类型");

                entity.Property(e => e.TravelCategory1)
                    .HasMaxLength(50)
                    .HasColumnName("TravelCategory");

                entity.Property(e => e.TravelClaimCategory)
                    .HasMaxLength(20)
                    .HasColumnName("Travel_ClaimCategory")
                    .HasComment("报销类型");

                entity.Property(e => e.TravelClaimDays)
                    .HasColumnName("Travel_ClaimDays")
                    .HasComment("天数");

                entity.Property(e => e.TravelDomesticOversea).HasColumnName("Travel_DomesticOversea");

                entity.Property(e => e.TravelRemark)
                    .HasColumnName("Travel_Remark")
                    .HasComment("出差事由");

                entity.Property(e => e.TravelToPlace)
                    .HasMaxLength(50)
                    .HasColumnName("Travel_ToPlace")
                    .HasComment("目的地");

                entity.Property(e => e.Voucherid)
                    .HasColumnName("VOUCHERID")
                    .HasComment("凭证编号ID");
            });

            modelBuilder.Entity<TccExpenseClaimAbroadSubsidyLine>(entity =>
            {
                entity.ToTable("TCC_ExpenseClaimAbroad_Subsidy_lines");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AbroadDays).HasComment("境外薪酬天数");

                entity.Property(e => e.AccountCurrencyValue)
                    .HasMaxLength(50)
                    .HasComment("币种对应值");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("应发金额");

                entity.Property(e => e.BeginDate)
                    .HasColumnType("datetime")
                    .HasComment("开始时间");

                entity.Property(e => e.CountMonth)
                    .HasMaxLength(20)
                    .HasComment("月份");

                entity.Property(e => e.Days).HasComment("境外连续工作时间");

                entity.Property(e => e.EndDate)
                    .HasColumnType("datetime")
                    .HasComment("结束时间");

                entity.Property(e => e.Incident).HasComment("流程实例号");

                entity.Property(e => e.KamountBx)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("KAmountBx")
                    .HasComment("扣保险金额");

                entity.Property(e => e.KamountTax)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("KAmountTax")
                    .HasComment("扣个税金额");

                entity.Property(e => e.Money)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("实发金额");

                entity.Property(e => e.MoneyRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MoneyRMB")
                    .HasComment("折人民币金额");

                entity.Property(e => e.PassportNo)
                    .HasMaxLength(200)
                    .HasComment("工作证/居住证");

                entity.Property(e => e.PersonDeptCode)
                    .HasMaxLength(50)
                    .HasComment("申请人主管部门编号");

                entity.Property(e => e.PersonDeptName)
                    .HasMaxLength(50)
                    .HasComment("申请主管部门名称");

                entity.Property(e => e.PersonLogin)
                    .HasMaxLength(50)
                    .HasComment("申请人");

                entity.Property(e => e.PersonPost).HasComment("岗位等级");

                entity.Property(e => e.PersonRealName)
                    .HasMaxLength(50)
                    .HasComment("申请人姓名");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名称");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName")
                    .HasComment("申请人账号");

                entity.Property(e => e.UserIdentity)
                    .HasMaxLength(50)
                    .HasComment("身份证号");

                entity.Property(e => e.Zsmoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ZSMoney")
                    .HasComment("折申领币种金额");
            });

            modelBuilder.Entity<TccExpenseClaimAnnualLine>(entity =>
            {
                entity.ToTable("TCC_ExpenseClaim_Annual_lines");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BusinessCard).HasMaxLength(50);

                entity.Property(e => e.CardNo).HasMaxLength(50);

                entity.Property(e => e.Category).HasColumnName("category");

                entity.Property(e => e.FaFangD).HasMaxLength(20);

                entity.Property(e => e.PostName).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ReimbursementStandard).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Salary).HasMaxLength(50);

                entity.Property(e => e.SelectDeptCode).HasMaxLength(50);

                entity.Property(e => e.SelectDeptName).HasMaxLength(50);

                entity.Property(e => e.SelectLoginName).HasMaxLength(50);

                entity.Property(e => e.SelectRealName).HasMaxLength(50);

                entity.Property(e => e.SelectUserIdentity).HasMaxLength(50);
            });

            modelBuilder.Entity<TccExpenseClaimConfigSetting>(entity =>
            {
                entity.ToTable("TCC_ExpenseClaimConfigSetting");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Allowance)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("标准");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(20)
                    .HasComment("主管部门编号");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .HasComment("主管部门名称");

                entity.Property(e => e.LoginName)
                    .HasMaxLength(20)
                    .HasComment("登录账号");

                entity.Property(e => e.RealName)
                    .HasMaxLength(50)
                    .HasComment("姓名");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .HasComment("备注");

                entity.Property(e => e.UserIdentity)
                    .HasMaxLength(50)
                    .HasComment("身份证号");
            });

            modelBuilder.Entity<TccExpenseClaimConfigSettingLog>(entity =>
            {
                entity.ToTable("TCC_ExpenseClaimConfigSettingLogs");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Category)
                    .HasMaxLength(50)
                    .HasComment("操作类型");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasComment("创建修改日期");

                entity.Property(e => e.LoginName).HasMaxLength(50);

                entity.Property(e => e.Message).HasMaxLength(3000);
            });

            modelBuilder.Entity<TccExpenseClaimDailyLine>(entity =>
            {
                entity.ToTable("TCC_ExpenseClaim_Daily_lines");

                entity.HasComment("报销流程中一般费用类型报销时报销费用明细");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.AccountSubject)
                    .HasMaxLength(50)
                    .HasComment("入账科目编号");

                entity.Property(e => e.BanquetP).HasComment("宴请地点");

                entity.Property(e => e.BillAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("票据金额");

                entity.Property(e => e.BillCode)
                    .HasMaxLength(500)
                    .HasComment("发票编号");

                entity.Property(e => e.BillTaxAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("票据税额");

                entity.Property(e => e.ByAttachment).HasMaxLength(50);

                entity.Property(e => e.Currency).HasComment("币种");

                entity.Property(e => e.ExpenseDesc)
                    .HasMaxLength(50)
                    .HasComment("报销明细 (费用明细描述)");

                entity.Property(e => e.Incident).HasComment("实例号");

                entity.Property(e => e.InvoiceCategoryText)
                    .HasMaxLength(50)
                    .HasComment("票据类型");

                entity.Property(e => e.InvoiceCategoryValue).HasComment("票据类型编号--对应字典表：TCC_BasicData     Flag=\"InvoicesCategory\"");

                entity.Property(e => e.InvoiceCode)
                    .HasMaxLength(200)
                    .HasComment("发票代码");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("datetime")
                    .HasComment("开票时间");

                entity.Property(e => e.IsCliquor)
                    .HasMaxLength(50)
                    .HasColumnName("IsCLiquor")
                    .HasComment("是否包含酒水");

                entity.Property(e => e.IsLeader)
                    .HasMaxLength(50)
                    .HasComment("是否公司领导");

                entity.Property(e => e.IsLianhao)
                    .HasDefaultValueSql("((0))")
                    .HasComment("是否疑似连号");

                entity.Property(e => e.Money)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("金额");

                entity.Property(e => e.MoneyRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MoneyRMB")
                    .HasComment("RMB 金额");

                entity.Property(e => e.NotesNumber).HasComment("票据张数");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(500)
                    .HasComment("流程名");

                entity.Property(e => e.RCreateTime)
                    .HasMaxLength(50)
                    .HasColumnName("R_CreateTime");

                entity.Property(e => e.RId)
                    .HasMaxLength(36)
                    .HasColumnName("R_ID");

                entity.Property(e => e.RName)
                    .HasMaxLength(50)
                    .HasColumnName("R_name");

                entity.Property(e => e.RTitle)
                    .HasMaxLength(50)
                    .HasColumnName("R_Title");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("汇率");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName")
                    .HasComment("申请人账号");

                entity.Property(e => e.SubjectName).HasMaxLength(500);

                entity.Property(e => e.TaxRate)
                    .HasMaxLength(50)
                    .HasComment("税率编号--对应字典表：TCC_BasicData     Flag=\"TaxRate\"");

                entity.Property(e => e.TaxRateName)
                    .HasMaxLength(50)
                    .HasComment("税率");

                entity.Property(e => e.TheMasterNumber).HasComment("主请人 人数");

                entity.Property(e => e.TheMasterWithNum)
                    .HasMaxLength(50)
                    .HasComment("主请人");

                entity.Property(e => e.TheMasterWithNumId)
                    .HasMaxLength(50)
                    .HasComment("主请人身份证号");

                entity.Property(e => e.VisitorNumber).HasComment("来客单位人数");

                entity.Property(e => e.VisitorUnitNameWithNum)
                    .HasMaxLength(200)
                    .HasComment("来客单位名称");

                entity.Property(e => e.Zdlevel)
                    .HasColumnName("ZDlevel")
                    .HasComment("招待级别");

                entity.Property(e => e.Zdstander)
                    .HasColumnName("ZDStander")
                    .HasComment("招待标准");
            });

            modelBuilder.Entity<TccExpenseClaimDailyLinesTemp>(entity =>
            {
                entity.ToTable("TCC_ExpenseClaim_Daily_lines_temp");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AccountSubject).HasMaxLength(50);

                entity.Property(e => e.BanquetP).HasComment("宴请地点");

                entity.Property(e => e.BillAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("票据金额");

                entity.Property(e => e.BillCode)
                    .HasMaxLength(500)
                    .HasComment("发票编号");

                entity.Property(e => e.BillTaxAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("票据税额");

                entity.Property(e => e.ByAttachment).HasMaxLength(50);

                entity.Property(e => e.ExpenseDesc).HasMaxLength(50);

                entity.Property(e => e.InvoiceCategoryText)
                    .HasMaxLength(50)
                    .HasComment("票据类型");

                entity.Property(e => e.InvoiceCategoryValue).HasComment("票据类型编号--对应字典表：TCC_BasicData     Flag=\"InvoicesCategory\"");

                entity.Property(e => e.InvoiceCode)
                    .HasMaxLength(200)
                    .HasComment("发票代码");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("datetime")
                    .HasComment("开票时间");

                entity.Property(e => e.IsCliquor)
                    .HasMaxLength(50)
                    .HasColumnName("IsCLiquor")
                    .HasComment("是否包含酒水");

                entity.Property(e => e.IsLeader)
                    .HasMaxLength(50)
                    .HasComment("是否公司领导");

                entity.Property(e => e.IsLianhao)
                    .HasDefaultValueSql("((0))")
                    .HasComment("是否疑似连号");

                entity.Property(e => e.Money).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MoneyRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MoneyRMB");

                entity.Property(e => e.ProcessName).HasMaxLength(500);

                entity.Property(e => e.RCreateTime)
                    .HasMaxLength(50)
                    .HasColumnName("R_CreateTime");

                entity.Property(e => e.RId)
                    .HasMaxLength(36)
                    .HasColumnName("R_ID");

                entity.Property(e => e.RName)
                    .HasMaxLength(50)
                    .HasColumnName("R_name");

                entity.Property(e => e.RTitle)
                    .HasMaxLength(50)
                    .HasColumnName("R_Title");

                entity.Property(e => e.Rate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName");

                entity.Property(e => e.SubjectName).HasMaxLength(500);

                entity.Property(e => e.TaxRate)
                    .HasMaxLength(50)
                    .HasComment("税率编号--对应字典表：TCC_BasicData     Flag=\"TaxRate\"");

                entity.Property(e => e.TaxRateName)
                    .HasMaxLength(50)
                    .HasComment("税率");

                entity.Property(e => e.TheMasterWithNum).HasMaxLength(50);

                entity.Property(e => e.TheMasterWithNumId)
                    .HasMaxLength(50)
                    .HasComment("主请人身份证号");

                entity.Property(e => e.VisitorUnitNameWithNum).HasMaxLength(200);

                entity.Property(e => e.Zdlevel)
                    .HasColumnName("ZDlevel")
                    .HasComment("招待级别");

                entity.Property(e => e.Zdstander)
                    .HasColumnName("ZDStander")
                    .HasComment("招待标准");
            });

            modelBuilder.Entity<TccExpenseClaimHeader>(entity =>
            {
                entity.ToTable("TCC_ExpenseClaim_header");

                entity.HasComment("费用报销流程主表");

                entity.HasIndex(e => new { e.ProcessName, e.Incident }, "IX_TCC_ExpenseClaim_header");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.AccountStatus)
                    .HasDefaultValueSql("((1))")
                    .HasComment("冲账状态  1=未冲账 2=已冲账");

                entity.Property(e => e.AccountSubject)
                    .HasMaxLength(50)
                    .HasComment("入账科目编号");

                entity.Property(e => e.AccountSubjectCode).HasMaxLength(20);

                entity.Property(e => e.AccountSubjectName).HasMaxLength(50);

                entity.Property(e => e.Agency).HasComment("是否代办  1=否 2=是");

                entity.Property(e => e.ApproverCount)
                    .HasDefaultValueSql("((0))")
                    .HasComment("审批记数器   每审批一个人加1");

                entity.Property(e => e.ApproverTotal)
                    .HasDefaultValueSql("((0))")
                    .HasComment("财务部节点（流程中配的用户组） 激活的总人数");

                entity.Property(e => e.BankAccount).HasMaxLength(50);

                entity.Property(e => e.BeyondReason).HasComment("超标原因");

                entity.Property(e => e.BillConfirmUserLogin)
                    .HasMaxLength(50)
                    .HasComment("票据归档确认-接单会计帐号");

                entity.Property(e => e.BillConfirmUserName)
                    .HasMaxLength(50)
                    .HasComment("票据归档确认-接单会计姓名");

                entity.Property(e => e.BorrowMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("借款金额");

                entity.Property(e => e.BussinessCard).HasMaxLength(50);

                entity.Property(e => e.ClaimsDepartmentCode)
                    .HasMaxLength(20)
                    .HasComment("一般费用报销用到的报销部门");

                entity.Property(e => e.ClaimsDepartmentCodeTravel)
                    .HasMaxLength(20)
                    .HasColumnName("ClaimsDepartmentCode_Travel")
                    .HasComment("差旅费报销用到的报销部门");

                entity.Property(e => e.ClaimsDepartmentName)
                    .HasMaxLength(20)
                    .HasComment("一般费用报销用到的报销部门");

                entity.Property(e => e.ClaimsDepartmentNameTravel)
                    .HasMaxLength(20)
                    .HasColumnName("ClaimsDepartmentName_Travel")
                    .HasComment("差旅费报销用到的报销部门");

                entity.Property(e => e.ConfirmAuditorDate).HasColumnType("datetime");

                entity.Property(e => e.ConfirmAuditorLoginName).HasMaxLength(50);

                entity.Property(e => e.ConfirmAuditorName).HasMaxLength(50);

                entity.Property(e => e.ConfirmAuditorUserIdentity).HasMaxLength(50);

                entity.Property(e => e.ConfirmFinaceDate).HasColumnType("datetime");

                entity.Property(e => e.ConfirmFinaceName).HasMaxLength(50);

                entity.Property(e => e.ConfirmLoginName).HasMaxLength(50);

                entity.Property(e => e.ConfirmStatus)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ConfirmUserIdentity).HasMaxLength(50);

                entity.Property(e => e.DailyAttachmentNum)
                    .HasColumnName("Daily_AttachmentNum")
                    .HasDefaultValueSql("((0))")
                    .HasComment("附件张数");

                entity.Property(e => e.DailyBudgetMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Daily_BudgetMoney")
                    .HasComment("预算金额");

                entity.Property(e => e.DailyRemainingBudget)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Daily_RemainingBudget")
                    .HasComment("剩余预算");

                entity.Property(e => e.ExpenseCategory)
                    .HasMaxLength(20)
                    .HasComment("费用类型");

                entity.Property(e => e.ExpenseName).HasMaxLength(50);

                entity.Property(e => e.ForeignId).HasColumnName("ForeignID");

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(50)
                    .HasComment("流程号");

                entity.Property(e => e.IfNotProject).HasMaxLength(20);

                entity.Property(e => e.Incident).HasComment("实例号");

                entity.Property(e => e.IsBeyond)
                    .HasDefaultValueSql("((0))")
                    .HasComment("是否超标  1=是  2=否");

                entity.Property(e => e.IsExtendred).HasComment("是否有超期补贴");

                entity.Property(e => e.IsTianjinRegion)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'N')")
                    .HasComment("是否是天津所辖区域出差 N 否  Y是");

                entity.Property(e => e.IsTjSideTravel)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'N')")
                    .HasComment("是否是出发地为天津，目的地为天津边缘地区出差  N否  Y是");

                entity.Property(e => e.LinkBorrow).HasComment("关联的借款流程表单号");

                entity.Property(e => e.LinkBorrowMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("关联借款流程的金额和");

                entity.Property(e => e.LinkBorrowMoneyOfForeign).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LinkBusinessTrip).HasMaxLength(50);

                entity.Property(e => e.LoanAccountingUnit)
                    .HasMaxLength(50)
                    .HasComment("借款核算单位编号");

                entity.Property(e => e.LoanAccountingUnitName)
                    .HasMaxLength(500)
                    .HasComment("借款核算单位名称");

                entity.Property(e => e.LoanCurrency)
                    .HasMaxLength(50)
                    .HasComment("借款币种");

                entity.Property(e => e.Location).HasComment("报销地点  1=天津 2=北京");

                entity.Property(e => e.MoneyActual)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("实报金额");

                entity.Property(e => e.MoneyOfForeignRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MoneyOfForeignRMB");

                entity.Property(e => e.MoneyShallBig)
                    .HasMaxLength(100)
                    .HasColumnName("MoneyShall_big")
                    .HasComment("应报金额大写");

                entity.Property(e => e.MoneyShallSmall)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("MoneyShall_small")
                    .HasComment("应报金额小写");

                entity.Property(e => e.OfficialCard)
                    .HasMaxLength(200)
                    .HasComment("中行公务卡号");

                entity.Property(e => e.Payee).HasComment("收款人  1=经办人  2=报销人");

                entity.Property(e => e.PaymentType).HasMaxLength(50);

                entity.Property(e => e.PayorBank).HasMaxLength(50);

                entity.Property(e => e.PayorBankCode).HasMaxLength(50);

                entity.Property(e => e.ProcessFinishDate)
                    .HasColumnType("datetime")
                    .HasComment("流程结束时间");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名");

                entity.Property(e => e.ProcessStatus)
                    .HasDefaultValueSql("((0))")
                    .HasComment("流程状态  0=未完成 1=归档  2=撤销");

                entity.Property(e => e.ProjectByBranch).HasComment("是否是分公司员工项目报销  1==是");

                entity.Property(e => e.ProjectCategory).HasMaxLength(50);

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(200)
                    .HasComment("项目代码");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(200)
                    .HasComment("项目名称");

                entity.Property(e => e.ProjectOwnership)
                    .HasMaxLength(50)
                    .HasComment("项目归属");

                entity.Property(e => e.RateOfForeign).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RemainMoneyOfForeign).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RemainingBorrowMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("财务选完冲账金额后剩余的借款金额");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date")
                    .HasComment("申请时间");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptCode")
                    .HasComment("申请人所在部门编号");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(200)
                    .HasColumnName("Request_DeptName")
                    .HasComment("申请人所在部门名称");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName")
                    .HasComment("申请人登录名");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName")
                    .HasComment("申请人真实姓名");

                entity.Property(e => e.RequestUserIdentity)
                    .HasMaxLength(20)
                    .HasColumnName("Request_UserIdentity");

                entity.Property(e => e.ShowPayee).HasComment("是否显示收款人  0=不显示并清空选中值  1=报销人与经办人是同一人 不需要显示但设值为经办人  2=需要显示 供经办人选择");

                entity.Property(e => e.SpecialOptions).HasComment("特殊选项 0=无 1=只报补助 2=不报补助");

                entity.Property(e => e.TelPhone).HasMaxLength(50);

                entity.Property(e => e.TotalExpense)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("总计");

                entity.Property(e => e.Transactor)
                    .HasMaxLength(50)
                    .HasColumnName("transactor");

                entity.Property(e => e.TravelCategory)
                    .HasMaxLength(20)
                    .HasColumnName("Travel_Category")
                    .HasComment("出差类型");

                entity.Property(e => e.TravelClaimCategory)
                    .HasMaxLength(20)
                    .HasColumnName("Travel_ClaimCategory")
                    .HasComment("报销类型");

                entity.Property(e => e.TravelClaimDays)
                    .HasColumnName("Travel_ClaimDays")
                    .HasComment("报销天数");

                entity.Property(e => e.TravelClaimPersons)
                    .HasColumnName("Travel_ClaimPersons")
                    .HasComment("报销人数");

                entity.Property(e => e.TravelDomesticOversea)
                    .HasColumnName("Travel_DomesticOversea")
                    .HasComment("境内或境外  1=境内 2=境外");

                entity.Property(e => e.TravelRemark)
                    .HasColumnName("Travel_Remark")
                    .HasComment("原因");

                entity.Property(e => e.TravelToPlace)
                    .HasMaxLength(100)
                    .HasColumnName("Travel_ToPlace")
                    .HasComment("目的地");

                entity.Property(e => e.TravelTotalAirPlane)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Travel_TotalAirPlane")
                    .HasComment("飞机金额小计");

                entity.Property(e => e.TravelTotalBooking)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Travel_TotalBooking")
                    .HasComment("订票费小计");

                entity.Property(e => e.TravelTotalHotel)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Travel_TotalHotel")
                    .HasComment("住宿费小计");

                entity.Property(e => e.TravelTotalLongTrip)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Travel_TotalLongTrip")
                    .HasComment("长途汽车金额小计");

                entity.Property(e => e.TravelTotalOther)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Travel_TotalOther")
                    .HasComment("其它费用小计");

                entity.Property(e => e.TravelTotalSteamShip)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Travel_TotalSteamShip")
                    .HasComment("轮船金额小计");

                entity.Property(e => e.TravelTotalTraffic)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Travel_TotalTraffic")
                    .HasComment("交通费小计");

                entity.Property(e => e.TravelTotalTrain)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Travel_TotalTrain")
                    .HasComment("火车金额小计");

                entity.Property(e => e.Voucherid).HasColumnName("VOUCHERID");
            });

            modelBuilder.Entity<TccExpenseClaimHeaderTemp>(entity =>
            {
                entity.ToTable("TCC_ExpenseClaim_header_Temp");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AccountSubject).HasMaxLength(50);

                entity.Property(e => e.AccountSubjectCode).HasMaxLength(20);

                entity.Property(e => e.AccountSubjectName).HasMaxLength(50);

                entity.Property(e => e.BankAccount).HasMaxLength(50);

                entity.Property(e => e.BillConfirmUserLogin)
                    .HasMaxLength(50)
                    .HasComment("票据归档确认-接单会计帐号");

                entity.Property(e => e.BillConfirmUserName)
                    .HasMaxLength(50)
                    .HasComment("票据归档确认-接单会计姓名");

                entity.Property(e => e.BorrowMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BussinessCard).HasMaxLength(50);

                entity.Property(e => e.ClaimsDepartmentCode).HasMaxLength(20);

                entity.Property(e => e.ClaimsDepartmentCodeTravel)
                    .HasMaxLength(20)
                    .HasColumnName("ClaimsDepartmentCode_Travel");

                entity.Property(e => e.ClaimsDepartmentName).HasMaxLength(20);

                entity.Property(e => e.ClaimsDepartmentNameTravel)
                    .HasMaxLength(20)
                    .HasColumnName("ClaimsDepartmentName_Travel");

                entity.Property(e => e.ConfirmAuditorDate).HasColumnType("datetime");

                entity.Property(e => e.ConfirmAuditorLoginName).HasMaxLength(50);

                entity.Property(e => e.ConfirmAuditorName).HasMaxLength(50);

                entity.Property(e => e.ConfirmAuditorUserIdentity).HasMaxLength(50);

                entity.Property(e => e.ConfirmFinaceDate).HasColumnType("datetime");

                entity.Property(e => e.ConfirmFinaceName).HasMaxLength(50);

                entity.Property(e => e.ConfirmLoginName).HasMaxLength(50);

                entity.Property(e => e.ConfirmStatus)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ConfirmUserIdentity).HasMaxLength(50);

                entity.Property(e => e.DailyAttachmentNum).HasColumnName("Daily_AttachmentNum");

                entity.Property(e => e.DailyBudgetMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Daily_BudgetMoney");

                entity.Property(e => e.DailyRemainingBudget)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Daily_RemainingBudget");

                entity.Property(e => e.ExpenseCategory).HasMaxLength(20);

                entity.Property(e => e.ExpenseName).HasMaxLength(50);

                entity.Property(e => e.ForeignId).HasColumnName("ForeignID");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.IfNotProject).HasMaxLength(20);

                entity.Property(e => e.IsTianjinRegion)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'N')")
                    .HasComment("是否是天津所辖区域出差 N 否  Y是");

                entity.Property(e => e.IsTjSideTravel)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'N')")
                    .HasComment("是否是出发地为天津，目的地为天津边缘地区出差  N否  Y是");

                entity.Property(e => e.LinkBorrowMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LinkBorrowMoneyOfForeign).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LinkBusinessTrip).HasMaxLength(50);

                entity.Property(e => e.LoanAccountingUnit).HasMaxLength(50);

                entity.Property(e => e.LoanAccountingUnitName).HasMaxLength(500);

                entity.Property(e => e.LoanCurrency).HasMaxLength(50);

                entity.Property(e => e.MoneyActual).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.MoneyOfForeignRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MoneyOfForeignRMB");

                entity.Property(e => e.MoneyShallBig)
                    .HasMaxLength(100)
                    .HasColumnName("MoneyShall_big");

                entity.Property(e => e.MoneyShallSmall)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("MoneyShall_small");

                entity.Property(e => e.OfficialCard).HasMaxLength(200);

                entity.Property(e => e.PaymentType).HasMaxLength(50);

                entity.Property(e => e.PayorBank).HasMaxLength(50);

                entity.Property(e => e.PayorBankCode).HasMaxLength(50);

                entity.Property(e => e.ProcessFinishDate).HasColumnType("datetime");

                entity.Property(e => e.ProcessName).HasMaxLength(500);

                entity.Property(e => e.ProjectCategory).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(200);

                entity.Property(e => e.ProjectName).HasMaxLength(200);

                entity.Property(e => e.ProjectOwnership).HasMaxLength(50);

                entity.Property(e => e.RateOfForeign).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RemainMoneyOfForeign).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RemainingBorrowMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptCode");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(200)
                    .HasColumnName("Request_DeptName");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName");

                entity.Property(e => e.RequestUserIdentity)
                    .HasMaxLength(20)
                    .HasColumnName("Request_UserIdentity");

                entity.Property(e => e.TelPhone).HasMaxLength(50);

                entity.Property(e => e.TotalExpense).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Transactor)
                    .HasMaxLength(50)
                    .HasColumnName("transactor");

                entity.Property(e => e.TravelCategory)
                    .HasMaxLength(20)
                    .HasColumnName("Travel_Category");

                entity.Property(e => e.TravelClaimCategory)
                    .HasMaxLength(20)
                    .HasColumnName("Travel_ClaimCategory");

                entity.Property(e => e.TravelClaimDays).HasColumnName("Travel_ClaimDays");

                entity.Property(e => e.TravelClaimPersons).HasColumnName("Travel_ClaimPersons");

                entity.Property(e => e.TravelDomesticOversea).HasColumnName("Travel_DomesticOversea");

                entity.Property(e => e.TravelRemark).HasColumnName("Travel_Remark");

                entity.Property(e => e.TravelToPlace)
                    .HasMaxLength(100)
                    .HasColumnName("Travel_ToPlace");

                entity.Property(e => e.TravelTotalAirPlane)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Travel_TotalAirPlane");

                entity.Property(e => e.TravelTotalBooking)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Travel_TotalBooking");

                entity.Property(e => e.TravelTotalHotel)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Travel_TotalHotel");

                entity.Property(e => e.TravelTotalLongTrip)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Travel_TotalLongTrip");

                entity.Property(e => e.TravelTotalOther)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Travel_TotalOther");

                entity.Property(e => e.TravelTotalSteamShip)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Travel_TotalSteamShip");

                entity.Property(e => e.TravelTotalTraffic)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Travel_TotalTraffic");

                entity.Property(e => e.TravelTotalTrain)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Travel_TotalTrain");

                entity.Property(e => e.Voucherid).HasColumnName("VOUCHERID");
            });

            modelBuilder.Entity<TccExpenseClaimSpecialDetail>(entity =>
            {
                entity.ToTable("TCC_ExpenseClaimSpecialDetails");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("申请金额");

                entity.Property(e => e.ApplyPerson)
                    .HasMaxLength(50)
                    .HasComment("申请人姓名");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .HasComment("申请人主管部门");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .HasComment("申请人主管部门");

                entity.Property(e => e.Incident).HasComment("流程实例号");

                entity.Property(e => e.Pid)
                    .HasColumnName("PID")
                    .HasComment("外键");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName")
                    .HasComment("申请人登录名");

                entity.Property(e => e.UserIdentity)
                    .HasMaxLength(50)
                    .HasComment("申请人身份证号");
            });

            modelBuilder.Entity<TccExpenseClaimSpecialHeader>(entity =>
            {
                entity.ToTable("TCC_ExpenseClaimSpecialHeader");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AttachmentNum).HasComment("附件张数");

                entity.Property(e => e.BankAccount)
                    .HasMaxLength(50)
                    .HasComment("银行账号");

                entity.Property(e => e.ClaimsDepartmentCode)
                    .HasMaxLength(50)
                    .HasComment("费用承担部门编号");

                entity.Property(e => e.ClaimsDepartmentName)
                    .HasMaxLength(50)
                    .HasComment("费用承担部门名称");

                entity.Property(e => e.ConfirmAuditDate)
                    .HasColumnType("datetime")
                    .HasComment("财务业务审核确认时间");

                entity.Property(e => e.ConfirmAuditLoginName)
                    .HasMaxLength(50)
                    .HasComment("财务业务审核人登录名");

                entity.Property(e => e.ConfirmAuditName)
                    .HasMaxLength(50)
                    .HasComment("财务业务审核人姓名");

                entity.Property(e => e.ConfirmAuditUserIdentity)
                    .HasMaxLength(50)
                    .HasComment("财务业务审核人身份证号");

                entity.Property(e => e.ConfirmFinaceDate)
                    .HasColumnType("datetime")
                    .HasComment("财务接单人确认时间");

                entity.Property(e => e.ConfirmFinaceLoginName)
                    .HasMaxLength(50)
                    .HasComment("财务接单人登录名");

                entity.Property(e => e.ConfirmFinaceName)
                    .HasMaxLength(50)
                    .HasComment("财务接单人姓名");

                entity.Property(e => e.ConfirmFinaceUserIdentity)
                    .HasMaxLength(50)
                    .HasComment("财务接单人身份证号");

                entity.Property(e => e.ConfirmStatus)
                    .HasDefaultValueSql("((2))")
                    .HasComment("是否已付款  2未付款  1已付款");

                entity.Property(e => e.ExpenseType)
                    .HasMaxLength(50)
                    .HasComment("费用类型");

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(50)
                    .HasComment("表单号");

                entity.Property(e => e.Incident).HasComment("流程实例号");

                entity.Property(e => e.Location).HasComment("报销地点：1:天津");

                entity.Property(e => e.MoneyActual)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("实报金额");

                entity.Property(e => e.MoneyActualYb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MoneyActual_YB")
                    .HasComment("实报原币金额");

                entity.Property(e => e.MoneyShallBig)
                    .HasMaxLength(50)
                    .HasColumnName("MoneyShall_big")
                    .HasComment("报销金额大写");

                entity.Property(e => e.MoneyShallSmall)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MoneyShall_small")
                    .HasComment("报销金额");

                entity.Property(e => e.MoneyShallYb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MoneyShall_YB")
                    .HasComment("报销原币金额");

                entity.Property(e => e.PaymentMethod).HasComment("付款方式编号");

                entity.Property(e => e.PaymentType)
                    .HasMaxLength(50)
                    .HasComment("付款方式名称");

                entity.Property(e => e.PayorBank)
                    .HasMaxLength(200)
                    .HasComment("付款银行");

                entity.Property(e => e.PayorBankCode)
                    .HasMaxLength(50)
                    .HasComment("付款银行编号");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名");

                entity.Property(e => e.ProcessStatus).HasComment("流程状态：0进行中 1已完成 2已撤销");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .HasComment("备注");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date")
                    .HasComment("流程申请时间");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(10)
                    .HasColumnName("Request_DeptCode")
                    .HasComment("申请人的主管部门编号");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptName")
                    .HasComment("申请人的主管部门名称");

                entity.Property(e => e.RequestFinishDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_FinishDate")
                    .HasComment("流程结束时间");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName")
                    .HasComment("申请人登录名");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName")
                    .HasComment("申请人姓名");

                entity.Property(e => e.RequestTelPhone)
                    .HasMaxLength(100)
                    .HasColumnName("Request_TelPhone")
                    .HasComment("申请人联系方式");

                entity.Property(e => e.RequestUserIdentity)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserIdentity")
                    .HasComment("申请人身份证号");

                entity.Property(e => e.RequestUserPost)
                    .HasMaxLength(10)
                    .HasColumnName("Request_UserPost")
                    .HasComment("申请人岗位等级");

                entity.Property(e => e.Voucherid)
                    .HasColumnName("VOUCHERID")
                    .HasComment("对应凭证ID号");
            });

            modelBuilder.Entity<TccExpenseClaimSubsidyLine>(entity =>
            {
                entity.ToTable("TCC_ExpenseClaim_Subsidy_lines");

                entity.HasComment("报销流程中差旅费报销类型下补助明细");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.Allowance)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("补贴");

                entity.Property(e => e.BeginDate)
                    .HasColumnType("datetime")
                    .HasComment("开始时间");

                entity.Property(e => e.Days).HasComment("每个人的天数");

                entity.Property(e => e.EndDate)
                    .HasColumnType("datetime")
                    .HasComment("结束时间");

                entity.Property(e => e.ExtendedDays).HasComment("超期天数");

                entity.Property(e => e.Extendedsubsidies)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("超期补贴");

                entity.Property(e => e.Incident).HasComment("实例号");

                entity.Property(e => e.PersonDeptCode)
                    .HasMaxLength(50)
                    .HasComment("人员部门编号");

                entity.Property(e => e.PersonDeptName)
                    .HasMaxLength(200)
                    .HasComment("人员部门名称");

                entity.Property(e => e.PersonLogin)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("人员登录名");

                entity.Property(e => e.PersonPost)
                    .HasMaxLength(200)
                    .HasComment("人员岗位等级");

                entity.Property(e => e.PersonRealName)
                    .HasMaxLength(50)
                    .HasComment("人员真实姓名");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(500)
                    .HasComment("流程名称");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName")
                    .HasComment("申请人账号");

                entity.Property(e => e.StartLocation).HasMaxLength(2000);

                entity.Property(e => e.Subsidies)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("每人天补助标准");

                entity.Property(e => e.SubsidyFood)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("伙食补贴");

                entity.Property(e => e.SubsidyLocale)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("现场补贴");

                entity.Property(e => e.SubsidySpecial)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("特殊补贴");

                entity.Property(e => e.SubsidySundries)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("公杂补贴");

                entity.Property(e => e.SubsidyTravel)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("差旅补贴");

                entity.Property(e => e.UserIdentity)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("身份证号");
            });

            modelBuilder.Entity<TccExpenseClaimSubsidyLinesTemp>(entity =>
            {
                entity.ToTable("TCC_ExpenseClaim_Subsidy_lines_Temp");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Allowance).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BeginDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Extendedsubsidies).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PersonDeptCode).HasMaxLength(50);

                entity.Property(e => e.PersonDeptName).HasMaxLength(200);

                entity.Property(e => e.PersonLogin).HasMaxLength(50);

                entity.Property(e => e.PersonPost).HasMaxLength(200);

                entity.Property(e => e.PersonRealName).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(500);

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName");

                entity.Property(e => e.StartLocation).HasMaxLength(2000);

                entity.Property(e => e.Subsidies).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SubsidyFood).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SubsidyLocale).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SubsidySpecial).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SubsidySundries).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SubsidyTravel).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.UserIdentity)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TccExpenseClaimTravelLine>(entity =>
            {
                entity.ToTable("TCC_ExpenseClaim_Travel_lines");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AdjustAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("调减金额");

                entity.Property(e => e.AfterAdjustAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("调减后金额");

                entity.Property(e => e.Beyond)
                    .HasMaxLength(50)
                    .HasComment("是否超标   Y=超标 N=未超标");

                entity.Property(e => e.BillAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("票据金额");

                entity.Property(e => e.BillCode)
                    .HasMaxLength(500)
                    .HasComment("发票编号");

                entity.Property(e => e.BillTaxAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("票据税额");

                entity.Property(e => e.BillType).HasMaxLength(20);

                entity.Property(e => e.ByAttachment).HasMaxLength(50);

                entity.Property(e => e.Category)
                    .HasMaxLength(50)
                    .HasComment("用于标识明细类型    Travel=交通费  Hotel = 住宿费   Other = 其它");

                entity.Property(e => e.Currency).HasMaxLength(20);

                entity.Property(e => e.Days).HasComment("天数");

                entity.Property(e => e.FromDate).HasColumnType("datetime");

                entity.Property(e => e.FromPlace).HasMaxLength(200);

                entity.Property(e => e.InvoiceCategoryText)
                    .HasMaxLength(50)
                    .HasComment("票据类型");

                entity.Property(e => e.InvoiceCategoryValue).HasComment("票据类型编号--对应字典表：TCC_BasicData     Flag=\"InvoicesCategory\"");

                entity.Property(e => e.InvoiceCode)
                    .HasMaxLength(200)
                    .HasComment("发票代码");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("datetime")
                    .HasComment("开票时间");

                entity.Property(e => e.IsCollected)
                    .HasMaxLength(50)
                    .HasComment("是否集采");

                entity.Property(e => e.Money).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MoneyRmb)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("MoneyRMB");

                entity.Property(e => e.ProcessName).HasMaxLength(500);

                entity.Property(e => e.RCreateTime)
                    .HasMaxLength(50)
                    .HasColumnName("R_CreateTime");

                entity.Property(e => e.RId)
                    .HasMaxLength(36)
                    .HasColumnName("R_ID");

                entity.Property(e => e.RName)
                    .HasMaxLength(50)
                    .HasColumnName("R_name");

                entity.Property(e => e.RTitle)
                    .HasMaxLength(50)
                    .HasColumnName("R_Title");

                entity.Property(e => e.Rate).HasMaxLength(20);

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName")
                    .HasComment("申请人账号");

                entity.Property(e => e.StrokeNumber)
                    .HasMaxLength(200)
                    .HasComment("行程单号");

                entity.Property(e => e.TaxRate)
                    .HasMaxLength(50)
                    .HasComment("税率编号--对应字典表：TCC_BasicData     Flag=\"TaxRate\"");

                entity.Property(e => e.TaxRateName)
                    .HasMaxLength(50)
                    .HasComment("税率");

                entity.Property(e => e.TicketingCompany)
                    .HasMaxLength(200)
                    .HasComment("票务公司");

                entity.Property(e => e.ToDate).HasColumnType("datetime");

                entity.Property(e => e.ToPlace).HasMaxLength(200);

                entity.Property(e => e.TravelingCode)
                    .HasMaxLength(50)
                    .HasComment("nvarchar(50)");

                entity.Property(e => e.TravellingCompany)
                    .HasMaxLength(100)
                    .HasComment("航空公司名称");

                entity.Property(e => e.TravellingGrade)
                    .HasMaxLength(50)
                    .HasComment("座位等级");

                entity.Property(e => e.TravellingIsTaxPayable)
                    .HasMaxLength(50)
                    .HasComment("是否计税");

                entity.Property(e => e.TravellingMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("nvarchar(50)");

                entity.Property(e => e.TravellingNumber)
                    .HasMaxLength(50)
                    .HasComment("航班号/火车车次");

                entity.Property(e => e.TravellingPeople)
                    .HasMaxLength(50)
                    .HasComment("出行人");

                entity.Property(e => e.TravellingSurcharge)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("decimal(18, 2)");

                entity.Property(e => e.TravellingTypeCode).HasComment("航程类型（1:国内 2:国际）");

                entity.Property(e => e.TravellingTypeName)
                    .HasMaxLength(50)
                    .HasComment("航程类型（国内/国际）");
            });

            modelBuilder.Entity<TccExpenseClaimTravelLinesTemp>(entity =>
            {
                entity.ToTable("TCC_ExpenseClaim_Travel_lines_Temp");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AdjustAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AfterAdjustAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Beyond).HasMaxLength(50);

                entity.Property(e => e.BillAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BillCode).HasMaxLength(500);

                entity.Property(e => e.BillTaxAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BillType).HasMaxLength(20);

                entity.Property(e => e.ByAttachment).HasMaxLength(50);

                entity.Property(e => e.Category).HasMaxLength(50);

                entity.Property(e => e.Currency).HasMaxLength(20);

                entity.Property(e => e.FromDate).HasColumnType("datetime");

                entity.Property(e => e.FromPlace).HasMaxLength(200);

                entity.Property(e => e.InvoiceCategoryText).HasMaxLength(50);

                entity.Property(e => e.InvoiceCode).HasMaxLength(200);

                entity.Property(e => e.InvoiceDate).HasColumnType("datetime");

                entity.Property(e => e.IsCollected).HasMaxLength(50);

                entity.Property(e => e.Money).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MoneyRmb)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("MoneyRMB");

                entity.Property(e => e.ProcessName).HasMaxLength(500);

                entity.Property(e => e.RCreateTime)
                    .HasMaxLength(50)
                    .HasColumnName("R_CreateTime");

                entity.Property(e => e.RId)
                    .HasMaxLength(36)
                    .HasColumnName("R_ID");

                entity.Property(e => e.RName)
                    .HasMaxLength(50)
                    .HasColumnName("R_name");

                entity.Property(e => e.RTitle)
                    .HasMaxLength(50)
                    .HasColumnName("R_Title");

                entity.Property(e => e.Rate).HasMaxLength(20);

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName");

                entity.Property(e => e.StrokeNumber).HasMaxLength(200);

                entity.Property(e => e.TaxRate).HasMaxLength(50);

                entity.Property(e => e.TaxRateName).HasMaxLength(50);

                entity.Property(e => e.TicketingCompany).HasMaxLength(200);

                entity.Property(e => e.ToDate).HasColumnType("datetime");

                entity.Property(e => e.ToPlace).HasMaxLength(200);

                entity.Property(e => e.TravelingCode)
                    .HasMaxLength(50)
                    .HasComment("nvarchar(50)");

                entity.Property(e => e.TravellingCompany)
                    .HasMaxLength(100)
                    .HasComment("航空公司名称");

                entity.Property(e => e.TravellingGrade)
                    .HasMaxLength(50)
                    .HasComment("座位等级");

                entity.Property(e => e.TravellingIsTaxPayable)
                    .HasMaxLength(50)
                    .HasComment("是否计税");

                entity.Property(e => e.TravellingMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("nvarchar(50)");

                entity.Property(e => e.TravellingNumber)
                    .HasMaxLength(50)
                    .HasComment("航班号/火车车次");

                entity.Property(e => e.TravellingPeople)
                    .HasMaxLength(50)
                    .HasComment("出行人");

                entity.Property(e => e.TravellingSurcharge)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("decimal(18, 2)");

                entity.Property(e => e.TravellingTypeCode).HasComment("航程类型（1:国内 2:国际）");

                entity.Property(e => e.TravellingTypeName)
                    .HasMaxLength(50)
                    .HasComment("航程类型（国内/国际）");
            });

            modelBuilder.Entity<TccExpenseClaimVourcherId>(entity =>
            {
                entity.ToTable("TCC_ExpenseClaim_VourcherID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Incident).HasComment("流程实例号");

                entity.Property(e => e.VourcherId)
                    .HasColumnName("VourcherID")
                    .HasComment("流程关联入账ID");
            });

            modelBuilder.Entity<TccExpenseClaimWjryLine>(entity =>
            {
                entity.ToTable("TCC_ExpenseClaim_WJRY_lines");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键ID");

                entity.Property(e => e.Credential)
                    .HasMaxLength(50)
                    .HasComment("证件号码");

                entity.Property(e => e.CredentialName)
                    .HasMaxLength(50)
                    .HasComment("证件号码  用于外籍人员报销");

                entity.Property(e => e.CredentialType).HasComment("证件类型编号  用于外籍人员报销");

                entity.Property(e => e.CredentialTypeName)
                    .HasMaxLength(50)
                    .HasComment("证件类型名称  用于外籍人员报销");

                entity.Property(e => e.Incident).HasComment("流程实例号");

                entity.Property(e => e.Money)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("付款金额");

                entity.Property(e => e.MoneyRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MoneyRMB")
                    .HasComment("折合人民币金额");

                entity.Property(e => e.PayCurrency).HasComment("付款币种 --用于外籍人员报销");

                entity.Property(e => e.PayCurrencyName)
                    .HasMaxLength(50)
                    .HasComment("付款币种名称 --用于外籍人员报销");

                entity.Property(e => e.PersonRealName)
                    .HasMaxLength(50)
                    .HasComment("人员真实姓名");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(500)
                    .HasComment("流程名称");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("汇率");

                entity.Property(e => e.ReceiveAccount)
                    .HasMaxLength(200)
                    .HasComment("银行账号");

                entity.Property(e => e.ReceiveBankName)
                    .HasMaxLength(200)
                    .HasComment("银行名称");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName")
                    .HasComment("申请人登录名");
            });

            modelBuilder.Entity<TccExpenseClaimWjryLinesTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_ExpenseClaim_WJRY_lines_Temp");

                entity.Property(e => e.Credential).HasMaxLength(50);

                entity.Property(e => e.CredentialName).HasMaxLength(50);

                entity.Property(e => e.CredentialTypeName).HasMaxLength(50);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Money).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MoneyRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MoneyRMB");

                entity.Property(e => e.PayCurrencyName).HasMaxLength(50);

                entity.Property(e => e.PersonRealName).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(500);

                entity.Property(e => e.Rate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ReceiveAccount).HasMaxLength(200);

                entity.Property(e => e.ReceiveBankName).HasMaxLength(200);

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName");
            });

            modelBuilder.Entity<TccExpensesType>(entity =>
            {
                entity.ToTable("TCC_ExpensesType");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Code)
                    .HasMaxLength(20)
                    .HasComment("费用编码");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasComment("创建时间");

                entity.Property(e => e.Level).HasComment("等级");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .HasComment("费用名称");

                entity.Property(e => e.ParentCode)
                    .HasMaxLength(20)
                    .HasComment("父节点编码");

                entity.Property(e => e.ScopeOfDept)
                    .HasMaxLength(100)
                    .HasComment("可选取该选项的科目范围");

                entity.Property(e => e.ScopeOfProject)
                    .HasMaxLength(100)
                    .HasComment("可选取该选项的项目范围");

                entity.Property(e => e.SubJectCode).HasMaxLength(50);

                entity.Property(e => e.SubNameMc)
                    .HasMaxLength(50)
                    .HasComment("明细全程");
            });

            modelBuilder.Entity<TccFinanceCashierConfirm>(entity =>
            {
                entity.ToTable("TCC_FinanceCashierConfirm");

                entity.HasIndex(e => new { e.ProcessName, e.Incident }, "IX_TCC_FinanceCashierConfirm");

                entity.HasIndex(e => e.PaymentMethodName, "IX_TCC_FinanceCashierConfirm_1");

                entity.HasIndex(e => e.ConfirmPayment, "IX_TCC_FinanceCashierConfirm_2");

                entity.HasIndex(e => new { e.ProcessName, e.Incident }, "idx_TCC_FinanceCashierConfirm_p_i");

                entity.HasIndex(e => e.VoucherCode, "idx_TCC_FinanceCashierConfirm_v");

                entity.HasIndex(e => new { e.Incident, e.ProcessName, e.PaymentMethod }, "uc_onlyone")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.AccountingAuditLoginUserName)
                    .HasMaxLength(50)
                    .HasComment("财务审核人登陆名");

                entity.Property(e => e.AccountingAuditUserName)
                    .HasMaxLength(50)
                    .HasComment("财务审核人");

                entity.Property(e => e.BuckleWaElecAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("收款管理流程:业主代扣水电费");

                entity.Property(e => e.BusinessObject)
                    .HasDefaultValueSql("((1))")
                    .HasComment("业务对象：1单位；2个人。默认单位");

                entity.Property(e => e.CasierClaimLoginUserName)
                    .HasMaxLength(50)
                    .HasComment("接单会计登陆人");

                entity.Property(e => e.CasierClaimUserName)
                    .HasMaxLength(50)
                    .HasComment("接单会计姓名");

                entity.Property(e => e.CategoryType).HasComment("类型");

                entity.Property(e => e.CategoryTypeName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("类型名称");

                entity.Property(e => e.CheckBank)
                    .HasMaxLength(50)
                    .HasComment("支票银行（支票）");

                entity.Property(e => e.CheckBankAccount)
                    .HasMaxLength(50)
                    .HasComment("支票银行帐号（支票）");

                entity.Property(e => e.ConfirmDate)
                    .HasColumnType("datetime")
                    .HasComment("确认时间");

                entity.Property(e => e.ConfirmLoginUserName)
                    .HasMaxLength(50)
                    .HasComment("确认人登陆名");

                entity.Property(e => e.ConfirmPayment).HasComment("是否确认：1确认:0未确认");

                entity.Property(e => e.ContractCode)
                    .HasMaxLength(50)
                    .HasComment("合同编号");

                entity.Property(e => e.ContractName)
                    .HasMaxLength(100)
                    .HasComment("合同名称");

                entity.Property(e => e.ContractPaymentDate)
                    .HasColumnType("datetime")
                    .HasComment("约定付款时间");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("创建时间");

                entity.Property(e => e.Currency)
                    .HasMaxLength(50)
                    .HasComment("币种");

                entity.Property(e => e.DraftAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("汇票金额");

                entity.Property(e => e.DtaxWithholding)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("DTaxWithholding")
                    .HasComment("代扣税金");

                entity.Property(e => e.DwithholdingAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("业主代扣额");

                entity.Property(e => e.ExchangeRate)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((1))")
                    .HasComment("汇率");

                entity.Property(e => e.Flag).HasComment("记录类型0正常,1单汇票多记录");

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("申请单号");

                entity.Property(e => e.FundType)
                    .HasMaxLength(50)
                    .HasComment("款项类型");

                entity.Property(e => e.Incident).HasComment("流程主键");

                entity.Property(e => e.IsHaveBill).HasComment("是否有纸制单据");

                entity.Property(e => e.IsUpSuccess)
                    .HasMaxLength(5)
                    .HasComment("调用资金接口（软通）是否成功  0未成功  1成功    仅限付款申请流程  和 收票退税");

                entity.Property(e => e.IsVoucher)
                    .HasDefaultValueSql("((0))")
                    .HasComment("是否入帐");

                entity.Property(e => e.LetterOfCreditType)
                    .HasMaxLength(50)
                    .HasComment("信用证类型（信用证）");

                entity.Property(e => e.Location)
                    .HasDefaultValueSql("((1))")
                    .HasComment("归属地：1天津；2北京。默认天津");

                entity.Property(e => e.OperateIdnumber)
                    .HasMaxLength(50)
                    .HasColumnName("OperateIDNumber")
                    .HasComment("操作人身份证号");

                entity.Property(e => e.OperateLoginUserName)
                    .HasMaxLength(50)
                    .HasComment("操作人登陆人");

                entity.Property(e => e.OperateUserName)
                    .HasMaxLength(50)
                    .HasComment("操作人名称");

                entity.Property(e => e.OtherAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("其他金额");

                entity.Property(e => e.OwnerForfeit)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("收款管理流程:OwnerForfeit");

                entity.Property(e => e.PaymentAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("付款支付");

                entity.Property(e => e.PaymentBank)
                    .HasMaxLength(200)
                    .HasComment("付款银行（电汇）");

                entity.Property(e => e.PaymentBankAccount)
                    .HasMaxLength(200)
                    .HasComment("付款行编号（电汇用）");

                entity.Property(e => e.PaymentCodes)
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasComment("支付编号");

                entity.Property(e => e.PaymentMethod).HasComment("支付方式");

                entity.Property(e => e.PaymentMethodName)
                    .HasMaxLength(50)
                    .HasComment("支付方式名称");

                entity.Property(e => e.ProcessName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("流程名称");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .HasComment("项目编号");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(500)
                    .HasComment("项目名称");

                entity.Property(e => e.ProjectPayment)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("本次收取工程款");

                entity.Property(e => e.ReceivingAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("实收金额");

                entity.Property(e => e.ReceivingCompanyCode)
                    .HasMaxLength(50)
                    .HasComment("收款单位");

                entity.Property(e => e.ReceivingCompanyName)
                    .HasMaxLength(1000)
                    .HasComment("收款单位编号");

                entity.Property(e => e.RecordType)
                    .HasDefaultValueSql("((1))")
                    .HasComment("记录类型：1付款，2收款；默认1");

                entity.Property(e => e.RefundBank).HasMaxLength(50);

                entity.Property(e => e.RefundBankAccount).HasMaxLength(50);

                entity.Property(e => e.RefundSubjectCode).HasMaxLength(50);

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date")
                    .HasComment("提交日期");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasComment("提交人登陆名");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasComment("提交人姓名");

                entity.Property(e => e.RequestTelphone)
                    .HasMaxLength(30)
                    .HasColumnName("Request_Telphone")
                    .HasComment("申请人电话");

                entity.Property(e => e.ResponsiblePerson)
                    .HasMaxLength(50)
                    .HasComment("经办人（汇票）");

                entity.Property(e => e.ResponsibleSfzh)
                    .HasMaxLength(20)
                    .HasColumnName("ResponsibleSFZH")
                    .HasComment("经办人身份证号");

                entity.Property(e => e.StandardExchangeRate)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("折合人民币汇率");

                entity.Property(e => e.TelegraphicTransferAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("电汇金额");

                entity.Property(e => e.UnitCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UnitName).HasMaxLength(50);

                entity.Property(e => e.ValueAddedTax)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("本次收取增植税");

                entity.Property(e => e.Vchrnum)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("入帐凭证号");

                entity.Property(e => e.VoucherCode)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("入帐单号");

                entity.Property(e => e.WithholdingOfVat)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("WithholdingOfVAT")
                    .HasComment("代扣增填税");
            });

            modelBuilder.Entity<TccFinanceCashierConfirmAbroad>(entity =>
            {
                entity.ToTable("TCC_FinanceCashierConfirm_Abroad");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.AccountingAuditLoginUserName)
                    .HasMaxLength(50)
                    .HasComment("财务审核人登陆名");

                entity.Property(e => e.AccountingAuditUserName)
                    .HasMaxLength(50)
                    .HasComment("财务审核人");

                entity.Property(e => e.BuckleWaElecAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("收款管理流程:业主代扣水电费");

                entity.Property(e => e.BusinessObject)
                    .HasDefaultValueSql("((1))")
                    .HasComment("业务对象：1单位；2个人。默认单位");

                entity.Property(e => e.CasierClaimLoginUserName)
                    .HasMaxLength(50)
                    .HasComment("接单会计登陆人");

                entity.Property(e => e.CasierClaimUserName)
                    .HasMaxLength(50)
                    .HasComment("接单会计姓名");

                entity.Property(e => e.CategoryType).HasComment("类型");

                entity.Property(e => e.CategoryTypeName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("类型名称");

                entity.Property(e => e.CheckBank)
                    .HasMaxLength(50)
                    .HasComment("支票银行（支票）");

                entity.Property(e => e.CheckBankAccount)
                    .HasMaxLength(50)
                    .HasComment("支票银行帐号（支票）");

                entity.Property(e => e.ConfirmDate)
                    .HasColumnType("datetime")
                    .HasComment("确认时间");

                entity.Property(e => e.ConfirmLoginUserName)
                    .HasMaxLength(50)
                    .HasComment("确认人登陆名");

                entity.Property(e => e.ConfirmPayment).HasComment("是否确认：1确认:0未确认");

                entity.Property(e => e.ContractCode)
                    .HasMaxLength(50)
                    .HasComment("合同编号");

                entity.Property(e => e.ContractName)
                    .HasMaxLength(100)
                    .HasComment("合同名称");

                entity.Property(e => e.ContractPaymentDate)
                    .HasColumnType("datetime")
                    .HasComment("约定付款时间");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("创建时间");

                entity.Property(e => e.Currency)
                    .HasMaxLength(50)
                    .HasComment("币种");

                entity.Property(e => e.DraftAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("汇票金额");

                entity.Property(e => e.DtaxWithholding)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("DTaxWithholding")
                    .HasComment("代扣税金");

                entity.Property(e => e.DwithholdingAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("业主代扣额");

                entity.Property(e => e.ExchangeRate)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((1))")
                    .HasComment("汇率");

                entity.Property(e => e.Flag).HasComment("记录类型0正常,1单汇票多记录");

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("申请单号");

                entity.Property(e => e.FundType)
                    .HasMaxLength(50)
                    .HasComment("款项类型");

                entity.Property(e => e.Incident).HasComment("流程主键");

                entity.Property(e => e.IsHaveBill).HasComment("是否有纸制单据");

                entity.Property(e => e.IsVoucher)
                    .HasDefaultValueSql("((0))")
                    .HasComment("是否入帐");

                entity.Property(e => e.LetterOfCreditType)
                    .HasMaxLength(50)
                    .HasComment("信用证类型（信用证）");

                entity.Property(e => e.Location)
                    .HasDefaultValueSql("((1))")
                    .HasComment("归属地：1天津；2北京。默认天津");

                entity.Property(e => e.OperateIdnumber)
                    .HasMaxLength(50)
                    .HasColumnName("OperateIDNumber")
                    .HasComment("操作人身份证号");

                entity.Property(e => e.OperateLoginUserName)
                    .HasMaxLength(50)
                    .HasComment("操作人登陆人");

                entity.Property(e => e.OperateUserName)
                    .HasMaxLength(50)
                    .HasComment("操作人名称");

                entity.Property(e => e.OtherAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("其他金额");

                entity.Property(e => e.OwnerForfeit)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("收款管理流程:OwnerForfeit");

                entity.Property(e => e.PaymentAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("付款支付");

                entity.Property(e => e.PaymentBank)
                    .HasMaxLength(200)
                    .HasComment("付款银行（电汇）");

                entity.Property(e => e.PaymentBankAccount)
                    .HasMaxLength(200)
                    .HasComment("付款行编号（电汇用）");

                entity.Property(e => e.PaymentCodes)
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasComment("支付编号");

                entity.Property(e => e.PaymentMethod).HasComment("支付方式");

                entity.Property(e => e.PaymentMethodName)
                    .HasMaxLength(50)
                    .HasComment("支付方式名称");

                entity.Property(e => e.ProcessName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("流程名称");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .HasComment("项目编号");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(500)
                    .HasComment("项目名称");

                entity.Property(e => e.ProjectPayment)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("本次收取工程款");

                entity.Property(e => e.ReceivingAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("实收金额");

                entity.Property(e => e.ReceivingCompanyCode)
                    .HasMaxLength(50)
                    .HasComment("收款单位");

                entity.Property(e => e.ReceivingCompanyName)
                    .HasMaxLength(1000)
                    .HasComment("收款单位编号");

                entity.Property(e => e.RecordType)
                    .HasDefaultValueSql("((1))")
                    .HasComment("记录类型：1付款，2收款；默认1");

                entity.Property(e => e.RefundBank).HasMaxLength(50);

                entity.Property(e => e.RefundBankAccount).HasMaxLength(50);

                entity.Property(e => e.RefundSubjectCode).HasMaxLength(50);

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date")
                    .HasComment("提交日期");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasComment("提交人登陆名");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasComment("提交人姓名");

                entity.Property(e => e.RequestTelphone)
                    .HasMaxLength(30)
                    .HasColumnName("Request_Telphone")
                    .HasComment("申请人电话");

                entity.Property(e => e.ResponsiblePerson)
                    .HasMaxLength(50)
                    .HasComment("经办人（汇票）");

                entity.Property(e => e.ResponsibleSfzh)
                    .HasMaxLength(20)
                    .HasColumnName("ResponsibleSFZH")
                    .HasComment("经办人身份证号");

                entity.Property(e => e.StandardExchangeRate)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("折合人民币汇率");

                entity.Property(e => e.TelegraphicTransferAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("电汇金额");

                entity.Property(e => e.UnitCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UnitName).HasMaxLength(50);

                entity.Property(e => e.ValueAddedTax)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("本次收取增植税");

                entity.Property(e => e.Vchrnum)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("入帐凭证号");

                entity.Property(e => e.VoucherCode)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("入帐单号");

                entity.Property(e => e.WithholdingOfVat)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("WithholdingOfVAT")
                    .HasComment("代扣增填税");
            });

            modelBuilder.Entity<TccFinanceCashierConfirmDetail>(entity =>
            {
                entity.ToTable("TCC_FinanceCashierConfirmDetail");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.DraftCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("汇票编号");

                entity.Property(e => e.DraftId)
                    .HasColumnName("DraftID")
                    .HasComment("汇票主键");

                entity.Property(e => e.MainId)
                    .HasColumnName("MainID")
                    .HasComment("外键");
            });

            modelBuilder.Entity<TccFinanceCashierConfirmRevocationLog>(entity =>
            {
                entity.ToTable("TCC_FinanceCashierConfirm_RevocationLog");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键　");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasComment("操作时间");

                entity.Property(e => e.Fid)
                    .HasColumnName("FID")
                    .HasComment("出纳确认ID");

                entity.Property(e => e.Note)
                    .HasMaxLength(500)
                    .HasComment("说明");

                entity.Property(e => e.OperateIdnumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("OperateIDNumber")
                    .HasComment("身份证号");

                entity.Property(e => e.OperateRealName)
                    .HasMaxLength(50)
                    .HasComment("真实姓名");

                entity.Property(e => e.OperateUser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("操作人");

                entity.Property(e => e.PaymentCodes)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("编号");

                entity.Property(e => e.RevocationCodes)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("退回单号");
            });

            modelBuilder.Entity<TccFinanceCashierConfirmTmpForModifyHistory>(entity =>
            {
                entity.ToTable("TCC_FinanceCashierConfirm_Tmp_ForModifyHistory");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AccountingAuditLoginUserName).HasMaxLength(50);

                entity.Property(e => e.AccountingAuditUserName).HasMaxLength(50);

                entity.Property(e => e.BuckleWaElecAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CasierClaimLoginUserName).HasMaxLength(50);

                entity.Property(e => e.CasierClaimUserName).HasMaxLength(50);

                entity.Property(e => e.CategoryTypeName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CheckBank).HasMaxLength(50);

                entity.Property(e => e.CheckBankAccount).HasMaxLength(50);

                entity.Property(e => e.ConfirmDate).HasColumnType("datetime");

                entity.Property(e => e.ConfirmLoginUserName).HasMaxLength(50);

                entity.Property(e => e.ContractCode).HasMaxLength(50);

                entity.Property(e => e.ContractName).HasMaxLength(100);

                entity.Property(e => e.ContractPaymentDate).HasColumnType("datetime");

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.Currency).HasMaxLength(50);

                entity.Property(e => e.DraftAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DtaxWithholding)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("DTaxWithholding");

                entity.Property(e => e.DwithholdingAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ExchangeRate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.FundType).HasMaxLength(50);

                entity.Property(e => e.LetterOfCreditType).HasMaxLength(50);

                entity.Property(e => e.OperateIdnumber)
                    .HasMaxLength(50)
                    .HasColumnName("OperateIDNumber");

                entity.Property(e => e.OperateLoginUserName).HasMaxLength(50);

                entity.Property(e => e.OperateUserName).HasMaxLength(50);

                entity.Property(e => e.OtherAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OwnerForfeit).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PaymentAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PaymentBank).HasMaxLength(200);

                entity.Property(e => e.PaymentBankAccount).HasMaxLength(200);

                entity.Property(e => e.PaymentCodes)
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentMethodName).HasMaxLength(50);

                entity.Property(e => e.ProcessName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(50);

                entity.Property(e => e.ProjectName).HasMaxLength(500);

                entity.Property(e => e.ProjectPayment).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ReceivingAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ReceivingCompanyCode).HasMaxLength(50);

                entity.Property(e => e.ReceivingCompanyName).HasMaxLength(1000);

                entity.Property(e => e.RefundBank).HasMaxLength(50);

                entity.Property(e => e.RefundBankAccount).HasMaxLength(50);

                entity.Property(e => e.RefundSubjectCode).HasMaxLength(50);

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");

                entity.Property(e => e.RequestLoginName).HasMaxLength(50);

                entity.Property(e => e.RequestRealName).HasMaxLength(50);

                entity.Property(e => e.RequestTelphone)
                    .HasMaxLength(30)
                    .HasColumnName("Request_Telphone");

                entity.Property(e => e.ResponsiblePerson).HasMaxLength(50);

                entity.Property(e => e.ResponsibleSfzh)
                    .HasMaxLength(20)
                    .HasColumnName("ResponsibleSFZH");

                entity.Property(e => e.StandardExchangeRate).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TelegraphicTransferAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.UnitCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UnitName).HasMaxLength(50);

                entity.Property(e => e.ValueAddedTax).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Vchrnum).HasMaxLength(50);

                entity.Property(e => e.VoucherCode).HasMaxLength(50);

                entity.Property(e => e.WithholdingOfVat)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("WithholdingOfVAT");
            });

            modelBuilder.Entity<TccFinanceCashierConfirmVoucherInfo>(entity =>
            {
                entity.ToTable("TCC_FinanceCashierConfirm_VoucherInfo");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasComment("创建时间");

                entity.Property(e => e.Fid)
                    .HasColumnName("FID")
                    .HasComment("财务主键");

                entity.Property(e => e.Flag).HasComment("1:发;2:抵");

                entity.Property(e => e.VoucherId)
                    .HasColumnName("VoucherID")
                    .HasComment("凭证主键");
            });

            modelBuilder.Entity<TccFinanceCasierClaimHandle>(entity =>
            {
                entity.ToTable("TCC_FinanceCasierClaim_Handle");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.CancelOperate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("取消人");

                entity.Property(e => e.CancelOperateName)
                    .HasMaxLength(50)
                    .HasComment("取消人");

                entity.Property(e => e.CancelTime).HasColumnType("datetime");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("创建时间");

                entity.Property(e => e.Creator)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("创建人");

                entity.Property(e => e.HandleOperater)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("接单人");

                entity.Property(e => e.HandleOperaterName)
                    .HasMaxLength(50)
                    .HasComment("接单人名称");

                entity.Property(e => e.HandleTime)
                    .HasColumnType("datetime")
                    .HasComment("接单时间");

                entity.Property(e => e.Incident).HasComment("实例号");

                entity.Property(e => e.IsAutoSend).HasComment("是否自动发送：0不发；１发");

                entity.Property(e => e.IsEnabled)
                    .HasDefaultValueSql("((1))")
                    .HasComment("是否当前有效。提交后，该条变为0");

                entity.Property(e => e.IsHandle).HasComment("是否接单；0未接；１接");

                entity.Property(e => e.MsgContont)
                    .HasMaxLength(500)
                    .HasComment("通知内容");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名");

                entity.Property(e => e.SendPauseOperate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("暂停人");

                entity.Property(e => e.SendPauseOperateName)
                    .HasMaxLength(50)
                    .HasComment("暂停人名称");

                entity.Property(e => e.SendPauseTime)
                    .HasColumnType("datetime")
                    .HasComment("暂停时间");
            });

            modelBuilder.Entity<TccFinanceCasierClaimMessageSendLog>(entity =>
            {
                entity.ToTable("TCC_FinanceCasierClaimMessageSend_Log");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.LIncident)
                    .HasColumnName("lIncident")
                    .HasComment("实例号");

                entity.Property(e => e.LProcessName)
                    .HasMaxLength(50)
                    .HasColumnName("lProcessName")
                    .HasComment("流程名");

                entity.Property(e => e.LoginName).HasMaxLength(50);

                entity.Property(e => e.MobileNo).HasMaxLength(50);

                entity.Property(e => e.SendTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("发送时间");

                entity.Property(e => e.TaskId)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("TaskID")
                    .IsFixedLength(true)
                    .HasComment("taskid主键");
            });

            modelBuilder.Entity<TccFinanceLock>(entity =>
            {
                entity.ToTable("TCC_FinanceLock");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LockDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Lock_Date");

                entity.Property(e => e.LockLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Lock_LoginName");

                entity.Property(e => e.LockUsertName)
                    .HasMaxLength(50)
                    .HasColumnName("Lock_UsertName");

                entity.Property(e => e.ProcessName).HasMaxLength(50);
            });

            modelBuilder.Entity<TccFinanceTaskToDo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_FinanceTaskToDo");

                entity.Property(e => e.ProcessName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.StepLabel).HasMaxLength(100);
            });

            modelBuilder.Entity<TccFinancingOfAdd>(entity =>
            {
                entity.ToTable("TCC_FinancingOfAdd");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BorrowingRate)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("借款年化利率");

                entity.Property(e => e.Category).HasComment("1:短期 2：长期");

                entity.Property(e => e.CurAddFinancingAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("当年新增融资额");

                entity.Property(e => e.DeptCode).HasMaxLength(50);

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .HasComment("责任部门");

                entity.Property(e => e.FinancingItemName)
                    .HasMaxLength(200)
                    .HasComment("融资事项名称");

                entity.Property(e => e.InterestExpense)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("当年利息支出");

                entity.Property(e => e.PcapitalBorrowDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PCapitalBorrowDate")
                    .HasComment("计划资金借入时间");

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.ProvideFunds)
                    .HasMaxLength(200)
                    .HasComment("提供资金方");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .HasComment("备注");
            });

            modelBuilder.Entity<TccFinancingOfAddTemp>(entity =>
            {
                entity.ToTable("TCC_FinancingOfAddTEMP");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BorrowingRate)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("借款年化利率");

                entity.Property(e => e.Category).HasComment("1:短期 2：长期");

                entity.Property(e => e.CurAddFinancingAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("当年新增融资额");

                entity.Property(e => e.DeptCode).HasMaxLength(50);

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .HasComment("责任部门");

                entity.Property(e => e.FinancingItemName)
                    .HasMaxLength(200)
                    .HasComment("融资事项名称");

                entity.Property(e => e.InterestExpense)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("当年利息支出");

                entity.Property(e => e.PcapitalBorrowDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PCapitalBorrowDate")
                    .HasComment("计划资金借入时间");

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.ProvideFunds)
                    .HasMaxLength(200)
                    .HasComment("提供资金方");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .HasComment("备注");
            });

            modelBuilder.Entity<TccFinancingOfAsset>(entity =>
            {
                entity.ToTable("TCC_FinancingOfAsset");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AssetName)
                    .HasMaxLength(200)
                    .HasComment("处置资产名称");

                entity.Property(e => e.AssetValue)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("资产原值");

                entity.Property(e => e.BookValue)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("账面价值");

                entity.Property(e => e.ClassName)
                    .HasMaxLength(500)
                    .HasComment("资产小类");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .HasComment("责任部门编号");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .HasComment("责任部门名称");

                entity.Property(e => e.DisposalMethod).HasComment("处置方式  0:丢弃  1:融资封存  2:零件备用  3:变卖  4:回收");

                entity.Property(e => e.DisposalMethodText).HasMaxLength(50);

                entity.Property(e => e.DisposalReasons)
                    .HasMaxLength(500)
                    .HasComment("处置原因");

                entity.Property(e => e.Disposallosses)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("预计处置损益");

                entity.Property(e => e.Instruction)
                    .HasMaxLength(200)
                    .HasComment("说明");

                entity.Property(e => e.PclassName)
                    .HasMaxLength(500)
                    .HasColumnName("PClassName")
                    .HasComment("资产大类");

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.PurchaseDate)
                    .HasColumnType("datetime")
                    .HasComment("购置时间");

                entity.Property(e => e.Quantity).HasComment("数量");

                entity.Property(e => e.Spec)
                    .HasMaxLength(200)
                    .HasComment("规格型号");
            });

            modelBuilder.Entity<TccFinancingOfAssetTemp>(entity =>
            {
                entity.ToTable("TCC_FinancingOfAssetTEMP");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AssetName)
                    .HasMaxLength(200)
                    .HasComment("处置资产名称");

                entity.Property(e => e.AssetValue)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("资产原值");

                entity.Property(e => e.BookValue)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("账面价值");

                entity.Property(e => e.ClassName)
                    .HasMaxLength(500)
                    .HasComment("资产小类");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .HasComment("责任部门编号");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .HasComment("责任部门名称");

                entity.Property(e => e.DisposalMethod).HasComment("处置方式  0:丢弃  1:融资封存  2:零件备用  3:变卖  4:回收");

                entity.Property(e => e.DisposalMethodText).HasMaxLength(50);

                entity.Property(e => e.DisposalReasons)
                    .HasMaxLength(500)
                    .HasComment("处置原因");

                entity.Property(e => e.Disposallosses)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("预计处置损益");

                entity.Property(e => e.Instruction)
                    .HasMaxLength(200)
                    .HasComment("说明");

                entity.Property(e => e.PclassName)
                    .HasMaxLength(500)
                    .HasColumnName("PClassName")
                    .HasComment("资产大类");

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.PurchaseDate)
                    .HasColumnType("datetime")
                    .HasComment("购置时间");

                entity.Property(e => e.Quantity).HasComment("数量");

                entity.Property(e => e.Spec)
                    .HasMaxLength(200)
                    .HasComment("规格型号");
            });

            modelBuilder.Entity<TccFinancingOfDisposal>(entity =>
            {
                entity.ToTable("TCC_FinancingOfDisposal");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BookValue)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("账面价值");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .HasComment("责任部门编号");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .HasComment("责任部门");

                entity.Property(e => e.DisposalMethod)
                    .HasMaxLength(200)
                    .HasComment("处置方式");

                entity.Property(e => e.DisposalReasons)
                    .HasMaxLength(200)
                    .HasComment("处置原因");

                entity.Property(e => e.Disposallosses)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("预计处置损益");

                entity.Property(e => e.EquityProjectName)
                    .HasMaxLength(200)
                    .HasComment("股权处置项目");

                entity.Property(e => e.InvestmentAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("原始投资金额");

                entity.Property(e => e.InvestmentTime)
                    .HasColumnType("datetime")
                    .HasComment("投资时间");

                entity.Property(e => e.IsApproved)
                    .HasMaxLength(200)
                    .HasComment("是否已批复");

                entity.Property(e => e.Pid).HasColumnName("PID");
            });

            modelBuilder.Entity<TccFinancingOfDisposalTemp>(entity =>
            {
                entity.ToTable("TCC_FinancingOfDisposalTEMP");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BookValue)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("账面价值");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .HasComment("责任部门编号");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .HasComment("责任部门");

                entity.Property(e => e.DisposalMethod)
                    .HasMaxLength(200)
                    .HasComment("处置方式");

                entity.Property(e => e.DisposalReasons)
                    .HasMaxLength(200)
                    .HasComment("处置原因");

                entity.Property(e => e.Disposallosses)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("预计处置损益");

                entity.Property(e => e.EquityProjectName)
                    .HasMaxLength(200)
                    .HasComment("股权处置项目");

                entity.Property(e => e.InvestmentAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("原始投资金额");

                entity.Property(e => e.InvestmentTime)
                    .HasColumnType("datetime")
                    .HasComment("投资时间");

                entity.Property(e => e.IsApproved)
                    .HasMaxLength(200)
                    .HasComment("是否已批复");

                entity.Property(e => e.Pid).HasColumnName("PID");
            });

            modelBuilder.Entity<TccFinancingOfReturn>(entity =>
            {
                entity.ToTable("TCC_FinancingOfReturn");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BorrowingRate)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("借款年化利率");

                entity.Property(e => e.Category).HasComment("1:短期 2：长期");

                entity.Property(e => e.CurReFinancingAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("当年归还短期融资额");

                entity.Property(e => e.DeptCode).HasMaxLength(50);

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .HasComment("责任部门");

                entity.Property(e => e.FinancingItemName)
                    .HasMaxLength(200)
                    .HasComment("融资事项名称");

                entity.Property(e => e.InterestExpense)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("当年利息支出");

                entity.Property(e => e.PcapitalReturnDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PCapitalReturnDate")
                    .HasComment("计划资金归还时间");

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.ProvideFunds)
                    .HasMaxLength(200)
                    .HasComment("提供资金方");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .HasComment("备注");
            });

            modelBuilder.Entity<TccFinancingOfReturnTemp>(entity =>
            {
                entity.ToTable("TCC_FinancingOfReturnTEMP");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BorrowingRate)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("借款年化利率");

                entity.Property(e => e.Category).HasComment("1:短期 2：长期");

                entity.Property(e => e.CurReFinancingAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("当年归还短期融资额");

                entity.Property(e => e.DeptCode).HasMaxLength(50);

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .HasComment("责任部门");

                entity.Property(e => e.FinancingItemName)
                    .HasMaxLength(200)
                    .HasComment("融资事项名称");

                entity.Property(e => e.InterestExpense)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("当年利息支出");

                entity.Property(e => e.PcapitalReturnDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PCapitalReturnDate")
                    .HasComment("计划资金归还时间");

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.ProvideFunds)
                    .HasMaxLength(200)
                    .HasComment("提供资金方");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .HasComment("备注");
            });

            modelBuilder.Entity<TccFixedAssetInvestmentProject>(entity =>
            {
                entity.ToTable("TCC_FixedAssetInvestmentProjects");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ActTzamount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ActTZAmount")
                    .HasComment("今年实际完成投资额");

                entity.Property(e => e.ActTzljamount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ActTZLJAmount")
                    .HasComment("今年累计完成投资额");

                entity.Property(e => e.ActTzljamountPct)
                    .HasMaxLength(50)
                    .HasColumnName("ActTZLJAmountPct")
                    .HasComment("今年投资累计完成比例");

                entity.Property(e => e.ActualCompleteAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("实际完成投资额");

                entity.Property(e => e.AlreadyOrNew).HasComment("2:已批复固定资产投资项目   1:新申请固定资产投资项目");

                entity.Property(e => e.BudgetTzamount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BudgetTZAmount")
                    .HasComment("今年预算投资额");

                entity.Property(e => e.CumulativeCompleteAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("累计完成投资额");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .HasComment("责任部门编号");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .HasComment("责任部门");

                entity.Property(e => e.EndDate)
                    .HasColumnType("datetime")
                    .HasComment("竣工年月");

                entity.Property(e => e.HoldingProportionEnd)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("年末预计持股比例（%）");

                entity.Property(e => e.HoldingProportionStart)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("年初持股比例（%）");

                entity.Property(e => e.Industry)
                    .HasMaxLength(500)
                    .HasComment("所属行业");

                entity.Property(e => e.Investment1)
                    .HasMaxLength(50)
                    .HasComment("投资分类1（生产性/非生产性）");

                entity.Property(e => e.Investment2)
                    .HasMaxLength(50)
                    .HasComment("投资分类2（内部/外部）");

                entity.Property(e => e.Investment3)
                    .HasMaxLength(50)
                    .HasComment("投资分类3");

                entity.Property(e => e.InvestmentBasis)
                    .HasMaxLength(200)
                    .HasComment("投资依据");

                entity.Property(e => e.InvestmentCategory)
                    .HasMaxLength(200)
                    .HasComment("投资类别");

                entity.Property(e => e.InvestmentDirection)
                    .HasMaxLength(200)
                    .HasComment("投资方向");

                entity.Property(e => e.InvestmentEnterprises)
                    .HasMaxLength(200)
                    .HasComment("被投资企业所属行业");

                entity.Property(e => e.InvestmentRate)
                    .HasMaxLength(50)
                    .HasComment("投资收\r\n益率");

                entity.Property(e => e.LoanFunds)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("贷款");

                entity.Property(e => e.MakeUnit)
                    .HasMaxLength(500)
                    .HasComment("编制单位");

                entity.Property(e => e.OtherFunds)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("其他");

                entity.Property(e => e.OwnFunds)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("自有资金");

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.PlanAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("计划投资额");

                entity.Property(e => e.PlanAmountBudget)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("明年现金支付投资额预算");

                entity.Property(e => e.PlanLjamount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PlanLJAmount")
                    .HasComment("明年末预计累计完成投资额");

                entity.Property(e => e.PlanLjamountPct)
                    .HasMaxLength(50)
                    .HasColumnName("PlanLJAmountPct")
                    .HasComment("明年末预计累计完成投资比例");

                entity.Property(e => e.PlanTotalAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("计划总投资");

                entity.Property(e => e.ProjectAmountTotal)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("项目计划总投资（万元）");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .HasComment("项目编号");

                entity.Property(e => e.ProjectContent)
                    .HasMaxLength(200)
                    .HasComment("项目内容");

                entity.Property(e => e.ProjectLocation)
                    .HasMaxLength(200)
                    .HasComment("项目地点");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(500)
                    .HasComment("项目名称");

                entity.Property(e => e.ProjectPhase)
                    .HasMaxLength(200)
                    .HasComment("项目阶段");

                entity.Property(e => e.ProportionOfTheEnterprise)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("本企业所占股比");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .HasComment("备注");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasComment("开工年月");

                entity.Property(e => e.TotalOwnFunds)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("其中：自有资金");

                entity.Property(e => e.TotalnvestmentOfTheEnterprise)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("本企业投资总额");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .HasComment("类别");

                entity.Property(e => e.Yjysamount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("YJYSamount")
                    .HasComment("预计投资转化营收金额");

                entity.Property(e => e.ZczbpartAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ZCZBPartAmount")
                    .HasComment("其中：注册资本金部分投资额");
            });

            modelBuilder.Entity<TccFixedAssetInvestmentProjectsTemp>(entity =>
            {
                entity.ToTable("TCC_FixedAssetInvestmentProjectsTEMP");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ActTzamount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ActTZAmount")
                    .HasComment("今年实际完成投资额");

                entity.Property(e => e.ActTzljamount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ActTZLJAmount")
                    .HasComment("今年累计完成投资额");

                entity.Property(e => e.ActTzljamountPct)
                    .HasMaxLength(50)
                    .HasColumnName("ActTZLJAmountPct")
                    .HasComment("今年投资累计完成比例");

                entity.Property(e => e.ActualCompleteAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("实际完成投资额");

                entity.Property(e => e.AlreadyOrNew).HasComment("2:已批复固定资产投资项目   1:新申请固定资产投资项目");

                entity.Property(e => e.BudgetTzamount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BudgetTZAmount")
                    .HasComment("今年预算投资额");

                entity.Property(e => e.CumulativeCompleteAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("累计完成投资额");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .HasComment("责任部门编号");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .HasComment("责任部门");

                entity.Property(e => e.EndDate)
                    .HasColumnType("datetime")
                    .HasComment("竣工年月");

                entity.Property(e => e.HoldingProportionEnd)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("年末预计持股比例（%）");

                entity.Property(e => e.HoldingProportionStart)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("年初持股比例（%）");

                entity.Property(e => e.Industry)
                    .HasMaxLength(500)
                    .HasComment("所属行业");

                entity.Property(e => e.Investment1)
                    .HasMaxLength(50)
                    .HasComment("投资分类1（生产性/非生产性）");

                entity.Property(e => e.Investment2)
                    .HasMaxLength(50)
                    .HasComment("投资分类2（内部/外部）");

                entity.Property(e => e.Investment3)
                    .HasMaxLength(50)
                    .HasComment("投资分类3");

                entity.Property(e => e.InvestmentBasis)
                    .HasMaxLength(200)
                    .HasComment("投资依据");

                entity.Property(e => e.InvestmentCategory)
                    .HasMaxLength(200)
                    .HasComment("投资类别");

                entity.Property(e => e.InvestmentDirection)
                    .HasMaxLength(200)
                    .HasComment("投资方向");

                entity.Property(e => e.InvestmentEnterprises)
                    .HasMaxLength(200)
                    .HasComment("被投资企业所属行业");

                entity.Property(e => e.InvestmentRate)
                    .HasMaxLength(50)
                    .HasComment("投资收\r\n益率");

                entity.Property(e => e.LoanFunds)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("贷款");

                entity.Property(e => e.MakeUnit)
                    .HasMaxLength(500)
                    .HasComment("编制单位");

                entity.Property(e => e.OtherFunds)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("其他");

                entity.Property(e => e.OwnFunds)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("自有资金");

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.PlanAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("计划投资额");

                entity.Property(e => e.PlanAmountBudget)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("明年现金支付投资额预算");

                entity.Property(e => e.PlanLjamount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PlanLJAmount")
                    .HasComment("明年末预计累计完成投资额");

                entity.Property(e => e.PlanLjamountPct)
                    .HasMaxLength(50)
                    .HasColumnName("PlanLJAmountPct")
                    .HasComment("明年末预计累计完成投资比例");

                entity.Property(e => e.PlanTotalAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("计划总投资");

                entity.Property(e => e.ProjectAmountTotal)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("项目计划总投资（万元）");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .HasComment("项目编号");

                entity.Property(e => e.ProjectContent)
                    .HasMaxLength(200)
                    .HasComment("项目内容");

                entity.Property(e => e.ProjectLocation)
                    .HasMaxLength(200)
                    .HasComment("项目地点");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(500)
                    .HasComment("项目名称");

                entity.Property(e => e.ProjectPhase)
                    .HasMaxLength(200)
                    .HasComment("项目阶段");

                entity.Property(e => e.ProportionOfTheEnterprise)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("本企业所占股比");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .HasComment("备注");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasComment("开工年月");

                entity.Property(e => e.TotalOwnFunds)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("其中：自有资金");

                entity.Property(e => e.TotalnvestmentOfTheEnterprise)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("本企业投资总额");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .HasComment("类别");

                entity.Property(e => e.Yjysamount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("YJYSamount")
                    .HasComment("预计投资转化营收金额");

                entity.Property(e => e.ZczbpartAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ZCZBPartAmount")
                    .HasComment("其中：注册资本金部分投资额");
            });

            modelBuilder.Entity<TccGeneralExpensesDepartment>(entity =>
            {
                entity.ToTable("TCC_GeneralExpensesDepartment");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DepartmentName).HasMaxLength(50);

                entity.Property(e => e.ExpenseType).HasMaxLength(50);

                entity.Property(e => e.PaymentAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.ProjectCode).HasMaxLength(50);

                entity.Property(e => e.Requestor)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TccGeneralExpensesDepartmentTemp>(entity =>
            {
                entity.ToTable("TCC_GeneralExpensesDepartment_temp");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DepartmentName).HasMaxLength(50);

                entity.Property(e => e.ExpenseType).HasMaxLength(50);

                entity.Property(e => e.PaymentAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.ProjectCode).HasMaxLength(50);

                entity.Property(e => e.Requestor)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TccGeneralExpensesDeteail>(entity =>
            {
                entity.ToTable("TCC_GeneralExpensesDeteails");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("价税合计金额");

                entity.Property(e => e.AmountRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AmountRMB")
                    .HasComment("折合人民币金额");

                entity.Property(e => e.ApplyLoginName)
                    .HasMaxLength(50)
                    .HasComment("申请人登录名称");

                entity.Property(e => e.ApplyRealName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("申请人姓名");

                entity.Property(e => e.ApplyUseridentity)
                    .HasMaxLength(50)
                    .HasComment("申请人身份证号");

                entity.Property(e => e.Beyond)
                    .HasMaxLength(50)
                    .HasComment("是否超标");

                entity.Property(e => e.BillAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("票据金额");

                entity.Property(e => e.BillCode)
                    .HasMaxLength(50)
                    .HasComment("票据编号");

                entity.Property(e => e.BillTaxAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("票据税额");

                entity.Property(e => e.BudgetAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("专项费用预算");

                entity.Property(e => e.ByAttachment).HasMaxLength(50);

                entity.Property(e => e.CbyGroup)
                    .HasColumnName("CByGroup")
                    .HasDefaultValueSql("((0))")
                    .HasComment("分组控制预算");

                entity.Property(e => e.ExpenseTypeCode).HasComment("费用类型ID");

                entity.Property(e => e.ExpenseTypeName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("费用类型名称");

                entity.Property(e => e.Incident).HasComment("流程实例号");

                entity.Property(e => e.InvoiceCategoryText)
                    .HasMaxLength(50)
                    .HasComment("票据类型名称");

                entity.Property(e => e.InvoiceCategoryValue).HasComment("票据类型编号--对应字典表：TCC_BasicData     Flag=\"InvoicesCategory\"");

                entity.Property(e => e.InvoiceCode)
                    .HasMaxLength(50)
                    .HasComment("发票代码");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("datetime")
                    .HasComment("开始时间");

                entity.Property(e => e.IsControl)
                    .HasDefaultValueSql("((1))")
                    .HasComment("是否控制预算 0否 1是");

                entity.Property(e => e.IsTaxVoucher)
                    .HasMaxLength(50)
                    .HasComment("是否单列入账");

                entity.Property(e => e.Money)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("金额 用于工会活动费");

                entity.Property(e => e.NotesNumber).HasComment("票据张数");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名称");

                entity.Property(e => e.RCreateTime)
                    .HasMaxLength(50)
                    .HasColumnName("R_CreateTime");

                entity.Property(e => e.RId)
                    .HasMaxLength(36)
                    .HasColumnName("R_ID");

                entity.Property(e => e.RName)
                    .HasMaxLength(50)
                    .HasColumnName("R_name");

                entity.Property(e => e.RTitle)
                    .HasMaxLength(50)
                    .HasColumnName("R_Title");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("汇率");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .HasComment("说明");

                entity.Property(e => e.TaxRate)
                    .HasMaxLength(50)
                    .HasComment("税率编号--对应字典表：TCC_BasicData     Flag=\"TaxRate\"");

                entity.Property(e => e.TaxRateName)
                    .HasMaxLength(50)
                    .HasComment("税率");

                entity.Property(e => e.UnitCode)
                    .HasMaxLength(50)
                    .HasComment("单位编号");

                entity.Property(e => e.UnitName)
                    .HasMaxLength(50)
                    .HasComment("单位名称");

                entity.Property(e => e.Using)
                    .HasMaxLength(50)
                    .HasComment("专项预算需不需要控制预算（单独控制）");
            });

            modelBuilder.Entity<TccGeneralExpensesDeteailsTemp>(entity =>
            {
                entity.ToTable("TCC_GeneralExpensesDeteails_temp");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AmountRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AmountRMB");

                entity.Property(e => e.ApplyLoginName).HasMaxLength(50);

                entity.Property(e => e.ApplyRealName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ApplyUseridentity).HasMaxLength(50);

                entity.Property(e => e.Beyond).HasMaxLength(50);

                entity.Property(e => e.BillAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BillCode).HasMaxLength(50);

                entity.Property(e => e.BillTaxAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BudgetAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ByAttachment).HasMaxLength(50);

                entity.Property(e => e.CbyGroup).HasColumnName("CByGroup");

                entity.Property(e => e.ExpenseTypeName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InvoiceCategoryText).HasMaxLength(50);

                entity.Property(e => e.InvoiceCode).HasMaxLength(50);

                entity.Property(e => e.InvoiceDate).HasColumnType("datetime");

                entity.Property(e => e.IsTaxVoucher).HasMaxLength(50);

                entity.Property(e => e.Money).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.RCreateTime)
                    .HasMaxLength(50)
                    .HasColumnName("R_CreateTime");

                entity.Property(e => e.RId)
                    .HasMaxLength(36)
                    .HasColumnName("R_ID");

                entity.Property(e => e.RName)
                    .HasMaxLength(50)
                    .HasColumnName("R_name");

                entity.Property(e => e.RTitle)
                    .HasMaxLength(50)
                    .HasColumnName("R_Title");

                entity.Property(e => e.Rate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.TaxRate).HasMaxLength(50);

                entity.Property(e => e.TaxRateName).HasMaxLength(50);

                entity.Property(e => e.UnitCode).HasMaxLength(50);

                entity.Property(e => e.UnitName).HasMaxLength(50);

                entity.Property(e => e.Using).HasMaxLength(50);
            });

            modelBuilder.Entity<TccGeneralExpensesHeader>(entity =>
            {
                entity.ToTable("TCC_GeneralExpensesHeader");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键ID");

                entity.Property(e => e.ActPayAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("实际付款金额(付款币种金额)");

                entity.Property(e => e.ActPayCurrency)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("付款币种");

                entity.Property(e => e.ActPayCurrencyName)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("付款币种名称");

                entity.Property(e => e.ActPayRate)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("实际付款汇率");

                entity.Property(e => e.Agency).HasComment("是否代办  1不代办  2代办");

                entity.Property(e => e.AttachmentNum).HasComment("附件张数");

                entity.Property(e => e.BankAccount)
                    .HasMaxLength(50)
                    .HasComment("银行账号");

                entity.Property(e => e.BearUnitCode)
                    .HasMaxLength(50)
                    .HasComment("借款承担单位编号");

                entity.Property(e => e.BearUnitName)
                    .HasMaxLength(200)
                    .HasComment("借款承担单位名称");

                entity.Property(e => e.BeyondReason).HasMaxLength(500);

                entity.Property(e => e.BillConfirmUserLogin)
                    .HasMaxLength(50)
                    .HasComment("票据归档确认-接单会计帐号");

                entity.Property(e => e.BillConfirmUserName)
                    .HasMaxLength(50)
                    .HasComment("票据归档确认-接单会计姓名");

                entity.Property(e => e.BorrowMoneyByj)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BorrowMoneyBYJ")
                    .HasComment("个人备用金借款余额");

                entity.Property(e => e.BorrowMoneyZzj)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BorrowMoneyZZJ")
                    .HasComment("项目周转金借款余额");

                entity.Property(e => e.BorrowPerson)
                    .HasMaxLength(50)
                    .HasComment("借款人");

                entity.Property(e => e.BorrowPersonIdentity)
                    .HasMaxLength(50)
                    .HasComment("借款人身份证号");

                entity.Property(e => e.BorrowTypeCode)
                    .HasDefaultValueSql("((0))")
                    .HasComment("冲借款类型");

                entity.Property(e => e.BorrowTypeName)
                    .HasMaxLength(50)
                    .HasComment("冲借款类型名称");

                entity.Property(e => e.BorrowUse)
                    .HasDefaultValueSql("((0))")
                    .HasComment("借款用途");

                entity.Property(e => e.BudgetMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("预算金额");

                entity.Property(e => e.BusinessObject).HasComment("业务对象");

                entity.Property(e => e.BussinessCard)
                    .HasMaxLength(50)
                    .HasComment("公务卡号");

                entity.Property(e => e.Bz).HasComment("标识 0代表部门借款  1代表项目借款");

                entity.Property(e => e.ClaimsDepartmentCode)
                    .HasMaxLength(50)
                    .HasComment("费用承担部门编号");

                entity.Property(e => e.ClaimsDepartmentName)
                    .HasMaxLength(50)
                    .HasComment("费用承担部门名称");

                entity.Property(e => e.ConfirmAuditLoginName)
                    .HasMaxLength(50)
                    .HasComment("财务业务审核人登录名");

                entity.Property(e => e.ConfirmAuditName)
                    .HasMaxLength(50)
                    .HasComment("财务业务审核人姓名");

                entity.Property(e => e.ConfirmAuditUserIdentity)
                    .HasMaxLength(50)
                    .HasComment("财务业务审核人身份证号");

                entity.Property(e => e.ConfirmDate)
                    .HasColumnType("datetime")
                    .HasComment("付款时间");

                entity.Property(e => e.ConfirmFinaceLoginName)
                    .HasMaxLength(50)
                    .HasComment("财务接单人登录名");

                entity.Property(e => e.ConfirmFinaceName)
                    .HasMaxLength(50)
                    .HasComment("财务接单人姓名");

                entity.Property(e => e.ConfirmFinaceUserIdentity)
                    .HasMaxLength(50)
                    .HasComment("财务接单人身份证号");

                entity.Property(e => e.ConfirmStatus).HasComment("是否已付款  0未付款  1已付款");

                entity.Property(e => e.Currency)
                    .HasMaxLength(50)
                    .HasComment("币种英文");

                entity.Property(e => e.CurrencyName)
                    .HasMaxLength(50)
                    .HasComment("币种中文");

                entity.Property(e => e.DataSource).HasComment("来源");

                entity.Property(e => e.DataSourceText)
                    .HasMaxLength(50)
                    .HasComment("来源名称");

                entity.Property(e => e.ExpenseTypeCode).HasComment("费用分类编号  1运行费 2其他");

                entity.Property(e => e.ExpenseTypeName)
                    .HasMaxLength(50)
                    .HasComment("费用分类名称");

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(50)
                    .HasComment("表单号");

                entity.Property(e => e.Incident).HasComment("流程实例号");

                entity.Property(e => e.IsBeyond).HasComment("是否超标");

                entity.Property(e => e.IsCj)
                    .HasDefaultValueSql("((1))")
                    .HasComment("是否冲借周转金  默认1 ； 2：是 1：否");

                entity.Property(e => e.IsForeignBank)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'N')")
                    .HasComment("是否是外埠银行  Y  N");

                entity.Property(e => e.IsTaxReimbursement)
                    .HasDefaultValueSql("((0))")
                    .HasComment("是否税费报销  0否  1是");

                entity.Property(e => e.IsthirdPay).HasComment("是否第三方支付");

                entity.Property(e => e.LinkBorrowMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("冲借款");

                entity.Property(e => e.LoanCurrencybyj)
                    .HasMaxLength(50)
                    .HasComment("个人备用金币种");

                entity.Property(e => e.LoanCurrencyzzj)
                    .HasMaxLength(10)
                    .IsFixedLength(true)
                    .HasComment("项目周转金币种");

                entity.Property(e => e.Location).HasComment("报销地点：1:天津 2：北京");

                entity.Property(e => e.MoneyActual)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("实报金额");

                entity.Property(e => e.MoneyActualYb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MoneyActual_YB")
                    .HasComment("实报原币金额");

                entity.Property(e => e.MoneyOfForeignRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MoneyOfForeignRMB")
                    .HasComment("冲借款(折合人民币金额)");

                entity.Property(e => e.MoneyShallBig)
                    .HasMaxLength(50)
                    .HasColumnName("MoneyShall_big")
                    .HasComment("报销金额大写");

                entity.Property(e => e.MoneyShallSmall)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MoneyShall_small")
                    .HasComment("报销金额");

                entity.Property(e => e.MoneyShallYb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MoneyShall_YB")
                    .HasComment("报销原币金额");

                entity.Property(e => e.NeedDirector)
                    .HasMaxLength(50)
                    .HasComment("是否需要主管经理审理");

                entity.Property(e => e.Payee).HasComment("收款人  1=经办人  2=报销人");

                entity.Property(e => e.PaymentFormNumber)
                    .HasMaxLength(500)
                    .HasComment("付款单号");

                entity.Property(e => e.PaymentMethod).HasComment("付款方式编号");

                entity.Property(e => e.PaymentType)
                    .HasMaxLength(50)
                    .HasComment("付款方式名称");

                entity.Property(e => e.PayorBank)
                    .HasMaxLength(200)
                    .HasComment("付款银行");

                entity.Property(e => e.PayorBankCode)
                    .HasMaxLength(50)
                    .HasComment("付款银行编号");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名称");

                entity.Property(e => e.ProcessStatus).HasComment("流程状态：0进行中 1已完成 2已撤销");

                entity.Property(e => e.ProjectByBranch).HasComment("是否是分公司员工报销项目归属为非北京分公司的项目  1==是");

                entity.Property(e => e.ProjectCategory)
                    .HasMaxLength(50)
                    .HasComment("项目类型");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .HasComment("项目号");

                entity.Property(e => e.ProjectJnw)
                    .HasMaxLength(50)
                    .HasColumnName("ProjectJNW")
                    .HasComment("项目境内外");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(500)
                    .HasComment("项目名称");

                entity.Property(e => e.ProjectOwnership)
                    .HasMaxLength(50)
                    .HasComment("项目归属");

                entity.Property(e => e.RateOfForeign)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("冲借款折合人民币汇率");

                entity.Property(e => e.ReimburseMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("报销后金额");

                entity.Property(e => e.RemainBudget)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("剩余预算金额");

                entity.Property(e => e.RemainingBorrowMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("冲抵后余额");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date")
                    .HasComment("流程申请时间");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptCode")
                    .HasComment("申请人的主管部门编号");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptName")
                    .HasComment("申请人的主管部门名称");

                entity.Property(e => e.RequestFinishDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_FinishDate")
                    .HasComment("流程结束时间");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName")
                    .HasComment("申请人登录名");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName")
                    .HasComment("申请人姓名");

                entity.Property(e => e.RequestTelPhone)
                    .HasMaxLength(200)
                    .HasColumnName("Request_TelPhone")
                    .HasComment("申请人联系方式");

                entity.Property(e => e.RequestUserIdentity)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserIdentity")
                    .HasComment("申请人身份证号");

                entity.Property(e => e.RequestUserPost)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserPost")
                    .HasComment("申请人岗位等级");

                entity.Property(e => e.ShowPayee).HasComment("是否显示收款人  0=不显示并清空选中值  1=报销人与经办人是同一人 不需要显示但设值为经办人  2=需要显示 供经办人选择");

                entity.Property(e => e.Tractor)
                    .HasMaxLength(50)
                    .HasComment("领款人");

                entity.Property(e => e.VisaDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_DeptCode")
                    .HasComment("经办人主管部门编号");

                entity.Property(e => e.VisaDeptName)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_DeptName")
                    .HasComment("经办人主管部门名称");

                entity.Property(e => e.VisaLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_LoginName")
                    .HasComment("经办人登录账号");

                entity.Property(e => e.VisaRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_RealName")
                    .HasComment("经办人姓名");

                entity.Property(e => e.VisaUserIdentity)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_UserIdentity")
                    .HasComment("经办人身份证号");

                entity.Property(e => e.VisaUserPost)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_UserPost")
                    .HasComment("经办人岗位等级");

                entity.Property(e => e.Voucherid)
                    .HasColumnName("VOUCHERID")
                    .HasComment("对应凭证ID号");
            });

            modelBuilder.Entity<TccGeneralExpensesHeaderTemp>(entity =>
            {
                entity.ToTable("TCC_GeneralExpensesHeader_temp");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BankAccount).HasMaxLength(50);

                entity.Property(e => e.BearUnitCode).HasMaxLength(50);

                entity.Property(e => e.BearUnitName).HasMaxLength(200);

                entity.Property(e => e.BeyondReason).HasMaxLength(500);

                entity.Property(e => e.BillConfirmUserLogin)
                    .HasMaxLength(50)
                    .HasComment("票据归档确认-接单会计帐号");

                entity.Property(e => e.BillConfirmUserName)
                    .HasMaxLength(50)
                    .HasComment("票据归档确认-接单会计姓名");

                entity.Property(e => e.BorrowMoneyByj)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BorrowMoneyBYJ");

                entity.Property(e => e.BorrowMoneyZzj)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BorrowMoneyZZJ");

                entity.Property(e => e.BorrowPerson).HasMaxLength(50);

                entity.Property(e => e.BorrowPersonIdentity).HasMaxLength(50);

                entity.Property(e => e.BorrowTypeName).HasMaxLength(50);

                entity.Property(e => e.BudgetMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BussinessCard).HasMaxLength(50);

                entity.Property(e => e.ClaimsDepartmentCode).HasMaxLength(50);

                entity.Property(e => e.ClaimsDepartmentName).HasMaxLength(50);

                entity.Property(e => e.ConfirmAuditLoginName).HasMaxLength(50);

                entity.Property(e => e.ConfirmAuditName).HasMaxLength(50);

                entity.Property(e => e.ConfirmAuditUserIdentity).HasMaxLength(50);

                entity.Property(e => e.ConfirmDate).HasColumnType("datetime");

                entity.Property(e => e.ConfirmFinaceLoginName).HasMaxLength(50);

                entity.Property(e => e.ConfirmFinaceName).HasMaxLength(50);

                entity.Property(e => e.ConfirmFinaceUserIdentity).HasMaxLength(50);

                entity.Property(e => e.Currency).HasMaxLength(50);

                entity.Property(e => e.CurrencyName).HasMaxLength(50);

                entity.Property(e => e.DataSourceText).HasMaxLength(50);

                entity.Property(e => e.ExpenseTypeName).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.LinkBorrowMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LoanCurrencybyj).HasMaxLength(50);

                entity.Property(e => e.LoanCurrencyzzj)
                    .HasMaxLength(10)
                    .IsFixedLength(true);

                entity.Property(e => e.MoneyActual).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MoneyActualYb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MoneyActual_YB");

                entity.Property(e => e.MoneyOfForeignRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MoneyOfForeignRMB");

                entity.Property(e => e.MoneyShallBig)
                    .HasMaxLength(50)
                    .HasColumnName("MoneyShall_big");

                entity.Property(e => e.MoneyShallSmall)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MoneyShall_small");

                entity.Property(e => e.MoneyShallYb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MoneyShall_YB");

                entity.Property(e => e.NeedDirector).HasMaxLength(50);

                entity.Property(e => e.PaymentFormNumber).HasMaxLength(500);

                entity.Property(e => e.PaymentType).HasMaxLength(50);

                entity.Property(e => e.PayorBank).HasMaxLength(200);

                entity.Property(e => e.PayorBankCode).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectCategory).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(50);

                entity.Property(e => e.ProjectJnw)
                    .HasMaxLength(50)
                    .HasColumnName("ProjectJNW");

                entity.Property(e => e.ProjectName).HasMaxLength(500);

                entity.Property(e => e.ProjectOwnership).HasMaxLength(50);

                entity.Property(e => e.RateOfForeign).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ReimburseMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RemainBudget).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RemainingBorrowMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptCode");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptName");

                entity.Property(e => e.RequestFinishDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_FinishDate");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName");

                entity.Property(e => e.RequestTelPhone)
                    .HasMaxLength(200)
                    .HasColumnName("Request_TelPhone");

                entity.Property(e => e.RequestUserIdentity)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserIdentity");

                entity.Property(e => e.RequestUserPost)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserPost");

                entity.Property(e => e.Tractor).HasMaxLength(50);

                entity.Property(e => e.VisaDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_DeptCode");

                entity.Property(e => e.VisaDeptName)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_DeptName");

                entity.Property(e => e.VisaLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_LoginName");

                entity.Property(e => e.VisaRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_RealName");

                entity.Property(e => e.VisaUserIdentity)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_UserIdentity");

                entity.Property(e => e.VisaUserPost)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_UserPost");

                entity.Property(e => e.Voucherid).HasColumnName("VOUCHERID");
            });

            modelBuilder.Entity<TccGeneralExpensesPayInfo>(entity =>
            {
                entity.ToTable("TCC_GeneralExpensesPayInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("价税合计金额");

                entity.Property(e => e.AmountRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AmountRMB")
                    .HasComment("折合人民币金额");

                entity.Property(e => e.ApplyLoginName)
                    .HasMaxLength(50)
                    .HasComment("申请人登录名称");

                entity.Property(e => e.ApplyRealName)
                    .HasMaxLength(50)
                    .HasComment("申请人姓名");

                entity.Property(e => e.ApplyUseridentity)
                    .HasMaxLength(50)
                    .HasComment("申请人身份证号");

                entity.Property(e => e.Beyond)
                    .HasMaxLength(50)
                    .HasComment("是否超标");

                entity.Property(e => e.BillAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("票据金额");

                entity.Property(e => e.BillCode)
                    .HasMaxLength(50)
                    .HasComment("票据编号");

                entity.Property(e => e.BillTaxAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("票据税额");

                entity.Property(e => e.ByAttachment).HasMaxLength(50);

                entity.Property(e => e.ExpenseTypeCode).HasComment("费用类型ID");

                entity.Property(e => e.ExpenseTypeName)
                    .HasMaxLength(50)
                    .HasComment("费用类型名称");

                entity.Property(e => e.FinanceChangeLocalCurrencyAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("已付款带出的付款的合计值（折合人民币金额）");

                entity.Property(e => e.FinancePaymentTotal)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("已付款带出的付款的合计值（原币）");

                entity.Property(e => e.Incident).HasComment("流程实例号");

                entity.Property(e => e.InvoiceCategoryText)
                    .HasMaxLength(50)
                    .HasComment("票据类型名称");

                entity.Property(e => e.InvoiceCategoryValue).HasComment("票据类型编号--对应字典表：TCC_BasicData     Flag=\"InvoicesCategory\"");

                entity.Property(e => e.InvoiceCode)
                    .HasMaxLength(50)
                    .HasComment("发票代码");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("datetime")
                    .HasComment("开票时间");

                entity.Property(e => e.IsSupplierOrCustomer).HasComment("1是供应商 2客户");

                entity.Property(e => e.IsTaxVoucher)
                    .HasMaxLength(50)
                    .HasComment("是否单列入账");

                entity.Property(e => e.NotesNumber).HasComment("票据张数");

                entity.Property(e => e.PayInfoFormNumber)
                    .HasMaxLength(50)
                    .HasColumnName("PayInfo_FormNumber")
                    .HasComment("付款单号");

                entity.Property(e => e.PayInfoReceiveCpmpany)
                    .HasMaxLength(200)
                    .HasColumnName("PayInfo_ReceiveCpmpany")
                    .HasComment("收款单位名称");

                entity.Property(e => e.PaymentReceivingCompanyCode)
                    .HasMaxLength(50)
                    .HasComment("付款单位名称编号");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名称");

                entity.Property(e => e.RCreateTime)
                    .HasMaxLength(50)
                    .HasColumnName("R_CreateTime");

                entity.Property(e => e.RId)
                    .HasMaxLength(36)
                    .HasColumnName("R_ID");

                entity.Property(e => e.RName)
                    .HasMaxLength(50)
                    .HasColumnName("R_name");

                entity.Property(e => e.RTitle)
                    .HasMaxLength(50)
                    .HasColumnName("R_Title");

                entity.Property(e => e.Rate)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("汇率");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .HasComment("说明");

                entity.Property(e => e.TaxRate)
                    .HasMaxLength(50)
                    .HasComment("税率编号--对应字典表：TCC_BasicData     Flag=\"TaxRate\"");

                entity.Property(e => e.TaxRateName)
                    .HasMaxLength(50)
                    .HasComment("税率");
            });

            modelBuilder.Entity<TccGeneralExpensesPayInfoTemp>(entity =>
            {
                entity.ToTable("TCC_GeneralExpensesPayInfo_temp");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AmountRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AmountRMB");

                entity.Property(e => e.ApplyLoginName).HasMaxLength(50);

                entity.Property(e => e.ApplyRealName).HasMaxLength(50);

                entity.Property(e => e.ApplyUseridentity).HasMaxLength(50);

                entity.Property(e => e.Beyond).HasMaxLength(50);

                entity.Property(e => e.BillAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BillCode).HasMaxLength(50);

                entity.Property(e => e.BillTaxAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ByAttachment).HasMaxLength(50);

                entity.Property(e => e.ExpenseTypeName).HasMaxLength(50);

                entity.Property(e => e.FinanceChangeLocalCurrencyAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FinancePaymentTotal).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.InvoiceCategoryText).HasMaxLength(50);

                entity.Property(e => e.InvoiceCode).HasMaxLength(50);

                entity.Property(e => e.InvoiceDate).HasColumnType("datetime");

                entity.Property(e => e.IsTaxVoucher)
                    .HasMaxLength(50)
                    .HasComment("是否单列入账");

                entity.Property(e => e.PayInfoFormNumber)
                    .HasMaxLength(50)
                    .HasColumnName("PayInfo_FormNumber");

                entity.Property(e => e.PayInfoReceiveCpmpany)
                    .HasMaxLength(200)
                    .HasColumnName("PayInfo_ReceiveCpmpany");

                entity.Property(e => e.PaymentReceivingCompanyCode).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.RCreateTime)
                    .HasMaxLength(50)
                    .HasColumnName("R_CreateTime");

                entity.Property(e => e.RId)
                    .HasMaxLength(36)
                    .HasColumnName("R_ID");

                entity.Property(e => e.RName)
                    .HasMaxLength(50)
                    .HasColumnName("R_name");

                entity.Property(e => e.RTitle)
                    .HasMaxLength(50)
                    .HasColumnName("R_Title");

                entity.Property(e => e.Rate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.TaxRate).HasMaxLength(50);

                entity.Property(e => e.TaxRateName).HasMaxLength(50);
            });

            modelBuilder.Entity<TccGrTest>(entity =>
            {
                entity.ToTable("TCC_GrTest");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyDept).HasMaxLength(50);

                entity.Property(e => e.ApplyDeptNo).HasMaxLength(50);

                entity.Property(e => e.ApplyLoginUser).HasMaxLength(50);

                entity.Property(e => e.ApplyName).HasMaxLength(50);

                entity.Property(e => e.ApplyRemark).HasMaxLength(255);

                entity.Property(e => e.ProcessName).HasMaxLength(50);
            });

            modelBuilder.Entity<TccGroupForLeave>(entity =>
            {
                entity.ToTable("TCC_GroupForLeave");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AllDays).HasColumnType("decimal(18, 1)");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptCode");

                entity.Property(e => e.RequestDeptName).HasColumnName("Request_DeptName");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName");

                entity.Property(e => e.RequestTelPhone)
                    .HasMaxLength(50)
                    .HasColumnName("Request_TelPhone");

                entity.Property(e => e.RequestUserName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserName");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<TccGuaranteeLetterContractInfo>(entity =>
            {
                entity.HasKey(e => e.ContractId)
                    .HasName("PK__TCC_Guar__3214EC275596676D");

                entity.ToTable("TCC_GuaranteeLetterContractInfo");

                entity.Property(e => e.ContractId)
                    .HasMaxLength(36)
                    .HasColumnName("ContractID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.AppointGrtLetter)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContractAmt).HasColumnType("decimal(30, 2)");

                entity.Property(e => e.ContractCode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContractCreateDate).HasColumnType("date");

                entity.Property(e => e.ContractCurrency)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContractName)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContractType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.HdId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .HasColumnName("HdID")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MoneySrc)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OppositeCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OppositeName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OppositeType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<TccGuaranteeLetterDetail>(entity =>
            {
                entity.HasKey(e => e.DetailId)
                    .HasName("PK__TCC_Guar__3214EC2763E486C4");

                entity.ToTable("TCC_GuaranteeLetterDetail");

                entity.Property(e => e.DetailId)
                    .HasMaxLength(36)
                    .HasColumnName("DetailID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.DeliverDate).HasColumnType("date");

                entity.Property(e => e.DtDesc).HasMaxLength(500);

                entity.Property(e => e.GrtLtAmt).HasColumnType("decimal(30, 2)");

                entity.Property(e => e.GrtLtBen)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GrtLtCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GrtLtCurrency)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GrtLtDeliver)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GrtLtDesc)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GrtLtEdDt).HasColumnType("date");

                entity.Property(e => e.GrtLtGuaAmt).HasColumnType("decimal(30, 2)");

                entity.Property(e => e.GrtLtRange)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GrtLtReviewDesc)
                    .HasMaxLength(300)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GrtLtReviewed).HasDefaultValueSql("((1))");

                entity.Property(e => e.GrtLtRmbAmt).HasColumnType("decimal(30, 2)");

                entity.Property(e => e.GrtLtStDt).HasColumnType("date");

                entity.Property(e => e.GrtLtType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.HdId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .HasColumnName("HdID")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpenBank)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpenEnt)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<TccGuaranteeLetterFinanceOpenDetail>(entity =>
            {
                entity.HasKey(e => e.FnDetailId)
                    .HasName("PK__TCC_Guar__984662130CE69C57");

                entity.ToTable("TCC_GuaranteeLetterFinanceOpenDetail");

                entity.Property(e => e.FnDetailId)
                    .HasMaxLength(36)
                    .HasColumnName("FnDetailID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.FnGrtLtAmt).HasColumnType("decimal(30, 6)");

                entity.Property(e => e.FnGrtLtBen)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FnGrtLtCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FnGrtLtCurrency)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FnGrtLtEdDt).HasColumnType("datetime");

                entity.Property(e => e.FnGrtLtGuaAmt).HasColumnType("decimal(30, 2)");

                entity.Property(e => e.FnGrtLtParities).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.FnGrtLtRange)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FnGrtLtReceiptor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FnGrtLtReceiveDt).HasColumnType("datetime");

                entity.Property(e => e.FnGrtLtRmbAmt).HasColumnType("decimal(30, 6)");

                entity.Property(e => e.FnGrtLtStDt)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FnGrtLtType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FnOpenBank)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FnOpenBankCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FnOpenEnt)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FnPayBankAcct)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FnPayBankName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FnPayBankSubjectCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.HandingAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("手续费");

                entity.Property(e => e.HandingBankSubjectCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("手续费银行科目");

                entity.Property(e => e.HandingBankSubjectName)
                    .HasMaxLength(50)
                    .HasComment("手续费银行科目");

                entity.Property(e => e.HandingCheckUser).HasMaxLength(50);

                entity.Property(e => e.HandingCreateUser).HasMaxLength(50);

                entity.Property(e => e.HandingVoucherCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("手续费入账");

                entity.Property(e => e.HandingVoucherid)
                    .HasColumnName("HandingVOUCHERID")
                    .HasComment("手续费入账");

                entity.Property(e => e.HdId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .HasColumnName("HdID")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IsHanding).HasComment("是否手续费2有1没有");
            });

            modelBuilder.Entity<TccGuaranteeLetterFinanceOpenDetail2>(entity =>
            {
                entity.HasKey(e => e.FnDetailId);

                entity.ToTable("TCC_GuaranteeLetterFinanceOpenDetail2");

                entity.Property(e => e.FnDetailId)
                    .HasMaxLength(36)
                    .HasColumnName("FnDetailID");

                entity.Property(e => e.FnGrtLtAmt).HasColumnType("decimal(30, 2)");

                entity.Property(e => e.FnGrtLtBen)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.FnGrtLtCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FnGrtLtCurrency)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.FnGrtLtEdDt).HasColumnType("date");

                entity.Property(e => e.FnGrtLtParities).HasColumnType("decimal(18, 10)");

                entity.Property(e => e.FnGrtLtRange)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.FnGrtLtRmbAmt).HasColumnType("decimal(30, 2)");

                entity.Property(e => e.FnGrtLtStDt).HasColumnType("date");

                entity.Property(e => e.FnGrtLtType)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.FnOpenBank)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.FnOpenBankCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FnOpenEnt)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.HdId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .HasColumnName("HdID");
            });

            modelBuilder.Entity<TccGuaranteeLetterFnVouch>(entity =>
            {
                entity.HasKey(e => e.FnGrtLtVchId)
                    .HasName("PK__TCC_Guar__5696C37319A178F7");

                entity.ToTable("TCC_GuaranteeLetterFnVouch");

                entity.Property(e => e.FnGrtLtVchId)
                    .HasMaxLength(36)
                    .HasColumnName("FnGrtLtVchID");

                entity.Property(e => e.CustomerCode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CustomerName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CustomerType)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DrawBankCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DrawBankName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DrawSubjectCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FnGrtLtGuaAmt).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FnVchCashier)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FnVchCheckUser)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FnVchCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FnVchCreateUser)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.HdId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .HasColumnName("HdID");

                entity.Property(e => e.PayBankCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PayBankName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PaySubjectCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ProjectCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ProjectName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");

                entity.Property(e => e.VoucherId).HasColumnName("VoucherID");
            });

            modelBuilder.Entity<TccGuaranteeLetterHeader>(entity =>
            {
                entity.HasKey(e => e.Glid)
                    .HasName("PK__TCC_Guar__3214EC275418334F");

                entity.ToTable("TCC_GuaranteeLetterHeader");

                entity.HasIndex(e => new { e.ProcessName, e.Incident }, "IX_TCC_GuaranteeLetterHeader");

                entity.Property(e => e.Glid)
                    .HasMaxLength(36)
                    .HasColumnName("GLID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.AuditAccountIdnumber)
                    .HasMaxLength(50)
                    .HasColumnName("AuditAccountIDNumber");

                entity.Property(e => e.AuditAccountLoginName).HasMaxLength(50);

                entity.Property(e => e.AuditAccountName).HasMaxLength(50);

                entity.Property(e => e.ConfirmFinaceIdnumber)
                    .HasMaxLength(50)
                    .HasColumnName("ConfirmFinaceIDNumber");

                entity.Property(e => e.ConfirmFinaceLoginName).HasMaxLength(50);

                entity.Property(e => e.ConfirmFinaceName).HasMaxLength(50);

                entity.Property(e => e.FormNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OppositeCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ProcessName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RequestDeptCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptCode")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RequestDeptName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptName")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RequestLoginName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RequestRealName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("Request_RealName")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RequestUserProfessional)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserProfessional")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.UserIdentity)
                    .IsRequired()
                    .HasMaxLength(18)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.VoucherId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("VoucherID")
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<TccGuaranteeLetterModifyInfo>(entity =>
            {
                entity.HasKey(e => e.ModId)
                    .HasName("PK_TCC_GuaranteeLetterModifyInfo_1");

                entity.ToTable("TCC_GuaranteeLetterModifyInfo");

                entity.Property(e => e.ModId)
                    .HasMaxLength(36)
                    .HasColumnName("ModID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.ChangeRmbAmt).HasColumnType("decimal(30, 2)");

                entity.Property(e => e.ChangedAmt).HasColumnType("decimal(30, 2)");

                entity.Property(e => e.ClaimAmt).HasColumnType("decimal(30, 2)");

                entity.Property(e => e.ClaimAmtRecvDate).HasColumnType("date");

                entity.Property(e => e.EndDate).HasColumnType("date");

                entity.Property(e => e.ExchangeRate).HasColumnType("decimal(30, 2)");

                entity.Property(e => e.GrtLtCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.HdId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .HasColumnName("HdID")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ModApplyDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ModifyOpinion)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PreClaimAmt).HasColumnType("decimal(30, 2)");

                entity.Property(e => e.ProcessName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WithdrawDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WithdrawPersonLoginName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WithdrawPersonRealName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WithdrawPersonUserIdentity)
                    .HasMaxLength(18)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<TccGuaranteeLetterPrjInfo>(entity =>
            {
                entity.HasKey(e => e.PrjId)
                    .HasName("PK__TCC_Guar__3214EC27626652A6");

                entity.ToTable("TCC_GuaranteeLetterPrjInfo");

                entity.Property(e => e.PrjId)
                    .HasMaxLength(36)
                    .HasColumnName("PrjID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.HdId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .HasColumnName("HdID")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ProjectCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ProjectName)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ProjectType)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.Hd)
                    .WithMany(p => p.TccGuaranteeLetterPrjInfos)
                    .HasForeignKey(d => d.HdId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCC_GuaranteeLetterPrjInfo_TCC_GuaranteeLetterHeader");
            });

            modelBuilder.Entity<TccGuaranteeLetterpoundageAssociated>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_GuaranteeLetterpoundageAssociated");

                entity.Property(e => e.VoucherId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("VoucherID")
                    .HasComment("保函关联表");
            });

            modelBuilder.Entity<TccGuaranteeLetterpoundageDetail>(entity =>
            {
                entity.ToTable("TCC_GuaranteeLetterpoundageDetails");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("保函台账主键id");

                entity.Property(e => e.ContractCode)
                    .HasMaxLength(100)
                    .HasComment("合同编号");

                entity.Property(e => e.Contractname)
                    .HasMaxLength(100)
                    .HasComment("合同名称");

                entity.Property(e => e.Currency)
                    .HasMaxLength(50)
                    .HasComment("手续费币种");

                entity.Property(e => e.Glid)
                    .HasMaxLength(100)
                    .HasColumnName("GLID")
                    .HasComment("子id");

                entity.Property(e => e.GrtLtAmt)
                    .HasMaxLength(100)
                    .HasComment("保函金额");

                entity.Property(e => e.GrtLtCode)
                    .HasMaxLength(100)
                    .HasComment("保函编号");

                entity.Property(e => e.GrtLtCurrency)
                    .HasMaxLength(100)
                    .HasComment("保函币种");

                entity.Property(e => e.GrtLtRmbAmt)
                    .HasMaxLength(100)
                    .HasComment("包含手续费（折合人名币）");

                entity.Property(e => e.GrtLtType)
                    .HasMaxLength(50)
                    .HasComment("保函类别");

                entity.Property(e => e.Hdid)
                    .HasColumnName("HDid")
                    .HasComment("保函主表对应id 外键");

                entity.Property(e => e.Incident).HasComment("实例号");

                entity.Property(e => e.IsCollect)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((2))")
                    .IsFixedLength(true)
                    .HasComment("是否收取保函1收取2开立");

                entity.Property(e => e.Isjq)
                    .HasColumnName("ISJQ")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.LoiPoundage)
                    .HasMaxLength(100)
                    .HasColumnName("LOI_poundage")
                    .HasComment("保函手续费");

                entity.Property(e => e.Papername)
                    .HasMaxLength(100)
                    .HasComment("保函名称");

                entity.Property(e => e.Parities)
                    .HasMaxLength(100)
                    .HasColumnName("parities")
                    .HasComment("汇率");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(100)
                    .HasComment("流程名");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(100)
                    .HasComment("项目号");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(100)
                    .HasComment("项目名称");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName")
                    .HasComment("申请人");

                entity.Property(e => e.Timeofpayment)
                    .HasColumnType("datetime")
                    .HasComment("付款时间");
            });

            modelBuilder.Entity<TccGuaranteeLetterpoundageHeader>(entity =>
            {
                entity.ToTable("TCC_GuaranteeLetterpoundageHeader");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Attachment).HasComment("附件张数");

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(70)
                    .HasComment("表单编号");

                entity.Property(e => e.JoneslanglasallNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Joneslanglasall_Number")
                    .HasComment("联行行号");

                entity.Property(e => e.PayBankName)
                    .HasMaxLength(50)
                    .HasColumnName("PayBank_Name")
                    .HasComment("付款银行名称");

                entity.Property(e => e.PayBankNumbers)
                    .HasMaxLength(100)
                    .HasColumnName("PayBank_Numbers")
                    .HasComment("付款银行行号");

                entity.Property(e => e.PayBankSubjectCode)
                    .HasMaxLength(100)
                    .HasColumnName("PayBank_SubjectCode")
                    .HasComment("付款银行科目号");

                entity.Property(e => e.PaymentDate)
                    .HasColumnType("datetime")
                    .HasComment("付款时间");

                entity.Property(e => e.PaymentMethod).HasComment("付款方式 value值");

                entity.Property(e => e.PaymentType)
                    .HasMaxLength(50)
                    .HasComment("付款方式-text值");

                entity.Property(e => e.PaymentVatcurrency)
                    .HasMaxLength(50)
                    .HasColumnName("PaymentVATCurrency")
                    .HasComment("付款币种Value值");

                entity.Property(e => e.PaymentVatcurrencyShow)
                    .HasMaxLength(50)
                    .HasColumnName("PaymentVATCurrency_Show")
                    .HasComment("付款币种Text值");

                entity.Property(e => e.ProcessFinishDate).HasColumnType("datetime");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProcessStatus).HasComment("状态");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasComment("付款时间");

                entity.Property(e => e.RequestDeptcode)
                    .HasMaxLength(50)
                    .HasColumnName("Request_Deptcode")
                    .HasComment("部门编号");

                entity.Property(e => e.RequestDeptname)
                    .HasMaxLength(50)
                    .HasColumnName("Request_Deptname")
                    .HasComment("部门名称");

                entity.Property(e => e.RequestDtae)
                    .HasColumnType("datetime")
                    .HasComment("流程发起时间");

                entity.Property(e => e.RequestFormNumber)
                    .HasMaxLength(50)
                    .HasComment("表单号");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName")
                    .HasComment("登陆名");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName")
                    .HasComment("姓名");

                entity.Property(e => e.RequestUserIdentity)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserIdentity")
                    .HasComment("身份证号");

                entity.Property(e => e.Voucherid)
                    .HasColumnName("VOUCHERID")
                    .HasComment("凭证id");
            });

            modelBuilder.Entity<TccHasAmountofReimburse>(entity =>
            {
                entity.ToTable("TCC_HasAmountofReimburse");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.HasHappenAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("已花费金额");

                entity.Property(e => e.RealName)
                    .HasMaxLength(50)
                    .HasComment("姓名");

                entity.Property(e => e.UserIdentify)
                    .HasMaxLength(50)
                    .HasComment("身份证号");

                entity.Property(e => e.Year).HasComment("年度");
            });

            modelBuilder.Entity<TccHasAppdenAmountOfDept>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_HasAppdenAmountOfDept");

                entity.Property(e => e.Amount)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("amount");

                entity.Property(e => e.Deptcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DEPTCODE");

                entity.Property(e => e.Item1)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Item2)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Item3)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Nd)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("ND");
            });

            modelBuilder.Entity<TccHistorySpecialId>(entity =>
            {
                entity.ToTable("TCC_History_SpecialID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Hid).HasColumnName("HID");
            });

            modelBuilder.Entity<TccHouseSubsidyDetail>(entity =>
            {
                entity.ToTable("TCC_HouseSubsidyDetail");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AdmissionDate)
                    .HasColumnType("datetime")
                    .HasComment("入院时间");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("本次报销金额");

                entity.Property(e => e.AmountTotal)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("本次报销合计");

                entity.Property(e => e.ApplyPerson)
                    .HasMaxLength(50)
                    .HasComment("报销人姓名");

                entity.Property(e => e.ApplyUseridentity)
                    .HasMaxLength(50)
                    .HasComment("报销人身份证号");

                entity.Property(e => e.BeginDate)
                    .HasColumnType("datetime")
                    .HasComment("开始时间");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .HasComment("报销人主管部门编号");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .HasComment("报销人主管部门名称");

                entity.Property(e => e.EducationLevel)
                    .HasMaxLength(50)
                    .HasComment("学历");

                entity.Property(e => e.HasHappendAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("已报销金额");

                entity.Property(e => e.IsGrant)
                    .HasDefaultValueSql("((0))")
                    .HasComment("1  已发放  0未发放");

                entity.Property(e => e.Location)
                    .HasMaxLength(50)
                    .HasComment("薪资归属地");

                entity.Property(e => e.Operate).HasComment("查看信息  1:天津  2：北京  3：北京（入职三年以上）");

                entity.Property(e => e.PayCategory)
                    .HasMaxLength(50)
                    .HasComment("薪酬类别");

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.RemainAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("剩余报销金额");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .HasComment("说明");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName")
                    .HasComment("申请人登录名");

                entity.Property(e => e.SpecialAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("特殊补贴");

                entity.Property(e => e.Standard)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("报销标准");

                entity.Property(e => e.Ze)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ze")
                    .HasDefaultValueSql("((0))")
                    .HasComment("住房补贴总额");
            });

            modelBuilder.Entity<TccHouseSubsidyHeader>(entity =>
            {
                entity.ToTable("TCC_HouseSubsidyHeader");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AttachmentNum).HasComment("附件张数(天津)");

                entity.Property(e => e.AttachmentNumBj)
                    .HasColumnName("AttachmentNum_BJ")
                    .HasComment("附件张数(北京)");

                entity.Property(e => e.BankAccount)
                    .HasMaxLength(50)
                    .HasComment("银行账号(天津)");

                entity.Property(e => e.BankAccountBj)
                    .HasMaxLength(50)
                    .HasColumnName("BankAccount_BJ")
                    .HasComment("银行账号(北京)");

                entity.Property(e => e.BusinessObject).HasComment("业务对象");

                entity.Property(e => e.ClaimsDepartmentCode)
                    .HasMaxLength(50)
                    .HasComment("费用承担部门编号");

                entity.Property(e => e.ClaimsDepartmentName)
                    .HasMaxLength(50)
                    .HasComment("费用承担部门");

                entity.Property(e => e.ConfirmAuditDate)
                    .HasColumnType("datetime")
                    .HasComment("财务业务审核时间(天津)");

                entity.Property(e => e.ConfirmAuditDateBj)
                    .HasColumnType("datetime")
                    .HasColumnName("ConfirmAuditDate_BJ")
                    .HasComment("财务业务审核时间(北京)");

                entity.Property(e => e.ConfirmAuditLoginName)
                    .HasMaxLength(50)
                    .HasComment("财务业务审核人登录名(天津)");

                entity.Property(e => e.ConfirmAuditLoginNameBj)
                    .HasMaxLength(50)
                    .HasColumnName("ConfirmAuditLoginName_BJ")
                    .HasComment("财务业务审核人登录名(北京)");

                entity.Property(e => e.ConfirmAuditName)
                    .HasMaxLength(50)
                    .HasComment("财务业务审核人姓名(天津)");

                entity.Property(e => e.ConfirmAuditNameBj)
                    .HasMaxLength(50)
                    .HasColumnName("ConfirmAuditName_BJ")
                    .HasComment("财务业务审核人姓名(北京)");

                entity.Property(e => e.ConfirmAuditUserIdentity)
                    .HasMaxLength(50)
                    .HasComment("财务业务审核人身份证号(天津)");

                entity.Property(e => e.ConfirmAuditUserIdentityBj)
                    .HasMaxLength(50)
                    .HasColumnName("ConfirmAuditUserIdentity_BJ")
                    .HasComment("财务业务审核人身份证号(北京)");

                entity.Property(e => e.ConfirmDate)
                    .HasColumnType("datetime")
                    .HasComment("接单时间(天津)");

                entity.Property(e => e.ConfirmDateBj)
                    .HasColumnType("datetime")
                    .HasColumnName("ConfirmDate_BJ")
                    .HasComment("接单时间(北京)");

                entity.Property(e => e.ConfirmFinaceLoginName)
                    .HasMaxLength(50)
                    .HasComment("财务接单人登录名(天津)");

                entity.Property(e => e.ConfirmFinaceLoginNameBj)
                    .HasMaxLength(50)
                    .HasColumnName("ConfirmFinaceLoginName_BJ")
                    .HasComment("财务接单人登录名(北京)");

                entity.Property(e => e.ConfirmFinaceName)
                    .HasMaxLength(50)
                    .HasComment("财务接单人姓名(天津)");

                entity.Property(e => e.ConfirmFinaceNameBj)
                    .HasMaxLength(50)
                    .HasColumnName("ConfirmFinaceName_BJ")
                    .HasComment("财务接单人姓名(北京)");

                entity.Property(e => e.ConfirmFinaceUserIdentity)
                    .HasMaxLength(50)
                    .HasComment("财务接单人身份证号(天津)");

                entity.Property(e => e.ConfirmFinaceUserIdentityBj)
                    .HasMaxLength(50)
                    .HasColumnName("ConfirmFinaceUserIdentity_BJ")
                    .HasComment("财务接单人身份证号(北京)");

                entity.Property(e => e.ConfirmStatus).HasComment("(天津)是否已付款  0未付款  1已付款");

                entity.Property(e => e.ConfirmStatusBj)
                    .HasColumnName("ConfirmStatus_BJ")
                    .HasComment("(北京)是否已付款  0未付款  1已付款");

                entity.Property(e => e.Expenseofjd)
                    .HasMaxLength(50)
                    .HasColumnName("expenseofjd")
                    .HasComment("报销季度");

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(50)
                    .HasComment("表单号");

                entity.Property(e => e.Location).HasComment("报销地点：1:天津 2：北京");

                entity.Property(e => e.MoneyActualBj)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MoneyActual_bj")
                    .HasComment("实报金额(北京)");

                entity.Property(e => e.MoneyActualTj)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MoneyActual_tj")
                    .HasComment("实报金额(天津)");

                entity.Property(e => e.MoneyShallBigBj)
                    .HasMaxLength(200)
                    .HasColumnName("MoneyShall_big_bj")
                    .HasComment("报销金额大写(北京)");

                entity.Property(e => e.MoneyShallBigTj)
                    .HasMaxLength(200)
                    .HasColumnName("MoneyShall_big_tj")
                    .HasComment("报销金额大写(天津)");

                entity.Property(e => e.MoneyShallSmallBj)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MoneyShall_small_bj")
                    .HasComment("报销金额(北京)");

                entity.Property(e => e.MoneyShallSmallTj)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MoneyShall_small_tj")
                    .HasComment("报销金额(天津)");

                entity.Property(e => e.MoneyTotal)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("报销合计金额");

                entity.Property(e => e.Operate).HasComment("查看信息  1:天津  2：北京  3：北京（入职三年以上）");

                entity.Property(e => e.PaymentMethod).HasComment("付款方式编号(天津)");

                entity.Property(e => e.PaymentMethodBj)
                    .HasColumnName("PaymentMethod_BJ")
                    .HasComment("付款方式编号(北京)");

                entity.Property(e => e.PaymentType)
                    .HasMaxLength(50)
                    .HasComment("付款方式名称(天津)");

                entity.Property(e => e.PaymentTypeBj)
                    .HasMaxLength(50)
                    .HasColumnName("PaymentType_BJ")
                    .HasComment("付款方式名称(北京)");

                entity.Property(e => e.PayorBank)
                    .HasMaxLength(200)
                    .HasComment("付款银行(天津)");

                entity.Property(e => e.PayorBankBj)
                    .HasMaxLength(200)
                    .HasColumnName("PayorBank_BJ")
                    .HasComment("付款银行(北京)");

                entity.Property(e => e.PayorBankCode)
                    .HasMaxLength(50)
                    .HasComment("付款银行编号(天津)");

                entity.Property(e => e.PayorBankCodeBj)
                    .HasMaxLength(50)
                    .HasColumnName("PayorBankCode_BJ")
                    .HasComment("付款银行编号(北京)");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProcessStatus).HasComment("流程状态：0进行中 1已完成 2已撤销");

                entity.Property(e => e.Reason).HasMaxLength(500);

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date")
                    .HasComment("流程申请时间");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptCode")
                    .HasComment("申请人的主管部门编号");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptName")
                    .HasComment("申请人的主管部门名称");

                entity.Property(e => e.RequestFinishDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_FinishDate")
                    .HasComment("流程结束时间");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName")
                    .HasComment("申请人登录名");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName")
                    .HasComment("申请人姓名");

                entity.Property(e => e.RequestTelPhone)
                    .HasMaxLength(50)
                    .HasColumnName("Request_TelPhone")
                    .HasComment("申请人联系方式");

                entity.Property(e => e.RequestUserIdentity)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserIdentity")
                    .HasComment("申请人身份证号");

                entity.Property(e => e.RequestUserPost)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserPost")
                    .HasComment("申请人岗位等级");

                entity.Property(e => e.Voucherid)
                    .HasColumnName("VOUCHERID")
                    .HasComment("对应凭证ID号(天津)");

                entity.Property(e => e.VoucheridBj)
                    .HasColumnName("VOUCHERID_BJ")
                    .HasComment("对应凭证ID号(北京)");
            });

            modelBuilder.Entity<TccHrmDict>(entity =>
            {
                entity.ToTable("TCC_HRM_Dict");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DateBelong).HasMaxLength(50);

                entity.Property(e => e.DateName).HasMaxLength(50);

                entity.Property(e => e.DateType).HasMaxLength(50);

                entity.Property(e => e.DateValue).HasMaxLength(50);
            });

            modelBuilder.Entity<TccHrmHrpDictMap>(entity =>
            {
                entity.ToTable("TCC_HRM_HRP_DictMap");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.HrmDictName)
                    .HasMaxLength(50)
                    .HasColumnName("HRM_Dict_Name");

                entity.Property(e => e.HrpDictCode)
                    .HasMaxLength(50)
                    .HasColumnName("HRP_Dict_Code");
            });

            modelBuilder.Entity<TccHrmLyapply>(entity =>
            {
                entity.ToTable("TCC_HRM_LYApply");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyDate).HasMaxLength(50);

                entity.Property(e => e.ApplyDept).HasMaxLength(50);

                entity.Property(e => e.ApplyDeptNo).HasMaxLength(50);

                entity.Property(e => e.ApplyLoginUser).HasMaxLength(50);

                entity.Property(e => e.ApplyName).HasMaxLength(50);

                entity.Property(e => e.ApplyPhone).HasMaxLength(50);

                entity.Property(e => e.ComeInType).HasMaxLength(50);

                entity.Property(e => e.ComeInTypeId)
                    .HasMaxLength(50)
                    .HasColumnName("ComeInTypeID");

                entity.Property(e => e.ContractType).HasMaxLength(50);

                entity.Property(e => e.ContractTypeId)
                    .HasMaxLength(50)
                    .HasColumnName("ContractTypeID");

                entity.Property(e => e.CreatDate).HasMaxLength(50);

                entity.Property(e => e.DeptLeaderNum).HasMaxLength(50);

                entity.Property(e => e.DeptMainLeaderNum).HasMaxLength(50);

                entity.Property(e => e.EmpBelong).HasMaxLength(50);

                entity.Property(e => e.EmpBelongId)
                    .HasMaxLength(50)
                    .HasColumnName("EmpBelongID");

                entity.Property(e => e.EmpType).HasMaxLength(50);

                entity.Property(e => e.EmpTypeId)
                    .HasMaxLength(50)
                    .HasColumnName("EmpTypeID");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.HasprojectMainLeader)
                    .HasMaxLength(50)
                    .HasColumnName("hasprojectMainLeader");

                entity.Property(e => e.IsOutProject).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectLeaderNum).HasMaxLength(50);

                entity.Property(e => e.ProjectMainLeaderNum).HasMaxLength(50);

                entity.Property(e => e.SubmitDeptLeaderNum).HasMaxLength(50);

                entity.Property(e => e.SubmitDeptMainLeaderNum).HasMaxLength(50);

                entity.Property(e => e.SubmitProjectLeaderNum).HasMaxLength(50);

                entity.Property(e => e.SubmitProjectMainLeaderNum).HasMaxLength(50);
            });

            modelBuilder.Entity<TccHrmLyapplyDetailBackPerson>(entity =>
            {
                entity.ToTable("TCC_HRM_LYApplyDetail_backPerson");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.HasBacked)
                    .HasMaxLength(50)
                    .HasColumnName("hasBacked");

                entity.Property(e => e.LyAge)
                    .HasMaxLength(50)
                    .HasColumnName("LY_Age");

                entity.Property(e => e.LyBackEndDate)
                    .HasMaxLength(50)
                    .HasColumnName("LY_BackEndDate");

                entity.Property(e => e.LyBackStartDate)
                    .HasMaxLength(50)
                    .HasColumnName("LY_BackStartDate");

                entity.Property(e => e.LyBackWorkContent).HasColumnName("LY_BackWorkContent");

                entity.Property(e => e.LyBackYears)
                    .HasMaxLength(50)
                    .HasColumnName("LY_BackYears");

                entity.Property(e => e.LyBackYearsId)
                    .HasMaxLength(50)
                    .HasColumnName("LY_BackYearsID");

                entity.Property(e => e.LyBirthday)
                    .HasMaxLength(50)
                    .HasColumnName("LY_Birthday");

                entity.Property(e => e.LyComeinDate)
                    .HasMaxLength(50)
                    .HasColumnName("LY_ComeinDate");

                entity.Property(e => e.LyDept)
                    .HasMaxLength(50)
                    .HasColumnName("LY_Dept");

                entity.Property(e => e.LyDeptId)
                    .HasMaxLength(50)
                    .HasColumnName("LY_DeptID");

                entity.Property(e => e.LyFormNumber)
                    .HasMaxLength(50)
                    .HasColumnName("LY_FormNumber");

                entity.Property(e => e.LyNewPosation)
                    .HasMaxLength(50)
                    .HasColumnName("LY_NewPosation");

                entity.Property(e => e.LyPayment).HasColumnName("LY_Payment");

                entity.Property(e => e.LyPersonIdcardNo)
                    .HasMaxLength(50)
                    .HasColumnName("LY_PersonIDCardNo");

                entity.Property(e => e.LyPersonName)
                    .HasMaxLength(50)
                    .HasColumnName("LY_PersonName");

                entity.Property(e => e.LyPersonType)
                    .HasMaxLength(50)
                    .HasColumnName("LY_PersonType");

                entity.Property(e => e.LyPosationLevel)
                    .HasMaxLength(50)
                    .HasColumnName("LY_PosationLevel");

                entity.Property(e => e.LyPosationName)
                    .HasMaxLength(50)
                    .HasColumnName("LY_PosationName");

                entity.Property(e => e.LyRetireDate)
                    .HasMaxLength(50)
                    .HasColumnName("LY_RetireDate");

                entity.Property(e => e.LySex)
                    .HasMaxLength(50)
                    .HasColumnName("LY_Sex");

                entity.Property(e => e.OldBackEndDate).HasMaxLength(50);

                entity.Property(e => e.OldBackStartDate).HasMaxLength(50);

                entity.Property(e => e.RzSendFlag)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_SendFlag");

                entity.Property(e => e.RzSendFlagId)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_SendFlagID");
            });

            modelBuilder.Entity<TccHrmLyapplyDetailNewPerson>(entity =>
            {
                entity.ToTable("TCC_HRM_LYApplyDetail_newPerson");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LyAge)
                    .HasMaxLength(50)
                    .HasColumnName("LY_Age");

                entity.Property(e => e.LyBeginWorkDate)
                    .HasMaxLength(50)
                    .HasColumnName("LY_BeginWorkDate");

                entity.Property(e => e.LyBirthday)
                    .HasMaxLength(50)
                    .HasColumnName("LY_Birthday");

                entity.Property(e => e.LyBonusSendFlag)
                    .HasMaxLength(50)
                    .HasColumnName("LY_BonusSendFlag");

                entity.Property(e => e.LyComeDate)
                    .HasMaxLength(50)
                    .HasColumnName("LY_ComeDate");

                entity.Property(e => e.LyCompetency)
                    .HasMaxLength(50)
                    .HasColumnName("LY_Competency");

                entity.Property(e => e.LyCompetencyName).HasColumnName("LY_CompetencyName");

                entity.Property(e => e.LyConcractDeadline)
                    .HasMaxLength(50)
                    .HasColumnName("LY_ConcractDeadline");

                entity.Property(e => e.LyConcractDeadlineId)
                    .HasMaxLength(50)
                    .HasColumnName("LY_ConcractDeadlineID");

                entity.Property(e => e.LyContractType)
                    .HasMaxLength(50)
                    .HasColumnName("LY_ContractType");

                entity.Property(e => e.LyContractTypeId)
                    .HasMaxLength(50)
                    .HasColumnName("LY_ContractTypeID");

                entity.Property(e => e.LyCountry)
                    .HasMaxLength(50)
                    .HasColumnName("LY_Country");

                entity.Property(e => e.LyCountryId)
                    .HasMaxLength(50)
                    .HasColumnName("LY_CountryID");

                entity.Property(e => e.LyDegree)
                    .HasMaxLength(50)
                    .HasColumnName("LY_Degree");

                entity.Property(e => e.LyDegreeId)
                    .HasMaxLength(50)
                    .HasColumnName("LY_DegreeID");

                entity.Property(e => e.LyDept)
                    .HasMaxLength(50)
                    .HasColumnName("LY_Dept");

                entity.Property(e => e.LyDeptId)
                    .HasMaxLength(50)
                    .HasColumnName("LY_DeptID");

                entity.Property(e => e.LyDiploma)
                    .HasMaxLength(50)
                    .HasColumnName("LY_Diploma");

                entity.Property(e => e.LyDiplomaId)
                    .HasMaxLength(50)
                    .HasColumnName("LY_DiplomaID");

                entity.Property(e => e.LyDomainUser)
                    .HasMaxLength(50)
                    .HasColumnName("LY_DomainUser");

                entity.Property(e => e.LyEduYear)
                    .HasMaxLength(50)
                    .HasColumnName("LY_EduYear");

                entity.Property(e => e.LyEduYearId)
                    .HasMaxLength(50)
                    .HasColumnName("LY_EduYearID");

                entity.Property(e => e.LyFormNumber)
                    .HasMaxLength(50)
                    .HasColumnName("LY_FormNumber");

                entity.Property(e => e.LyGraduateTime)
                    .HasMaxLength(50)
                    .HasColumnName("LY_GraduateTime");

                entity.Property(e => e.LyIdcardNo)
                    .HasMaxLength(50)
                    .HasColumnName("LY_IDCardNo");

                entity.Property(e => e.LyInsureBelong)
                    .HasMaxLength(50)
                    .HasColumnName("LY_InsureBelong");

                entity.Property(e => e.LyLanguage)
                    .HasMaxLength(50)
                    .HasColumnName("LY_Language");

                entity.Property(e => e.LyLanguageId)
                    .HasMaxLength(50)
                    .HasColumnName("LY_LanguageID");

                entity.Property(e => e.LyLanguageLevel)
                    .HasMaxLength(50)
                    .HasColumnName("LY_LanguageLevel");

                entity.Property(e => e.LyLanguageLevelId)
                    .HasMaxLength(50)
                    .HasColumnName("LY_LanguageLevelID");

                entity.Property(e => e.LyLanguageScore)
                    .HasMaxLength(50)
                    .HasColumnName("LY_LanguageScore");

                entity.Property(e => e.LyLastWorkCompany)
                    .HasMaxLength(200)
                    .HasColumnName("LY_LastWorkCompany");

                entity.Property(e => e.LyMajor)
                    .HasMaxLength(50)
                    .HasColumnName("LY_Major");

                entity.Property(e => e.LyManageType)
                    .HasMaxLength(50)
                    .HasColumnName("LY_ManageType");

                entity.Property(e => e.LyManageTypeId)
                    .HasMaxLength(50)
                    .HasColumnName("LY_ManageTypeID");

                entity.Property(e => e.LyNation)
                    .HasMaxLength(50)
                    .HasColumnName("LY_Nation");

                entity.Property(e => e.LyNationId)
                    .HasMaxLength(50)
                    .HasColumnName("LY_NationID");

                entity.Property(e => e.LyOtherAgree)
                    .HasMaxLength(50)
                    .HasColumnName("LY_OtherAgree");

                entity.Property(e => e.LyOtherAgreeContent).HasColumnName("LY_OtherAgreeContent");

                entity.Property(e => e.LyPersonName)
                    .HasMaxLength(50)
                    .HasColumnName("LY_PersonName");

                entity.Property(e => e.LyPersonStatus)
                    .HasMaxLength(50)
                    .HasColumnName("LY_PersonStatus");

                entity.Property(e => e.LyPhone)
                    .HasMaxLength(50)
                    .HasColumnName("LY_Phone");

                entity.Property(e => e.LyPoliticStyle)
                    .HasMaxLength(50)
                    .HasColumnName("LY_PoliticStyle");

                entity.Property(e => e.LyPosation)
                    .HasMaxLength(200)
                    .HasColumnName("LY_Posation");

                entity.Property(e => e.LyPosationKind)
                    .HasMaxLength(50)
                    .HasColumnName("LY_PosationKind");

                entity.Property(e => e.LyPosationKindId)
                    .HasMaxLength(50)
                    .HasColumnName("LY_PosationKindID");

                entity.Property(e => e.LyPosationName)
                    .HasMaxLength(50)
                    .HasColumnName("LY_PosationName");

                entity.Property(e => e.LyPosationNameId)
                    .HasMaxLength(50)
                    .HasColumnName("LY_PosationNameID");

                entity.Property(e => e.LyProbation)
                    .HasMaxLength(50)
                    .HasColumnName("LY_Probation");

                entity.Property(e => e.LyProbationId)
                    .HasMaxLength(50)
                    .HasColumnName("LY_ProbationID");

                entity.Property(e => e.LyProjectName).HasColumnName("LY_ProjectName");

                entity.Property(e => e.LyProjectNo)
                    .HasMaxLength(50)
                    .HasColumnName("LY_ProjectNo");

                entity.Property(e => e.LyReligiousBelief)
                    .HasMaxLength(50)
                    .HasColumnName("LY_ReligiousBelief");

                entity.Property(e => e.LySchool)
                    .HasMaxLength(50)
                    .HasColumnName("LY_School");

                entity.Property(e => e.LySendToPlace)
                    .HasMaxLength(50)
                    .HasColumnName("LY_SendToPlace");

                entity.Property(e => e.LySendToPlaceId)
                    .HasMaxLength(50)
                    .HasColumnName("LY_SendToPlaceID");

                entity.Property(e => e.LySex)
                    .HasMaxLength(50)
                    .HasColumnName("LY_Sex");

                entity.Property(e => e.LySexId)
                    .HasMaxLength(50)
                    .HasColumnName("LY_SexID");

                entity.Property(e => e.LyStudyAbroadCountry)
                    .HasMaxLength(50)
                    .HasColumnName("LY_StudyAbroadCountry");

                entity.Property(e => e.LyStudyAbroadCountryId)
                    .HasMaxLength(50)
                    .HasColumnName("LY_StudyAbroadCountryID");

                entity.Property(e => e.LyStyle)
                    .HasMaxLength(50)
                    .HasColumnName("LY_Style");

                entity.Property(e => e.LyStyleId)
                    .HasMaxLength(50)
                    .HasColumnName("LY_StyleID");

                entity.Property(e => e.LyTitles)
                    .HasMaxLength(50)
                    .HasColumnName("LY_Titles");

                entity.Property(e => e.LyWageBelong)
                    .HasMaxLength(50)
                    .HasColumnName("LY_WageBelong");

                entity.Property(e => e.LyWageContent)
                    .HasMaxLength(200)
                    .HasColumnName("LY_WageContent");

                entity.Property(e => e.LyWageGetPlace)
                    .HasMaxLength(50)
                    .HasColumnName("LY_WageGetPlace");

                entity.Property(e => e.LyWageGetPlaceId)
                    .HasMaxLength(50)
                    .HasColumnName("LY_WageGetPlaceID");

                entity.Property(e => e.LyWageLevel)
                    .HasMaxLength(50)
                    .HasColumnName("LY_WageLevel");

                entity.Property(e => e.LyWageLevelId)
                    .HasMaxLength(50)
                    .HasColumnName("LY_WageLevelID");

                entity.Property(e => e.LyWageStandard)
                    .HasMaxLength(50)
                    .HasColumnName("LY_WageStandard");

                entity.Property(e => e.LyWageStyle)
                    .HasMaxLength(50)
                    .HasColumnName("LY_WageStyle");

                entity.Property(e => e.LyWorkYears)
                    .HasMaxLength(50)
                    .HasColumnName("LY_WorkYears");

                entity.Property(e => e.RzBxhdjs)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_BXHDJS");

                entity.Property(e => e.RzBxjfdd)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_BXJFDD");

                entity.Property(e => e.RzBxjfddid)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_BXJFDDID");

                entity.Property(e => e.RzChangeFlag)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_ChangeFlag");

                entity.Property(e => e.RzChangeFlagId)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_ChangeFlagID");

                entity.Property(e => e.RzChangeGdgz)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_ChangeGDGZ");

                entity.Property(e => e.RzChangeGwjt)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_ChangeGWJT");

                entity.Property(e => e.RzChangeTime)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_ChangeTime");

                entity.Property(e => e.RzComeinDate)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_ComeinDate");

                entity.Property(e => e.RzCsd)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_CSD");

                entity.Property(e => e.RzCsdid)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_CSDID");

                entity.Property(e => e.RzDeptGroup)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_DeptGroup");

                entity.Property(e => e.RzDeptGroupId)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_DeptGroupID");

                entity.Property(e => e.RzDomanName)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_DomanName");

                entity.Property(e => e.RzDomanPassWord)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_DomanPassWord");

                entity.Property(e => e.RzEmail)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_Email");

                entity.Property(e => e.RzEmailPassWord)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_EmailPassWord");

                entity.Property(e => e.RzGjjhdjs)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_GJJHDJS");

                entity.Property(e => e.RzGjjjfdd)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_GJJJFDD");

                entity.Property(e => e.RzGjjjfddid)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_GJJJFDDID");

                entity.Property(e => e.RzHasBx)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_hasBX");

                entity.Property(e => e.RzHasBxid)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_hasBXID");

                entity.Property(e => e.RzHasNotice)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_hasNotice");

                entity.Property(e => e.RzHasZz)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_hasZZ");

                entity.Property(e => e.RzIdcardLastTime)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_IDCardLastTime");

                entity.Property(e => e.RzIdcardLastTimeId)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_IDCardLastTimeID");

                entity.Property(e => e.RzIdcardOverDate)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_IDCardOverDate");

                entity.Property(e => e.RzJg)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_JG");

                entity.Property(e => e.RzJgid)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_JGID");

                entity.Property(e => e.RzMajor)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_Major");

                entity.Property(e => e.RzMajorId)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_MajorID");

                entity.Property(e => e.RzMaster)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_Master");

                entity.Property(e => e.RzMasterId)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_MasterID");

                entity.Property(e => e.RzPosationLevel)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_PosationLevel");

                entity.Property(e => e.RzPosationLevelId)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_PosationLevelID");

                entity.Property(e => e.RzPosationUpTime)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_PosationUpTime");

                entity.Property(e => e.RzPosationXs)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_PosationXS");

                entity.Property(e => e.RzSendFlag)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_SendFlag");

                entity.Property(e => e.RzSendFlagId)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_SendFlagID");

                entity.Property(e => e.RzSpecicalZz)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_SpecicalZZ");

                entity.Property(e => e.RzSyd)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_SYD");

                entity.Property(e => e.RzSydid)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_SYDID");

                entity.Property(e => e.RzXhkszd)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_XHKSZD");

                entity.Property(e => e.RzXhkszdid)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_XHKSZDID");

                entity.Property(e => e.RzZz)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_ZZ");

                entity.Property(e => e.RzZzid)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_ZZID");
            });

            modelBuilder.Entity<TccHrmLyapplyInfo>(entity =>
            {
                entity.ToTable("TCC_HRM_LYApplyInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.LyAge)
                    .HasMaxLength(50)
                    .HasColumnName("LY_Age");

                entity.Property(e => e.LyContractType)
                    .HasMaxLength(50)
                    .HasColumnName("LY_ContractType");

                entity.Property(e => e.LyDegree)
                    .HasMaxLength(50)
                    .HasColumnName("LY_Degree");

                entity.Property(e => e.LyDept)
                    .HasMaxLength(50)
                    .HasColumnName("LY_Dept");

                entity.Property(e => e.LyDeptId)
                    .HasMaxLength(50)
                    .HasColumnName("LY_DeptID");

                entity.Property(e => e.LyDiploma)
                    .HasMaxLength(50)
                    .HasColumnName("LY_Diploma");

                entity.Property(e => e.LyMajor)
                    .HasMaxLength(50)
                    .HasColumnName("LY_Major");

                entity.Property(e => e.LyPersonName)
                    .HasMaxLength(50)
                    .HasColumnName("LY_PersonName");

                entity.Property(e => e.LyPosation)
                    .HasMaxLength(50)
                    .HasColumnName("LY_Posation");

                entity.Property(e => e.LyProjectId)
                    .HasMaxLength(50)
                    .HasColumnName("LY_ProjectID");

                entity.Property(e => e.LySchool)
                    .HasMaxLength(50)
                    .HasColumnName("LY_School");

                entity.Property(e => e.LySex)
                    .HasMaxLength(50)
                    .HasColumnName("LY_Sex");

                entity.Property(e => e.LyStyle)
                    .HasMaxLength(50)
                    .HasColumnName("LY_Style");

                entity.Property(e => e.TccHrmLyapplyDetailNewPersonFk).HasColumnName("TCC_HRM_LYApplyDetail_newPerson_FK");
            });

            modelBuilder.Entity<TccHrmPersonalManage>(entity =>
            {
                entity.ToTable("TCC_HRM_PersonalManage");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BankCardStatus).HasMaxLength(50);

                entity.Property(e => e.ComeInDate).HasMaxLength(50);

                entity.Property(e => e.DeptName).HasMaxLength(50);

                entity.Property(e => e.HomeCardStatus).HasMaxLength(50);

                entity.Property(e => e.IdNumber).HasMaxLength(50);

                entity.Property(e => e.LanguageCardStatus).HasMaxLength(50);

                entity.Property(e => e.LanguageCardSubmitDate).HasMaxLength(50);

                entity.Property(e => e.PartyCardStatus).HasMaxLength(50);

                entity.Property(e => e.PartyCardSubmitDate).HasMaxLength(50);

                entity.Property(e => e.PhoneCardStatus).HasMaxLength(50);

                entity.Property(e => e.RecordStatus).HasMaxLength(50);

                entity.Property(e => e.ResumeCardStatus).HasMaxLength(50);

                entity.Property(e => e.UserName).HasMaxLength(50);
            });

            modelBuilder.Entity<TccHrmPersonalManageBankCard>(entity =>
            {
                entity.ToTable("TCC_HRM_PersonalManage_BankCard");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CreditCardMdfDate).HasMaxLength(50);

                entity.Property(e => e.CreditCardNo).HasMaxLength(50);

                entity.Property(e => e.CreditCardvalid).HasMaxLength(50);

                entity.Property(e => e.PersonName).HasMaxLength(50);

                entity.Property(e => e.PmFk).HasColumnName("PM_FK");

                entity.Property(e => e.WageCardMdfDate).HasMaxLength(50);

                entity.Property(e => e.WageCardNo).HasMaxLength(50);

                entity.Property(e => e.WageCardvalid).HasMaxLength(50);
            });

            modelBuilder.Entity<TccHrmPersonalManageContractCard>(entity =>
            {
                entity.ToTable("TCC_HRM_PersonalManage_ContractCard");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.PmFk).HasColumnName("PM_FK");

                entity.Property(e => e.WkConcractDeadline)
                    .HasMaxLength(50)
                    .HasColumnName("WK_ConcractDeadline");

                entity.Property(e => e.WkConcractDeadlineId)
                    .HasMaxLength(50)
                    .HasColumnName("WK_ConcractDeadlineID");

                entity.Property(e => e.WkContractBeginDate)
                    .HasMaxLength(50)
                    .HasColumnName("WK_ContractBeginDate");

                entity.Property(e => e.WkContractEndDate)
                    .HasMaxLength(50)
                    .HasColumnName("WK_ContractEndDate");

                entity.Property(e => e.WkContractFlag)
                    .HasMaxLength(50)
                    .HasColumnName("WK_ContractFlag");

                entity.Property(e => e.WkContractFlagId)
                    .HasMaxLength(50)
                    .HasColumnName("WK_ContractFlagID");

                entity.Property(e => e.WkContractNo)
                    .HasMaxLength(50)
                    .HasColumnName("WK_ContractNo");

                entity.Property(e => e.WkContractSignDate)
                    .HasMaxLength(50)
                    .HasColumnName("WK_ContractSignDate");

                entity.Property(e => e.WkIsSecret)
                    .HasMaxLength(50)
                    .HasColumnName("WK_isSecret");

                entity.Property(e => e.WkIsSecretId)
                    .HasMaxLength(50)
                    .HasColumnName("WK_isSecretID");

                entity.Property(e => e.WkProbation)
                    .HasMaxLength(50)
                    .HasColumnName("WK_Probation");

                entity.Property(e => e.WkProbationEndDate)
                    .HasMaxLength(50)
                    .HasColumnName("WK_ProbationEndDate");

                entity.Property(e => e.WkProbationId)
                    .HasMaxLength(50)
                    .HasColumnName("WK_ProbationID");
            });

            modelBuilder.Entity<TccHrmPersonalManageDiplomaCard>(entity =>
            {
                entity.ToTable("TCC_HRM_PersonalManage_DiplomaCard");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Degree).HasMaxLength(50);

                entity.Property(e => e.DegreeGetDate).HasMaxLength(50);

                entity.Property(e => e.DegreeId)
                    .HasMaxLength(50)
                    .HasColumnName("DegreeID");

                entity.Property(e => e.DegreeNo).HasMaxLength(50);

                entity.Property(e => e.Diploma).HasMaxLength(50);

                entity.Property(e => e.DiplomaId)
                    .HasMaxLength(50)
                    .HasColumnName("DiplomaID");

                entity.Property(e => e.DiplomaNo).HasMaxLength(50);

                entity.Property(e => e.DiplomaPlace).HasMaxLength(50);

                entity.Property(e => e.DiplomaStyle).HasMaxLength(50);

                entity.Property(e => e.DiplomaStyleId)
                    .HasMaxLength(50)
                    .HasColumnName("DiplomaStyleID");

                entity.Property(e => e.EduYear).HasMaxLength(50);

                entity.Property(e => e.GraduateDate).HasMaxLength(50);

                entity.Property(e => e.GraduateSchool).HasMaxLength(50);

                entity.Property(e => e.Major).HasMaxLength(50);

                entity.Property(e => e.PmFk).HasColumnName("PM_FK");
            });

            modelBuilder.Entity<TccHrmPersonalManageGjjcard>(entity =>
            {
                entity.ToTable("TCC_HRM_PersonalManage_GJJCard");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.PmFk).HasColumnName("PM_FK");

                entity.Property(e => e.RzBxhdjs)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_BXHDJS");

                entity.Property(e => e.RzBxjfdd)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_BXJFDD");

                entity.Property(e => e.RzBxjfddid)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_BXJFDDID");

                entity.Property(e => e.RzChangeFlag)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_ChangeFlag");

                entity.Property(e => e.RzChangeFlagId)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_ChangeFlagID");

                entity.Property(e => e.RzGjjhdjs)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_GJJHDJS");

                entity.Property(e => e.RzGjjjfdd)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_GJJJFDD");

                entity.Property(e => e.RzGjjjfddid)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_GJJJFDDID");
            });

            modelBuilder.Entity<TccHrmPersonalManageHomeCard>(entity =>
            {
                entity.ToTable("TCC_HRM_PersonalManage_HomeCard");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Age).HasMaxLength(50);

                entity.Property(e => e.Birthday).HasMaxLength(50);

                entity.Property(e => e.EduLevel).HasMaxLength(50);

                entity.Property(e => e.EduLevelId)
                    .HasMaxLength(50)
                    .HasColumnName("EduLevelID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.PmFk).HasColumnName("PM_FK");

                entity.Property(e => e.PoliticalStatus).HasMaxLength(50);

                entity.Property(e => e.PoliticalStatusId)
                    .HasMaxLength(50)
                    .HasColumnName("PoliticalStatusID");

                entity.Property(e => e.Relationship).HasMaxLength(50);

                entity.Property(e => e.RelationshipId)
                    .HasMaxLength(50)
                    .HasColumnName("RelationshipID");
            });

            modelBuilder.Entity<TccHrmPersonalManageLanguageCard>(entity =>
            {
                entity.ToTable("TCC_HRM_PersonalManage_LanguageCard");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.GetDate).HasMaxLength(50);

                entity.Property(e => e.LanguageKind).HasMaxLength(50);

                entity.Property(e => e.LanguageKindId)
                    .HasMaxLength(50)
                    .HasColumnName("LanguageKindID");

                entity.Property(e => e.LanguageLevel).HasMaxLength(50);

                entity.Property(e => e.LanguageLevelId)
                    .HasMaxLength(50)
                    .HasColumnName("LanguageLevelID");

                entity.Property(e => e.LanguageScore).HasMaxLength(50);

                entity.Property(e => e.PmFk).HasColumnName("PM_FK");
            });

            modelBuilder.Entity<TccHrmPersonalManagePartyCard>(entity =>
            {
                entity.ToTable("TCC_HRM_PersonalManage_PartyCard");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Introducer).HasMaxLength(50);

                entity.Property(e => e.JoinTime).HasMaxLength(50);

                entity.Property(e => e.PmFk).HasColumnName("PM_FK");

                entity.Property(e => e.PoliticalStatus).HasMaxLength(50);

                entity.Property(e => e.PoliticalStatusId)
                    .HasMaxLength(50)
                    .HasColumnName("PoliticalStatusID");

                entity.Property(e => e.RzPartyZb)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_Party_ZB");

                entity.Property(e => e.RzPartyZbid)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_Party_ZBID");

                entity.Property(e => e.RzPartyZw)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_Party_ZW");

                entity.Property(e => e.RzPartyZwid)
                    .HasMaxLength(50)
                    .HasColumnName("RZ_Party_ZWID");

                entity.Property(e => e.Zztime)
                    .HasMaxLength(50)
                    .HasColumnName("ZZTime");
            });

            modelBuilder.Entity<TccHrmPersonalManagePhoneCard>(entity =>
            {
                entity.ToTable("TCC_HRM_PersonalManage_PhoneCard");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.EmyPhone).HasMaxLength(50);

                entity.Property(e => e.HomePhone).HasMaxLength(50);

                entity.Property(e => e.MailNumber).HasMaxLength(50);

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.PmFk).HasColumnName("PM_FK");
            });

            modelBuilder.Entity<TccHrmPersonalManageResumeCard>(entity =>
            {
                entity.ToTable("TCC_HRM_PersonalManage_ResumeCard");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BeginTime).HasMaxLength(50);

                entity.Property(e => e.EndTime).HasMaxLength(50);

                entity.Property(e => e.KnowPerson).HasMaxLength(50);

                entity.Property(e => e.PmFk).HasColumnName("PM_FK");

                entity.Property(e => e.WorkDept).HasMaxLength(50);
            });

            modelBuilder.Entity<TccHrmPersonalManageReturnInfo>(entity =>
            {
                entity.ToTable("TCC_HRM_PersonalManage_ReturnInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.PmFk).HasColumnName("PM_FK");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ReturnPerson).HasMaxLength(50);

                entity.Property(e => e.ReturnStatus).HasMaxLength(50);

                entity.Property(e => e.ReturnTime).HasMaxLength(50);

                entity.Property(e => e.StepName).HasMaxLength(50);
            });

            modelBuilder.Entity<TccHrmPersonalManageZccard>(entity =>
            {
                entity.ToTable("TCC_HRM_PersonalManage_ZCCard");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.HasZyzg)
                    .HasMaxLength(50)
                    .HasColumnName("hasZYZG");

                entity.Property(e => e.HasZyzgid)
                    .HasMaxLength(50)
                    .HasColumnName("hasZYZGID");

                entity.Property(e => e.JobTitle).HasMaxLength(50);

                entity.Property(e => e.JobTitleId)
                    .HasMaxLength(50)
                    .HasColumnName("JobTitleID");

                entity.Property(e => e.JobTitleUpdateDate).HasMaxLength(50);

                entity.Property(e => e.PmFk).HasColumnName("PM_FK");

                entity.Property(e => e.TitleApprovelDoc).HasMaxLength(50);

                entity.Property(e => e.TitleMajor).HasMaxLength(50);

                entity.Property(e => e.TitleNo).HasMaxLength(50);

                entity.Property(e => e.TitleRemark).HasMaxLength(50);

                entity.Property(e => e.TitleSend).HasMaxLength(50);

                entity.Property(e => e.TitleSendDate).HasMaxLength(50);

                entity.Property(e => e.TitleSendId)
                    .HasMaxLength(50)
                    .HasColumnName("TitleSendID");

                entity.Property(e => e.TitleType).HasMaxLength(50);

                entity.Property(e => e.TitleTypeId)
                    .HasMaxLength(50)
                    .HasColumnName("TitleTypeID");
            });

            modelBuilder.Entity<TccHrmPersonalManageZffcard>(entity =>
            {
                entity.ToTable("TCC_HRM_PersonalManage_ZFFCard");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.MonthStandard).HasMaxLength(50);

                entity.Property(e => e.PmFk).HasColumnName("PM_FK");

                entity.Property(e => e.SendChangeDate).HasMaxLength(50);

                entity.Property(e => e.SendEndDate).HasMaxLength(50);
            });

            modelBuilder.Entity<TccHrmPersonalManageZzcard>(entity =>
            {
                entity.ToTable("TCC_HRM_PersonalManage_ZZCard");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AidMajor).HasMaxLength(50);

                entity.Property(e => e.AllowRange).HasMaxLength(50);

                entity.Property(e => e.ApprovelDate).HasMaxLength(50);

                entity.Property(e => e.ApprovelOrg).HasMaxLength(50);

                entity.Property(e => e.BookLevel).HasMaxLength(50);

                entity.Property(e => e.BookName).HasMaxLength(50);

                entity.Property(e => e.BookNameId)
                    .HasMaxLength(50)
                    .HasColumnName("BookNameID");

                entity.Property(e => e.BookNameNo).HasMaxLength(50);

                entity.Property(e => e.BookNo).HasMaxLength(50);

                entity.Property(e => e.BookType).HasMaxLength(50);

                entity.Property(e => e.CompanySave).HasMaxLength(50);

                entity.Property(e => e.ContiueEdu).HasMaxLength(50);

                entity.Property(e => e.GetWay).HasMaxLength(50);

                entity.Property(e => e.GetWayId)
                    .HasMaxLength(50)
                    .HasColumnName("GetWayID");

                entity.Property(e => e.MainMajor).HasMaxLength(50);

                entity.Property(e => e.PersonalSave).HasMaxLength(50);

                entity.Property(e => e.PmFk).HasColumnName("PM_FK");

                entity.Property(e => e.RegistDate).HasMaxLength(50);

                entity.Property(e => e.RegistOrg).HasMaxLength(50);

                entity.Property(e => e.RegistOrgId)
                    .HasMaxLength(50)
                    .HasColumnName("RegistOrgID");

                entity.Property(e => e.RegistPlace).HasMaxLength(50);

                entity.Property(e => e.SealNo).HasMaxLength(50);

                entity.Property(e => e.SignDate).HasMaxLength(50);

                entity.Property(e => e.SubmitDate).HasMaxLength(50);

                entity.Property(e => e.SubsidyBeginDate).HasMaxLength(50);

                entity.Property(e => e.SubsidyOrg).HasMaxLength(50);

                entity.Property(e => e.SubsidyOrgId)
                    .HasMaxLength(50)
                    .HasColumnName("SubsidyOrgID");

                entity.Property(e => e.SubsidyStandard).HasMaxLength(50);

                entity.Property(e => e.ValiDate).HasMaxLength(50);
            });

            modelBuilder.Entity<TccHrmRzCardApproveReturnInfo>(entity =>
            {
                entity.ToTable("TCC_HRM_RZ_CardApprove_ReturnInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.PmFk).HasColumnName("PM_FK");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ReturnPerson).HasMaxLength(50);

                entity.Property(e => e.ReturnStatus).HasMaxLength(50);

                entity.Property(e => e.ReturnTime).HasMaxLength(50);

                entity.Property(e => e.StepName).HasMaxLength(50);
            });

            modelBuilder.Entity<TccHrmRzapply>(entity =>
            {
                entity.ToTable("TCC_HRM_RZApply");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyDate).HasMaxLength(50);

                entity.Property(e => e.ApplyDept).HasMaxLength(50);

                entity.Property(e => e.ApplyDeptNo).HasMaxLength(50);

                entity.Property(e => e.ApplyLoginUser).HasMaxLength(50);

                entity.Property(e => e.ApplyName).HasMaxLength(50);

                entity.Property(e => e.ApplyPhone).HasMaxLength(50);

                entity.Property(e => e.DetailId).HasColumnName("detailID");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);
            });

            modelBuilder.Entity<TccHrmWageStandardMap>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_HRM_WageStandard_Map");

                entity.Property(e => e.DiplomaType).HasMaxLength(50);

                entity.Property(e => e.DiplomaTypeId)
                    .HasMaxLength(50)
                    .HasColumnName("DiplomaTypeID");

                entity.Property(e => e.WageLevel).HasMaxLength(50);

                entity.Property(e => e.WageSendPlace).HasMaxLength(50);

                entity.Property(e => e.WageStandard).HasMaxLength(50);
            });

            modelBuilder.Entity<TccHrmZffstandardMap>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_HRM_ZFFStandard_Map");

                entity.Property(e => e.WageSendPlace).HasMaxLength(50);

                entity.Property(e => e.Zffstandard)
                    .HasMaxLength(50)
                    .HasColumnName("ZFFStandard");
            });

            modelBuilder.Entity<TccHrpVoteAnswer>(entity =>
            {
                entity.ToTable("TCC_HrpVote_Answer");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DeptInfo)
                    .HasMaxLength(50)
                    .HasColumnName("dept_info");

                entity.Property(e => e.PaperId)
                    .HasMaxLength(50)
                    .HasColumnName("PaperID");

                entity.Property(e => e.QuestionId).HasColumnName("QuestionID");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UserIp)
                    .HasMaxLength(50)
                    .HasColumnName("user_IP");

                entity.Property(e => e.UserMacIp)
                    .HasMaxLength(50)
                    .HasColumnName("user_MacIP");

                entity.Property(e => e.UserType)
                    .HasMaxLength(50)
                    .HasColumnName("user_type");

                entity.Property(e => e.WorkYear)
                    .HasMaxLength(50)
                    .HasColumnName("work_year");
            });

            modelBuilder.Entity<TccHrpVoteCode>(entity =>
            {
                entity.ToTable("TCC_HrpVote_Code");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CodeName).HasMaxLength(50);

                entity.Property(e => e.CodeValue).HasMaxLength(50);

                entity.Property(e => e.UserGroup).HasMaxLength(50);
            });

            modelBuilder.Entity<TccHrpVoteDept>(entity =>
            {
                entity.ToTable("TCC_HrpVote_Dept");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DeptCode).HasMaxLength(50);

                entity.Property(e => e.DeptName).HasMaxLength(200);

                entity.Property(e => e.DeptType).HasMaxLength(50);
            });

            modelBuilder.Entity<TccHrpVoteQuestion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_HrpVote_Question");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IsDelete)
                    .HasColumnName("Is_Delete")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Question).HasMaxLength(500);

                entity.Property(e => e.QuestionType).HasMaxLength(50);

                entity.Property(e => e.UserType)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TccIncomeAwardDetail>(entity =>
            {
                entity.ToTable("TCC_Income_AwardDetail");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AllPayMonty).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ArchiveDate).HasColumnType("datetime");

                entity.Property(e => e.AwardComposed).HasMaxLength(100);

                entity.Property(e => e.AwardComposedCode).HasMaxLength(100);

                entity.Property(e => e.AwardMoney).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.AwardName).HasMaxLength(100);

                entity.Property(e => e.AwardType).HasMaxLength(100);

                entity.Property(e => e.Dept).HasMaxLength(100);

                entity.Property(e => e.Pro).HasMaxLength(500);

                entity.Property(e => e.ProjectCode).HasMaxLength(100);

                entity.Property(e => e.ProjectIdCardNo).HasMaxLength(100);

                entity.Property(e => e.ProjectManager).HasMaxLength(100);

                entity.Property(e => e.ProjectManagerName).HasMaxLength(100);

                entity.Property(e => e.ProjectName).HasMaxLength(500);

                entity.Property(e => e.Q).HasMaxLength(100);

                entity.Property(e => e.Qmoney)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("QMoney");

                entity.Property(e => e.SaveMoney).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Summary).HasMaxLength(200);

                entity.Property(e => e.UserIdentityId).HasMaxLength(100);

                entity.Property(e => e.UserName).HasMaxLength(100);
            });

            modelBuilder.Entity<TccInjuryIdentity>(entity =>
            {
                entity.ToTable("TCC_InjuryIdentity");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AgentDeptName).HasMaxLength(50);

                entity.Property(e => e.AgentLoginUser).HasMaxLength(50);

                entity.Property(e => e.AgentName).HasMaxLength(50);

                entity.Property(e => e.ContractUser)
                    .HasColumnName("contractUser")
                    .HasComment("联系人");

                entity.Property(e => e.CostFare)
                    .HasColumnType("money")
                    .HasColumnName("costFare")
                    .HasComment("医疗费用");

                entity.Property(e => e.DiagnosePlace)
                    .HasMaxLength(50)
                    .HasColumnName("diagnosePlace")
                    .HasComment("医疗费用");

                entity.Property(e => e.DiagnoseTime)
                    .HasColumnType("datetime")
                    .HasColumnName("diagnoseTime")
                    .HasComment("医院诊断时间");

                entity.Property(e => e.EndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("endDate");

                entity.Property(e => e.EnterWorkDate).HasColumnType("datetime");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.HappenContent)
                    .HasMaxLength(50)
                    .HasColumnName("happenContent")
                    .HasComment("发生内容");

                entity.Property(e => e.HappenDecription)
                    .HasColumnName("happenDecription")
                    .HasComment("事件描述");

                entity.Property(e => e.HappenPlace)
                    .HasMaxLength(50)
                    .HasColumnName("happenPlace")
                    .HasComment("发生地点");

                entity.Property(e => e.HappenTime)
                    .HasColumnType("datetime")
                    .HasColumnName("happenTime")
                    .HasComment("发生时间");

                entity.Property(e => e.InjuryAddress)
                    .HasColumnName("injuryAddress")
                    .HasComment("现住地址");

                entity.Property(e => e.InjuryDept)
                    .HasMaxLength(20)
                    .HasColumnName("injuryDept");

                entity.Property(e => e.InjuryDeptNo)
                    .HasMaxLength(50)
                    .HasColumnName("injuryDeptNo");

                entity.Property(e => e.InjuryDomicile)
                    .HasColumnName("injuryDomicile")
                    .HasComment("户籍地址");

                entity.Property(e => e.InjuryGrade)
                    .HasMaxLength(50)
                    .HasColumnName("injuryGrade")
                    .HasComment("工伤级别");

                entity.Property(e => e.InjuryName)
                    .HasMaxLength(50)
                    .HasColumnName("injuryName")
                    .HasComment("受伤人姓名");

                entity.Property(e => e.InjuryPhone)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("injuryPhone");

                entity.Property(e => e.InjuryType)
                    .HasMaxLength(50)
                    .HasColumnName("injuryType");

                entity.Property(e => e.InjuryUserKey)
                    .HasMaxLength(50)
                    .HasColumnName("injuryUserKey")
                    .HasComment("身份证号");

                entity.Property(e => e.InjuryUserType).HasColumnName("injuryUserType");

                entity.Property(e => e.IsSubmit).HasComment("0,未提交流程，1提交流程");

                entity.Property(e => e.Position).HasMaxLength(50);

                entity.Property(e => e.PostNumber)
                    .HasMaxLength(20)
                    .HasColumnName("postNumber")
                    .HasComment("邮编");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProcessStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("startDate");

                entity.Property(e => e.TypeId)
                    .HasMaxLength(10)
                    .HasColumnName("TypeID");

                entity.Property(e => e.TypeName).HasMaxLength(50);

                entity.Property(e => e.WorkDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<TccInstallmentsInfo>(entity =>
            {
                entity.ToTable("TCC_InstallmentsInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("价税合计金额");

                entity.Property(e => e.BillAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("开具发票金额");

                entity.Property(e => e.BillCode)
                    .HasMaxLength(50)
                    .HasComment("发票编号");

                entity.Property(e => e.BillTaxAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("开具发票税额");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasComment("创建时间");

                entity.Property(e => e.DifferenceAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("差额");

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(50)
                    .HasComment("开出发票流程表单号");

                entity.Property(e => e.Incident).HasComment("开出发票流程流程实例号");

                entity.Property(e => e.InvoiceCode)
                    .HasMaxLength(50)
                    .HasComment("发票代码");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("datetime")
                    .HasComment("开出发票时间");

                entity.Property(e => e.Policy)
                    .HasMaxLength(200)
                    .HasComment("可抵扣项目适用差额扣除政策");

                entity.Property(e => e.PolicyProject)
                    .HasMaxLength(200)
                    .HasComment("可抵扣项目适用\r\n差额扣除项目");

                entity.Property(e => e.PrepaidTaxesAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("已预缴税款");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("开出发票流程流程名");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .HasComment("项目号");

                entity.Property(e => e.ProjectName).HasMaxLength(500);

                entity.Property(e => e.Ramount)
                    .HasMaxLength(50)
                    .HasColumnName("RAmount")
                    .HasComment("分包发票金额");

                entity.Property(e => e.RbillCode)
                    .HasMaxLength(50)
                    .HasColumnName("RBillCode")
                    .HasComment("分包发票编号");

                entity.Property(e => e.RformNumber)
                    .HasMaxLength(50)
                    .HasColumnName("RFormNumber")
                    .HasComment("分包表单号");

                entity.Property(e => e.Rincident)
                    .HasColumnName("RIncident")
                    .HasComment("分包实例号");

                entity.Property(e => e.RinvoiceCode)
                    .HasMaxLength(50)
                    .HasColumnName("RInvoiceCode")
                    .HasComment("分包发票代码");

                entity.Property(e => e.RinvoiceDate)
                    .HasColumnType("datetime")
                    .HasColumnName("RInvoiceDate")
                    .HasComment("分包发票日期");

                entity.Property(e => e.RprocessName)
                    .HasMaxLength(50)
                    .HasColumnName("RProcessName")
                    .HasComment("分包流程名称");

                entity.Property(e => e.RprojectCode)
                    .HasMaxLength(50)
                    .HasColumnName("RProjectCode")
                    .HasComment("可抵扣项目编号");

                entity.Property(e => e.RprojectName)
                    .HasMaxLength(500)
                    .HasColumnName("RProjectName")
                    .HasComment("可抵扣项目名称");

                entity.Property(e => e.TaxAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("税款");

                entity.Property(e => e.TaxRateCode)
                    .HasMaxLength(10)
                    .HasComment("税额编码");

                entity.Property(e => e.TaxRateText)
                    .HasMaxLength(20)
                    .HasComment("税额");
            });

            modelBuilder.Entity<TccInvoicesAccount>(entity =>
            {
                entity.ToTable("TCC_Invoices_Account");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Attachment).HasComment("附件张数");

                entity.Property(e => e.AuditAccountDate)
                    .HasColumnType("datetime")
                    .HasComment("业务审核 日期");

                entity.Property(e => e.AuditAccountIdentity)
                    .HasMaxLength(50)
                    .HasComment("业务审核  身份证号");

                entity.Property(e => e.AuditAccountLoginName)
                    .HasMaxLength(50)
                    .HasComment("业务审核  账号");

                entity.Property(e => e.AuditAccountRealName)
                    .HasMaxLength(50)
                    .HasComment("业务审核  姓名");

                entity.Property(e => e.ConfirmDate).HasColumnType("datetime");

                entity.Property(e => e.ConfirmIdentity).HasMaxLength(50);

                entity.Property(e => e.ConfirmLoginName).HasMaxLength(50);

                entity.Property(e => e.ConfirmRealName).HasMaxLength(50);

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(50)
                    .HasComment("表单编号");

                entity.Property(e => e.Incident).HasComment("实例号");

                entity.Property(e => e.ProcessFinishDate)
                    .HasColumnType("datetime")
                    .HasComment("流程归档时间");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名");

                entity.Property(e => e.ProcessStatus).HasComment("流程状态  0=进行中 1=已归档  2=已撤销");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasComment("申请日期");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasComment("申请人所在主管部门编号");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(500)
                    .HasComment("申请人所在主管部门名称");

                entity.Property(e => e.RequestIdentity)
                    .HasMaxLength(50)
                    .HasComment("申请人 身份证号");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasComment("申请人  账号");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasComment("申请人 姓名");

                entity.Property(e => e.TotalAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("合计金额");

                entity.Property(e => e.TotalTaxAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("合计税额");

                entity.Property(e => e.Voucherid).HasColumnName("VOUCHERID");
            });

            modelBuilder.Entity<TccInvoicesAccountDetail>(entity =>
            {
                entity.ToTable("TCC_Invoices_Account_Details");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Incident).HasComment("实例号");

                entity.Property(e => e.LinkId).HasComment("关联TCC_BillsManagement表中的主键ID");

                entity.Property(e => e.LinkIncident).HasComment("关联TCC_BillsManagement表中的实例号");

                entity.Property(e => e.LinkProcessName)
                    .HasMaxLength(50)
                    .HasComment("关联TCC_BillsManagement表中的流程名");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名");

                entity.Property(e => e.Requestor)
                    .HasMaxLength(50)
                    .HasComment("发票入账申请的申请人账号");
            });

            modelBuilder.Entity<TccInvoicesReceived>(entity =>
            {
                entity.ToTable("TCC_Invoices_Received");

                entity.HasIndex(e => new { e.Incident, e.ProcessName }, "IX_TCC_Invoices_Received");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AccountType)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AccountingAuditDate)
                    .HasColumnType("datetime")
                    .HasComment("审核时间");

                entity.Property(e => e.AccountingAuditLoginUserName)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("审核人");

                entity.Property(e => e.AccountingAuditUserName)
                    .HasMaxLength(20)
                    .HasComment("审核人");

                entity.Property(e => e.AggregateRecInvoiceAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("累计已收发票金额");

                entity.Property(e => e.AggregateRecReceiptAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("累计已收收据金额");

                entity.Property(e => e.AggregateWithholdingTax)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("累计代扣税额");

                entity.Property(e => e.ApplicationCode)
                    .HasDefaultValueSql("((0))")
                    .HasComment("用途，用于非项目收票，和其它类型收票。");

                entity.Property(e => e.ApplicationName)
                    .HasMaxLength(50)
                    .HasComment("用途，用于非项目收票，和其它类型收票。");

                entity.Property(e => e.Attachment).HasComment("附件张数");

                entity.Property(e => e.BillAmountTotalCnt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BillAmountTotalCNT")
                    .HasComment("票额折合同币种总额");

                entity.Property(e => e.BillBeginCode)
                    .HasMaxLength(50)
                    .HasComment("票据起始编号");

                entity.Property(e => e.BillConfirmUserLogin)
                    .HasMaxLength(50)
                    .HasComment("票据归档确认-接单会计帐号");

                entity.Property(e => e.BillConfirmUserName)
                    .HasMaxLength(50)
                    .HasComment("票据归档确认-接单会计姓名");

                entity.Property(e => e.BillStatus).HasComment("是否要认证。0：未认证；1：已认证；2：不需认证");

                entity.Property(e => e.BillTaxAmountTotalCnt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BillTaxAmountTotalCNT")
                    .HasComment("税额折合同币种总额");

                entity.Property(e => e.CasierClaimDate)
                    .HasColumnType("datetime")
                    .HasComment("处理时间");

                entity.Property(e => e.CasierClaimLoginUserName)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("接单人");

                entity.Property(e => e.CasierClaimUserName)
                    .HasMaxLength(20)
                    .HasComment("接单人");

                entity.Property(e => e.ConfirmDate).HasColumnType("datetime");

                entity.Property(e => e.ConfirmIdentity).HasMaxLength(50);

                entity.Property(e => e.ConfirmLoginName).HasMaxLength(50);

                entity.Property(e => e.ConfirmRealName).HasMaxLength(50);

                entity.Property(e => e.ContractAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("合同金额");

                entity.Property(e => e.ContractCategory)
                    .HasMaxLength(50)
                    .HasComment("合同类型");

                entity.Property(e => e.ContractCode)
                    .HasMaxLength(50)
                    .HasComment("合同编号");

                entity.Property(e => e.ContractCurrency)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ContractForm).HasMaxLength(50);

                entity.Property(e => e.ContractName)
                    .HasMaxLength(500)
                    .HasComment("合同名称");

                entity.Property(e => e.ContractPaymentAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("合同已付款金额");

                entity.Property(e => e.ContractPaymentPercentage)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("合同已付款比例");

                entity.Property(e => e.FinaceInvoiceNumber)
                    .HasColumnName("Finace_InvoiceNumber")
                    .HasComment("票据张数");

                entity.Property(e => e.FinaceTicketDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Finace_TicketDate")
                    .HasComment("交票时间");

                entity.Property(e => e.FinaceTicketUserIdentity)
                    .HasMaxLength(50)
                    .HasColumnName("Finace_TicketUserIdentity")
                    .HasComment("交票人");

                entity.Property(e => e.FinaceTicketUserLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Finace_TicketUserLoginName")
                    .HasComment("交票人");

                entity.Property(e => e.FinaceTicketUserRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Finace_TicketUserRealName")
                    .HasComment("交票人");

                entity.Property(e => e.FinaceTotalAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Finace_TotalAmount")
                    .HasComment("合计金额");

                entity.Property(e => e.FinaceTotalRefundedTax)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Finace_TotalRefundedTax")
                    .HasComment("累计已退税款");

                entity.Property(e => e.FinaceTotalTaxAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Finace_TotalTaxAmount");

                entity.Property(e => e.FinaceTotalWithholdingTax)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Finace_TotalWithholdingTax")
                    .HasComment("累计代扣税额");

                entity.Property(e => e.FinanceDraftAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("施工退税汇票金额");

                entity.Property(e => e.FinanceDraftMode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("汇票模式");

                entity.Property(e => e.FinanceDraftTotal)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("库存汇票");

                entity.Property(e => e.FinancePaymentAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("施工退税电汇金额");

                entity.Property(e => e.FinancePaymentBank)
                    .HasMaxLength(100)
                    .HasComment("付款银行");

                entity.Property(e => e.FinancePaymentBankAccount)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("付款帐号");

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(50)
                    .HasComment("表单编号");

                entity.Property(e => e.FoundsUsedCode)
                    .HasMaxLength(50)
                    .HasComment("资金用途编号");

                entity.Property(e => e.FoundsUsedName)
                    .HasMaxLength(50)
                    .HasComment("资金用途名称");

                entity.Property(e => e.GoodClass).HasComment("货物类别");

                entity.Property(e => e.HistoryInvoiceCategoryValue).HasComment("历史票据记录");

                entity.Property(e => e.Incident).HasComment("实例号");

                entity.Property(e => e.InvoiceCategoryText)
                    .HasMaxLength(50)
                    .HasComment("发票类型");

                entity.Property(e => e.InvoiceCategoryValue)
                    .HasMaxLength(20)
                    .HasComment("发票类型  ");

                entity.Property(e => e.InvoiceContent)
                    .HasMaxLength(2000)
                    .HasComment("票据内容");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("datetime")
                    .HasComment("开发票日期");

                entity.Property(e => e.InvoiceTaxAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.InvoiceTotalAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("发票总金额");

                entity.Property(e => e.InvoiceTotalAmountRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("InvoiceTotalAmountRMB")
                    .HasComment("合计人民币");

                entity.Property(e => e.InvoiceTotalBillAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("票据金额");

                entity.Property(e => e.InvoiceTotalBillAmountRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("InvoiceTotalBillAmountRMB")
                    .HasComment("票据金额人民币");

                entity.Property(e => e.InvoicesUnitName)
                    .HasMaxLength(500)
                    .HasComment("开据单位");

                entity.Property(e => e.IsDrawback).HasComment("是否退税");

                entity.Property(e => e.IsForeign).HasComment("增值税是否使用:1使用;0:不使用。");

                entity.Property(e => e.IsTs).HasComment("是否用于进口退税2是");

                entity.Property(e => e.IsVoucher).HasComment("是否入帐2入1不入");

                entity.Property(e => e.MoneyRate)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("关单汇率");

                entity.Property(e => e.Number).HasComment("数量");

                entity.Property(e => e.OffSingleNumber)
                    .HasMaxLength(50)
                    .HasComment("关单编号");

                entity.Property(e => e.OtherSubjectCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("入账使用，财务选择。其它工程款时");

                entity.Property(e => e.OtherSubjectName)
                    .HasMaxLength(50)
                    .HasComment("入账使用，财务选择。其它工程款时");

                entity.Property(e => e.PaymentAbacode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PaymentABACode")
                    .HasComment("ABACode");

                entity.Property(e => e.PaymentApplyReturnTaxAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("申请金额");

                entity.Property(e => e.PaymentBankAccount)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("收款银行帐号");

                entity.Property(e => e.PaymentBankAddress)
                    .HasMaxLength(500)
                    .HasComment("银行地址");

                entity.Property(e => e.PaymentBankName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasComment("银行名");

                entity.Property(e => e.PaymentCanReturnTaxAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("可申请金额");

                entity.Property(e => e.PaymentCategory)
                    .HasMaxLength(50)
                    .HasComment("付款类型");

                entity.Property(e => e.PaymentChangeLocalCurrencyAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("折人民币币金额");

                entity.Property(e => e.PaymentCurrency)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("申请币种");

                entity.Property(e => e.PaymentExchange)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("汇率");

                entity.Property(e => e.PaymentIbanCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("IbanCode");

                entity.Property(e => e.PaymentLineNumbers)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("联行行号");

                entity.Property(e => e.PaymentReceivingCompanyAddress)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("收款单位地址");

                entity.Property(e => e.PaymentReceivingCompanyCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("收款单位编号");

                entity.Property(e => e.PaymentReceivingCompanyName)
                    .HasMaxLength(1200)
                    .HasComment("收款单位名称");

                entity.Property(e => e.PaymentSwiftCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("SwiftCode");

                entity.Property(e => e.ProcessFinishDate)
                    .HasColumnType("datetime")
                    .HasComment("流程归档时间");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名");

                entity.Property(e => e.ProcessStatus)
                    .HasDefaultValueSql("((0))")
                    .HasComment("流程状态   0=进行中  1=已归档  2=已撤销");

                entity.Property(e => e.ProjectCategory)
                    .HasMaxLength(50)
                    .HasComment("项目类型");

                entity.Property(e => e.ProjectCategoryInfo)
                    .HasMaxLength(100)
                    .HasComment("项目类型明细");

                entity.Property(e => e.ProjectCategorySub)
                    .HasMaxLength(50)
                    .HasComment("子项目类型");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .HasComment("项目编号");

                entity.Property(e => e.ProjectCodeDev)
                    .HasMaxLength(50)
                    .HasComment("项目名称");

                entity.Property(e => e.ProjectJnw)
                    .HasMaxLength(20)
                    .HasComment("项目境内外");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(500)
                    .HasComment("项目名称");

                entity.Property(e => e.ProjectSchedule)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("项目进度");

                entity.Property(e => e.ReMark)
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')")
                    .HasComment("备注");

                entity.Property(e => e.RelevanceInvoiceCategoryText)
                    .HasMaxLength(50)
                    .HasComment("应对开票类型");

                entity.Property(e => e.RelevanceInvoiceCategoryValue)
                    .HasMaxLength(20)
                    .HasComment("应对开票类型");

                entity.Property(e => e.RelevanceRateCode)
                    .HasMaxLength(20)
                    .HasComment("对应开票税率编号");

                entity.Property(e => e.RelevanceRateText)
                    .HasMaxLength(20)
                    .HasComment("对应开票税率名称");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasComment("申请日期");

                entity.Property(e => e.RequestDeptCode).HasMaxLength(50);

                entity.Property(e => e.RequestDeptName).HasMaxLength(500);

                entity.Property(e => e.RequestIdentity)
                    .HasMaxLength(50)
                    .HasComment("申请人  身份证号");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasComment("申请人 账号");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasComment("申请人 姓名");

                entity.Property(e => e.RequestTelephone)
                    .HasMaxLength(50)
                    .HasComment("联系方式 ");

                entity.Property(e => e.RequestType).HasComment("申请状态：1项目;2部门");

                entity.Property(e => e.SignCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("签定方");

                entity.Property(e => e.SignName)
                    .HasMaxLength(50)
                    .HasComment("签定方");

                entity.Property(e => e.SingleInvoiceAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("单张票据金额");

                entity.Property(e => e.SubjectCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("科目");

                entity.Property(e => e.SupplierCode)
                    .HasMaxLength(50)
                    .HasComment("供应商/分包商 编号");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(2000)
                    .HasComment("供应商/分包商 名称");

                entity.Property(e => e.SurplusReturnTax)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("剩余退税额");

                entity.Property(e => e.TaxAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("退出税额");

                entity.Property(e => e.TaxAmountRate)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("出口退税额");

                entity.Property(e => e.TaxAttachment).HasComment("退税清单张数");

                entity.Property(e => e.TaxRate)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("税率");

                entity.Property(e => e.TaxVoucherCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("退税帐");

                entity.Property(e => e.TaxVoucherId)
                    .HasColumnName("TaxVoucherID")
                    .HasComment("退税帐");

                entity.Property(e => e.TotalPrice)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("关单编号和合同编号对应的总价");

                entity.Property(e => e.TotalTaxAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("本次累计税额");

                entity.Property(e => e.TotalTaxAmountRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("TotalTaxAmountRMB")
                    .HasComment("税额人民币");

                entity.Property(e => e.TotelReturnTax)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("累计金额");

                entity.Property(e => e.TsVoucherCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("出口退税入账");

                entity.Property(e => e.TsVoucherId)
                    .HasColumnName("TsVoucherID")
                    .HasComment("出口退税入账");

                entity.Property(e => e.UnitCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("合同签定单位");

                entity.Property(e => e.UnitJnw)
                    .HasMaxLength(20)
                    .HasComment("合同境内外");

                entity.Property(e => e.UnitName)
                    .HasMaxLength(200)
                    .HasComment("合同签定单位");

                entity.Property(e => e.VoucherBillTaxAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("票据税额");

                entity.Property(e => e.VoucherBillTaxAmountRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("VoucherBillTaxAmountRMB")
                    .HasComment("票据税额人民币金额");

                entity.Property(e => e.VoucherBillTaxCurrency)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("票据税额币种");

                entity.Property(e => e.VoucherCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("凭证Code");

                entity.Property(e => e.VoucherDeptCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("审核部门");

                entity.Property(e => e.VoucherDeptName)
                    .HasMaxLength(50)
                    .HasComment("审核部门");

                entity.Property(e => e.VoucherId)
                    .HasColumnName("VoucherID")
                    .HasComment("凭证表主键");

                entity.Property(e => e.VoucherTaxAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("票据税额入账金额");

                entity.Property(e => e.VoucherTaxCurrency)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("票据税额入账币种");

                entity.Property(e => e.VoucherTaxExchange)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("票据税额入账汇率");
            });

            modelBuilder.Entity<TccInvoicesReceivedBillsInfo>(entity =>
            {
                entity.ToTable("TCC_Invoices_Received_BillsInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AmountRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AmountRMB")
                    .HasComment("合计折人民币");

                entity.Property(e => e.BillAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BillAmountCnt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BillAmountCNT")
                    .HasComment("票额折合同币种金额");

                entity.Property(e => e.BillAmountRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BillAmountRMB")
                    .HasComment("票额折人民币");

                entity.Property(e => e.BillCode).HasMaxLength(50);

                entity.Property(e => e.BillContent)
                    .HasMaxLength(1000)
                    .HasComment("票据内容");

                entity.Property(e => e.BillTaxAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BillTaxAmountCnt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BillTaxAmountCNT")
                    .HasComment("税额折合同币种金额");

                entity.Property(e => e.BillTaxAmountRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BillTaxAmountRMB")
                    .HasComment("税额折人民币");

                entity.Property(e => e.ByAttachment).HasMaxLength(50);

                entity.Property(e => e.CalculateMode).HasComment("计算方式");

                entity.Property(e => e.Currency)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("币种");

                entity.Property(e => e.Exchange)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("汇率");

                entity.Property(e => e.ExchangeCnt)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("ExchangeCNT")
                    .HasComment("折合同币种汇率");

                entity.Property(e => e.Inventory)
                    .HasDefaultValueSql("((0))")
                    .HasComment("清单数");

                entity.Property(e => e.InvoiceCode)
                    .HasMaxLength(50)
                    .HasComment("发票代码");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("datetime")
                    .HasComment("开票日期");

                entity.Property(e => e.IsReturn)
                    .HasMaxLength(50)
                    .HasComment("是否退税");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.RCreateTime)
                    .HasMaxLength(50)
                    .HasColumnName("R_CreateTime");

                entity.Property(e => e.RId)
                    .HasMaxLength(36)
                    .HasColumnName("R_ID");

                entity.Property(e => e.RName)
                    .HasMaxLength(50)
                    .HasColumnName("R_name");

                entity.Property(e => e.RTitle)
                    .HasMaxLength(50)
                    .HasColumnName("R_Title");

                entity.Property(e => e.Requestor)
                    .HasMaxLength(50)
                    .HasComment("收取发票申请流程的申请人");

                entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TaxRateCode)
                    .HasMaxLength(50)
                    .HasComment("税率编号");

                entity.Property(e => e.TaxRateText)
                    .HasMaxLength(50)
                    .HasComment("税率显示值");
            });

            modelBuilder.Entity<TccInvoicesReceivedCargoInfo>(entity =>
            {
                entity.ToTable("TCC_Invoices_Received_CargoInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CdCode)
                    .HasMaxLength(50)
                    .HasColumnName("CD_code")
                    .HasComment("海关信息表单号");

                entity.Property(e => e.CustomsCode)
                    .HasMaxLength(50)
                    .HasComment("海关编号");

                entity.Property(e => e.DeclareDate)
                    .HasColumnType("datetime")
                    .HasComment("申报日期");

                entity.Property(e => e.ExportDate)
                    .HasColumnType("datetime")
                    .HasComment("出口日期");

                entity.Property(e => e.ExportRebateRate)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("出口退税率(%)");

                entity.Property(e => e.ItemName)
                    .HasMaxLength(200)
                    .HasComment("商品名称");

                entity.Property(e => e.ItemSid)
                    .HasColumnName("ItemSID")
                    .HasComment("物品编号");

                entity.Property(e => e.MoneyCny)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MoneyCNY")
                    .HasComment("报关单总价(折人民币元)");

                entity.Property(e => e.MoneyRate)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("汇率");

                entity.Property(e => e.MoneyTotal)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("报关单总价(元)");

                entity.Property(e => e.MoneyType)
                    .HasMaxLength(50)
                    .HasComment("币种");

                entity.Property(e => e.Num)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("数量");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.Requestor)
                    .HasMaxLength(50)
                    .HasComment("收取发票申请流程的申请人");

                entity.Property(e => e.TotalPrice)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("总价");

                entity.Property(e => e.TotalPriceCnyChanged)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("TotalPriceCNY_Changed")
                    .HasDefaultValueSql("((0))")
                    .HasComment("本币发票调整后金额");

                entity.Property(e => e.Unit)
                    .HasMaxLength(50)
                    .HasComment("单位");

                entity.Property(e => e.UnitPrice)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("单价");

                entity.Property(e => e.ZhRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("zhRMB")
                    .HasComment("总价折合人民币金额");
            });

            modelBuilder.Entity<TccInvoicesReceivedDepartmentList>(entity =>
            {
                entity.ToTable("TCC_Invoices_Received_DepartmentList");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("金额");

                entity.Property(e => e.ApplicationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("用途");

                entity.Property(e => e.ApplicationName)
                    .HasMaxLength(50)
                    .HasComment("用途");

                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("部门号");

                entity.Property(e => e.DepartmentName)
                    .HasMaxLength(50)
                    .HasComment("部门号");

                entity.Property(e => e.Flag).HasComment("标志.2项目1部门");

                entity.Property(e => e.Incident).HasComment("实例号");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名");

                entity.Property(e => e.Rid)
                    .HasColumnName("RID")
                    .HasComment("外键");
            });

            modelBuilder.Entity<TccInvoicesReceivedDraftInfo>(entity =>
            {
                entity.HasKey(e => e.Pkid);

                entity.ToTable("TCC_Invoices_Received_DraftInfo");

                entity.Property(e => e.Pkid).HasColumnName("PKID");

                entity.Property(e => e.DraftId).HasColumnName("DraftID");

                entity.Property(e => e.Rid)
                    .HasColumnName("RID")
                    .HasComment("主表主键");
            });

            modelBuilder.Entity<TccInvoicesReceivedPackingInfo>(entity =>
            {
                entity.ToTable("TCC_Invoices_Received_PackingInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("amount")
                    .HasDefaultValueSql("((0))")
                    .HasComment("金额（原币）");

                entity.Property(e => e.BcQty)
                    .HasColumnName("Bc_qty")
                    .HasComment("数量");

                entity.Property(e => e.BillCode)
                    .HasMaxLength(50)
                    .HasComment("对应发票编号");

                entity.Property(e => e.ContCode)
                    .HasMaxLength(200)
                    .HasColumnName("cont_code")
                    .HasDefaultValueSql("('')")
                    .HasComment("合同编号");

                entity.Property(e => e.ContSid)
                    .HasColumnName("cont_sid")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.GroupCode)
                    .HasMaxLength(50)
                    .HasColumnName("group_code")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GroupShortDesc)
                    .HasMaxLength(200)
                    .HasColumnName("group_short_desc")
                    .HasDefaultValueSql("('')")
                    .HasComment("设备/材料大类");

                entity.Property(e => e.HBillCode)
                    .HasMaxLength(50)
                    .HasColumnName("H_BillCode")
                    .HasComment("对应发票编号(隐藏)");

                entity.Property(e => e.Hthl)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("hthl")
                    .HasDefaultValueSql("((0))")
                    .HasComment("汇率");

                entity.Property(e => e.IdentCode)
                    .HasMaxLength(200)
                    .HasColumnName("ident_code")
                    .HasDefaultValueSql("('')")
                    .HasComment("批号");

                entity.Property(e => e.Money)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("原币金额（本次）");

                entity.Property(e => e.MoneyRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MoneyRMB")
                    .HasComment("折人民币金额（本次）");

                entity.Property(e => e.MoneyType)
                    .HasMaxLength(50)
                    .HasColumnName("money_type")
                    .HasDefaultValueSql("('')")
                    .HasComment("币种");

                entity.Property(e => e.PartCode)
                    .HasMaxLength(50)
                    .HasColumnName("part_code")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PartName)
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')")
                    .HasComment("货物名称");

                entity.Property(e => e.PartShortDesc)
                    .HasMaxLength(200)
                    .HasColumnName("part_short_desc")
                    .HasDefaultValueSql("('')")
                    .HasComment("设备/材料小类");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.Qty)
                    .HasColumnName("qty")
                    .HasDefaultValueSql("((0))")
                    .HasComment("数量(总和)");

                entity.Property(e => e.Requestor)
                    .HasMaxLength(50)
                    .HasComment("收取发票申请流程的申请人");

                entity.Property(e => e.ScCode)
                    .HasMaxLength(200)
                    .HasColumnName("sc_code")
                    .HasDefaultValueSql("('')")
                    .HasComment("设备/材料编号");

                entity.Property(e => e.ScName)
                    .HasMaxLength(200)
                    .HasColumnName("sc_name")
                    .HasDefaultValueSql("('')")
                    .HasComment("设备/材料描述");

                entity.Property(e => e.SyQty)
                    .HasColumnName("Sy_qty")
                    .HasComment("数量(剩余)");

                entity.Property(e => e.Unit)
                    .HasMaxLength(50)
                    .HasColumnName("unit")
                    .HasDefaultValueSql("('')")
                    .HasComment("单位");
            });

            modelBuilder.Entity<TccInvoicesReceivedPaymentList>(entity =>
            {
                entity.ToTable("TCC_Invoices_Received_PaymentList");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplicationCode).HasComment("用途");

                entity.Property(e => e.ApplicationName)
                    .HasMaxLength(50)
                    .HasComment("用途");

                entity.Property(e => e.FinanceCurrency)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FinanceExchange).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.FinancePaymentTotal)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("付款金额");

                entity.Property(e => e.FinanceRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("FinanceRMB");

                entity.Property(e => e.Incident).HasComment("实例号");

                entity.Property(e => e.PaymentIncident).HasComment("付款实例号");

                entity.Property(e => e.PaymentProcessName)
                    .HasMaxLength(50)
                    .HasComment("付款流程名");

                entity.Property(e => e.PaymentReceivingCompanyCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("收款单位");

                entity.Property(e => e.PaymentReceivingCompanyName)
                    .HasMaxLength(500)
                    .HasComment("收款单位");

                entity.Property(e => e.Pid)
                    .HasColumnName("PID")
                    .HasComment("申请单主键");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasComment("申请时间");

                entity.Property(e => e.RequestFormNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("申请单号");

                entity.Property(e => e.RequestLogin)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("申请人");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("申请人");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasComment("申请人");

                entity.Property(e => e.Rid)
                    .HasColumnName("RID")
                    .HasComment("外键");

                entity.Property(e => e.VoucherDeptCode)
                    .HasMaxLength(50)
                    .HasComment("部门");

                entity.Property(e => e.VoucherDeptName)
                    .HasMaxLength(50)
                    .HasComment("部门");
            });

            modelBuilder.Entity<TccInvoicesReceivedRecBillsInfo>(entity =>
            {
                entity.ToTable("TCC_Invoices_Received_RecBillsInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ContractCode).HasMaxLength(50);

                entity.Property(e => e.ContractName).HasMaxLength(500);

                entity.Property(e => e.PayActualAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PayAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PayFormNumber)
                    .HasMaxLength(50)
                    .HasComment("付款流程的表单编号");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(50);

                entity.Property(e => e.ProjectName).HasMaxLength(500);

                entity.Property(e => e.RecBankAccount).HasMaxLength(50);

                entity.Property(e => e.RecBillsAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RecCompanyCode).HasMaxLength(50);

                entity.Property(e => e.RecCompanyName).HasMaxLength(2000);

                entity.Property(e => e.RecInvoiceDate).HasColumnType("datetime");

                entity.Property(e => e.RecInvoicesAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RequestIdentity).HasMaxLength(50);

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasComment("付款申请流程的申请人");

                entity.Property(e => e.RequestRealName).HasMaxLength(50);

                entity.Property(e => e.Requestor)
                    .HasMaxLength(50)
                    .HasComment("收取发票申请流程的申请人");

                entity.Property(e => e.SupplierCode).HasMaxLength(50);

                entity.Property(e => e.SupplierName).HasMaxLength(2000);

                entity.Property(e => e.TransactorIdentity).HasMaxLength(50);

                entity.Property(e => e.TransactorLoginName).HasMaxLength(50);

                entity.Property(e => e.TransactorRealName).HasMaxLength(50);

                entity.Property(e => e.WithholdingTax).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<TccInvoicesRed>(entity =>
            {
                entity.ToTable("TCC_Invoices_Red");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AccountStatus).HasComment("入账状态 0未入账  1已入账");

                entity.Property(e => e.AggregateRenInvoiceAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AggregateRenReceiptAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AttachmentSj).HasColumnName("Attachment_SJ");

                entity.Property(e => e.AuditAccountDate).HasColumnType("datetime");

                entity.Property(e => e.AuditAccountIdentity).HasMaxLength(50);

                entity.Property(e => e.AuditAccountLoginName).HasMaxLength(50);

                entity.Property(e => e.AuditAccountRealName).HasMaxLength(50);

                entity.Property(e => e.BId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("b_id");

                entity.Property(e => e.BName)
                    .HasMaxLength(200)
                    .HasColumnName("b_name");

                entity.Property(e => e.ConfirmDate).HasColumnType("datetime");

                entity.Property(e => e.ConfirmIdentity).HasMaxLength(50);

                entity.Property(e => e.ConfirmLoginName).HasMaxLength(50);

                entity.Property(e => e.ConfirmRealName).HasMaxLength(50);

                entity.Property(e => e.DesignOfIncome).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FinanceBillBeginCode)
                    .HasMaxLength(50)
                    .HasColumnName("Finance_BillBeginCode");

                entity.Property(e => e.FinanceBillContent).HasColumnName("Finance_BillContent");

                entity.Property(e => e.FinanceDateSj)
                    .HasColumnType("datetime")
                    .HasColumnName("Finance_Date_SJ");

                entity.Property(e => e.FinanceInvoiceDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Finance_InvoiceDate");

                entity.Property(e => e.FinanceInvoiceNumber).HasColumnName("Finance_InvoiceNumber");

                entity.Property(e => e.FinanceInvoiceTaxAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Finance_InvoiceTaxAmount");

                entity.Property(e => e.FinanceReceiptorRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Finance_ReceiptorRealName");

                entity.Property(e => e.FinanceSingleInvoiceAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Finance_SingleInvoiceAmount");

                entity.Property(e => e.FinanceTaxRate)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Finance_TaxRate");

                entity.Property(e => e.FinanceTicketDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Finance_TicketDate");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.InvoiceCategoryText).HasMaxLength(50);

                entity.Property(e => e.InvoiceCategoryValue).HasMaxLength(20);

                entity.Property(e => e.InvoiceTotalAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.InvoicesUnitName).HasMaxLength(500);

                entity.Property(e => e.OwnerCategory).HasMaxLength(50);

                entity.Property(e => e.OwnerCode).HasMaxLength(50);

                entity.Property(e => e.OwnerName).HasMaxLength(500);

                entity.Property(e => e.PayBankAccount).HasMaxLength(50);

                entity.Property(e => e.PayBankName).HasMaxLength(500);

                entity.Property(e => e.PayCompanyAddress).HasMaxLength(500);

                entity.Property(e => e.PayCompanyCode).HasMaxLength(50);

                entity.Property(e => e.PayCompanyName).HasMaxLength(500);

                entity.Property(e => e.PayCompanyPhone).HasMaxLength(50);

                entity.Property(e => e.PayCompanyTaxId).HasMaxLength(50);

                entity.Property(e => e.PayUnitedBankNumber).HasMaxLength(50);

                entity.Property(e => e.ProcessFinishDate).HasColumnType("datetime");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectCategory).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(50);

                entity.Property(e => e.ProjectContractTotalAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ProjectJnw).HasMaxLength(50);

                entity.Property(e => e.ProjectName).HasMaxLength(500);

                entity.Property(e => e.ProjectSchedule).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ReceivedAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ReceivedPercentage).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RenderedCategoryText).HasMaxLength(50);

                entity.Property(e => e.RenderedCategoryValue).HasMaxLength(50);

                entity.Property(e => e.RequestDate).HasColumnType("datetime");

                entity.Property(e => e.RequestDeptCode).HasMaxLength(50);

                entity.Property(e => e.RequestDeptName).HasMaxLength(500);

                entity.Property(e => e.RequestIdentity).HasMaxLength(50);

                entity.Property(e => e.RequestLoginName).HasMaxLength(50);

                entity.Property(e => e.RequestRealName).HasMaxLength(50);

                entity.Property(e => e.RequestTelephone).HasMaxLength(50);

                entity.Property(e => e.SjReceiptRealName)
                    .HasMaxLength(20)
                    .HasColumnName("SJ_ReceiptRealName");

                entity.Property(e => e.SubMoneyOnVat).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Voucherid).HasColumnName("VOUCHERID");
            });

            modelBuilder.Entity<TccInvoicesRedBillsInfo>(entity =>
            {
                entity.ToTable("TCC_Invoices_Red_BillsInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BillAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BillCode).HasMaxLength(50);

                entity.Property(e => e.BillContent)
                    .HasMaxLength(1000)
                    .HasComment("票据内容");

                entity.Property(e => e.BillTaxAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ByAttachment).HasMaxLength(50);

                entity.Property(e => e.Inventory).HasComment("清单数");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("datetime")
                    .HasComment("开票日期");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.RCreateTime)
                    .HasMaxLength(50)
                    .HasColumnName("R_CreateTime");

                entity.Property(e => e.RId)
                    .HasMaxLength(36)
                    .HasColumnName("R_ID");

                entity.Property(e => e.RName)
                    .HasMaxLength(50)
                    .HasColumnName("R_name");

                entity.Property(e => e.RTitle)
                    .HasMaxLength(50)
                    .HasColumnName("R_Title");

                entity.Property(e => e.Requestor)
                    .HasMaxLength(50)
                    .HasComment("开出发票申请流程的申请人");

                entity.Property(e => e.TaxRate)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("税率 （当此列参与计算时需要除100）");

                entity.Property(e => e.TaxRateCode)
                    .HasMaxLength(50)
                    .HasComment("税率编号");

                entity.Property(e => e.TaxRateText)
                    .HasMaxLength(50)
                    .HasComment("税率 （只用于显示 带%）");
            });

            modelBuilder.Entity<TccInvoicesRedCancelBillsInfo>(entity =>
            {
                entity.ToTable("TCC_Invoices_Red_CancelBillsInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AccountStatus).HasComment("入账状态 0未入账  1已入账");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("价税合计金额");

                entity.Property(e => e.BId).HasColumnName("B_ID");

                entity.Property(e => e.BillAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("票据金额");

                entity.Property(e => e.BillCategoryText)
                    .HasMaxLength(50)
                    .HasComment("开票类型");

                entity.Property(e => e.BillCode)
                    .HasMaxLength(50)
                    .HasComment("票据编号");

                entity.Property(e => e.BillContent)
                    .HasMaxLength(500)
                    .HasComment("票据内容");

                entity.Property(e => e.BillTaxAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("票据税额");

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(50)
                    .HasComment("表单编号");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.TaxRate)
                    .HasMaxLength(50)
                    .HasComment("税率");
            });

            modelBuilder.Entity<TccInvoicesRendered>(entity =>
            {
                entity.ToTable("TCC_Invoices_Rendered");

                entity.HasIndex(e => new { e.ProcessName, e.Incident }, "IX_TCC_Invoices_Rendered");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AggregateRenInvoiceAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("累计已开出发票金额");

                entity.Property(e => e.AggregateRenReceiptAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("累计已开出收据金额");

                entity.Property(e => e.AmountDeducted)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("扣除金额");

                entity.Property(e => e.ApplyRateCode)
                    .HasMaxLength(20)
                    .HasComment("申请汇率编号");

                entity.Property(e => e.ApplyRateText)
                    .HasMaxLength(50)
                    .HasComment("申请汇率名称");

                entity.Property(e => e.ApprovalDate)
                    .HasColumnType("datetime")
                    .HasComment("主管会计审批时间");

                entity.Property(e => e.Attachment).HasComment("附件张数");

                entity.Property(e => e.AttachmentSj).HasColumnName("Attachment_SJ");

                entity.Property(e => e.AuditAccountDate)
                    .HasColumnType("datetime")
                    .HasComment("财务业务审核");

                entity.Property(e => e.AuditAccountIdentity)
                    .HasMaxLength(50)
                    .HasComment("财务业务审核");

                entity.Property(e => e.AuditAccountLoginName)
                    .HasMaxLength(50)
                    .HasComment("财务业务审核");

                entity.Property(e => e.AuditAccountRealName)
                    .HasMaxLength(50)
                    .HasComment("财务业务审核");

                entity.Property(e => e.BId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("b_id")
                    .HasComment("合同签定方");

                entity.Property(e => e.BName)
                    .HasMaxLength(200)
                    .HasColumnName("b_name")
                    .HasComment("合同签定方");

                entity.Property(e => e.BillContent).HasComment("票据内容");

                entity.Property(e => e.ConfirmDate)
                    .HasColumnType("datetime")
                    .HasComment("财务接单");

                entity.Property(e => e.ConfirmIdentity)
                    .HasMaxLength(50)
                    .HasComment("财务接单");

                entity.Property(e => e.ConfirmLoginName)
                    .HasMaxLength(50)
                    .HasComment("财务接单");

                entity.Property(e => e.ConfirmRealName)
                    .HasMaxLength(50)
                    .HasComment("财务接单");

                entity.Property(e => e.DesignOfIncome)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("应收/预收款");

                entity.Property(e => e.DiffAdvanceTax)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("预缴税款差额");

                entity.Property(e => e.FinanceBillBeginCode)
                    .HasMaxLength(50)
                    .HasColumnName("Finance_BillBeginCode")
                    .HasComment("票据起始编号");

                entity.Property(e => e.FinanceBillContent)
                    .HasColumnName("Finance_BillContent")
                    .HasComment("票据内容");

                entity.Property(e => e.FinanceDateSj)
                    .HasColumnType("datetime")
                    .HasColumnName("Finance_Date_SJ")
                    .HasComment("收据领取时间");

                entity.Property(e => e.FinanceInvoiceDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Finance_InvoiceDate")
                    .HasComment("开票日期");

                entity.Property(e => e.FinanceInvoiceNumber)
                    .HasColumnName("Finance_InvoiceNumber")
                    .HasComment("票据张数");

                entity.Property(e => e.FinanceInvoiceTaxAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Finance_InvoiceTaxAmount")
                    .HasComment("票据税额");

                entity.Property(e => e.FinanceReceiptorRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Finance_ReceiptorRealName")
                    .HasComment("领取人");

                entity.Property(e => e.FinanceSingleInvoiceAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Finance_SingleInvoiceAmount")
                    .HasComment("单张票据金额");

                entity.Property(e => e.FinanceTaxRate)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Finance_TaxRate")
                    .HasComment("税率");

                entity.Property(e => e.FinanceTicketDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Finance_TicketDate")
                    .HasComment("领取时间");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.InvoiceCategoryText)
                    .HasMaxLength(50)
                    .HasComment("发票类型");

                entity.Property(e => e.InvoiceCategoryValue)
                    .HasMaxLength(20)
                    .HasComment("发票类型");

                entity.Property(e => e.InvoiceTotalAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("发票总金额");

                entity.Property(e => e.InvoicesUnitName)
                    .HasMaxLength(500)
                    .HasComment("开票单位");

                entity.Property(e => e.IsRz).HasComment("是否入帐。1：不入帐；2入帐");

                entity.Property(e => e.LinkedOtherCost).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.OwnerCategory)
                    .HasMaxLength(50)
                    .HasComment("业主类别");

                entity.Property(e => e.OwnerCode)
                    .HasMaxLength(50)
                    .HasComment("业主编号");

                entity.Property(e => e.OwnerName)
                    .HasMaxLength(500)
                    .HasComment("业主名称");

                entity.Property(e => e.PayBankAccount)
                    .HasMaxLength(50)
                    .HasComment("付款银行账号");

                entity.Property(e => e.PayBankName)
                    .HasMaxLength(500)
                    .HasComment("付款银行");

                entity.Property(e => e.PayCompanyAddress)
                    .HasMaxLength(500)
                    .HasComment("付款单位地址");

                entity.Property(e => e.PayCompanyCode)
                    .HasMaxLength(50)
                    .HasComment("付款单位编号");

                entity.Property(e => e.PayCompanyName)
                    .HasMaxLength(500)
                    .HasComment("付款单位名称");

                entity.Property(e => e.PayCompanyPhone)
                    .HasMaxLength(50)
                    .HasComment("付款单位联系电话");

                entity.Property(e => e.PayCompanyTaxId)
                    .HasMaxLength(50)
                    .HasComment("付款单位税号");

                entity.Property(e => e.PayUnitedBankNumber)
                    .HasMaxLength(50)
                    .HasComment("联行行号");

                entity.Property(e => e.ProcessFinishDate).HasColumnType("datetime");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectCategory)
                    .HasMaxLength(50)
                    .HasComment("项目类型");

                entity.Property(e => e.ProjectCode).HasMaxLength(50);

                entity.Property(e => e.ProjectContractTotalAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("项目合同总额");

                entity.Property(e => e.ProjectJnw)
                    .HasMaxLength(50)
                    .HasComment("项目境外内");

                entity.Property(e => e.ProjectName).HasMaxLength(500);

                entity.Property(e => e.ProjectSchedule)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("项目进度（%）");

                entity.Property(e => e.RateMethodYn)
                    .HasMaxLength(50)
                    .HasColumnName("RateMethodYN")
                    .HasComment("是否适用一般计税方法（是：１或否：２）");

                entity.Property(e => e.ReceivedAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("已收费额");

                entity.Property(e => e.ReceivedPercentage)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("已收费比例（%）");

                entity.Property(e => e.Remark).HasComment("备注信息");

                entity.Property(e => e.RenderedCategoryText)
                    .HasMaxLength(50)
                    .HasComment("开票类型");

                entity.Property(e => e.RenderedCategoryValue)
                    .HasMaxLength(50)
                    .HasComment("开票类型");

                entity.Property(e => e.RequestDate).HasColumnType("datetime");

                entity.Property(e => e.RequestDeptCode).HasMaxLength(50);

                entity.Property(e => e.RequestDeptName).HasMaxLength(500);

                entity.Property(e => e.RequestIdentity).HasMaxLength(50);

                entity.Property(e => e.RequestLoginName).HasMaxLength(50);

                entity.Property(e => e.RequestRealName).HasMaxLength(50);

                entity.Property(e => e.RequestTelephone).HasMaxLength(50);

                entity.Property(e => e.Sbclchk)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("累计已开设备材料采购款");

                entity.Property(e => e.SjReceiptRealName)
                    .HasMaxLength(20)
                    .HasColumnName("SJ_ReceiptRealName")
                    .HasComment("收据领取人");

                entity.Property(e => e.Sjk)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("累计已开设计款");

                entity.Property(e => e.SubMoneyOnVat)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("销项税额");

                entity.Property(e => e.TaxDues)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("税款");

                entity.Property(e => e.TaxationEnd)
                    .HasMaxLength(50)
                    .HasComment("税款所属时间结束时间");

                entity.Property(e => e.TaxationStart)
                    .HasMaxLength(50)
                    .HasComment("税款所属时间开始时间");

                entity.Property(e => e.TotalAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("开票合计值");

                entity.Property(e => e.Voucherid).HasColumnName("VOUCHERID");

                entity.Property(e => e.Zxjfw)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("累计已开咨询及服务");
            });

            modelBuilder.Entity<TccInvoicesRenderedBillsInfo>(entity =>
            {
                entity.ToTable("TCC_Invoices_Rendered_BillsInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BillAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BillCode).HasMaxLength(50);

                entity.Property(e => e.BillContent)
                    .HasMaxLength(1000)
                    .HasComment("票据内容");

                entity.Property(e => e.BillTaxAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ByAttachment).HasMaxLength(50);

                entity.Property(e => e.Inventory).HasComment("清单数");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("datetime")
                    .HasComment("开票日期");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.RCreateTime)
                    .HasMaxLength(50)
                    .HasColumnName("R_CreateTime");

                entity.Property(e => e.RId)
                    .HasMaxLength(36)
                    .HasColumnName("R_ID");

                entity.Property(e => e.RName)
                    .HasMaxLength(50)
                    .HasColumnName("R_name");

                entity.Property(e => e.RTitle)
                    .HasMaxLength(50)
                    .HasColumnName("R_Title");

                entity.Property(e => e.Requestor)
                    .HasMaxLength(50)
                    .HasComment("收取发票申请流程的申请人");

                entity.Property(e => e.TaxRate)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("税率 （当此列参与计算时需要除100）");

                entity.Property(e => e.TaxRateCode)
                    .HasMaxLength(50)
                    .HasComment("税率编号");

                entity.Property(e => e.TaxRateText)
                    .HasMaxLength(50)
                    .HasComment("税率 （只用于显示 带%）");
            });

            modelBuilder.Entity<TccInvoicesRenderedDraftInfo>(entity =>
            {
                entity.ToTable("TCC_Invoices_Rendered_DraftInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DraftId)
                    .HasColumnName("DraftID")
                    .HasComment("使用汇票金额");

                entity.Property(e => e.Incident).HasComment("实例号");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名");
            });

            modelBuilder.Entity<TccInvoicesRenderedPackingInfo>(entity =>
            {
                entity.ToTable("TCC_Invoices_Rendered_PackingInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("amount");

                entity.Property(e => e.BcQty).HasColumnName("Bc_qty");

                entity.Property(e => e.BillCode).HasMaxLength(50);

                entity.Property(e => e.ContCode)
                    .HasMaxLength(200)
                    .HasColumnName("cont_code");

                entity.Property(e => e.ContSid).HasColumnName("cont_sid");

                entity.Property(e => e.GroupCode)
                    .HasMaxLength(50)
                    .HasColumnName("group_code");

                entity.Property(e => e.GroupShortDesc)
                    .HasMaxLength(200)
                    .HasColumnName("group_short_desc");

                entity.Property(e => e.HBillCode)
                    .HasMaxLength(50)
                    .HasColumnName("H_BillCode");

                entity.Property(e => e.Hthl)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("hthl");

                entity.Property(e => e.IdentCode)
                    .HasMaxLength(200)
                    .HasColumnName("ident_code");

                entity.Property(e => e.Money).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MoneyRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MoneyRMB");

                entity.Property(e => e.MoneyType)
                    .HasMaxLength(50)
                    .HasColumnName("money_type");

                entity.Property(e => e.PartCode)
                    .HasMaxLength(50)
                    .HasColumnName("part_code");

                entity.Property(e => e.PartName).HasMaxLength(500);

                entity.Property(e => e.PartShortDesc)
                    .HasMaxLength(200)
                    .HasColumnName("part_short_desc");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.Qty).HasColumnName("qty");

                entity.Property(e => e.Requestor).HasMaxLength(50);

                entity.Property(e => e.ScCode)
                    .HasMaxLength(200)
                    .HasColumnName("sc_code");

                entity.Property(e => e.ScName)
                    .HasMaxLength(200)
                    .HasColumnName("sc_name");

                entity.Property(e => e.SyQty).HasColumnName("Sy_qty");

                entity.Property(e => e.Unit)
                    .HasMaxLength(50)
                    .HasColumnName("unit");
            });

            modelBuilder.Entity<TccInvoicesRenderedRecevelist>(entity =>
            {
                entity.ToTable("TCC_Invoices_Rendered_Recevelist");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键ID");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("加税合计金额");

                entity.Property(e => e.BillAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("票额");

                entity.Property(e => e.BillCategoryText)
                    .HasMaxLength(50)
                    .HasComment("票据类型名称");

                entity.Property(e => e.BillCategoryValue).HasComment("票据类型编号");

                entity.Property(e => e.BillCode)
                    .HasMaxLength(50)
                    .HasComment("发票编号");

                entity.Property(e => e.BillTaxAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("税额");

                entity.Property(e => e.Category).HasMaxLength(50);

                entity.Property(e => e.ContanctCode)
                    .HasMaxLength(50)
                    .HasComment("合同号");

                entity.Property(e => e.DeductibleAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("抵扣金额");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("datetime")
                    .HasComment("开票日期");

                entity.Property(e => e.Pid)
                    .HasColumnName("PID")
                    .HasComment("外键");

                entity.Property(e => e.ProofCode)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ReDeductibleAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("可用抵扣金额");

                entity.Property(e => e.Requestor)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("申请人账号");

                entity.Property(e => e.Sformnumber)
                    .HasMaxLength(50)
                    .HasComment("表单号");

                entity.Property(e => e.Sincident).HasComment("实例号");

                entity.Property(e => e.Sprocessname)
                    .HasMaxLength(50)
                    .HasComment("流程名称");

                entity.Property(e => e.SupplierCode)
                    .HasMaxLength(50)
                    .HasComment("供应商编号");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(500)
                    .HasComment("供应商名称");

                entity.Property(e => e.TaxRateCode)
                    .HasMaxLength(50)
                    .HasComment("税率编号");

                entity.Property(e => e.TaxRateText)
                    .HasMaxLength(50)
                    .HasComment("税率名称");
            });

            modelBuilder.Entity<TccInvoicesRenderedRenBillsInfo>(entity =>
            {
                entity.ToTable("TCC_Invoices_Rendered_RenBillsInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ConstructionParagraph)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("施工工程款");

                entity.Property(e => e.DesignParagraph)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("设计款");

                entity.Property(e => e.EquipmentParagraph)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("设备材料采购款");

                entity.Property(e => e.InvoiceCategoryText)
                    .HasMaxLength(50)
                    .HasComment("票据类型");

                entity.Property(e => e.InvoiceCategoryValue).HasComment("票据类型");

                entity.Property(e => e.OwnerCode).HasMaxLength(50);

                entity.Property(e => e.OwnerName).HasMaxLength(500);

                entity.Property(e => e.PayBankAccount).HasMaxLength(50);

                entity.Property(e => e.PayCompanyCode).HasMaxLength(50);

                entity.Property(e => e.PayCompanyName).HasMaxLength(500);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(50);

                entity.Property(e => e.ProjectName).HasMaxLength(500);

                entity.Property(e => e.RecActualAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RecAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RecFormNumber).HasMaxLength(50);

                entity.Property(e => e.RenBillsAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RenInvoiceDate).HasColumnType("datetime");

                entity.Property(e => e.RenInvoicesAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RequestIdentity).HasMaxLength(50);

                entity.Property(e => e.RequestLoginName).HasMaxLength(50);

                entity.Property(e => e.RequestRealName).HasMaxLength(50);

                entity.Property(e => e.Requestor).HasMaxLength(50);

                entity.Property(e => e.ServicesParagraph)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("咨询及服务");

                entity.Property(e => e.TransactorIdentity).HasMaxLength(50);

                entity.Property(e => e.TransactorLoginName).HasMaxLength(50);

                entity.Property(e => e.TransactorRealName).HasMaxLength(50);
            });

            modelBuilder.Entity<TccIreceivedRed>(entity =>
            {
                entity.ToTable("TCC_IReceivedRed");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AccountingAuditDate)
                    .HasColumnType("datetime")
                    .HasComment("审核时间");

                entity.Property(e => e.AccountingAuditLoginUserName)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("审核人");

                entity.Property(e => e.AccountingAuditUserName)
                    .HasMaxLength(20)
                    .HasComment("审核人");

                entity.Property(e => e.AggregateRecInvoiceAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("累计已收发票金额");

                entity.Property(e => e.AggregateRecReceiptAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("累计已收收据金额");

                entity.Property(e => e.AggregateWithholdingTax)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("累计代扣税额");

                entity.Property(e => e.ApplicationCode)
                    .HasDefaultValueSql("((0))")
                    .HasComment("用途，用于非项目收票，和其它类型收票。");

                entity.Property(e => e.ApplicationName)
                    .HasMaxLength(50)
                    .HasComment("用途，用于非项目收票，和其它类型收票。");

                entity.Property(e => e.Attachment).HasComment("附件张数");

                entity.Property(e => e.CasierClaimDate)
                    .HasColumnType("datetime")
                    .HasComment("处理时间");

                entity.Property(e => e.CasierClaimLoginUserName)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("接单人");

                entity.Property(e => e.CasierClaimUserName)
                    .HasMaxLength(20)
                    .HasComment("接单人");

                entity.Property(e => e.ContractAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("合同金额");

                entity.Property(e => e.ContractCategory)
                    .HasMaxLength(50)
                    .HasComment("合同类型");

                entity.Property(e => e.ContractCode)
                    .HasMaxLength(50)
                    .HasComment("合同编号");

                entity.Property(e => e.ContractCurrency)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("合同币种");

                entity.Property(e => e.ContractForm).HasMaxLength(50);

                entity.Property(e => e.ContractName)
                    .HasMaxLength(500)
                    .HasComment("合同名称");

                entity.Property(e => e.ContractPaymentAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("合同已付款金额");

                entity.Property(e => e.ContractPaymentPercentage)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("合同已付款比例");

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(50)
                    .HasComment("表单编号");

                entity.Property(e => e.Incident).HasComment("实例号");

                entity.Property(e => e.InvoiceTotalAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("发票总金额");

                entity.Property(e => e.InvoiceTotalBillAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("票据金额");

                entity.Property(e => e.InvoicesUnitName)
                    .HasMaxLength(500)
                    .HasComment("开据单位");

                entity.Property(e => e.PaymentCategory)
                    .HasMaxLength(50)
                    .HasComment("付款类型");

                entity.Property(e => e.ProcessFinishDate)
                    .HasColumnType("datetime")
                    .HasComment("流程归档时间");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名");

                entity.Property(e => e.ProcessStatus).HasComment("流程状态   0=进行中  1=已归档  2=已撤销");

                entity.Property(e => e.ProjectCategory)
                    .HasMaxLength(50)
                    .HasComment("项目类型");

                entity.Property(e => e.ProjectCategoryInfo)
                    .HasMaxLength(100)
                    .HasComment("项目类型明细");

                entity.Property(e => e.ProjectCategorySub)
                    .HasMaxLength(50)
                    .HasComment("子项目类型");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .HasComment("项目编号");

                entity.Property(e => e.ProjectCodeDev)
                    .HasMaxLength(50)
                    .HasComment("项目名称");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(500)
                    .HasComment("项目名称");

                entity.Property(e => e.ProjectSchedule)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("项目进度");

                entity.Property(e => e.ReMark)
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')")
                    .HasComment("备注");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasComment("申请日期");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasComment("主管部门");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(500)
                    .HasComment("主管部门名称");

                entity.Property(e => e.RequestIdentity)
                    .HasMaxLength(50)
                    .HasComment("申请人  身份证号");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasComment("申请人 账号");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasComment("申请人 姓名");

                entity.Property(e => e.RequestTelephone)
                    .HasMaxLength(50)
                    .HasComment("联系方式");

                entity.Property(e => e.RequestType).HasComment("申请状态：1项目;2部门");

                entity.Property(e => e.SignCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("签定方");

                entity.Property(e => e.SignName)
                    .HasMaxLength(50)
                    .HasComment("签定方");

                entity.Property(e => e.SupplierCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("供应商/分包商 编号");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(2000)
                    .HasComment("供应商/分包商 名称");

                entity.Property(e => e.TotalTaxAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("本次累计税额");

                entity.Property(e => e.TotelReturnTax)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("累计已退税额");

                entity.Property(e => e.UnitCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("合同签定单位");

                entity.Property(e => e.UnitJnw)
                    .HasMaxLength(20)
                    .HasComment("合同境内外");

                entity.Property(e => e.UnitName)
                    .HasMaxLength(200)
                    .HasComment("合同签定单位");

                entity.Property(e => e.VoucherCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("凭证Code");

                entity.Property(e => e.VoucherId)
                    .HasColumnName("VoucherID")
                    .HasComment("凭证表主键");
            });

            modelBuilder.Entity<TccIreceivedRedCancelBillList>(entity =>
            {
                entity.ToTable("TCC_IReceivedRed_CancelBillList");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AmountRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AmountRMB")
                    .HasComment("合计折人民币");

                entity.Property(e => e.BillAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BillAmountCnt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BillAmountCNT")
                    .HasComment("票额折合同币种金额");

                entity.Property(e => e.BillAmountRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BillAmountRMB")
                    .HasComment("票额折人民币");

                entity.Property(e => e.BillCode)
                    .HasMaxLength(50)
                    .HasComment("票据编号");

                entity.Property(e => e.BillContent)
                    .HasMaxLength(1000)
                    .HasComment("票据内容");

                entity.Property(e => e.BillTaxAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BillTaxAmountCnt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BillTaxAmountCNT")
                    .HasComment("税额折合同币种金额");

                entity.Property(e => e.BillTaxAmountRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BillTaxAmountRMB")
                    .HasComment("税额折人民币");

                entity.Property(e => e.CFormNumber)
                    .HasMaxLength(50)
                    .HasColumnName("C_FormNumber")
                    .HasComment("待作废流程表单号");

                entity.Property(e => e.CIncident)
                    .HasMaxLength(50)
                    .HasColumnName("C_Incident")
                    .HasComment("待作废流程实例号");

                entity.Property(e => e.CProcessName)
                    .HasMaxLength(50)
                    .HasColumnName("C_ProcessName")
                    .HasComment("待作废流程名称");

                entity.Property(e => e.CalculateMode).HasComment("计算方式");

                entity.Property(e => e.Currency)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("币种");

                entity.Property(e => e.Exchange)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("汇率");

                entity.Property(e => e.ExchangeCnt)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("ExchangeCNT")
                    .HasComment("折合同币种汇率");

                entity.Property(e => e.Incident).HasComment("流程实例号");

                entity.Property(e => e.InvoiceCategoryText)
                    .HasMaxLength(50)
                    .HasComment("发票类型");

                entity.Property(e => e.InvoiceCategoryValue)
                    .HasMaxLength(20)
                    .HasComment("发票类型  ");

                entity.Property(e => e.InvoiceCode)
                    .HasMaxLength(50)
                    .HasComment("发票代码");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("datetime")
                    .HasComment("开票日期");

                entity.Property(e => e.Pid)
                    .HasColumnName("PID")
                    .HasComment("外键");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名称");

                entity.Property(e => e.RelevanceInvoiceCategoryText)
                    .HasMaxLength(50)
                    .HasComment("应对开票类型");

                entity.Property(e => e.RelevanceInvoiceCategoryValue)
                    .HasMaxLength(20)
                    .HasComment("应对开票类型");

                entity.Property(e => e.RelevanceRateCode)
                    .HasMaxLength(20)
                    .HasComment("对应开票税率编号");

                entity.Property(e => e.RelevanceRateText)
                    .HasMaxLength(20)
                    .HasComment("对应开票税率名称");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasComment("申请人账号");

                entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TaxRateCode)
                    .HasMaxLength(50)
                    .HasComment("税率编号");

                entity.Property(e => e.TaxRateText)
                    .HasMaxLength(50)
                    .HasComment("税率显示值");
            });

            modelBuilder.Entity<TccItProject>(entity =>
            {
                entity.ToTable("TCC_IT_Project");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ProjectCode).HasMaxLength(50);

                entity.Property(e => e.ProjectName).HasMaxLength(300);

                entity.Property(e => e.ProjectState)
                    .HasDefaultValueSql("((1))")
                    .HasComment("1 运行 0 为关闭");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");

                entity.Property(e => e.Sid)
                    .HasColumnName("SID")
                    .HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TccItProjectUser>(entity =>
            {
                entity.ToTable("TCC_IT_Project_User");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Account).HasMaxLength(50);

                entity.Property(e => e.DeptName).HasMaxLength(50);

                entity.Property(e => e.DeptNo).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(50);

                entity.Property(e => e.UserFlag).HasMaxLength(50);

                entity.Property(e => e.UserRole).HasMaxLength(50);

                entity.Property(e => e.UserTask).HasMaxLength(50);
            });

            modelBuilder.Entity<TccJsgTest>(entity =>
            {
                entity.ToTable("TCC_JsgTest");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyDept).HasMaxLength(50);

                entity.Property(e => e.ApplyDeptNo).HasMaxLength(50);

                entity.Property(e => e.ApplyLoginUser)
                    .HasMaxLength(10)
                    .IsFixedLength(true);

                entity.Property(e => e.ApplyName).HasMaxLength(50);

                entity.Property(e => e.ApplyRemark).HasMaxLength(500);

                entity.Property(e => e.ProcessName).HasMaxLength(50);
            });

            modelBuilder.Entity<TccLeaderRegister>(entity =>
            {
                entity.ToTable("TCC_LeaderRegister");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AgentDeptName).HasMaxLength(50);

                entity.Property(e => e.AgentLoginName).HasMaxLength(50);

                entity.Property(e => e.AgentName).HasMaxLength(50);

                entity.Property(e => e.AimReason).HasMaxLength(50);

                entity.Property(e => e.BeginDate).HasColumnType("datetime");

                entity.Property(e => e.Daiban).HasColumnName("daiban");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.IsDelete)
                    .HasColumnName("Is_Delete")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RegisterDeptName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegisterDeptNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RegisterMobile).HasMaxLength(50);

                entity.Property(e => e.RegisterName).HasMaxLength(50);

                entity.Property(e => e.RegisterUserKey).HasMaxLength(50);

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");
            });

            modelBuilder.Entity<TccLetterOfCredit>(entity =>
            {
                entity.ToTable("TCC_LetterOfCredit");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.AccountingAuditDate)
                    .HasColumnType("datetime")
                    .HasComment("业务时间");

                entity.Property(e => e.AccountingAuditLoginUserName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("业务人");

                entity.Property(e => e.AccountingAuditUserName)
                    .HasMaxLength(10)
                    .HasComment("业务人");

                entity.Property(e => e.BankCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("开立行");

                entity.Property(e => e.BankName)
                    .HasMaxLength(100)
                    .HasComment("开立行");

                entity.Property(e => e.Beneficiary)
                    .HasMaxLength(500)
                    .HasComment("受益人");

                entity.Property(e => e.CasierClaimDate)
                    .HasColumnType("datetime")
                    .HasComment("接单时间");

                entity.Property(e => e.CasierClaimLoginUserName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("接单人");

                entity.Property(e => e.CasierClaimUserName)
                    .HasMaxLength(10)
                    .HasComment("接单人");

                entity.Property(e => e.ContractCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("合同号");

                entity.Property(e => e.ContractName)
                    .HasMaxLength(200)
                    .HasComment("合同名");

                entity.Property(e => e.ContractUnitCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("合同方");

                entity.Property(e => e.ContractUnitName)
                    .HasMaxLength(200)
                    .HasComment("合同方");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DelayEdDt).HasColumnType("date");

                entity.Property(e => e.DepositAmt)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("保证金金额");

                entity.Property(e => e.DepositCurrency)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("保证金币种");

                entity.Property(e => e.DepositExchange)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("保证金汇率");

                entity.Property(e => e.DepositRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("DepositRMB")
                    .HasComment("保证金人民币");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasComment("截止时间");

                entity.Property(e => e.DueDay).HasComment("有效期");

                entity.Property(e => e.Exchange)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("汇率");

                entity.Property(e => e.Flag)
                    .HasDefaultValueSql("((1))")
                    .HasComment("1正常");

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("申请表单");

                entity.Property(e => e.HdId)
                    .HasMaxLength(36)
                    .HasColumnName("HdID")
                    .HasDefaultValueSql("('')")
                    .HasComment("9891981");

                entity.Property(e => e.Incident).HasComment("实例号");

                entity.Property(e => e.IsDelay).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsDeposit).HasComment("是否有保证金");

                entity.Property(e => e.IsEnable).HasComment("1为启用，0为不启用");

                entity.Property(e => e.IsSueForPay).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsYuanQi)
                    .HasDefaultValueSql("((0))")
                    .HasComment("是否延期");

                entity.Property(e => e.Judge)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Lcamt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("LCAmt")
                    .HasComment("金额");

                entity.Property(e => e.Lccategory)
                    .HasColumnName("LCCategory")
                    .HasComment("信用证类型");

                entity.Property(e => e.LccategoryName)
                    .HasMaxLength(50)
                    .HasColumnName("LCCategoryName")
                    .HasComment("信用证类型");

                entity.Property(e => e.Lccode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LCCode")
                    .HasComment("信用证编号");

                entity.Property(e => e.Lccurrency)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("LCCurrency")
                    .HasComment("币种");

                entity.Property(e => e.Lcrmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("LCRMB")
                    .HasComment("人民币金额");

                entity.Property(e => e.ModifyType)
                    .HasMaxLength(50)
                    .HasComment("0正常1延期2退回3索赔");

                entity.Property(e => e.ModifyTypeName)
                    .HasMaxLength(50)
                    .HasComment("123456789");

                entity.Property(e => e.OpeningDate)
                    .HasColumnType("datetime")
                    .HasComment("开立时间");

                entity.Property(e => e.OrigIsSetBack).HasDefaultValueSql("((0))");

                entity.Property(e => e.PaymentNode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("付款节点");

                entity.Property(e => e.PaymentNodeName)
                    .HasMaxLength(50)
                    .HasComment("付款节点");

                entity.Property(e => e.PaymentTimer).HasComment("付款次数");

                entity.Property(e => e.PaymentTotal)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("付款总额");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("项目号");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(200)
                    .HasComment("项目名");

                entity.Property(e => e.ReceivingCompanyCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("收款编号");

                entity.Property(e => e.ReceivingCompanyName)
                    .HasMaxLength(500)
                    .HasComment("收款人");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasComment("申请时间");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("申请人");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(10)
                    .HasComment("申请人");

                entity.Property(e => e.SourceName)
                    .HasMaxLength(50)
                    .HasComment("来源");

                entity.Property(e => e.Status).HasComment("状态：0为原版。其它数字为变更次数");

                entity.Property(e => e.SueAmt)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SueInCash).HasDefaultValueSql("((0))");

                entity.Property(e => e.YuanQiTimer)
                    .HasDefaultValueSql("((0))")
                    .HasComment("延期次数");
            });

            modelBuilder.Entity<TccLetterOfCreditCounterFee>(entity =>
            {
                entity.ToTable("TCC_LetterOfCreditCounterFee");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ContractCode)
                    .HasMaxLength(100)
                    .HasComment("合同编号");

                entity.Property(e => e.Contractname)
                    .HasMaxLength(100)
                    .HasComment("合同名称");

                entity.Property(e => e.Currency)
                    .HasMaxLength(50)
                    .HasComment("币种");

                entity.Property(e => e.Hdid)
                    .HasColumnName("HDid")
                    .HasComment("外键：对应信用表主键ID");

                entity.Property(e => e.Incident).HasComment("实例号");

                entity.Property(e => e.Isjq)
                    .HasColumnName("ISJQ")
                    .HasDefaultValueSql("((0))")
                    .HasComment("是否已经传入久其 0未传入，1传入成功");

                entity.Property(e => e.Lcamt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("LCAmt");

                entity.Property(e => e.Locid)
                    .HasMaxLength(50)
                    .HasColumnName("LOCID")
                    .HasComment("信用证编号");

                entity.Property(e => e.Parities)
                    .HasMaxLength(100)
                    .HasColumnName("parities")
                    .HasComment("汇率");

                entity.Property(e => e.Poundage)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("poundage")
                    .HasComment("手续费原币");

                entity.Property(e => e.PoundageRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("poundageRMB")
                    .HasComment("折人民币金额");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(100)
                    .HasComment("流程名");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(100)
                    .HasComment("项目号");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(100)
                    .HasComment("项目名称");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName")
                    .HasComment("申请人");

                entity.Property(e => e.Source)
                    .HasDefaultValueSql("((2))")
                    .HasComment("手续费来源地址 1：开立信用证时录入  2：台账中手续费录入");

                entity.Property(e => e.Timeofpayment)
                    .HasColumnType("datetime")
                    .HasComment("付款时间");
            });

            modelBuilder.Entity<TccLetterOfCreditCounterFeeMain>(entity =>
            {
                entity.ToTable("TCC_LetterOfCreditCounterFeeMain");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Attachment).HasComment("附件张数");

                entity.Property(e => e.CheckUserName).HasMaxLength(50);

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(70)
                    .HasComment("表单编号");

                entity.Property(e => e.JoneslanglasallNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Joneslanglasall_Number")
                    .HasComment("联行行号");

                entity.Property(e => e.PayBankName)
                    .HasMaxLength(50)
                    .HasColumnName("PayBank_Name")
                    .HasComment("付款银行名称");

                entity.Property(e => e.PayBankNumbers)
                    .HasMaxLength(100)
                    .HasColumnName("PayBank_Numbers")
                    .HasComment("付款银行行号");

                entity.Property(e => e.PayBankSubjectCode)
                    .HasMaxLength(100)
                    .HasColumnName("PayBank_SubjectCode")
                    .HasComment("付款银行科目号");

                entity.Property(e => e.PaymentDate)
                    .HasColumnType("datetime")
                    .HasComment("付款时间");

                entity.Property(e => e.PaymentMethod).HasComment("付款方式 value值");

                entity.Property(e => e.PaymentType)
                    .HasMaxLength(50)
                    .HasComment("付款方式-text值");

                entity.Property(e => e.PaymentVatcurrency)
                    .HasMaxLength(50)
                    .HasColumnName("PaymentVATCurrency")
                    .HasComment("付款币种Value值");

                entity.Property(e => e.PaymentVatcurrencyShow)
                    .HasMaxLength(50)
                    .HasColumnName("PaymentVATCurrency_Show")
                    .HasComment("付款币种Text值");

                entity.Property(e => e.ProcessFinishDate)
                    .HasColumnType("datetime")
                    .HasComment("流程完成时间");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProcessStatus).HasComment("状态");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasComment("付款时间");

                entity.Property(e => e.RequestDeptcode)
                    .HasMaxLength(50)
                    .HasColumnName("Request_Deptcode")
                    .HasComment("部门编号");

                entity.Property(e => e.RequestDeptname)
                    .HasMaxLength(50)
                    .HasColumnName("Request_Deptname")
                    .HasComment("部门名称");

                entity.Property(e => e.RequestDtae)
                    .HasColumnType("datetime")
                    .HasComment("流程发起时间");

                entity.Property(e => e.RequestFormNumber)
                    .HasMaxLength(50)
                    .HasComment("表单号");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName")
                    .HasComment("登陆名");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName")
                    .HasComment("姓名");

                entity.Property(e => e.RequestUserIdentity)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserIdentity")
                    .HasComment("身份证号");

                entity.Property(e => e.Voucherid)
                    .HasColumnName("VOUCHERID")
                    .HasComment("凭证id");
            });

            modelBuilder.Entity<TccLetterOfCreditGatherChange>(entity =>
            {
                entity.ToTable("TCC_LetterOfCreditGatherChange");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ClaimAmt).HasColumnType("decimal(30, 2)");

                entity.Property(e => e.ClaimAmtRecvDate).HasColumnType("datetime");

                entity.Property(e => e.ContractAmt)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("合同总价");

                entity.Property(e => e.ContractCategory)
                    .HasMaxLength(20)
                    .HasComment("合同类别");

                entity.Property(e => e.ContractCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("合同编号\r\n");

                entity.Property(e => e.ContractCurrency)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("合同币种");

                entity.Property(e => e.ContractFkfs)
                    .HasMaxLength(50)
                    .HasComment("付款方式");

                entity.Property(e => e.ContractName)
                    .HasMaxLength(100)
                    .HasComment("合同名称\r\n");

                entity.Property(e => e.ContractSignDate)
                    .HasColumnType("datetime")
                    .HasComment("合同签订日期");

                entity.Property(e => e.ContractType).HasComment("合同类型1采购２施工");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.HdId)
                    .HasMaxLength(36)
                    .HasColumnName("HdID")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Incident).HasComment("实例号");

                entity.Property(e => e.ModApplyDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ModifyOpinion)
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ModifyType).HasDefaultValueSql("((0))");

                entity.Property(e => e.PreClaimAmt).HasColumnType("decimal(30, 2)");

                entity.Property(e => e.ProcessFinishDate)
                    .HasColumnType("datetime")
                    .HasComment("完成时间");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名");

                entity.Property(e => e.ProcessStatus).HasComment("状态0流程1完成2撤销");

                entity.Property(e => e.ProjectCategory)
                    .HasMaxLength(20)
                    .HasComment("项目类别");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("项目代号");

                entity.Property(e => e.ProjectCodeDev)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("项目代号");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(200)
                    .HasComment("项目名");

                entity.Property(e => e.ReceivingCompanyCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("收款单位名称");

                entity.Property(e => e.ReceivingCompanyName)
                    .HasMaxLength(50)
                    .HasComment("收款单位名称");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasComment("申请日期");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("部门\r\n");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(20)
                    .HasComment("部门");

                entity.Property(e => e.RequestDescription).HasComment("说明");

                entity.Property(e => e.RequestDueDate)
                    .HasColumnType("datetime")
                    .HasComment("截止时间");

                entity.Property(e => e.RequestDueDay).HasComment("有效期");

                entity.Property(e => e.RequestExchange)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("汇率");

                entity.Property(e => e.RequestFormNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("表单编号");

                entity.Property(e => e.RequestLcamt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("RequestLCAmt")
                    .HasComment("信用证金额");

                entity.Property(e => e.RequestLccategory)
                    .HasColumnName("RequestLCCategory")
                    .HasComment("信用证类别");

                entity.Property(e => e.RequestLccategoryName)
                    .HasMaxLength(50)
                    .HasColumnName("RequestLCCategoryName")
                    .HasComment("信用证类别");

                entity.Property(e => e.RequestLccurrency)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("RequestLCCurrency")
                    .HasComment("信用证币种");

                entity.Property(e => e.RequestLcrmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("RequestLCRMB")
                    .HasComment("折合人民币金额");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("申请人");

                entity.Property(e => e.RequestOpeningDate)
                    .HasColumnType("datetime")
                    .HasComment("开立时间");

                entity.Property(e => e.RequestPaymentNode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("付款节点");

                entity.Property(e => e.RequestPaymentNodeName)
                    .HasMaxLength(50)
                    .HasComment("付款节点");

                entity.Property(e => e.RequestPaymentTimer).HasComment("付款次数");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(10)
                    .HasComment("申请人");

                entity.Property(e => e.RequestSfzh)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("身份证号");

                entity.Property(e => e.RequestTelephone)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("联系电话\r\n");

                entity.Property(e => e.RequestType).HasComment("申请类型1项目２非项目");

                entity.Property(e => e.UnitJnw)
                    .HasMaxLength(50)
                    .HasComment("收款单位类别");

                entity.Property(e => e.WithdrawDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WithdrawPersonLoginName)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WithdrawPersonRealName)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WithdrawPersonUserIdentity)
                    .HasMaxLength(18)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<TccLetterOfCreditOpen>(entity =>
            {
                entity.ToTable("TCC_LetterOfCreditOpen");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AccountingAuditDate)
                    .HasColumnType("datetime")
                    .HasComment("业务时间");

                entity.Property(e => e.AccountingAuditLoginUserName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("业务人");

                entity.Property(e => e.AccountingAuditUserName)
                    .HasMaxLength(50)
                    .HasComment("业务人");

                entity.Property(e => e.Approver1).HasMaxLength(10);

                entity.Property(e => e.Approver1LoginName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Approver2).HasMaxLength(10);

                entity.Property(e => e.Approver2LoginName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Attachment).HasComment("附件张数");

                entity.Property(e => e.AuditAccountIdnumber)
                    .HasMaxLength(50)
                    .HasColumnName("AuditAccountIDNumber");

                entity.Property(e => e.CasierClaimDate)
                    .HasColumnType("datetime")
                    .HasComment("接单时间");

                entity.Property(e => e.CasierClaimLoginUserName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("接单人");

                entity.Property(e => e.CasierClaimUserName)
                    .HasMaxLength(50)
                    .HasComment("接单人");

                entity.Property(e => e.ConfirmFinaceIdnumber)
                    .HasMaxLength(50)
                    .HasColumnName("ConfirmFinaceIDNumber");

                entity.Property(e => e.ContractAmt)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("合同总价");

                entity.Property(e => e.ContractCategory)
                    .HasMaxLength(20)
                    .HasComment("合同类别");

                entity.Property(e => e.ContractCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("合同编号\r\n");

                entity.Property(e => e.ContractCurrency)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("合同币种");

                entity.Property(e => e.ContractFkfs)
                    .HasMaxLength(50)
                    .HasComment("付款方式");

                entity.Property(e => e.ContractName)
                    .HasMaxLength(100)
                    .HasComment("合同名称\r\n");

                entity.Property(e => e.ContractSid)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasComment("普华合同主键");

                entity.Property(e => e.ContractSignDate)
                    .HasColumnType("datetime")
                    .HasComment("合同签订日期");

                entity.Property(e => e.ContractType).HasComment("合同类型1采购２施工");

                entity.Property(e => e.ContractUnitCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("签定单位");

                entity.Property(e => e.ContractUnitName)
                    .HasMaxLength(50)
                    .HasComment("签定单位");

                entity.Property(e => e.DeliverDate)
                    .HasColumnType("datetime")
                    .HasComment("递交时间");

                entity.Property(e => e.FinanceBankCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FinanceBankName).HasMaxLength(100);

                entity.Property(e => e.FinanceBeneficiary).HasMaxLength(200);

                entity.Property(e => e.FinanceCalculateMode).HasComment("财务折算方式");

                entity.Property(e => e.FinanceDecimalDigit).HasComment("财务折算方式");

                entity.Property(e => e.FinanceDepositAmt).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FinanceDepositCalculateMode).HasComment("保证金折算方式");

                entity.Property(e => e.FinanceDepositCurrency)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FinanceDepositDecimalDigit).HasComment("保证金折算方式");

                entity.Property(e => e.FinanceDepositExchange).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.FinanceDepositRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("FinanceDepositRMB");

                entity.Property(e => e.FinanceDueDate).HasColumnType("datetime");

                entity.Property(e => e.FinanceLcamt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("FinanceLCAmt");

                entity.Property(e => e.FinanceLccategory).HasColumnName("FinanceLCCategory");

                entity.Property(e => e.FinanceLccategoryName)
                    .HasMaxLength(50)
                    .HasColumnName("FinanceLCCategoryName");

                entity.Property(e => e.FinanceLccode)
                    .HasMaxLength(50)
                    .HasColumnName("FinanceLCCode");

                entity.Property(e => e.FinanceLccurrency)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FinanceLCCurrency");

                entity.Property(e => e.FinanceLcexchange)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("FinanceLCExchange");

                entity.Property(e => e.FinanceLcrmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("FinanceLCRMB");

                entity.Property(e => e.FinanceOpeningDate).HasColumnType("datetime");

                entity.Property(e => e.FinanceSubjectCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FinanceSubjectName).HasMaxLength(100);

                entity.Property(e => e.GrtLtDeliver)
                    .HasMaxLength(100)
                    .HasComment("递交人");

                entity.Property(e => e.HandingAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("手续费");

                entity.Property(e => e.HandingBankSubjectCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("银行");

                entity.Property(e => e.HandingBankSubjectName)
                    .HasMaxLength(50)
                    .HasComment("银行");

                entity.Property(e => e.HandingVoucherCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("手续费入账");

                entity.Property(e => e.HandingVoucherid)
                    .HasColumnName("HandingVOUCHERID")
                    .HasComment("手续费入账");

                entity.Property(e => e.Incident).HasComment("实例号");

                entity.Property(e => e.IsDeposit).HasComment("是否付保证金2付1不付");

                entity.Property(e => e.IsHanding).HasComment("手续费");

                entity.Property(e => e.ProcessFinishDate)
                    .HasColumnType("datetime")
                    .HasComment("完成时间");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名");

                entity.Property(e => e.ProcessStatus).HasComment("状态0流程1完成2撤销");

                entity.Property(e => e.ProjectCategory)
                    .HasMaxLength(20)
                    .HasComment("项目类别");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("项目代号");

                entity.Property(e => e.ProjectCodeDev)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("项目代号");

                entity.Property(e => e.ProjectManager)
                    .HasMaxLength(10)
                    .HasComment("项目经理");

                entity.Property(e => e.ProjectManagerIdentityId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("项目经理");

                entity.Property(e => e.ProjectManagerLoginName)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("项目经理");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(200)
                    .HasComment("项目名");

                entity.Property(e => e.ReceivingCompanyCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("收款单位名称");

                entity.Property(e => e.ReceivingCompanyName)
                    .HasMaxLength(50)
                    .HasComment("收款单位名称");

                entity.Property(e => e.RequestCalculateMode).HasComment("汇率模式");

                entity.Property(e => e.RequestCollectTime)
                    .HasColumnType("datetime")
                    .HasComment("收取时间");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasComment("申请日期");

                entity.Property(e => e.RequestDecimalDigit).HasComment("汇率位数");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("部门\r\n");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(20)
                    .HasComment("部门");

                entity.Property(e => e.RequestDescription).HasComment("说明");

                entity.Property(e => e.RequestDueDate)
                    .HasColumnType("datetime")
                    .HasComment("截止时间");

                entity.Property(e => e.RequestDueDay).HasComment("有效期");

                entity.Property(e => e.RequestExchange)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("汇率");

                entity.Property(e => e.RequestFormNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("表单编号");

                entity.Property(e => e.RequestLcamt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("RequestLCAmt")
                    .HasComment("信用证金额");

                entity.Property(e => e.RequestLccategory)
                    .HasColumnName("RequestLCCategory")
                    .HasComment("信用证类别");

                entity.Property(e => e.RequestLccategoryName)
                    .HasMaxLength(50)
                    .HasColumnName("RequestLCCategoryName")
                    .HasComment("信用证类别");

                entity.Property(e => e.RequestLccurrency)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("RequestLCCurrency")
                    .HasComment("信用证币种");

                entity.Property(e => e.RequestLcrmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("RequestLCRMB")
                    .HasComment("折合人民币金额");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("申请人");

                entity.Property(e => e.RequestOpeningDate)
                    .HasColumnType("datetime")
                    .HasComment("开立时间");

                entity.Property(e => e.RequestPaymentNode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("付款节点");

                entity.Property(e => e.RequestPaymentNodeName)
                    .HasMaxLength(50)
                    .HasComment("付款节点");

                entity.Property(e => e.RequestPaymentTimer).HasComment("付款次数");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(10)
                    .HasComment("申请人");

                entity.Property(e => e.RequestSfzh)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("身份证号");

                entity.Property(e => e.RequestTelephone)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("联系电话\r\n");

                entity.Property(e => e.RequestType).HasComment("申请类型1项目２非项目");

                entity.Property(e => e.SignSupplierCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("签定单位");

                entity.Property(e => e.SignSupplierName)
                    .HasMaxLength(200)
                    .HasComment("签定单位");

                entity.Property(e => e.UnitJnw)
                    .HasMaxLength(50)
                    .HasComment("收款单位类别");

                entity.Property(e => e.VoucherCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("入账编码");

                entity.Property(e => e.Voucherid)
                    .HasColumnName("VOUCHERID")
                    .HasComment("入账ID");
            });

            modelBuilder.Entity<TccLetterOfCreditOpenChangePayInfo>(entity =>
            {
                entity.ToTable("TCC_LetterOfCreditOpenChangePayInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApPaymentAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AP_PaymentAmount");

                entity.Property(e => e.ApPaymentCurrency)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AP_PaymentCurrency");

                entity.Property(e => e.ApPaymentNode)
                    .HasMaxLength(50)
                    .HasColumnName("AP_PaymentNode");

                entity.Property(e => e.ApPaymentNodeName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AP_PaymentNodeName");

                entity.Property(e => e.ApPaymentRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AP_PaymentRMB");

                entity.Property(e => e.ApPaymentTax)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AP_PaymentTax");

                entity.Property(e => e.ApPaymentTime)
                    .HasColumnType("datetime")
                    .HasColumnName("AP_PaymentTime");

                entity.Property(e => e.ApPaymentTimeChange)
                    .HasColumnType("datetime")
                    .HasColumnName("AP_PaymentTimeChange");

                entity.Property(e => e.ApStatus)
                    .HasColumnName("AP_Status")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ContractCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ContractName).HasMaxLength(200);

                entity.Property(e => e.Isnewest)
                    .HasColumnName("ISNewest")
                    .HasDefaultValueSql("((0))")
                    .HasComment("1:为最新；0为历史");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RequestFormNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TccLetterOfCreditOpenModifyInfo>(entity =>
            {
                entity.ToTable("TCC_LetterOfCreditOpenModifyInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ClaimAmt).HasColumnType("decimal(30, 2)");

                entity.Property(e => e.ClaimAmtRecvDate).HasColumnType("datetime");

                entity.Property(e => e.ContractAmt)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("合同总价");

                entity.Property(e => e.ContractCategory)
                    .HasMaxLength(20)
                    .HasComment("合同类别");

                entity.Property(e => e.ContractCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("合同编号\r\n");

                entity.Property(e => e.ContractCurrency)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("合同币种");

                entity.Property(e => e.ContractFkfs)
                    .HasMaxLength(50)
                    .HasComment("付款方式");

                entity.Property(e => e.ContractName)
                    .HasMaxLength(100)
                    .HasComment("合同名称\r\n");

                entity.Property(e => e.ContractSignDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(((1900)-(1))-(1))")
                    .HasComment("合同签订日期");

                entity.Property(e => e.ContractType).HasComment("合同类型1采购２施工");

                entity.Property(e => e.ContractUnitName).HasMaxLength(200);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.FinanceBankCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FinanceBankName).HasMaxLength(100);

                entity.Property(e => e.FinanceBeneficiary).HasMaxLength(200);

                entity.Property(e => e.FinanceCalculateMode)
                    .HasMaxLength(10)
                    .IsFixedLength(true);

                entity.Property(e => e.FinanceDueDate).HasColumnType("datetime");

                entity.Property(e => e.FinanceLcamt)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("FinanceLCAmt");

                entity.Property(e => e.FinanceLccategory).HasColumnName("FinanceLCCategory");

                entity.Property(e => e.FinanceLccategoryName)
                    .HasMaxLength(50)
                    .HasColumnName("FinanceLCCategoryName");

                entity.Property(e => e.FinanceLccode)
                    .HasMaxLength(50)
                    .HasColumnName("FinanceLCCode");

                entity.Property(e => e.FinanceLccurrency)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FinanceLCCurrency");

                entity.Property(e => e.FinanceLcexchange)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("FinanceLCExchange");

                entity.Property(e => e.FinanceLcrmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("FinanceLCRMB");

                entity.Property(e => e.FinanceOpeningDate).HasColumnType("datetime");

                entity.Property(e => e.HdId)
                    .HasMaxLength(36)
                    .HasColumnName("HdID")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Incident).HasComment("实例号");

                entity.Property(e => e.ModApplyDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ModifyOpinion)
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ModifyType)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ModifyTypeName).HasMaxLength(50);

                entity.Property(e => e.PreClaimAmt).HasColumnType("decimal(30, 2)");

                entity.Property(e => e.ProcessFinishDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(((1900)-(1))-(1))")
                    .HasComment("完成时间");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名");

                entity.Property(e => e.ProcessStatus).HasComment("状态0流程1完成2撤销");

                entity.Property(e => e.ProjectCategory)
                    .HasMaxLength(20)
                    .HasComment("项目类别");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("项目代号");

                entity.Property(e => e.ProjectCodeDev)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("项目代号");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(200)
                    .HasComment("项目名");

                entity.Property(e => e.ReceivingCompanyCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("收款单位名称");

                entity.Property(e => e.ReceivingCompanyName)
                    .HasMaxLength(50)
                    .HasComment("收款单位名称");

                entity.Property(e => e.RequestCollectTime).HasColumnType("datetime");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(((1900)-(1))-(1))")
                    .HasComment("申请日期");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("部门\r\n");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(20)
                    .HasComment("部门");

                entity.Property(e => e.RequestFormNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("表单编号");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("申请人");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(10)
                    .HasComment("申请人");

                entity.Property(e => e.RequestSfzh)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("身份证号");

                entity.Property(e => e.UnitJnw)
                    .HasMaxLength(50)
                    .HasComment("收款单位类别");

                entity.Property(e => e.WithdrawDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WithdrawPersonLoginName)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WithdrawPersonRealName)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.WithdrawPersonUserIdentity)
                    .HasMaxLength(18)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<TccLetterOfCreditOpenPayInfo>(entity =>
            {
                entity.ToTable("TCC_LetterOfCreditOpenPayInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApPaymentAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AP_PaymentAmount");

                entity.Property(e => e.ApPaymentCurrency)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AP_PaymentCurrency");

                entity.Property(e => e.ApPaymentNode)
                    .HasMaxLength(50)
                    .HasColumnName("AP_PaymentNode");

                entity.Property(e => e.ApPaymentNodeName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AP_PaymentNodeName");

                entity.Property(e => e.ApPaymentRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AP_PaymentRMB");

                entity.Property(e => e.ApPaymentTax)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AP_PaymentTax");

                entity.Property(e => e.ApPaymentTime)
                    .HasColumnType("datetime")
                    .HasColumnName("AP_PaymentTime");

                entity.Property(e => e.ApStatus)
                    .HasColumnName("AP_Status")
                    .HasDefaultValueSql("((0))")
                    .HasComment("是否已付款，0：未付款  1：已付款");

                entity.Property(e => e.ContractCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ContractName).HasMaxLength(200);

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RequestFormNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TccLetterOfCreditPaymentHistory>(entity =>
            {
                entity.ToTable("TCC_LetterOfCredit_PaymentHistory");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.Fid)
                    .HasColumnName("FID")
                    .HasComment("外键");

                entity.Property(e => e.PayAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("付款金额");

                entity.Property(e => e.PayCreateDate)
                    .HasColumnType("datetime")
                    .HasComment("创建时间");

                entity.Property(e => e.PayExchange)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("汇率");

                entity.Property(e => e.PayLccode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PayLCCode")
                    .HasComment("信用证编号");

                entity.Property(e => e.PayRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PayRMB")
                    .HasComment("折人民币金额");

                entity.Property(e => e.Pid)
                    .HasColumnName("PID")
                    .HasComment("付款主键");
            });

            modelBuilder.Entity<TccLetterOfGuaranteeInfo>(entity =>
            {
                entity.ToTable("TCC_LetterOfGuaranteeInfo");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.ContractCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("合同编号");

                entity.Property(e => e.ContractName)
                    .HasMaxLength(1400)
                    .HasComment("合同名");

                entity.Property(e => e.CreateLoginName)
                    .HasMaxLength(50)
                    .HasComment("创建人");

                entity.Property(e => e.CreateRealName)
                    .HasMaxLength(50)
                    .HasComment("创建人");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasComment("创建时间");

                entity.Property(e => e.Currency)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DelayEdDt).HasColumnType("date");

                entity.Property(e => e.GrtLtCode)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GrtLtEdDt).HasColumnType("date");

                entity.Property(e => e.GrtLtStDt).HasColumnType("date");

                entity.Property(e => e.GuaranteeAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("保函金额（未使用）　");

                entity.Property(e => e.GuaranteeAmountOld)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("GuaranteeAmount_old");

                entity.Property(e => e.GuaranteeAmountRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("GuaranteeAmountRMB")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.GuaranteeDate)
                    .HasColumnType("datetime")
                    .HasComment("保证时间（未使用）");

                entity.Property(e => e.GuaranteeName)
                    .HasMaxLength(50)
                    .HasComment("保函名称（预付款保函\\履约保函\\质保保函）");

                entity.Property(e => e.HdId)
                    .HasMaxLength(36)
                    .HasColumnName("HdID")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Incident).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsCollect).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsDelay).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsSueForPay).HasDefaultValueSql("((0))");

                entity.Property(e => e.Judge)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpenBankAcct)
                    .HasMaxLength(30)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpenBankName)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpenEnt)
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpenType).HasDefaultValueSql("((0))");

                entity.Property(e => e.OrigIsSetBack).HasDefaultValueSql("((0))");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('保函开立流程')");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("项目编号");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(500)
                    .HasComment("项目名");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SueAmt)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SueInCash).HasDefaultValueSql("((0))");

                entity.Property(e => e.UnitName).HasMaxLength(500);
            });

            modelBuilder.Entity<TccMailPostApply>(entity =>
            {
                entity.ToTable("TCC_MailPostApply");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyDate).HasColumnType("datetime");

                entity.Property(e => e.ApplyDept).HasMaxLength(50);

                entity.Property(e => e.ApplyDeptNo).HasMaxLength(50);

                entity.Property(e => e.ApplyLoginUser).HasMaxLength(50);

                entity.Property(e => e.ApplyName).HasMaxLength(50);

                entity.Property(e => e.ApplyPhone).HasMaxLength(50);

                entity.Property(e => e.ApplyType).HasMaxLength(50);

                entity.Property(e => e.CostDept).HasMaxLength(50);

                entity.Property(e => e.CostDeptNo).HasMaxLength(50);

                entity.Property(e => e.DeptManagerName).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.MailPlace).HasMaxLength(50);

                entity.Property(e => e.MailThingsNum).HasMaxLength(50);

                entity.Property(e => e.MailType).HasMaxLength(50);

                entity.Property(e => e.MsgSendCts).HasMaxLength(50);

                entity.Property(e => e.MsgSendTime).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectApprovalLoginName).HasMaxLength(50);

                entity.Property(e => e.ProjectApprovalRealName).HasMaxLength(50);

                entity.Property(e => e.ProjectManagerName).HasMaxLength(50);

                entity.Property(e => e.ProjectNo).HasMaxLength(50);

                entity.Property(e => e.RealDoneTime).HasMaxLength(50);

                entity.Property(e => e.RecMailPerson).HasMaxLength(50);

                entity.Property(e => e.ServiceStatus).HasMaxLength(50);

                entity.Property(e => e.TotalCost)
                    .HasMaxLength(50)
                    .HasColumnName("total_cost");
            });

            modelBuilder.Entity<TccMailPostApplyMailTypeDict>(entity =>
            {
                entity.ToTable("TCC_MailPostApply_MailTypeDict");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AcceptCompayCode).HasMaxLength(50);

                entity.Property(e => e.IsDelete).HasComment("是否删除:0不1删");

                entity.Property(e => e.MailTypeName).HasMaxLength(50);

                entity.Property(e => e.MailTypeValue).HasMaxLength(50);
            });

            modelBuilder.Entity<TccMailPostApplyMx>(entity =>
            {
                entity.ToTable("TCC_MailPostApply_Mx");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.GiveMailPerson).HasMaxLength(50);

                entity.Property(e => e.GiveMailTime).HasMaxLength(50);

                entity.Property(e => e.MailCost).HasMaxLength(50);

                entity.Property(e => e.MailStatus)
                    .HasMaxLength(50)
                    .HasComment("1 待办  2 计价 ");

                entity.Property(e => e.MailThingsNum).HasMaxLength(50);

                entity.Property(e => e.MailType).HasMaxLength(50);

                entity.Property(e => e.RealDoneTime).HasMaxLength(50);

                entity.Property(e => e.RecMailPerson).HasMaxLength(50);
            });

            modelBuilder.Entity<TccMailPostChangedReport>(entity =>
            {
                entity.ToTable("TCC_MailPostChangedReport");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键ID");

                entity.Property(e => e.ApplyType)
                    .HasMaxLength(50)
                    .HasComment("类型");

                entity.Property(e => e.Changedcost)
                    .HasMaxLength(50)
                    .HasColumnName("changedcost")
                    .HasComment("调整后的邮寄费用");

                entity.Property(e => e.CostBelongId)
                    .HasMaxLength(50)
                    .HasColumnName("CostBelongID")
                    .HasComment("部门ID/项目号");

                entity.Property(e => e.Dept).HasComment("部门/项目名称");

                entity.Property(e => e.JsYm)
                    .HasMaxLength(50)
                    .HasColumnName("js_ym")
                    .HasComment("统计年月");

                entity.Property(e => e.MailType)
                    .HasMaxLength(50)
                    .HasComment("快递类型");

                entity.Property(e => e.Manager)
                    .HasMaxLength(50)
                    .HasComment("负责人");

                entity.Property(e => e.Month).HasMaxLength(50);

                entity.Property(e => e.Totalcost)
                    .HasMaxLength(50)
                    .HasColumnName("totalcost")
                    .HasComment("邮寄费用");

                entity.Property(e => e.Year).HasMaxLength(50);
            });

            modelBuilder.Entity<TccMailRecv>(entity =>
            {
                entity.ToTable("TCC_MailRecv");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CostDept).HasMaxLength(50);

                entity.Property(e => e.GetMailDate).HasColumnType("datetime");

                entity.Property(e => e.GetMailPerson).HasMaxLength(50);

                entity.Property(e => e.GetPersonLoginName).HasMaxLength(50);

                entity.Property(e => e.MailNo).HasMaxLength(50);

                entity.Property(e => e.MailPlace).HasMaxLength(500);

                entity.Property(e => e.MailRecvDate).HasColumnType("datetime");

                entity.Property(e => e.MailType).HasMaxLength(50);

                entity.Property(e => e.MsgSendTime).HasColumnType("datetime");

                entity.Property(e => e.RecordStatus).HasMaxLength(50);

                entity.Property(e => e.RecvLoginName).HasMaxLength(50);

                entity.Property(e => e.RecvName).HasMaxLength(50);
            });

            modelBuilder.Entity<TccMailRecvMailTypeDict>(entity =>
            {
                entity.ToTable("TCC_MailRecv_MailTypeDict");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.MailTypeName).HasMaxLength(50);

                entity.Property(e => e.MailTypeValue).HasMaxLength(50);
            });

            modelBuilder.Entity<TccMainMonthPaymentRecord>(entity =>
            {
                entity.ToTable("TCC_MainMonthPaymentRecord");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AcctBookCode)
                    .HasMaxLength(10)
                    .HasComment("账簿标识");

                entity.Property(e => e.AcctPeriod).HasComment("会计时间");

                entity.Property(e => e.AcctYear).HasComment("会计年度");

                entity.Property(e => e.Attachment).HasComment("附件张数");

                entity.Property(e => e.CashDate)
                    .HasColumnType("datetime")
                    .HasComment("出纳日期");

                entity.Property(e => e.CashUser)
                    .HasMaxLength(50)
                    .HasComment("出纳");

                entity.Property(e => e.CheckDate)
                    .HasColumnType("datetime")
                    .HasComment("审核日期");

                entity.Property(e => e.CheckUser)
                    .HasMaxLength(50)
                    .HasComment("审核人");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasComment("凭证日期");

                entity.Property(e => e.CreateUser)
                    .HasMaxLength(50)
                    .HasComment("制单人");

                entity.Property(e => e.Memo)
                    .HasMaxLength(300)
                    .HasComment("备注");

                entity.Property(e => e.NewVest).HasMaxLength(100);

                entity.Property(e => e.RecordType).HasComment("类型标识，0标识为付工资奖金");

                entity.Property(e => e.ResponseFlag).HasComment("0标识不成功，1标识成功");

                entity.Property(e => e.ResponseMessage)
                    .HasMaxLength(2000)
                    .HasComment("返回的消息");

                entity.Property(e => e.UnitCode)
                    .HasMaxLength(50)
                    .HasComment("组织机构编码");

                entity.Property(e => e.Vchrid)
                    .HasMaxLength(100)
                    .HasComment("生成的凭证ID");

                entity.Property(e => e.Vchrnum).HasComment("凭证编号");

                entity.Property(e => e.Vchrtype)
                    .HasMaxLength(100)
                    .HasComment("凭证字");

                entity.Property(e => e.VchrtypeCode)
                    .HasMaxLength(100)
                    .HasComment("凭证类别");

                entity.Property(e => e.VoucherCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("凭证号，各业务表中生成的凭证号");
            });

            modelBuilder.Entity<TccManagementAward>(entity =>
            {
                entity.ToTable("TCC_ManagementAwards");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AbroadAssignStatus).HasMaxLength(10);

                entity.Property(e => e.AbroadAssignStatus2).HasMaxLength(10);

                entity.Property(e => e.AbroadAuditStatus)
                    .HasMaxLength(10)
                    .HasComment("海外经营部是否办完  N否 Y是");

                entity.Property(e => e.AbroadAuditStatus2).HasMaxLength(10);

                entity.Property(e => e.AbroadAuditStatus2Fjy)
                    .HasMaxLength(10)
                    .HasColumnName("AbroadAuditStatus2_FJY");

                entity.Property(e => e.AbroadAuditStatus2Jy)
                    .HasMaxLength(10)
                    .HasColumnName("AbroadAuditStatus2_JY");

                entity.Property(e => e.AbroadAuditStatusFjy)
                    .HasMaxLength(10)
                    .HasColumnName("AbroadAuditStatus_FJY")
                    .HasComment("海外经营部非经营人员是否已提交  N否 Y是");

                entity.Property(e => e.AbroadAuditStatusJy)
                    .HasMaxLength(10)
                    .HasColumnName("AbroadAuditStatus_JY")
                    .HasComment("海外经营部经营部经营人员奖金是否提交  N否 Y是");

                entity.Property(e => e.ApplyDept).HasMaxLength(50);

                entity.Property(e => e.ApplyDeptNo).HasMaxLength(50);

                entity.Property(e => e.ApplyId)
                    .HasMaxLength(50)
                    .HasColumnName("ApplyID");

                entity.Property(e => e.ApplyLoginUser)
                    .HasMaxLength(10)
                    .IsFixedLength(true);

                entity.Property(e => e.ApplyName).HasMaxLength(50);

                entity.Property(e => e.AwardCategory).HasMaxLength(50);

                entity.Property(e => e.CanAssign).HasMaxLength(10);

                entity.Property(e => e.DeptMangerDeptName).HasMaxLength(50);

                entity.Property(e => e.DeptMangerDeptNo).HasMaxLength(50);

                entity.Property(e => e.DeptMangerId)
                    .HasMaxLength(50)
                    .HasColumnName("DeptMangerID");

                entity.Property(e => e.DeptMangerlogin).HasMaxLength(50);

                entity.Property(e => e.Flag).HasMaxLength(10);

                entity.Property(e => e.FormNumber).HasMaxLength(20);

                entity.Property(e => e.InlandAssignStatus).HasMaxLength(10);

                entity.Property(e => e.InlandAuditStatus)
                    .HasMaxLength(10)
                    .HasComment("国内经营部是否办完  N否 Y是");

                entity.Property(e => e.InlandAuditStatusFjy)
                    .HasMaxLength(10)
                    .HasColumnName("InlandAuditStatus_FJY")
                    .HasComment("国内经营部非经营人员是否已提交  N否 Y是");

                entity.Property(e => e.InlandAuditStatusJy)
                    .HasMaxLength(10)
                    .HasColumnName("InlandAuditStatus_JY")
                    .HasComment("国内经营部经营部经营人员奖金是否提交  N否 Y是");

                entity.Property(e => e.MarkingFjy)
                    .HasMaxLength(10)
                    .HasColumnName("Marking_FJY")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.ProcessFinshDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ProcessFinsh_Date")
                    .HasComment("流程结束时间");

                entity.Property(e => e.ProcessName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ReciverDate).HasColumnType("datetime");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");

                entity.Property(e => e.ResidualAmount).HasMaxLength(50);

                entity.Property(e => e.Status2Hwjy)
                    .HasMaxLength(10)
                    .HasColumnName("Status2_HWJY");

                entity.Property(e => e.StatusFjy)
                    .HasMaxLength(50)
                    .HasColumnName("Status_FJY")
                    .HasComment("经营委员会查看--非经营是否确认  Y是 N否");

                entity.Property(e => e.StatusGnjy)
                    .HasMaxLength(10)
                    .HasColumnName("Status_GNJY")
                    .HasComment("经营委员会查看--国内经营部是否确认  Y是 N否");

                entity.Property(e => e.StatusHwjy)
                    .HasMaxLength(10)
                    .HasColumnName("Status_HWJY")
                    .HasComment("经营委员会查看--海外经营部是否确认  Y是 N否");

                entity.Property(e => e.TotalBobusBudgetYear).HasMaxLength(50);

                entity.Property(e => e.TotalReleasedAmount).HasMaxLength(50);
            });

            modelBuilder.Entity<TccManagementAwardsDetail>(entity =>
            {
                entity.ToTable("TCC_ManagementAwardsDetails");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyName).HasMaxLength(50);

                entity.Property(e => e.AwardCategory).HasMaxLength(50);

                entity.Property(e => e.CurrentYearContractAmount).HasMaxLength(20);

                entity.Property(e => e.CurrentYearDrafted).HasMaxLength(20);

                entity.Property(e => e.DeptName).HasMaxLength(50);

                entity.Property(e => e.DeptNo).HasMaxLength(50);

                entity.Property(e => e.ManagementPersonnelBonus).HasMaxLength(20);

                entity.Property(e => e.OperatingPersonnelBonus).HasMaxLength(20);

                entity.Property(e => e.OuterUnitAllocatedAward).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OuterUnitSubsidyAward).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PreviousYearContractAmount).HasMaxLength(20);

                entity.Property(e => e.PreviousYearDrafted).HasMaxLength(20);

                entity.Property(e => e.ProcessName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Subsidy).HasMaxLength(20);

                entity.Property(e => e.TatalCheckBonus).HasMaxLength(20);
            });

            modelBuilder.Entity<TccManagementAwardsDetailsTest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_ManagementAwardsDetails_Test");

                entity.Property(e => e.CurrentYearContractAmount).HasMaxLength(20);

                entity.Property(e => e.CurrentYearDrafted).HasMaxLength(20);

                entity.Property(e => e.DeptName).HasMaxLength(50);

                entity.Property(e => e.DeptNo).HasMaxLength(20);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.PreviousYearContractAmount).HasMaxLength(20);

                entity.Property(e => e.PreviousYearDrafted).HasMaxLength(20);
            });

            modelBuilder.Entity<TccManagementPersonnelBonu>(entity =>
            {
                entity.ToTable("TCC_ManagementPersonnelBonus");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AwardCategory).HasMaxLength(50);

                entity.Property(e => e.BussinessAward).HasMaxLength(20);

                entity.Property(e => e.BussinessSubsidy).HasMaxLength(20);

                entity.Property(e => e.BussinessTotal).HasMaxLength(20);

                entity.Property(e => e.CurrentYearContractAmount).HasMaxLength(20);

                entity.Property(e => e.CurrentYearDrafted).HasMaxLength(20);

                entity.Property(e => e.DeptName).HasMaxLength(50);

                entity.Property(e => e.DeptNo).HasMaxLength(50);

                entity.Property(e => e.IsFanPin).HasMaxLength(10);

                entity.Property(e => e.PersonLoginName).HasMaxLength(50);

                entity.Property(e => e.PreviousYearContractAmount).HasMaxLength(20);

                entity.Property(e => e.PreviousYearDrafted).HasMaxLength(20);

                entity.Property(e => e.ProcessName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SelectName).HasMaxLength(20);

                entity.Property(e => e.UserIdentity).HasMaxLength(50);
            });

            modelBuilder.Entity<TccMeetCostFare>(entity =>
            {
                entity.ToTable("TCC_MeetCostFare");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DeptManagerName).HasMaxLength(50);

                entity.Property(e => e.MeetCost).HasColumnType("money");

                entity.Property(e => e.ProjectManagerName).HasMaxLength(50);

                entity.Property(e => e.ProjectNo).HasMaxLength(50);

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");

                entity.Property(e => e.UseDeptId)
                    .HasMaxLength(50)
                    .HasColumnName("UseDeptID");
            });

            modelBuilder.Entity<TccMeetInfo>(entity =>
            {
                entity.ToTable("TCC_MeetInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyDept).HasMaxLength(50);

                entity.Property(e => e.ApplyDeptNo).HasMaxLength(50);

                entity.Property(e => e.ApplyEmail).HasMaxLength(50);

                entity.Property(e => e.ApplyLoginUser).HasMaxLength(50);

                entity.Property(e => e.ApplyMobile).HasMaxLength(50);

                entity.Property(e => e.ApplyName).HasMaxLength(50);

                entity.Property(e => e.ApplyTelephone).HasMaxLength(50);

                entity.Property(e => e.CardNo).HasMaxLength(50);

                entity.Property(e => e.DeptManagerLoginName).HasMaxLength(50);

                entity.Property(e => e.DeptManagerName).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.MeetAddress).HasMaxLength(50);

                entity.Property(e => e.MeetBudget).HasColumnType("money");

                entity.Property(e => e.MeetCostType).HasMaxLength(50);

                entity.Property(e => e.MeetEndDate).HasColumnType("datetime");

                entity.Property(e => e.MeetStartDate).HasColumnType("datetime");

                entity.Property(e => e.OrganizerCardNo).HasMaxLength(50);

                entity.Property(e => e.OrganizerKey).HasMaxLength(50);

                entity.Property(e => e.OrganizerName).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProcessStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.ProjectManagerLoginName).HasMaxLength(50);

                entity.Property(e => e.ProjectManagerName).HasMaxLength(50);

                entity.Property(e => e.ProjectName).HasMaxLength(50);

                entity.Property(e => e.ProjectNo).HasMaxLength(50);

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");

                entity.Property(e => e.UseDept).HasMaxLength(50);

                entity.Property(e => e.UseDeptId)
                    .HasMaxLength(50)
                    .HasColumnName("UseDeptID");
            });

            modelBuilder.Entity<TccMeetUser>(entity =>
            {
                entity.ToTable("TCC_MeetUser");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DeptName).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(20);

                entity.Property(e => e.LoginName).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.UserKey).HasMaxLength(50);

                entity.Property(e => e.UserName).HasMaxLength(50);
            });

            modelBuilder.Entity<TccMeetUserSend>(entity =>
            {
                entity.ToTable("TCC_MeetUser_Send");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.MType)
                    .HasColumnName("mType")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TccMessageSend>(entity =>
            {
                entity.ToTable("TCC_MessageSend");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ConfigFlag)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasComment("配置标志");

                entity.Property(e => e.EmailContent)
                    .HasMaxLength(1000)
                    .HasComment("邮件内容");

                entity.Property(e => e.EmailTitle)
                    .HasMaxLength(1000)
                    .HasComment("邮件标题");

                entity.Property(e => e.EmailTo)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasComment("邮件地址");

                entity.Property(e => e.IsEmail).HasComment("是否发送邮件");

                entity.Property(e => e.IsMsg).HasComment("是否发送短信");

                entity.Property(e => e.MobileNo)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("手机号");

                entity.Property(e => e.Msg)
                    .HasMaxLength(1000)
                    .HasComment("短信内容");

                entity.Property(e => e.SendName)
                    .HasMaxLength(50)
                    .HasComment("发送人");

                entity.Property(e => e.SendTime)
                    .HasColumnType("datetime")
                    .HasComment("发送时间");
            });

            modelBuilder.Entity<TccMileStoneAwardSendPlanApply>(entity =>
            {
                entity.ToTable("TCC_MileStoneAwardSendPlanApply");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyBeginMonth)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_BEGIN_MONTH");

                entity.Property(e => e.ApplyDate)
                    .HasColumnType("datetime")
                    .HasColumnName("APPLY_DATE");

                entity.Property(e => e.ApplyDept)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_DEPT");

                entity.Property(e => e.ApplyDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_DEPT_CODE");

                entity.Property(e => e.ApplyEndMonth)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_END_MONTH");

                entity.Property(e => e.ApplyUserLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_USER_LOGIN_NAME");

                entity.Property(e => e.ApplyUserName)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_USER_NAME");

                entity.Property(e => e.FormSerialNumber)
                    .HasMaxLength(50)
                    .HasColumnName("FORM_SERIAL_NUMBER");

                entity.Property(e => e.IncidentFk)
                    .HasColumnName("INCIDENT_FK")
                    .HasComment("奖金分配方案主表TCC_ProjectAwardSendPlanApply实例号外键");

                entity.Property(e => e.IncidentNo).HasColumnName("INCIDENT_NO");

                entity.Property(e => e.MajorAwardAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MAJOR_AWARD_AMOUNT");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(100)
                    .HasColumnName("PROCESS_NAME");

                entity.Property(e => e.ProcessStatus).HasColumnName("PROCESS_STATUS");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .HasColumnName("PROJECT_CODE");

                entity.Property(e => e.ProjectMajor)
                    .HasMaxLength(50)
                    .HasColumnName("PROJECT_MAJOR");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(200)
                    .HasColumnName("PROJECT_NAME");
            });

            modelBuilder.Entity<TccMileStoneAwardSendPlanDetail>(entity =>
            {
                entity.ToTable("TCC_MileStoneAwardSendPlan_Detail");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyDate)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_DATE");

                entity.Property(e => e.IncidentNoFk).HasColumnName("INCIDENT_NO_FK");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .HasColumnName("PROJECT_CODE");

                entity.Property(e => e.ProjectMajor)
                    .HasMaxLength(50)
                    .HasColumnName("PROJECT_MAJOR");

                entity.Property(e => e.SendAwardAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("SEND_AWARD_AMOUNT");

                entity.Property(e => e.SendMonth)
                    .HasMaxLength(50)
                    .HasColumnName("SEND_MONTH");
            });

            modelBuilder.Entity<TccMonitoringLogsInfo>(entity =>
            {
                entity.ToTable("TCC_MonitoringLogsInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasComment("创建时间");

                entity.Property(e => e.ErrorMessage)
                    .HasMaxLength(2000)
                    .HasColumnName("Error_message")
                    .HasComment("错误信息");

                entity.Property(e => e.ErrorNumber)
                    .HasColumnName("Error_number")
                    .HasComment("错误编号");

                entity.Property(e => e.ErrorSeverity).HasColumnName("Error_severity");

                entity.Property(e => e.ErrorState).HasColumnName("Error_state");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .HasComment("类型");
            });

            modelBuilder.Entity<TccMonthPaymentRecord>(entity =>
            {
                entity.ToTable("TCC_MonthPaymentRecord");

                entity.HasIndex(e => e.VchrId, "IX_AutoGen_20140724_39944");

                entity.HasIndex(e => e.VchrId, "IX_AutoGen_20140724_39946");

                entity.HasIndex(e => new { e.VchrId, e.Flag }, "IX_AutoGen_20140724_39948");

                entity.HasIndex(e => new { e.VchrId, e.Flag }, "IX_AutoGen_20140724_39950");

                entity.Property(e => e.BizDate)
                    .HasColumnType("datetime")
                    .HasComment("业务日期");

                entity.Property(e => e.BizNo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BizNO")
                    .HasComment("业务单号");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasComment("条目生成时间");

                entity.Property(e => e.Credit)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0.00))")
                    .HasComment("贷方金额");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(100)
                    .HasComment("货币代码");

                entity.Property(e => e.CustomerCode)
                    .HasMaxLength(100)
                    .HasComment("客户编码");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(500)
                    .HasComment("客户名称");

                entity.Property(e => e.Debit)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0.00))")
                    .HasComment("借方金额");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(100)
                    .HasComment("部门编码");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(100)
                    .HasComment("部门名称");

                entity.Property(e => e.Digest)
                    .HasMaxLength(1200)
                    .HasComment("摘要");

                entity.Property(e => e.Exchrate)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("税率");

                entity.Property(e => e.Flag).HasComment("0标识借，1标识贷");

                entity.Property(e => e.Gbcode)
                    .HasMaxLength(50)
                    .HasColumnName("GBCODE")
                    .HasDefaultValueSql("('')")
                    .HasComment("国别编码");

                entity.Property(e => e.Gbname)
                    .HasMaxLength(50)
                    .HasColumnName("GBNAME")
                    .HasDefaultValueSql("('')")
                    .HasComment("国别名称");

                entity.Property(e => e.ItemOrder).HasComment("分录编号，1，2，3，4这样的");

                entity.Property(e => e.NewSalaryVest)
                    .HasMaxLength(100)
                    .HasComment("薪资发放地");

                entity.Property(e => e.Orgnc)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((1))")
                    .HasComment("贷方原币");

                entity.Property(e => e.Orgnd)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((1))")
                    .HasComment("借方原币,默认为1");

                entity.Property(e => e.Price)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("单价");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(100)
                    .HasComment("项目代码");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(1000)
                    .HasComment("项目名称");

                entity.Property(e => e.Qty).HasComment("数量");

                entity.Property(e => e.SalaryVest)
                    .HasMaxLength(100)
                    .HasComment("薪资归属");

                entity.Property(e => e.SetTlementCode)
                    .HasMaxLength(100)
                    .HasComment("结算方式编码");

                entity.Property(e => e.SetTlementName)
                    .HasMaxLength(100)
                    .HasComment("结算方式");

                entity.Property(e => e.SettlementDate)
                    .HasColumnType("datetime")
                    .HasComment("结算日期");

                entity.Property(e => e.SlCode)
                    .HasMaxLength(50)
                    .HasComment("税率");

                entity.Property(e => e.SlName)
                    .HasMaxLength(50)
                    .HasComment("税率");

                entity.Property(e => e.StaffCode)
                    .HasMaxLength(100)
                    .HasComment("职员编号");

                entity.Property(e => e.StaffName)
                    .HasMaxLength(100)
                    .HasComment("职员编码");

                entity.Property(e => e.SubjectCode)
                    .HasMaxLength(100)
                    .HasComment("科目代码");

                entity.Property(e => e.SubjectName)
                    .HasMaxLength(300)
                    .HasComment("科目名称");

                entity.Property(e => e.SupplierCode)
                    .HasMaxLength(100)
                    .HasComment("供应商代码");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(500)
                    .HasComment("供应商名称");

                entity.Property(e => e.Type).HasMaxLength(100);

                entity.Property(e => e.UserIdentityId).HasMaxLength(100);

                entity.Property(e => e.VchrId).HasComment("主表ID");
            });

            modelBuilder.Entity<TccMonthPaymentRecordTemp>(entity =>
            {
                entity.ToTable("TCC_MonthPaymentRecord_Temp");

                entity.Property(e => e.BizDate)
                    .HasColumnType("datetime")
                    .HasComment("业务日期");

                entity.Property(e => e.BizNo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BizNO")
                    .HasComment("业务单号");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasComment("条目生成时间");

                entity.Property(e => e.Credit)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0.00))")
                    .HasComment("贷方金额");

                entity.Property(e => e.Currencycode)
                    .HasMaxLength(100)
                    .HasComment("货币代码");

                entity.Property(e => e.CustomerCode)
                    .HasMaxLength(100)
                    .HasComment("客户编码");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(500)
                    .HasComment("客户名称");

                entity.Property(e => e.Debit)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0.00))")
                    .HasComment("借方金额");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(100)
                    .HasComment("部门编码");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(100)
                    .HasComment("部门名称");

                entity.Property(e => e.Digest)
                    .HasMaxLength(1200)
                    .HasComment("摘要");

                entity.Property(e => e.Exchrate)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("税率");

                entity.Property(e => e.Flag).HasComment("0标识借，1标识贷");

                entity.Property(e => e.ItemOrder).HasComment("分录编号，1，2，3，4这样的");

                entity.Property(e => e.NewSalaryVest)
                    .HasMaxLength(100)
                    .HasComment("薪资发放地");

                entity.Property(e => e.Orgnc)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((1))")
                    .HasComment("贷方原币");

                entity.Property(e => e.Orgnd)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((1))")
                    .HasComment("借方原币,默认为1");

                entity.Property(e => e.Price)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("单价");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(100)
                    .HasComment("项目代码");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(1000)
                    .HasComment("项目名称");

                entity.Property(e => e.Qty).HasComment("数量");

                entity.Property(e => e.SalaryVest)
                    .HasMaxLength(100)
                    .HasComment("薪资归属");

                entity.Property(e => e.SetTlementCode)
                    .HasMaxLength(100)
                    .HasComment("结算方式编码");

                entity.Property(e => e.SetTlementName)
                    .HasMaxLength(100)
                    .HasComment("结算方式");

                entity.Property(e => e.SettlementDate)
                    .HasColumnType("datetime")
                    .HasComment("结算日期");

                entity.Property(e => e.SlCode)
                    .HasMaxLength(50)
                    .HasComment("税率");

                entity.Property(e => e.SlName)
                    .HasMaxLength(50)
                    .HasComment("税率");

                entity.Property(e => e.StaffCode)
                    .HasMaxLength(100)
                    .HasComment("职员编号");

                entity.Property(e => e.StaffName)
                    .HasMaxLength(100)
                    .HasComment("职员编码");

                entity.Property(e => e.SubjectCode)
                    .HasMaxLength(100)
                    .HasComment("科目代码");

                entity.Property(e => e.SubjectName)
                    .HasMaxLength(300)
                    .HasComment("科目名称");

                entity.Property(e => e.SupplierCode)
                    .HasMaxLength(100)
                    .HasComment("供应商代码");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(500)
                    .HasComment("供应商名称");

                entity.Property(e => e.Type).HasMaxLength(100);

                entity.Property(e => e.UserIdentityId).HasMaxLength(100);

                entity.Property(e => e.VchrId).HasComment("主表ID");
            });

            modelBuilder.Entity<TccMonthlyPaymentPlanRecord>(entity =>
            {
                entity.ToTable("TCC_MonthlyPaymentPlan_Record");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BudgetAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("预算金额");

                entity.Property(e => e.ControlFlag).HasComment("管控标识，1是管控，0是不管控");

                entity.Property(e => e.ControlMonth).HasComment("管控月份");

                entity.Property(e => e.ControlYear).HasComment("管控年度");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .HasComment("具体的信息描述");

                entity.Property(e => e.HappenedAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("已发生金额");

                entity.Property(e => e.ProjectCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("项目编号");

                entity.Property(e => e.RemainAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("剩余金额");

                entity.Property(e => e.RequestName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("管控类别的名称");

                entity.Property(e => e.RequestType).HasComment("管控类别");
            });

            modelBuilder.Entity<TccMonthlyReimbursementCriterion>(entity =>
            {
                entity.ToTable("TCC_MonthlyReimbursementCriteria");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .HasComment("主管部门编号");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .HasComment("主管部门名称");

                entity.Property(e => e.Month)
                    .HasMaxLength(50)
                    .HasComment("月");

                entity.Property(e => e.RealName)
                    .HasMaxLength(50)
                    .HasComment("姓名");

                entity.Property(e => e.Standard).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.UserIdentify)
                    .HasMaxLength(50)
                    .HasComment("身份证号");

                entity.Property(e => e.Year)
                    .HasMaxLength(50)
                    .HasComment("年");
            });

            modelBuilder.Entity<TccMonthlyforHouseSubsidy>(entity =>
            {
                entity.ToTable("TCC_MonthlyforHouseSubsidy");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Category).HasComment("0 代表2019年以前入院  1代表2019年以后入院");

                entity.Property(e => e.CreateDate).HasMaxLength(50);

                entity.Property(e => e.EducationLevel)
                    .HasMaxLength(50)
                    .HasComment("学历");

                entity.Property(e => e.Location)
                    .HasMaxLength(50)
                    .HasComment("工资发放地");

                entity.Property(e => e.Month).HasComment("月份");

                entity.Property(e => e.Quarter).HasComment("季度");

                entity.Property(e => e.Standard)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("标准");

                entity.Property(e => e.Year).HasComment("年度");
            });

            modelBuilder.Entity<TccNotarizeApply>(entity =>
            {
                entity.ToTable("TCC_NotarizeApply");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyDate).HasColumnType("datetime");

                entity.Property(e => e.ApplyDept).HasMaxLength(50);

                entity.Property(e => e.ApplyDeptNo).HasMaxLength(50);

                entity.Property(e => e.ApplyLoginUser).HasMaxLength(50);

                entity.Property(e => e.ApplyName).HasMaxLength(50);

                entity.Property(e => e.ApplyType).HasMaxLength(50);

                entity.Property(e => e.DocType).HasMaxLength(50);

                entity.Property(e => e.FormNumber)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.LauguageType).HasMaxLength(50);

                entity.Property(e => e.LauguageTypeId)
                    .HasMaxLength(50)
                    .HasColumnName("LauguageTypeID");

                entity.Property(e => e.NeedRz)
                    .HasMaxLength(50)
                    .HasColumnName("NeedRZ");

                entity.Property(e => e.NotarizeType).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectNo).HasMaxLength(50);

                entity.Property(e => e.Rztype)
                    .HasMaxLength(50)
                    .HasColumnName("RZType");

                entity.Property(e => e.UseCountry).HasMaxLength(50);

                entity.Property(e => e.UseCountryId)
                    .HasMaxLength(50)
                    .HasColumnName("UseCountryID");
            });

            modelBuilder.Entity<TccNoticeSendApply>(entity =>
            {
                entity.ToTable("TCC_NoticeSendApply");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyDate).HasColumnType("datetime");

                entity.Property(e => e.ApplyDept).HasMaxLength(50);

                entity.Property(e => e.ApplyDeptNo).HasMaxLength(50);

                entity.Property(e => e.ApplyLoginUser).HasMaxLength(50);

                entity.Property(e => e.ApplyName).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(20);

                entity.Property(e => e.NoticeType).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.SendType).HasMaxLength(50);

                entity.Property(e => e.Title).HasMaxLength(200);
            });

            modelBuilder.Entity<TccOperatingAndBusinessSupportVehicleBudget>(entity =>
            {
                entity.ToTable("TCC_OperatingAndBusinessSupportVehicleBudget");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DecreaseAndIncrease).HasMaxLength(50);

                entity.Property(e => e.DeptCode).HasMaxLength(50);

                entity.Property(e => e.DeptName).HasMaxLength(50);

                entity.Property(e => e.MakeUnit).HasMaxLength(50);

                entity.Property(e => e.Model).HasMaxLength(200);

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.PurchaseCostExcludingTax).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PurchasePurpose).HasMaxLength(500);

                entity.Property(e => e.RelatedTaxesAndExpenses).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalPurchaseCostExcludingTax).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalPurchaseCostIncludingTax).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.VehicleBrand).HasMaxLength(200);
            });

            modelBuilder.Entity<TccOperatingAndBusinessSupportVehicleBudgetTemp>(entity =>
            {
                entity.ToTable("TCC_OperatingAndBusinessSupportVehicleBudgetTEMP");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DecreaseAndIncrease).HasMaxLength(50);

                entity.Property(e => e.DeptCode).HasMaxLength(50);

                entity.Property(e => e.DeptName).HasMaxLength(50);

                entity.Property(e => e.MakeUnit).HasMaxLength(50);

                entity.Property(e => e.Model).HasMaxLength(200);

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.PurchaseCostExcludingTax).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PurchasePurpose).HasMaxLength(500);

                entity.Property(e => e.RelatedTaxesAndExpenses).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalPurchaseCostExcludingTax).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalPurchaseCostIncludingTax).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.VehicleBrand).HasMaxLength(200);
            });

            modelBuilder.Entity<TccOperatingPersonnelBonu>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_OperatingPersonnelBonus");

                entity.Property(e => e.AssignFromDept).HasMaxLength(50);

                entity.Property(e => e.AssignFromDeptName).HasMaxLength(50);

                entity.Property(e => e.AwardAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AwardCategory).HasMaxLength(50);

                entity.Property(e => e.DeptName).HasMaxLength(50);

                entity.Property(e => e.DeptNo).HasMaxLength(50);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.IsFanPin).HasMaxLength(10);

                entity.Property(e => e.Level).HasMaxLength(20);

                entity.Property(e => e.PersonLoginName).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.SelectName).HasMaxLength(20);

                entity.Property(e => e.UserIdentity).HasMaxLength(50);

                entity.Property(e => e.WorkContent).HasMaxLength(2000);
            });

            modelBuilder.Entity<TccOtherCategoriesAward>(entity =>
            {
                entity.ToTable("TCC_OtherCategoriesAward");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyDate)
                    .HasColumnType("datetime")
                    .HasColumnName("APPLY_DATE");

                entity.Property(e => e.ApplyDept)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_DEPT");

                entity.Property(e => e.ApplyDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_DEPT_CODE");

                entity.Property(e => e.ApplyPrizeAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("APPLY_PRIZE_AMOUNT");

                entity.Property(e => e.ApplyUserLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_USER_LOGIN_NAME");

                entity.Property(e => e.ApplyUserName)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_USER_NAME");

                entity.Property(e => e.ApprovedPrizeAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("APPROVED_PRIZE_AMOUNT");

                entity.Property(e => e.FormSerialNumber)
                    .HasMaxLength(50)
                    .HasColumnName("FORM_SERIAL_NUMBER");

                entity.Property(e => e.IncidentNo).HasColumnName("INCIDENT_NO");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(100)
                    .HasColumnName("PROCESS_NAME");

                entity.Property(e => e.ProcessStatus).HasColumnName("PROCESS_STATUS");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .HasColumnName("PROJECT_CODE");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(200)
                    .HasColumnName("PROJECT_NAME");

                entity.Property(e => e.ProjectType)
                    .HasMaxLength(50)
                    .HasColumnName("PROJECT_TYPE");
            });

            modelBuilder.Entity<TccOtherCategoriesAwardDetailList>(entity =>
            {
                entity.ToTable("TCC_OtherCategoriesAward_DetailList");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApproveMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ArchiveDate)
                    .HasColumnType("datetime")
                    .HasComment("进入奖金池时间");

                entity.Property(e => e.AwardComposed)
                    .HasMaxLength(50)
                    .HasComment("奖项名称");

                entity.Property(e => e.AwardComposedCode).HasMaxLength(50);

                entity.Property(e => e.AwardDesc)
                    .HasMaxLength(100)
                    .HasComment("奖项描述。如：项目奖-工作节点奖");

                entity.Property(e => e.AwardMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FormNumber).HasMaxLength(100);

                entity.Property(e => e.IncidentNo).HasComment("对应奖金发放流程主表实例号");

                entity.Property(e => e.PaymentDate).HasColumnType("datetime");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(50);

                entity.Property(e => e.ProjectMajor).HasMaxLength(50);

                entity.Property(e => e.ProjectName).HasMaxLength(400);

                entity.Property(e => e.ProjectType).HasMaxLength(50);

                entity.Property(e => e.ReceiverMajor).HasMaxLength(50);

                entity.Property(e => e.ReceiverRole).HasMaxLength(50);

                entity.Property(e => e.ReceiverUserIdentityId).HasMaxLength(50);

                entity.Property(e => e.ReceiverUserLoginName).HasMaxLength(50);

                entity.Property(e => e.ReceiverUserName).HasMaxLength(50);

                entity.Property(e => e.SenderLoginName).HasMaxLength(50);

                entity.Property(e => e.SenderUserName).HasMaxLength(50);

                entity.Property(e => e.Status).HasComment("奖金状态  1 未进奖金池  3  已进奖金池");

                entity.Property(e => e.SubAward)
                    .HasMaxLength(50)
                    .HasComment("子奖项名称，如：工作节点奖");

                entity.Property(e => e.SubAwardCode).HasMaxLength(50);
            });

            modelBuilder.Entity<TccOtherPaymentShare>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_OtherPayment_Share");

                entity.Property(e => e.ApplicationCode).HasComment("费用用途对应的编号");

                entity.Property(e => e.ApplicationName)
                    .HasMaxLength(50)
                    .HasComment("费用用途");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.IsDeptShare).HasComment("0不允许部门分摊, 1是允许分子公司分摊,2是允许本部部门分摊,3是允许所有部门分摊");

                entity.Property(e => e.IsProjShare).HasComment("0是不允许项目分摊,1是允许非研发项目分摊,2是允许研发项目分摊,3是允许所有项目分摊");

                entity.Property(e => e.ShareType).HasComment("2为固定资产分摊，1为非固定资产分摊");

                entity.Property(e => e.Type).HasComment("1是付款，2是一般费用报销");
            });

            modelBuilder.Entity<TccPaBaseInfo>(entity =>
            {
                entity.ToTable("TCC_PA_BaseInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.PaSendDate)
                    .HasMaxLength(50)
                    .HasColumnName("PA_SendDate");

                entity.Property(e => e.PaTimeType)
                    .HasMaxLength(50)
                    .HasColumnName("PA_timeType");

                entity.Property(e => e.PaType)
                    .HasMaxLength(50)
                    .HasColumnName("PA_type");

                entity.Property(e => e.PaYear)
                    .HasMaxLength(50)
                    .HasColumnName("PA_year");
            });

            modelBuilder.Entity<TccPaDeptAbilityDevelop>(entity =>
            {
                entity.ToTable("TCC_PA_Dept_AbilityDevelop");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AbilityDevelopField).HasMaxLength(100);

                entity.Property(e => e.DevelopFieldKind).HasMaxLength(50);

                entity.Property(e => e.PersonalRecordFk).HasColumnName("PersonalRecord_FK");
            });

            modelBuilder.Entity<TccPaDeptAbilityEvaluate>(entity =>
            {
                entity.ToTable("TCC_PA_Dept_AbilityEvaluate");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.EvaluateField).HasMaxLength(50);

                entity.Property(e => e.EvaluateFieldFk).HasColumnName("EvaluateField_FK");

                entity.Property(e => e.LeaderEvaluate).HasMaxLength(50);

                entity.Property(e => e.PersonalRecordFk).HasColumnName("PersonalRecord_FK");

                entity.Property(e => e.SelfEvaluate).HasMaxLength(50);
            });

            modelBuilder.Entity<TccPaDeptDeptRecord>(entity =>
            {
                entity.ToTable("TCC_PA_Dept_DeptRecord");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyDept).HasMaxLength(50);

                entity.Property(e => e.ApplyDeptNo).HasMaxLength(50);

                entity.Property(e => e.ApplyYear).HasMaxLength(50);

                entity.Property(e => e.PainfoFk).HasColumnName("PAInfo_FK");

                entity.Property(e => e.ProcessStatus).HasMaxLength(50);

                entity.Property(e => e.SubmitName).HasMaxLength(50);

                entity.Property(e => e.SubmitTime).HasMaxLength(50);
            });

            modelBuilder.Entity<TccPaDeptOthersPa>(entity =>
            {
                entity.ToTable("TCC_PA_Dept_OthersPA");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyDept).HasMaxLength(50);

                entity.Property(e => e.ApplyDeptNo).HasMaxLength(50);

                entity.Property(e => e.ApplyLoginUser).HasMaxLength(50);

                entity.Property(e => e.ApplyName).HasMaxLength(50);

                entity.Property(e => e.ApplyYear).HasMaxLength(50);

                entity.Property(e => e.PainfoFk).HasColumnName("PAInfo_FK");

                entity.Property(e => e.ProcessStatus).HasMaxLength(50);
            });

            modelBuilder.Entity<TccPaDeptOthersPadetail>(entity =>
            {
                entity.ToTable("TCC_PA_Dept_OthersPADetail");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.EvaluateName)
                    .HasMaxLength(50)
                    .HasColumnName("Evaluate_name");

                entity.Property(e => e.EvaluateYear)
                    .HasMaxLength(50)
                    .HasColumnName("Evaluate_year");

                entity.Property(e => e.OthersPaFk).HasColumnName("OthersPA_FK");

                entity.Property(e => e.OthersPaName)
                    .HasMaxLength(50)
                    .HasColumnName("OthersPA_name");

                entity.Property(e => e.OthersPaPointFwzl)
                    .HasMaxLength(50)
                    .HasColumnName("OthersPA_point_fwzl");

                entity.Property(e => e.OthersPaPointJjwtsj)
                    .HasMaxLength(50)
                    .HasColumnName("OthersPA_point_jjwtsj");

                entity.Property(e => e.OthersPaPointTotal)
                    .HasMaxLength(50)
                    .HasColumnName("OthersPA_point_total");

                entity.Property(e => e.OthersPaPointXxfksj)
                    .HasMaxLength(50)
                    .HasColumnName("OthersPA_point_xxfksj");

                entity.Property(e => e.OthersPaPointXysj)
                    .HasMaxLength(50)
                    .HasColumnName("OthersPA_point_xysj");

                entity.Property(e => e.OthersPaPointZdx)
                    .HasMaxLength(50)
                    .HasColumnName("OthersPA_point_zdx");
            });

            modelBuilder.Entity<TccPaDeptPersonalRecord>(entity =>
            {
                entity.ToTable("TCC_PA_Dept_PersonalRecord");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AbilityEvaluatePoint)
                    .HasMaxLength(50)
                    .HasColumnName("AbilityEvaluate_Point");

                entity.Property(e => e.AbilityEvaluatePointGtlj)
                    .HasMaxLength(50)
                    .HasColumnName("AbilityEvaluate_Point_gtlj");

                entity.Property(e => e.AbilityEvaluatePointJhzx)
                    .HasMaxLength(50)
                    .HasColumnName("AbilityEvaluate_Point_jhzx");

                entity.Property(e => e.AbilityEvaluatePointJnjq)
                    .HasMaxLength(50)
                    .HasColumnName("AbilityEvaluate_Point_jnjq");

                entity.Property(e => e.AbilityEvaluatePointXxcx)
                    .HasMaxLength(50)
                    .HasColumnName("AbilityEvaluate_Point_xxcx");

                entity.Property(e => e.ApplyDept).HasMaxLength(50);

                entity.Property(e => e.ApplyDeptNo).HasMaxLength(50);

                entity.Property(e => e.ApplyLoginUser).HasMaxLength(50);

                entity.Property(e => e.ApplyName).HasMaxLength(50);

                entity.Property(e => e.ApplyYear).HasMaxLength(50);

                entity.Property(e => e.FileIds)
                    .HasMaxLength(50)
                    .HasColumnName("FileIDs");

                entity.Property(e => e.OthersEvaluatePoint)
                    .HasMaxLength(50)
                    .HasColumnName("OthersEvaluate_Point");

                entity.Property(e => e.OthersPaPointFwzl)
                    .HasMaxLength(50)
                    .HasColumnName("OthersPA_point_fwzl");

                entity.Property(e => e.OthersPaPointJjwtsj)
                    .HasMaxLength(50)
                    .HasColumnName("OthersPA_point_jjwtsj");

                entity.Property(e => e.OthersPaPointXxfksj)
                    .HasMaxLength(50)
                    .HasColumnName("OthersPA_point_xxfksj");

                entity.Property(e => e.OthersPaPointXysj)
                    .HasMaxLength(50)
                    .HasColumnName("OthersPA_point_xysj");

                entity.Property(e => e.OthersPaPointZdx)
                    .HasMaxLength(50)
                    .HasColumnName("OthersPA_point_zdx");

                entity.Property(e => e.PaAdviceResult)
                    .HasMaxLength(50)
                    .HasColumnName("PA_advice_result");

                entity.Property(e => e.PaConfirmResult)
                    .HasMaxLength(50)
                    .HasColumnName("PA_confirm_result");

                entity.Property(e => e.PaPoint)
                    .HasMaxLength(50)
                    .HasColumnName("PA_point");

                entity.Property(e => e.PaResult)
                    .HasMaxLength(50)
                    .HasColumnName("PA_result");

                entity.Property(e => e.PainfoFk).HasColumnName("PAInfo_FK");

                entity.Property(e => e.PostChangeDate).HasMaxLength(50);

                entity.Property(e => e.PostName).HasMaxLength(50);

                entity.Property(e => e.ProcessStatus).HasMaxLength(50);

                entity.Property(e => e.WorkPerformancePoint)
                    .HasMaxLength(50)
                    .HasColumnName("WorkPerformance_Point");
            });

            modelBuilder.Entity<TccPaDeptWorkPerformance>(entity =>
            {
                entity.ToTable("TCC_PA_Dept_WorkPerformance");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.NormalWorkHours).HasMaxLength(50);

                entity.Property(e => e.OvertimeWorkHours).HasMaxLength(50);

                entity.Property(e => e.PersonalRecordFk).HasColumnName("PersonalRecord_FK");

                entity.Property(e => e.Progress).HasMaxLength(50);

                entity.Property(e => e.WorkRole).HasMaxLength(50);

                entity.Property(e => e.WorkSource).HasMaxLength(50);
            });

            modelBuilder.Entity<TccPaDictEvaluateField>(entity =>
            {
                entity.ToTable("TCC_PA_Dict_EvaluateField");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.EvaluateField).HasMaxLength(50);

                entity.Property(e => e.EvaluatePersonType).HasMaxLength(50);

                entity.Property(e => e.EvaluateType).HasMaxLength(50);

                entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");

                entity.Property(e => e.Sequence).HasColumnName("sequence");
            });

            modelBuilder.Entity<TccPaDictEvaluateFieldKind>(entity =>
            {
                entity.ToTable("TCC_PA_Dict_EvaluateField_Kind");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.EvaluateField).HasMaxLength(200);

                entity.Property(e => e.EvaluateFieldKind).HasMaxLength(50);
            });

            modelBuilder.Entity<TccPaDictEvaluateStandard>(entity =>
            {
                entity.ToTable("TCC_PA_Dict_EvaluateStandard");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.EvaluateFieldFk).HasColumnName("EvaluateField_FK");

                entity.Property(e => e.EvaluateLevel).HasMaxLength(50);

                entity.Property(e => e.EvaluatePoint).HasMaxLength(50);

                entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");

                entity.Property(e => e.Sequence).HasColumnName("sequence");
            });

            modelBuilder.Entity<TccPaPainfo>(entity =>
            {
                entity.ToTable("TCC_PA_PAInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.PaStatus)
                    .HasMaxLength(50)
                    .HasColumnName("PA_status");

                entity.Property(e => e.PaTimeType)
                    .HasMaxLength(50)
                    .HasColumnName("PA_timeType");

                entity.Property(e => e.PaType)
                    .HasMaxLength(50)
                    .HasColumnName("PA_type");

                entity.Property(e => e.PaYear)
                    .HasMaxLength(50)
                    .HasColumnName("PA_year");

                entity.Property(e => e.StartTime).HasMaxLength(50);
            });

            modelBuilder.Entity<TccPartyAmountInformation>(entity =>
            {
                entity.ToTable("TCC_PartyAmountInformation");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("缴纳党费金额");

                entity.Property(e => e.BankNo)
                    .HasMaxLength(50)
                    .HasComment("银行卡号");

                entity.Property(e => e.BusinessDate)
                    .HasMaxLength(50)
                    .HasComment("交易日期");

                entity.Property(e => e.BusinessTime).HasMaxLength(50);

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Remark)
                    .HasMaxLength(200)
                    .HasComment("附言");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(200)
                    .HasComment("备注");

                entity.Property(e => e.Summary)
                    .HasMaxLength(200)
                    .HasComment("摘要");

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .HasComment("姓名");

                entity.Property(e => e.ZhiBu).HasMaxLength(50);

                entity.Property(e => e.ZhiBuCode).HasMaxLength(50);
            });

            modelBuilder.Entity<TccPartyImportErrorReport>(entity =>
            {
                entity.ToTable("TCC_PartyImportErrorReport");

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BankNo).HasMaxLength(50);

                entity.Property(e => e.BusinessDate).HasMaxLength(50);

                entity.Property(e => e.BusinessTime).HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.PatchId)
                    .HasMaxLength(50)
                    .HasComment("批次Id");

                entity.Property(e => e.Remark).HasMaxLength(200);

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.Summary).HasMaxLength(200);

                entity.Property(e => e.UserName).HasMaxLength(50);

                entity.Property(e => e.ZhiBu).HasMaxLength(50);

                entity.Property(e => e.ZhiBuCode).HasMaxLength(50);
            });

            modelBuilder.Entity<TccPartyMoneyInitialization>(entity =>
            {
                entity.ToTable("TCC_PartyMoneyInitialization");

                entity.Property(e => e.DeptName).HasMaxLength(50);

                entity.Property(e => e.PartyMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PartyName).HasMaxLength(50);

                entity.Property(e => e.UserIdentityId).HasMaxLength(50);

                entity.Property(e => e.UserName).HasMaxLength(50);
            });

            modelBuilder.Entity<TccPartyValueInfo>(entity =>
            {
                entity.ToTable("TCC_PartyValue_Info");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DtC01).HasColumnName("DT_C01");

                entity.Property(e => e.DtC02).HasColumnName("DT_C02");

                entity.Property(e => e.DtD01).HasColumnName("DT_D01");

                entity.Property(e => e.DtD02).HasColumnName("DT_D02");

                entity.Property(e => e.DtE01).HasColumnName("DT_E01");

                entity.Property(e => e.DtE02).HasColumnName("DT_E02");

                entity.Property(e => e.DtF01).HasColumnName("DT_F01");

                entity.Property(e => e.DtF02).HasColumnName("DT_F02");

                entity.Property(e => e.DtG01).HasColumnName("DT_G01");

                entity.Property(e => e.DtG02).HasColumnName("DT_G02");

                entity.Property(e => e.DtH01).HasColumnName("DT_H01");

                entity.Property(e => e.DtH02).HasColumnName("DT_H02");

                entity.Property(e => e.DtI01).HasColumnName("DT_I01");

                entity.Property(e => e.DtI02).HasColumnName("DT_I02");

                entity.Property(e => e.DtJ01).HasColumnName("DT_J01");

                entity.Property(e => e.DtJ02).HasColumnName("DT_J02");

                entity.Property(e => e.DtK01).HasColumnName("DT_K01");

                entity.Property(e => e.DtL01).HasColumnName("DT_L01");

                entity.Property(e => e.DtM).HasColumnName("DT_M");

                entity.Property(e => e.PersonName).HasMaxLength(50);

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");

                entity.Property(e => e.SurveyAccount).HasMaxLength(50);

                entity.Property(e => e.SurveyName).HasMaxLength(50);
            });

            modelBuilder.Entity<TccPartyValueSubmit>(entity =>
            {
                entity.ToTable("TCC_PartyValue_Submit");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");

                entity.Property(e => e.SurveyAccount).HasMaxLength(50);
            });

            modelBuilder.Entity<TccPartyValueUser>(entity =>
            {
                entity.ToTable("TCC_PartyValue_User");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Account).HasMaxLength(50);

                entity.Property(e => e.PartyDepCode).HasMaxLength(50);

                entity.Property(e => e.PartyDepName).HasMaxLength(300);

                entity.Property(e => e.PersonName).HasMaxLength(50);
            });

            modelBuilder.Entity<TccPayMedicalInsuranceFeeDetail>(entity =>
            {
                entity.ToTable("TCC_PayMedicalInsuranceFeeDetails");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("金额");

                entity.Property(e => e.ApplyPersonLogin)
                    .HasMaxLength(50)
                    .HasComment("申请人账号");

                entity.Property(e => e.Incident).HasComment("流程实例号");

                entity.Property(e => e.PersonDeptCode)
                    .HasMaxLength(50)
                    .HasComment("部门编号");

                entity.Property(e => e.PersonDeptName)
                    .HasMaxLength(50)
                    .HasComment("部门名称");

                entity.Property(e => e.PersonName)
                    .HasMaxLength(50)
                    .HasComment("姓名");

                entity.Property(e => e.PersonUseridentity)
                    .HasMaxLength(50)
                    .HasComment("身份证号");

                entity.Property(e => e.Pid)
                    .HasColumnName("PID")
                    .HasComment("外键");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名");
            });

            modelBuilder.Entity<TccPayMedicalInsuranceFeeHeader>(entity =>
            {
                entity.ToTable("TCC_PayMedicalInsuranceFeeHeader");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AttachmentNum)
                    .HasDefaultValueSql("((0))")
                    .HasComment("附件张数");

                entity.Property(e => e.BankAccount)
                    .HasMaxLength(50)
                    .HasComment("银行账号");

                entity.Property(e => e.ConfirmAuditDate)
                    .HasColumnType("datetime")
                    .HasComment("审核时间");

                entity.Property(e => e.ConfirmAuditLoginName)
                    .HasMaxLength(50)
                    .HasComment("财务业务审核人登录名");

                entity.Property(e => e.ConfirmAuditName)
                    .HasMaxLength(50)
                    .HasComment("财务业务审核人姓名");

                entity.Property(e => e.ConfirmAuditUserIdentity)
                    .HasMaxLength(50)
                    .HasComment("财务业务审核人身份证号");

                entity.Property(e => e.ConfirmDate)
                    .HasColumnType("datetime")
                    .HasComment("接单时间");

                entity.Property(e => e.ConfirmFinaceName)
                    .HasMaxLength(50)
                    .HasComment("财务接单人姓名");

                entity.Property(e => e.ConfirmLoginName)
                    .HasMaxLength(50)
                    .HasComment("财务接单人登录名");

                entity.Property(e => e.ConfirmStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.ConfirmUserIdentity)
                    .HasMaxLength(50)
                    .HasComment("财务接单人身份证号");

                entity.Property(e => e.ExpenseCategory).HasComment("报销类型");

                entity.Property(e => e.ExpenseCategoryName).HasMaxLength(50);

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(50)
                    .HasComment("表单编号");

                entity.Property(e => e.Incident).HasComment("流程实例号");

                entity.Property(e => e.Location).HasComment("报销地点");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(50)
                    .HasComment("报销地点");

                entity.Property(e => e.MoneyActual)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("实报金额");

                entity.Property(e => e.MoneyShallBig)
                    .HasMaxLength(200)
                    .HasColumnName("MoneyShall_big")
                    .HasComment("报销金额合计（大写）");

                entity.Property(e => e.MoneyShallSmall)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MoneyShall_small")
                    .HasComment("报销金额合计");

                entity.Property(e => e.PaymentMethod).HasComment("付款方式编号");

                entity.Property(e => e.PaymentType)
                    .HasMaxLength(50)
                    .HasComment("付款方式");

                entity.Property(e => e.PayorBank)
                    .HasMaxLength(200)
                    .HasComment("付款银行");

                entity.Property(e => e.PayorBankCode)
                    .HasMaxLength(50)
                    .HasComment("付款银行编号");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名");

                entity.Property(e => e.ProcessStatus)
                    .HasDefaultValueSql("((0))")
                    .HasComment("流程状态");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date")
                    .HasComment("申请时间");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptCode")
                    .HasComment("主管部门编号");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptName")
                    .HasComment("主管部门名称");

                entity.Property(e => e.RequestFinishDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_FinishDate")
                    .HasComment("流程结束时间");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName")
                    .HasComment("申请人账号");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName")
                    .HasComment("申请人姓名");

                entity.Property(e => e.RequestTelPhone)
                    .HasMaxLength(50)
                    .HasColumnName("Request_TelPhone")
                    .HasComment("联系电话");

                entity.Property(e => e.RequestUserIdentity)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserIdentity")
                    .HasComment("申请人身份证号");

                entity.Property(e => e.RequestUserPost)
                    .HasColumnName("Request_UserPost")
                    .HasComment("岗位等级");

                entity.Property(e => e.Summmay).HasMaxLength(500);

                entity.Property(e => e.Voucherid).HasColumnName("VOUCHERID");
            });

            modelBuilder.Entity<TccPayMentType>(entity =>
            {
                entity.ToTable("TCC_PayMentType");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.PayMent).HasMaxLength(50);
            });

            modelBuilder.Entity<TccPaymentHistory>(entity =>
            {
                entity.ToTable("TCC_PaymentHistory");

                entity.HasIndex(e => e.ProjectCode, "IX_TCC_PaymentHistory");

                entity.HasIndex(e => e.ContractCode, "IX_TCC_PaymentHistory_1");

                entity.HasIndex(e => e.Ppid, "IX_TCC_PaymentHistory_2");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.AccountingTime)
                    .HasColumnType("datetime")
                    .HasComment("出纳确认时间（到帐时间）　");

                entity.Property(e => e.ActualCurrency)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ActualCurrencyPaymentAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ActualCurrencyPaymentExchange).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ApplicationCode).HasComment("用途");

                entity.Property(e => e.ApplicationName)
                    .HasMaxLength(50)
                    .HasComment("用途");

                entity.Property(e => e.ChangeLocalCurrencyAmount)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("折人民币金额");

                entity.Property(e => e.CompanyCode)
                    .HasMaxLength(50)
                    .HasComment("供应商代码");

                entity.Property(e => e.CompanyName)
                    .HasMaxLength(1000)
                    .HasComment("供应商名称");

                entity.Property(e => e.ContractAmountTotal)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("合同总价");

                entity.Property(e => e.ContractCategory)
                    .HasMaxLength(50)
                    .HasComment("合同类型");

                entity.Property(e => e.ContractCode)
                    .HasMaxLength(200)
                    .HasComment("合同编号");

                entity.Property(e => e.ContractCurrencyType)
                    .HasMaxLength(50)
                    .HasComment("合同币种\r\n");

                entity.Property(e => e.ContractName)
                    .HasMaxLength(500)
                    .HasComment("合同名称");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("创建时间");

                entity.Property(e => e.Currency)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("币种");

                entity.Property(e => e.DepartCode)
                    .HasMaxLength(50)
                    .HasComment("部门编号");

                entity.Property(e => e.DepartName)
                    .HasMaxLength(50)
                    .HasComment("部门名称");

                entity.Property(e => e.Exchange)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("汇率");

                entity.Property(e => e.Fcsid)
                    .HasColumnName("FCSID")
                    .HasComment("出纳确认表主键");

                entity.Property(e => e.Finalengineeringcost)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FineAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("罚款");

                entity.Property(e => e.Handing)
                    .HasMaxLength(50)
                    .HasComment("经手人");

                entity.Property(e => e.HandingIdnumber)
                    .HasMaxLength(50)
                    .HasColumnName("HandingIDNumber")
                    .HasComment("经手人身份证号");

                entity.Property(e => e.InputVat)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("InputVAT")
                    .HasComment("增值税");

                entity.Property(e => e.LinkFormNumber)
                    .HasMaxLength(50)
                    .HasComment("关联表单号");

                entity.Property(e => e.MainContractCurrency)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("主合同币种");

                entity.Property(e => e.MainExchange)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("对应代购主合同汇率");

                entity.Property(e => e.MainRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MainRMB")
                    .HasComment("对应代购主合同金额");

                entity.Property(e => e.Operater)
                    .HasMaxLength(50)
                    .HasComment("操作人");

                entity.Property(e => e.OperaterIdnumber)
                    .HasMaxLength(50)
                    .HasColumnName("OperaterIDNumber")
                    .HasComment("操作人身份证号");

                entity.Property(e => e.OtherBuy)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("扣代购款");

                entity.Property(e => e.OtherCost)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("其它费用");

                entity.Property(e => e.PayContractExchange)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("合同汇率");

                entity.Property(e => e.PaymentActualPayments)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("实付金额");

                entity.Property(e => e.PaymentAmount)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("付款金额");

                entity.Property(e => e.PaymentCodes)
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasComment("单据号");

                entity.Property(e => e.PaymentContractAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("汇率额定金额");

                entity.Property(e => e.PaymentDescription).HasMaxLength(500);

                entity.Property(e => e.PaymentMethod).HasComment("付款方式value");

                entity.Property(e => e.PaymentMethodName)
                    .HasMaxLength(50)
                    .HasComment("付款方式");

                entity.Property(e => e.PaymentNode).HasComment("付款结点：1.预付款;2.进度款；3.质保金；4.其他");

                entity.Property(e => e.PaymentNodeName)
                    .HasMaxLength(50)
                    .HasComment("付款结点：1.预付款;2.进度款；3.质保金；4.其他");

                entity.Property(e => e.PaymentOtherPaymentTotal)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("其它付款，农民工钱");

                entity.Property(e => e.PaymentPayableAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("应付金额");

                entity.Property(e => e.PaymentWithholdingAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("扣款金额");

                entity.Property(e => e.Ppid)
                    .HasColumnName("PPID")
                    .HasComment("付款流程主键");

                entity.Property(e => e.Pppid)
                    .HasColumnName("PPPID")
                    .HasComment("PaymentInfo主键");

                entity.Property(e => e.ProcessFinishDate)
                    .HasColumnType("datetime")
                    .HasComment("完结时间");

                entity.Property(e => e.ProjectCategory)
                    .HasMaxLength(50)
                    .HasComment("项目类型。poweron");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(200)
                    .HasComment("项目代号");

                entity.Property(e => e.ProjectCodeDev)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("项目显示编号（用于-01)自筹项目");

                entity.Property(e => e.ProjectContractAmount)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("项目付款合同额");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(200)
                    .HasComment("项目名称");

                entity.Property(e => e.ProjectPaymentAmount)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("已付款额");

                entity.Property(e => e.ProjectType).HasComment("项目类型value：1:epc；2：非epc");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasComment("申请时间");

                entity.Property(e => e.RequestFormNumber)
                    .HasMaxLength(50)
                    .HasComment("申请表编号");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasComment("申请人登陆名");

                entity.Property(e => e.RequestPayCategory).HasComment("付款类型value");

                entity.Property(e => e.RequestPayCategoryName)
                    .HasMaxLength(50)
                    .HasComment("付款类型text");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasComment("申请人名称");

                entity.Property(e => e.RequestType).HasComment("申请类型:1.项目类型;2.非项目类型");

                entity.Property(e => e.RequestTypeName)
                    .HasMaxLength(50)
                    .HasComment("申请类型:1.项目类型;2.非项目类型");

                entity.Property(e => e.RequsetSfzh)
                    .HasMaxLength(50)
                    .HasComment("申请人身份证");

                entity.Property(e => e.Sheamount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("SHEAmount")
                    .HasComment("施工用，SHE费用");

                entity.Property(e => e.SignSupplierCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("签约编号");

                entity.Property(e => e.SignSupplierName)
                    .HasMaxLength(1200)
                    .HasComment("签约公司");

                entity.Property(e => e.VoucherId)
                    .HasColumnName("VoucherID")
                    .HasComment("入帐主键");

                entity.Property(e => e.WithholdingTax)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("代扣税");

                entity.Property(e => e.WithoutInputVat)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("WithoutInputVAT")
                    .HasComment("扣增值税");

                entity.Property(e => e.WithoutOtherTax)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("代扣其它税");
            });

            modelBuilder.Entity<TccPaymentHistoryInit>(entity =>
            {
                entity.ToTable("TCC_PaymentHistory_Init");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.AccountingTime).HasColumnType("datetime");

                entity.Property(e => e.ChangeLocalCurrencyAmount)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("折人民币金额");

                entity.Property(e => e.CompanyCode)
                    .HasMaxLength(50)
                    .HasComment("供应商代码");

                entity.Property(e => e.CompanyName)
                    .HasMaxLength(50)
                    .HasComment("供应商名称");

                entity.Property(e => e.ContractAmountTotal)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("合同总价");

                entity.Property(e => e.ContractCode)
                    .HasMaxLength(200)
                    .HasComment("合同编号");

                entity.Property(e => e.ContractCurrencyType)
                    .HasMaxLength(50)
                    .HasComment("合同币种\r\n");

                entity.Property(e => e.ContractName)
                    .HasMaxLength(200)
                    .HasComment("合同名称");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("创建时间");

                entity.Property(e => e.Currency)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("币种");

                entity.Property(e => e.DepartCode).HasMaxLength(50);

                entity.Property(e => e.DepartName).HasMaxLength(50);

                entity.Property(e => e.Exchange).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Handing)
                    .HasMaxLength(50)
                    .HasComment("经手人");

                entity.Property(e => e.HandingIdnumber)
                    .HasMaxLength(50)
                    .HasColumnName("HandingIDNumber")
                    .HasComment("经手人身份证号");

                entity.Property(e => e.Operater)
                    .HasMaxLength(50)
                    .HasComment("操作人");

                entity.Property(e => e.OperaterIdnumber)
                    .HasMaxLength(50)
                    .HasColumnName("OperaterIDNumber")
                    .HasComment("操作人身份证号");

                entity.Property(e => e.PaymentAmount)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("付款金额");

                entity.Property(e => e.PaymentMethod).HasComment("付款方式value");

                entity.Property(e => e.PaymentMethodName)
                    .HasMaxLength(50)
                    .HasComment("付款方式");

                entity.Property(e => e.PaymentNode).HasComment("付款结点：1.预付款;2.进度款；3.质保金；4.其他");

                entity.Property(e => e.PaymentNodeName)
                    .HasMaxLength(50)
                    .HasComment("付款结点：1.预付款;2.进度款；3.质保金；4.其他");

                entity.Property(e => e.Ppid)
                    .HasColumnName("PPID")
                    .HasComment("付款流程主键");

                entity.Property(e => e.ProcessFinishDate)
                    .HasColumnType("datetime")
                    .HasComment("完结时间");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(200)
                    .HasComment("项目代号");

                entity.Property(e => e.ProjectContractAmount)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("项目付款合同额");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(200)
                    .HasComment("项目名称");

                entity.Property(e => e.ProjectPaymentAmount)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("已付款额");

                entity.Property(e => e.ProjectType).HasComment("项目类型value：1:epc；2：非epc");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasComment("申请时间");

                entity.Property(e => e.RequestFormNumber)
                    .HasMaxLength(50)
                    .HasComment("申请表编号");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasComment("申请人登陆名");

                entity.Property(e => e.RequestPayCategory).HasComment("付款类型value");

                entity.Property(e => e.RequestPayCategoryName)
                    .HasMaxLength(50)
                    .HasComment("付款类型text");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasComment("申请人名称");

                entity.Property(e => e.RequestType).HasComment("申请类型:1.项目类型;2.非项目类型");

                entity.Property(e => e.RequestTypeName)
                    .HasMaxLength(50)
                    .HasComment("申请类型:1.项目类型;2.非项目类型");

                entity.Property(e => e.RequsetSfzh)
                    .HasMaxLength(50)
                    .HasComment("申请人身份证");
            });

            modelBuilder.Entity<TccPaymentHistoryNotProject>(entity =>
            {
                entity.ToTable("TCC_PaymentHistoryNotProject");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.AccountingTime)
                    .HasColumnType("datetime")
                    .HasComment("审核时间");

                entity.Property(e => e.ApplicationCode).HasComment("用途");

                entity.Property(e => e.ApplicationName)
                    .HasMaxLength(50)
                    .HasComment("用途");

                entity.Property(e => e.ChangeLocalCurrencyAmount)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("折人民币金额");

                entity.Property(e => e.CompanyCode)
                    .HasMaxLength(50)
                    .HasComment("部门编号");

                entity.Property(e => e.CompanyName)
                    .HasMaxLength(1000)
                    .HasComment("部门编号");

                entity.Property(e => e.ContractAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("合同金额");

                entity.Property(e => e.ContractCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("合同编号");

                entity.Property(e => e.ContractCurrencyType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("付款币种");

                entity.Property(e => e.ContractName)
                    .HasMaxLength(500)
                    .HasComment("合同名称");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasComment("创建时间");

                entity.Property(e => e.Currency)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("币种");

                entity.Property(e => e.Exchange)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("汇率");

                entity.Property(e => e.Handing)
                    .HasMaxLength(50)
                    .HasComment("经手人");

                entity.Property(e => e.HandingIdnumber)
                    .HasMaxLength(50)
                    .HasColumnName("HandingIDNumber")
                    .HasComment("经手人身份证");

                entity.Property(e => e.InputVat)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("InputVAT")
                    .HasComment("增值税");

                entity.Property(e => e.IsContract).HasComment("是否合同;1：是，２不是");

                entity.Property(e => e.Location).HasComment("1天津2北京");

                entity.Property(e => e.Operater)
                    .HasMaxLength(50)
                    .HasComment("操作人");

                entity.Property(e => e.OperaterIdnumber)
                    .HasMaxLength(50)
                    .HasColumnName("OperaterIDNumber")
                    .HasComment("操作人身份证号");

                entity.Property(e => e.OtherTax)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("代扣其它税");

                entity.Property(e => e.PaymentAmount)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("金额");

                entity.Property(e => e.PaymentApplyAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("申请付款金额");

                entity.Property(e => e.PaymentCodes)
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasComment("票据编号");

                entity.Property(e => e.PaymentDescription)
                    .HasMaxLength(500)
                    .HasComment("说明");

                entity.Property(e => e.PaymentMethod).HasComment("付款方式");

                entity.Property(e => e.PaymentMethodName)
                    .HasMaxLength(50)
                    .HasComment("付款方式");

                entity.Property(e => e.PaymentNode).HasComment("付款结点：1.预付款;2.进度款；3.质保金；4.其他");

                entity.Property(e => e.PaymentNodeName)
                    .HasMaxLength(50)
                    .HasComment("付款结点：1.预付款;2.进度款；3.质保金；4.其他");

                entity.Property(e => e.PaymentVoucherDeptCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("承担部门");

                entity.Property(e => e.PaymentVoucherDeptName)
                    .HasMaxLength(50)
                    .HasComment("承担部门");

                entity.Property(e => e.Ppid)
                    .HasColumnName("PPID")
                    .HasComment("流程主键");

                entity.Property(e => e.Pppid)
                    .HasColumnName("PPPID")
                    .HasComment("付款paymentinfo表中的ID");

                entity.Property(e => e.ProcessFinishDate)
                    .HasColumnType("datetime")
                    .HasComment("流程完成时间");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasComment("申请时间");

                entity.Property(e => e.RequestDepartCode)
                    .HasMaxLength(50)
                    .HasComment("申请部门");

                entity.Property(e => e.RequestDepartName)
                    .HasMaxLength(50)
                    .HasComment("申请部门");

                entity.Property(e => e.RequestFormNumber)
                    .HasMaxLength(50)
                    .HasComment("单号");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasComment("申请人");

                entity.Property(e => e.RequestPayCategory).HasComment("付款类型");

                entity.Property(e => e.RequestPayCategoryName)
                    .HasMaxLength(50)
                    .HasComment("付款类型");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasComment("申请人");

                entity.Property(e => e.RequestType).HasComment("申请类型");

                entity.Property(e => e.RequestTypeName)
                    .HasMaxLength(50)
                    .HasComment("申请类型");

                entity.Property(e => e.RequsetSfzh)
                    .HasMaxLength(50)
                    .HasComment("申请人身份证");

                entity.Property(e => e.SignSupplierCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("签约编号");

                entity.Property(e => e.SignSupplierName)
                    .HasMaxLength(1200)
                    .HasComment("签约公司");

                entity.Property(e => e.VoucherId)
                    .HasColumnName("VoucherID")
                    .HasComment("入帐主键");

                entity.Property(e => e.WithoutInputVat)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("WithoutInputVAT")
                    .HasComment("代扣增值税");
            });

            modelBuilder.Entity<TccPaymentHistoryTmpForModifyHisoty>(entity =>
            {
                entity.ToTable("TCC_PaymentHistory_Tmp_ForModifyHisoty");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AccountingTime).HasColumnType("datetime");

                entity.Property(e => e.ActualCurrency)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ActualCurrencyPaymentAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ActualCurrencyPaymentExchange).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ApplicationName).HasMaxLength(50);

                entity.Property(e => e.ChangeLocalCurrencyAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.CompanyCode).HasMaxLength(50);

                entity.Property(e => e.CompanyName).HasMaxLength(1000);

                entity.Property(e => e.ContractAmountTotal).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ContractCategory).HasMaxLength(50);

                entity.Property(e => e.ContractCode).HasMaxLength(200);

                entity.Property(e => e.ContractCurrencyType).HasMaxLength(50);

                entity.Property(e => e.ContractName).HasMaxLength(500);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Currency)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DepartCode).HasMaxLength(50);

                entity.Property(e => e.DepartName).HasMaxLength(50);

                entity.Property(e => e.Exchange).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Fcsid).HasColumnName("FCSID");

                entity.Property(e => e.Finalengineeringcost)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FineAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Handing).HasMaxLength(50);

                entity.Property(e => e.HandingIdnumber)
                    .HasMaxLength(50)
                    .HasColumnName("HandingIDNumber");

                entity.Property(e => e.InputVat)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("InputVAT");

                entity.Property(e => e.LinkFormNumber).HasMaxLength(50);

                entity.Property(e => e.MainContractCurrency)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.MainExchange).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.MainRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MainRMB");

                entity.Property(e => e.Operater).HasMaxLength(50);

                entity.Property(e => e.OperaterIdnumber)
                    .HasMaxLength(50)
                    .HasColumnName("OperaterIDNumber");

                entity.Property(e => e.OtherBuy).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OtherCost).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PayContractExchange).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.PaymentActualPayments).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PaymentAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PaymentCodes)
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentContractAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PaymentDescription).HasMaxLength(500);

                entity.Property(e => e.PaymentMethodName).HasMaxLength(50);

                entity.Property(e => e.PaymentNodeName).HasMaxLength(50);

                entity.Property(e => e.PaymentOtherPaymentTotal).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PaymentPayableAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PaymentWithholdingAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.Pppid).HasColumnName("PPPID");

                entity.Property(e => e.ProcessFinishDate).HasColumnType("datetime");

                entity.Property(e => e.ProjectCategory).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(200);

                entity.Property(e => e.ProjectCodeDev)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectContractAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ProjectName).HasMaxLength(200);

                entity.Property(e => e.ProjectPaymentAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RequestDate).HasColumnType("datetime");

                entity.Property(e => e.RequestFormNumber).HasMaxLength(50);

                entity.Property(e => e.RequestLoginName).HasMaxLength(50);

                entity.Property(e => e.RequestPayCategoryName).HasMaxLength(50);

                entity.Property(e => e.RequestRealName).HasMaxLength(50);

                entity.Property(e => e.RequestTypeName).HasMaxLength(50);

                entity.Property(e => e.RequsetSfzh).HasMaxLength(50);

                entity.Property(e => e.Sheamount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("SHEAmount");

                entity.Property(e => e.SignSupplierCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SignSupplierName).HasMaxLength(1200);

                entity.Property(e => e.VoucherId).HasColumnName("VoucherID");

                entity.Property(e => e.WithholdingTax).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.WithoutInputVat)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("WithoutInputVAT");

                entity.Property(e => e.WithoutOtherTax).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<TccPaymentProcess>(entity =>
            {
                entity.ToTable("TCC_PaymentProcess");

                entity.HasIndex(e => new { e.ProcessName, e.Incident }, "IX_TCC_PaymentProcess");

                entity.HasIndex(e => new { e.ProcessName, e.Incident }, "idx_TCC_PaymentProcess_pr_inc");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.AccountingAuditDate)
                    .HasColumnType("datetime")
                    .HasComment("财务审核日期");

                entity.Property(e => e.AccountingAuditLoginUserName)
                    .HasMaxLength(50)
                    .HasComment("财务审核人登陆名");

                entity.Property(e => e.AccountingAuditUserName)
                    .HasMaxLength(50)
                    .HasComment("财务审核人");

                entity.Property(e => e.Approver1)
                    .HasMaxLength(50)
                    .HasComment("审核人");

                entity.Property(e => e.Approver1LoginName)
                    .HasMaxLength(50)
                    .HasComment("审批人登陆名");

                entity.Property(e => e.Approver2)
                    .HasMaxLength(50)
                    .HasComment("审批级别：1财务前审批；2财务后审批");

                entity.Property(e => e.Approver2LoginName).HasMaxLength(50);

                entity.Property(e => e.Attachment).HasComment("附件张数");

                entity.Property(e => e.CasierClaimLoginUserName)
                    .HasMaxLength(50)
                    .HasComment("接单会计登陆名");

                entity.Property(e => e.CasierClaimUserName)
                    .HasMaxLength(50)
                    .HasComment("接单会计名称");

                entity.Property(e => e.ChangeLocalCurrencyAmount)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("折本地金额");

                entity.Property(e => e.ContractAmountChange)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("变更金额");

                entity.Property(e => e.ContractAmountContract)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("签约金额");

                entity.Property(e => e.ContractAmountTotal)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("合同总价");

                entity.Property(e => e.ContractAmountTotalPayment)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("累计付款总额");

                entity.Property(e => e.ContractAmountTotalPaymentPercentage)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("累计付款比例");

                entity.Property(e => e.ContractAmountTotalTimePayment)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("本次累计付款总额");

                entity.Property(e => e.ContractAmountTotalTimePaymentPercentage)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("本次累计付款比例");

                entity.Property(e => e.ContractCategory)
                    .HasMaxLength(50)
                    .HasComment("合同类型");

                entity.Property(e => e.ContractCode)
                    .HasMaxLength(200)
                    .HasComment("合同编号");

                entity.Property(e => e.ContractCurrencyType)
                    .HasMaxLength(50)
                    .HasComment("合同币种\r\n");

                entity.Property(e => e.ContractForm)
                    .HasMaxLength(50)
                    .HasComment("合同形式：1固定单价	2固定总价	3成本加酬金	4可调价或其它");

                entity.Property(e => e.ContractName)
                    .HasMaxLength(200)
                    .HasComment("合同名称");

                entity.Property(e => e.ContractUnitCode)
                    .HasMaxLength(50)
                    .HasComment("签约单位编号");

                entity.Property(e => e.ContractUnitName)
                    .HasMaxLength(50)
                    .HasComment("签约单位名称");

                entity.Property(e => e.Exchange)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("汇率");

                entity.Property(e => e.FinanceCheckBank)
                    .HasMaxLength(100)
                    .HasComment("支票银行");

                entity.Property(e => e.FinanceCheckBankAccount)
                    .HasMaxLength(50)
                    .HasComment("支票银行帐号");

                entity.Property(e => e.FinanceCheckSubjectCode)
                    .HasMaxLength(50)
                    .HasComment("财务支票科目编号");

                entity.Property(e => e.FinanceCheckSubjectName)
                    .HasMaxLength(50)
                    .HasComment("财务支票科目名称");

                entity.Property(e => e.FinanceDraftAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("汇票金额");

                entity.Property(e => e.FinanceDraftEnabledAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("支付汇票金额");

                entity.Property(e => e.FinanceDraftMode)
                    .HasMaxLength(50)
                    .HasComment("汇票模式：single单汇票;multiton多汇票");

                entity.Property(e => e.FinanceDraftSurplusAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("剩余汇票金额");

                entity.Property(e => e.FinanceDraftTotal)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("汇票库存总额");

                entity.Property(e => e.FinanceEntrySubject)
                    .HasMaxLength(50)
                    .HasComment("入帐科目value");

                entity.Property(e => e.FinanceEntrySubjectName)
                    .HasMaxLength(50)
                    .HasComment("入帐科目text");

                entity.Property(e => e.FinancePaymentAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("付款金额");

                entity.Property(e => e.FinancePaymentBank)
                    .HasMaxLength(100)
                    .HasComment("电汇银行");

                entity.Property(e => e.FinancePaymentBankAccount)
                    .HasMaxLength(50)
                    .HasComment("电汇银行帐号　");

                entity.Property(e => e.FinancePaymentSubjectCode)
                    .HasMaxLength(50)
                    .HasComment("电汇科目编号");

                entity.Property(e => e.FinancePaymentSubjectName)
                    .HasMaxLength(50)
                    .HasComment("电汇科目名称");

                entity.Property(e => e.FinancePaymentTotal)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("本次付款总额");

                entity.Property(e => e.Incident).HasComment("实例号");

                entity.Property(e => e.IsLock).HasComment("是否锁定，用于财务接单、财务业务审核中使用。１锁定２未锁定");

                entity.Property(e => e.LockLoginUserName)
                    .HasMaxLength(50)
                    .HasComment("锁定人登录名");

                entity.Property(e => e.LockUserName)
                    .HasMaxLength(50)
                    .HasComment("锁定人姓名");

                entity.Property(e => e.PaymentAbacode)
                    .HasMaxLength(50)
                    .HasColumnName("PaymentABACode")
                    .HasComment("ABC Code");

                entity.Property(e => e.PaymentAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("付款金额");

                entity.Property(e => e.PaymentAmountLowercase)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("本次付款金额（小写）");

                entity.Property(e => e.PaymentAmountUppercase)
                    .HasMaxLength(500)
                    .HasComment("本次付款金额（大写）");

                entity.Property(e => e.PaymentBankAccount)
                    .HasMaxLength(50)
                    .HasComment("开户行帐号");

                entity.Property(e => e.PaymentBankName)
                    .HasMaxLength(50)
                    .HasComment("开户行");

                entity.Property(e => e.PaymentBankTemplate)
                    .HasMaxLength(50)
                    .HasComment("模版选用银行");

                entity.Property(e => e.PaymentCommercialInvoiceCode)
                    .HasMaxLength(50)
                    .HasComment("商业发票编号");

                entity.Property(e => e.PaymentContractPaymentDate)
                    .HasColumnType("datetime")
                    .HasComment("约定付款时间");

                entity.Property(e => e.PaymentCreditAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("信用证金额");

                entity.Property(e => e.PaymentCurrency)
                    .HasMaxLength(50)
                    .HasComment("币种");

                entity.Property(e => e.PaymentDescription)
                    .HasMaxLength(500)
                    .HasComment("付款说明");

                entity.Property(e => e.PaymentFundMode).HasComment("款项类型value:1境外承包工程出口物资/2项目当地或国外采购物资/3进口设备关税");

                entity.Property(e => e.PaymentFundModeName)
                    .HasMaxLength(50)
                    .HasComment("款项类型name");

                entity.Property(e => e.PaymentGuanDanCode)
                    .HasMaxLength(50)
                    .HasComment("关单编号");

                entity.Property(e => e.PaymentGuanDanCurrency)
                    .HasMaxLength(50)
                    .HasComment("关单货币");

                entity.Property(e => e.PaymentGuanDanGoodsName)
                    .HasMaxLength(50)
                    .HasComment("关单物品");

                entity.Property(e => e.PaymentGuanDanTotal)
                    .HasMaxLength(50)
                    .HasComment("关单总额");

                entity.Property(e => e.PaymentIbanCode)
                    .HasMaxLength(50)
                    .HasComment("Iban Code");

                entity.Property(e => e.PaymentLineNumbers)
                    .HasMaxLength(50)
                    .HasComment("联行行号");

                entity.Property(e => e.PaymentMethod).HasComment("付款方式：1.电汇；2.转帐支票；3.信用证；4.其他金额");

                entity.Property(e => e.PaymentMethodName)
                    .HasMaxLength(50)
                    .HasComment("付款方式：1.电汇；2.转帐支票；3.信用证；4.其他金额");

                entity.Property(e => e.PaymentNode).HasComment("付款结点：1.预付款;2.进度款；3.质保金；4.其他");

                entity.Property(e => e.PaymentNodeName)
                    .HasMaxLength(50)
                    .HasComment("付款结点：1.预付款;2.进度款；3.质保金；4.其他");

                entity.Property(e => e.PaymentReceiptCode)
                    .HasMaxLength(50)
                    .HasComment("形式发票/收据编号");

                entity.Property(e => e.PaymentReceivingCompanyAddress)
                    .HasMaxLength(500)
                    .HasComment("收款单位地址\r\n");

                entity.Property(e => e.PaymentReceivingCompanyCode)
                    .HasMaxLength(50)
                    .HasComment("收款单位编号");

                entity.Property(e => e.PaymentReceivingCompanyName)
                    .HasMaxLength(500)
                    .HasComment("收款单位名称");

                entity.Property(e => e.PaymentSwiftCode)
                    .HasMaxLength(50)
                    .HasComment("Swift Code");

                entity.Property(e => e.PaymentTransportationMode)
                    .HasMaxLength(50)
                    .HasComment("运输方式");

                entity.Property(e => e.PaymentTransportationModeName)
                    .HasMaxLength(50)
                    .HasComment("运输方式名称");

                entity.Property(e => e.ProcessFinishDate)
                    .HasColumnType("datetime")
                    .HasComment("完结日期　");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名");

                entity.Property(e => e.ProcessStatus).HasComment("流程状态  0=未完成 1=归档  2=撤销");

                entity.Property(e => e.ProjectAccountPayable)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("项目应付账款");

                entity.Property(e => e.ProjectCategory)
                    .HasMaxLength(50)
                    .HasComment("项目类型。poweron");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(200)
                    .HasComment("项目代号");

                entity.Property(e => e.ProjectContractAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("项目合同额");

                entity.Property(e => e.ProjectManager)
                    .HasMaxLength(50)
                    .HasComment("项目经理");

                entity.Property(e => e.ProjectManagerIdentityId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("项目经理身份证号");

                entity.Property(e => e.ProjectManagerLoginName)
                    .HasMaxLength(50)
                    .HasComment("项目经理登陆名");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(200)
                    .HasComment("项目名称");

                entity.Property(e => e.ProjectPaymentAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("已付款额");

                entity.Property(e => e.ProjectPaymentContractTotalAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("项目付款合同总额\r\n");

                entity.Property(e => e.ProjectPojectProgressPercentage)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("项目进度百分比");

                entity.Property(e => e.ProjectProfitMargin)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("当前利润");

                entity.Property(e => e.ProjectReceivedAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("已收费额");

                entity.Property(e => e.ProjectReceivedPercentage)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("已收费百分比");

                entity.Property(e => e.ProjectType).HasComment("项目类型value：1:epc；2：非epc");

                entity.Property(e => e.ProjectTypeName)
                    .HasMaxLength(50)
                    .HasComment("项目类型name");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date")
                    .HasComment("申请日期");

                entity.Property(e => e.RequestDate1)
                    .HasColumnType("datetime")
                    .HasColumnName("RequestDate")
                    .HasComment("申请日期");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasComment("申请人所在部门编号");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(200)
                    .HasComment("申请人所在部门名称");

                entity.Property(e => e.RequestFormNumber)
                    .HasMaxLength(20)
                    .HasComment("表单编号");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasComment("申请人登录名\r\n");

                entity.Property(e => e.RequestPayCategory).HasComment("付款类型value");

                entity.Property(e => e.RequestPayCategoryName)
                    .HasMaxLength(50)
                    .HasComment("付款类型text");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasComment("申请人 真实姓名");

                entity.Property(e => e.RequestSfzh)
                    .HasMaxLength(30)
                    .HasComment("申请人身份证号");

                entity.Property(e => e.RequestType).HasComment("申请类型:1.项目类型;2.非项目类型");

                entity.Property(e => e.RequestTypeName)
                    .HasMaxLength(50)
                    .HasComment("申请类型:1.项目类型;2.非项目类型");

                entity.Property(e => e.VoucherCode)
                    .HasMaxLength(50)
                    .HasComment("入帐单号");

                entity.Property(e => e.Voucherid)
                    .HasColumnName("VOUCHERID")
                    .HasComment("Main中对应入帐凭证主键");
            });

            modelBuilder.Entity<TccPaymentProcessDraftInfo>(entity =>
            {
                entity.ToTable("TCC_PaymentProcess_DraftInfo");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.DraftAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("汇票金额");

                entity.Property(e => e.DraftId)
                    .HasColumnName("DraftID")
                    .HasComment("汇票主键");

                entity.Property(e => e.OrderBy).HasComment("排序");

                entity.Property(e => e.PaymentId)
                    .HasColumnName("PaymentID")
                    .HasComment("付款流程主键");
            });

            modelBuilder.Entity<TccPaymentProcessFlowInfo>(entity =>
            {
                entity.ToTable("TCC_PaymentProcess_FlowInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.FelationFlowId)
                    .HasColumnName("FelationFlowID")
                    .HasComment("相关流程");

                entity.Property(e => e.FlowId)
                    .HasColumnName("FlowID")
                    .HasComment("关联最大ID流程");
            });

            modelBuilder.Entity<TccPaymentProcessInit>(entity =>
            {
                entity.ToTable("TCC_PaymentProcess_Init");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CompanyCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("收款单位编号");

                entity.Property(e => e.CompanyName)
                    .HasMaxLength(50)
                    .HasComment("收款单位名");

                entity.Property(e => e.Currency)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Exchange).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.PaymentAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PaymentAmountRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PaymentAmountRMB");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("项目号");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(500)
                    .HasComment("项目名");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("申请部门");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(50)
                    .HasComment("部门名称");

                entity.Property(e => e.RequestFormNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("表单号");

                entity.Property(e => e.RequestPayCategory).HasComment("申请类型");

                entity.Property(e => e.RequestPayCategoryName)
                    .HasMaxLength(50)
                    .HasComment("申请类型");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasComment("申请人");

                entity.Property(e => e.RequestSfzh)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("RequestSFZH")
                    .HasComment("身份证号");

                entity.Property(e => e.RequestloginName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("申请人");
            });

            modelBuilder.Entity<TccPaymentProcessMultiple>(entity =>
            {
                entity.ToTable("TCC_PaymentProcessMultiple");

                entity.HasIndex(e => new { e.RequestType, e.RequestPayCategory, e.ProjectCode }, "IX_nc_TCC_PaymentProcessMultiple_RRP");

                entity.HasIndex(e => new { e.ProcessName, e.Incident }, "idx_nc_TCC_PaymentProcessMultiple_pr_inc");

                entity.HasIndex(e => new { e.ProcessName, e.Incident }, "idx_nc_TCC_PaymentProcessMultiple_pr_inc_ic");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AccountingAuditDate)
                    .HasColumnType("datetime")
                    .HasComment("财务审核日期");

                entity.Property(e => e.AccountingAuditLoginUserName)
                    .HasMaxLength(50)
                    .HasComment("财务审核人登陆名");

                entity.Property(e => e.AccountingAuditUserName)
                    .HasMaxLength(50)
                    .HasComment("财务审核人");

                entity.Property(e => e.Approver1)
                    .HasMaxLength(50)
                    .HasComment("审核人");

                entity.Property(e => e.Approver1LoginName)
                    .HasMaxLength(50)
                    .HasComment("审批人登陆名");

                entity.Property(e => e.Approver2)
                    .HasMaxLength(50)
                    .HasComment("审批级别：1财务前审批；2财务后审批");

                entity.Property(e => e.Approver2LoginName)
                    .HasMaxLength(50)
                    .HasComment("审核人2 ");

                entity.Property(e => e.Attachment).HasComment("附件张数");

                entity.Property(e => e.BalanceValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BillConfirmUserLogin)
                    .HasMaxLength(50)
                    .HasComment("票据归档确认-接单会计帐号");

                entity.Property(e => e.BillConfirmUserName)
                    .HasMaxLength(50)
                    .HasComment("票据归档确认-接单会计姓名");

                entity.Property(e => e.BillFlag).HasComment("1:录入；2:不录入");

                entity.Property(e => e.Budget)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("申请预算");

                entity.Property(e => e.BudgetHappenedAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("已花费预算");

                entity.Property(e => e.BudgetHappeningAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("流程中预算");

                entity.Property(e => e.BudgetRemainAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("剩余预算");

                entity.Property(e => e.BuyForeignAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("外币金额（购汇）");

                entity.Property(e => e.BuyForeignCurrency)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("购汇币种（购汇）");

                entity.Property(e => e.BuyForeignExchange)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("汇率（购汇）");

                entity.Property(e => e.BuyForeignHanderCharge)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("手续费（购汇）");

                entity.Property(e => e.BuyForeignOperateLoginName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("购汇操作人");

                entity.Property(e => e.BuyForeignOperateName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("购汇操作人");

                entity.Property(e => e.BuyForeignOperateTime)
                    .HasColumnType("datetime")
                    .HasComment("购汇时间");

                entity.Property(e => e.BuyForeignPostage)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("邮电费（购汇）");

                entity.Property(e => e.CardBank)
                    .HasMaxLength(50)
                    .HasComment("开卡银行（项目周转金）");

                entity.Property(e => e.CardName)
                    .HasMaxLength(50)
                    .HasComment("持卡人姓名（项目周转金）");

                entity.Property(e => e.CardNo)
                    .HasMaxLength(50)
                    .HasColumnName("CardNO")
                    .HasComment("卡号（项目周转金）");

                entity.Property(e => e.CasierClaimDate)
                    .HasColumnType("datetime")
                    .HasComment("接单提交时间");

                entity.Property(e => e.CasierClaimLoginUserName)
                    .HasMaxLength(50)
                    .HasComment("接单会计登陆名");

                entity.Property(e => e.CasierClaimUserName)
                    .HasMaxLength(50)
                    .HasComment("接单会计名称");

                entity.Property(e => e.ContractExchange)
                    .HasColumnType("decimal(18, 8)")
                    .HasComment("合同汇率");

                entity.Property(e => e.ContractLawsuit).HasComment("是否诉讼合同 1涉诉");

                entity.Property(e => e.ContractType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasComment("合同类型，用来其它付款时，判断是采购经理还是控制经理批");

                entity.Property(e => e.ContractUnitCode)
                    .HasMaxLength(50)
                    .HasComment("合同签定单位编号");

                entity.Property(e => e.ContractUnitJnw)
                    .HasMaxLength(50)
                    .HasComment("境内外");

                entity.Property(e => e.ContractUnitName)
                    .HasMaxLength(50)
                    .HasComment("合同签定单位");

                entity.Property(e => e.DiffValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ExchangeRateDifference)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("汇率差额");

                entity.Property(e => e.ExchangeVoucher)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("税入帐汇率");

                entity.Property(e => e.ExpectedRecoveryDate)
                    .HasColumnType("datetime")
                    .HasComment("预计回收时间");

                entity.Property(e => e.Finalengineeringcost)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FinanceChangeLocalCurrencyAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("付款折人民币金额");

                entity.Property(e => e.FinanceCurrency)
                    .HasMaxLength(50)
                    .HasComment("付款币种");

                entity.Property(e => e.FinanceDecimalDigit).HasComment("汇率小数位数");

                entity.Property(e => e.FinanceDecimalDigitForOther).HasComment("汇率小数位");

                entity.Property(e => e.FinanceDecimalDigitForVat)
                    .HasColumnName("FinanceDecimalDigitForVAT")
                    .HasComment("小数位数");

                entity.Property(e => e.FinanceDraftAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("汇票金额");

                entity.Property(e => e.FinanceDraftEnabledAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("支付汇票金额");

                entity.Property(e => e.FinanceDraftMode)
                    .HasMaxLength(50)
                    .HasComment("汇票模式：single单汇票;multiton多汇票");

                entity.Property(e => e.FinanceDraftSurplusAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("剩余汇票金额");

                entity.Property(e => e.FinanceDraftTotal)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("汇票库存总额");

                entity.Property(e => e.FinanceExchange)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((1))")
                    .HasComment("付款时汇率");

                entity.Property(e => e.FinanceLeaderFlag).HasComment("财务审核人类型。1:0102:2:0235");

                entity.Property(e => e.FinancePaymentAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("付款金额");

                entity.Property(e => e.FinancePaymentBank)
                    .HasMaxLength(100)
                    .HasComment("付款银行");

                entity.Property(e => e.FinancePaymentBankAccount)
                    .HasMaxLength(50)
                    .HasComment("付款银行帐号");

                entity.Property(e => e.FinancePaymentDraftValidAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("可使用汇票金额");

                entity.Property(e => e.FinancePaymentItemSubjectCode)
                    .HasMaxLength(50)
                    .HasComment("付款科目");

                entity.Property(e => e.FinancePaymentItemSubjectName)
                    .HasMaxLength(1000)
                    .HasComment("付款科目");

                entity.Property(e => e.FinancePaymentItemSubjectNameAccount)
                    .HasMaxLength(50)
                    .HasComment("农民工工资帐号");

                entity.Property(e => e.FinancePaymentTotal)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("本次付款总额");

                entity.Property(e => e.FinancePaymentTotalTotal)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("累计实付金额");

                entity.Property(e => e.FinanceSubjectCode)
                    .HasMaxLength(50)
                    .HasComment("入帐科目");

                entity.Property(e => e.FinanceSubjectName)
                    .HasMaxLength(500)
                    .HasComment("入帐科目");

                entity.Property(e => e.FinanceWithHoldingInputVat)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("FinanceWithHoldingInputVAT")
                    .HasComment("预扣增值税");

                entity.Property(e => e.FinanceWithholdingTaxPercentage)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("扣减税率");

                entity.Property(e => e.FineAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("罚款金额");

                entity.Property(e => e.FinnaceCalculateMode).HasComment("操作方式　");

                entity.Property(e => e.FinnaceCalculateModeForOther).HasComment("操作方式　");

                entity.Property(e => e.FinnaceCalculateModeForVat)
                    .HasColumnName("FinnaceCalculateModeForVAT")
                    .HasComment("计算方式");

                entity.Property(e => e.FoundsUsedCode)
                    .HasMaxLength(50)
                    .HasComment("资金用途编号");

                entity.Property(e => e.FoundsUsedName)
                    .HasMaxLength(50)
                    .HasComment("资金用途名称");

                entity.Property(e => e.Incident).HasComment("实例号");

                entity.Property(e => e.InvoiceBillAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("票据金额");

                entity.Property(e => e.InvoiceCategoryText)
                    .HasMaxLength(50)
                    .HasComment("票据类型");

                entity.Property(e => e.InvoiceCategoryValue).HasComment("票据类型");

                entity.Property(e => e.InvoiceTaxAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("票据税率");

                entity.Property(e => e.InvoiceTotalAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("票据合计");

                entity.Property(e => e.InvoicesUnitName)
                    .HasMaxLength(1200)
                    .HasComment("开票单位");

                entity.Property(e => e.IsAdjustDept).HasComment("付款用途使用到的标志位。1为正常验证；2为分担时不验证。");

                entity.Property(e => e.IsAuditType).HasComment("审核类型。非项目付款使用");

                entity.Property(e => e.IsBuyForeign)
                    .HasDefaultValueSql("((0))")
                    .HasComment("是否购汇");

                entity.Property(e => e.IsFile).HasComment("是否要上传附件");

                entity.Property(e => e.IsFinanceHead).HasComment("是否是财务部负责人审核");

                entity.Property(e => e.IsForeign)
                    .HasDefaultValueSql("((0))")
                    .HasComment("票据是否可以录入外币，1可以；0不可以");

                entity.Property(e => e.IsHaveBill)
                    .HasDefaultValueSql("((0))")
                    .HasComment("是否有纸制票据。0没有，1有");

                entity.Property(e => e.IsLock)
                    .HasDefaultValueSql("((2))")
                    .HasComment("是否锁定，用于财务接单、财务业务审核中使用。１锁定２未锁定");

                entity.Property(e => e.IsProjectSingle).HasComment("专业设计使用。是否是单独项目。单独项目走项目经理付款。多项目走项目部设计部");

                entity.Property(e => e.IsSupplierOrCustomer)
                    .HasDefaultValueSql("((1))")
                    .HasComment("供应商、还是客户，保证金时使用，1供应商(默认);2客户 ");

                entity.Property(e => e.IsTaxVoucher).HasComment("是否单列入账");

                entity.Property(e => e.IsValidProject)
                    .HasDefaultValueSql("((1))")
                    .HasComment("是否验证项目1验证;2不验证");

                entity.Property(e => e.LawsuitStatus).HasComment("涉诉状态 0未处理 1已处理");

                entity.Property(e => e.Location)
                    .HasDefaultValueSql("((1))")
                    .HasComment("天津1;北京2;付款地点。其它非项目付款使用");

                entity.Property(e => e.LockLoginUserName)
                    .HasMaxLength(50)
                    .HasComment("锁定人登录名");

                entity.Property(e => e.LockUserName)
                    .HasMaxLength(50)
                    .HasComment("锁定人姓名");

                entity.Property(e => e.OtherCost)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("其它费用");

                entity.Property(e => e.PaymentAbacode)
                    .HasMaxLength(50)
                    .HasColumnName("PaymentABACode")
                    .HasComment("ABC Code");

                entity.Property(e => e.PaymentAcutlCurrencyPaymentAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("实际付款金额");

                entity.Property(e => e.PaymentAirlineTicketAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("机票费");

                entity.Property(e => e.PaymentAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("付款金额");

                entity.Property(e => e.PaymentAmountLowercase)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("本次付款金额（小写）");

                entity.Property(e => e.PaymentAmountUppercase)
                    .HasMaxLength(500)
                    .HasComment("本次付款金额（大写）");

                entity.Property(e => e.PaymentApplicationCode).HasComment("付款用途");

                entity.Property(e => e.PaymentApplicationName)
                    .HasMaxLength(50)
                    .HasComment("付款用途");

                entity.Property(e => e.PaymentBankAccount)
                    .HasMaxLength(50)
                    .HasComment("开户行帐号");

                entity.Property(e => e.PaymentBankAddress)
                    .HasMaxLength(500)
                    .HasComment("付款行地址");

                entity.Property(e => e.PaymentBankName)
                    .HasMaxLength(500)
                    .HasComment("开户行");

                entity.Property(e => e.PaymentBillAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("票据金额，= 应付一扣款");

                entity.Property(e => e.PaymentChangeLocalCurrencyAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("折现金额");

                entity.Property(e => e.PaymentCommercialInvoiceCode)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasComment("商业发票");

                entity.Property(e => e.PaymentContractPaymentDate)
                    .HasColumnType("datetime")
                    .HasComment("约定付款时间");

                entity.Property(e => e.PaymentCurrency)
                    .HasMaxLength(50)
                    .HasComment("币种");

                entity.Property(e => e.PaymentDescription)
                    .HasMaxLength(4000)
                    .HasComment("付款说明");

                entity.Property(e => e.PaymentExchange)
                    .HasColumnType("decimal(18, 8)")
                    .HasComment("汇率");

                entity.Property(e => e.PaymentFundMode).HasComment("款项类型");

                entity.Property(e => e.PaymentFundModeName)
                    .HasMaxLength(50)
                    .HasComment("款项类型value:1境外承包工程出口物资/2项目当地或国外采购物资/3进口设备关税");

                entity.Property(e => e.PaymentGuanDanCode)
                    .HasMaxLength(50)
                    .HasComment("关单编号");

                entity.Property(e => e.PaymentGuanDanCurrency)
                    .HasMaxLength(50)
                    .HasComment("关单货币");

                entity.Property(e => e.PaymentGuanDanGoodsName)
                    .HasMaxLength(50)
                    .HasComment("关单物品");

                entity.Property(e => e.PaymentGuanDanTotal)
                    .HasMaxLength(50)
                    .HasComment("关单总额");

                entity.Property(e => e.PaymentIbanCode)
                    .HasMaxLength(50)
                    .HasComment("Iban Code");

                entity.Property(e => e.PaymentInputVat)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PaymentInputVAT")
                    .HasComment("进项税额");

                entity.Property(e => e.PaymentInputVatvoucher)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PaymentInputVATVoucher")
                    .HasComment("增值税");

                entity.Property(e => e.PaymentLineNumbers)
                    .HasMaxLength(500)
                    .HasComment("联行行号");

                entity.Property(e => e.PaymentLinkFormNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("关联表单号");

                entity.Property(e => e.PaymentMethod).HasComment("付款方式");

                entity.Property(e => e.PaymentMethodName)
                    .HasMaxLength(50)
                    .HasComment("付款方式名称");

                entity.Property(e => e.PaymentOtherAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("其它费用，非合同使用");

                entity.Property(e => e.PaymentOtherBuyPaymentTotal)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("本期扣代购款");

                entity.Property(e => e.PaymentOtherExchange)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("实际付款汇率");

                entity.Property(e => e.PaymentOtherPaymentTotal)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("其它付款（农民工）");

                entity.Property(e => e.PaymentPayableAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("应付金额");

                entity.Property(e => e.PaymentProjectIsEpc)
                    .HasColumnName("PaymentProjectIsEPC")
                    .HasComment("判断项目是否为ec,pc,EPC,用来入帐使用。1是，2否。空为该类型付款不使用。");

                entity.Property(e => e.PaymentReceiptCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("形式发票");

                entity.Property(e => e.PaymentReceivingCompanyAddress)
                    .HasMaxLength(500)
                    .HasComment("收款单位地址\r\n");

                entity.Property(e => e.PaymentReceivingCompanyCode)
                    .HasMaxLength(50)
                    .HasComment("收款单位编号");

                entity.Property(e => e.PaymentReceivingCompanyName)
                    .HasMaxLength(500)
                    .HasComment("收款单位名称");

                entity.Property(e => e.PaymentSource)
                    .HasDefaultValueSql("((0))")
                    .HasComment("付款来源：0申请;1培训费;2用车费");

                entity.Property(e => e.PaymentSwiftCode)
                    .HasMaxLength(50)
                    .HasComment("Swift Code");

                entity.Property(e => e.PaymentTotal)
                    .HasColumnType("decimal(18, 8)")
                    .HasComment("付款合计");

                entity.Property(e => e.PaymentTotalContractAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("合同汇率折算合计金额");

                entity.Property(e => e.PaymentTransportationMode)
                    .HasMaxLength(50)
                    .HasComment("运输方式");

                entity.Property(e => e.PaymentTransportationModeName)
                    .HasMaxLength(50)
                    .HasComment("运输方式名称");

                entity.Property(e => e.PaymentVatcurrency)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PaymentVATCurrency")
                    .HasComment("增值税币种");

                entity.Property(e => e.PaymentVoucherDeptCode)
                    .HasMaxLength(50)
                    .HasComment("费用承担部门");

                entity.Property(e => e.PaymentVoucherDeptName)
                    .HasMaxLength(50)
                    .HasComment("费用承担部门");

                entity.Property(e => e.PaymentWithholdingAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("扣减金额");

                entity.Property(e => e.PaymentWithoutInputVat)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PaymentWithoutInputVAT")
                    .HasComment("代扣增值税");

                entity.Property(e => e.PaymentWithoutInputVatvoucher)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PaymentWithoutInputVATVoucher")
                    .HasComment("代扣增值税");

                entity.Property(e => e.PaymentWithoutOtherTax)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("代扣其它税");

                entity.Property(e => e.PaymentWithoutOtherTaxVoucher)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("扣款入帐");

                entity.Property(e => e.PbillStatus)
                    .HasColumnName("PBillStatus")
                    .HasComment("是否要认证。0：未认证；1：已认证；2：不需认证");

                entity.Property(e => e.PeptjSid)
                    .HasMaxLength(50)
                    .HasColumnName("PeptjSID")
                    .HasComment("普华付款时，使用的SID。用于调整接口。");

                entity.Property(e => e.ProcessFinishDate)
                    .HasColumnType("datetime")
                    .HasComment("完结日期　");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名");

                entity.Property(e => e.ProcessStatus).HasComment("流程状态  0=未完成 1=归档  2=撤销");

                entity.Property(e => e.ProjectAccountPayable)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("项目应付账款");

                entity.Property(e => e.ProjectAdjustProcess)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("项目调整数值");

                entity.Property(e => e.ProjectBkapplyAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ProjectBKApplyAmount");

                entity.Property(e => e.ProjectBkpaymentAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ProjectBKPaymentAmount");

                entity.Property(e => e.ProjectBktotal)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ProjectBKTotal");

                entity.Property(e => e.ProjectCategory)
                    .HasMaxLength(50)
                    .HasComment("项目类型。poweron");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(200)
                    .HasComment("项目代号");

                entity.Property(e => e.ProjectCodeDev)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("显示项目");

                entity.Property(e => e.ProjectContractAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("项目合同额");

                entity.Property(e => e.ProjectIsFinish).HasComment("是否入帐（0:未;1:是）");

                entity.Property(e => e.ProjectJnw)
                    .HasMaxLength(10)
                    .HasComment("项目境内外");

                entity.Property(e => e.ProjectManagementCost)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("管理费");

                entity.Property(e => e.ProjectManager)
                    .HasMaxLength(50)
                    .HasComment("项目经理");

                entity.Property(e => e.ProjectManagerIdentityId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("项目经理身份证号");

                entity.Property(e => e.ProjectManagerLoginName)
                    .HasMaxLength(50)
                    .HasComment("项目经理登陆名");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(200)
                    .HasComment("项目名称");

                entity.Property(e => e.ProjectNeiBuRenGongFei)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("人工费");

                entity.Property(e => e.ProjectOtherCost)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("针对资金结存计算，增加其他费用列，与现金流报表保持一致");

                entity.Property(e => e.ProjectPaymentAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("已付款额");

                entity.Property(e => e.ProjectPaymentContractTotalAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("项目付款合同总额\r\n");

                entity.Property(e => e.ProjectPaymentInfo)
                    .HasMaxLength(200)
                    .HasComment("付款情况状态");

                entity.Property(e => e.ProjectPojectProgressPercentage)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("项目进度百分比");

                entity.Property(e => e.ProjectProfitMargin)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("当前利润");

                entity.Property(e => e.ProjectQqflag)
                    .HasColumnName("ProjectQQFlag")
                    .HasComment("清欠标识。０非，１是");

                entity.Property(e => e.ProjectQqlevel)
                    .HasColumnName("ProjectQQLevel")
                    .HasComment("清欠级别，0不算清欠，１清欠");

                entity.Property(e => e.ProjectReceivedAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("已收费额");

                entity.Property(e => e.ProjectReceivedPercentage)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("已收费百分比");

                entity.Property(e => e.ProjectType).HasComment("项目类型value：1:epc；2：非epc");

                entity.Property(e => e.ProjectTypeName)
                    .HasMaxLength(50)
                    .HasComment("项目类型name");

                entity.Property(e => e.ProjectXmgs).HasMaxLength(50);

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date")
                    .HasComment("申请日期");

                entity.Property(e => e.RequestDate1)
                    .HasColumnType("datetime")
                    .HasColumnName("RequestDate")
                    .HasComment("申请日期");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasComment("申请人所在部门编号");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(200)
                    .HasComment("申请人所在部门名称");

                entity.Property(e => e.RequestFormNumber)
                    .HasMaxLength(20)
                    .HasComment("表单编号");

                entity.Property(e => e.RequestItemType)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasComment("申请人登录名\r\n");

                entity.Property(e => e.RequestPayCategory).HasComment("付款类型value");

                entity.Property(e => e.RequestPayCategoryName)
                    .HasMaxLength(50)
                    .HasComment("付款类型text");

                entity.Property(e => e.RequestProjectType).HasComment("申请是否代购合同使用审批使用。1是采购，3是施工。用来采购付款中。");

                entity.Property(e => e.RequestQuarter).HasComment("申请季度");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasComment("申请人 真实姓名");

                entity.Property(e => e.RequestSfzh)
                    .HasMaxLength(30)
                    .HasComment("申请人身份证号");

                entity.Property(e => e.RequestSourceType).HasComment("1普华2车辆3文印4邮电");

                entity.Property(e => e.RequestSourceType2)
                    .HasMaxLength(50)
                    .HasComment("类型2");

                entity.Property(e => e.RequestTelephone)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("申请人电话");

                entity.Property(e => e.RequestType).HasComment("申请类型:1.项目类型;2.非项目类型");

                entity.Property(e => e.RequestTypeName)
                    .HasMaxLength(50)
                    .HasComment("申请类型:1.项目类型;2.非项目类型");

                entity.Property(e => e.RequestYear).HasComment("申请年");

                entity.Property(e => e.RevolvingFundBalance).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RevolvingFundHoldLogin).HasMaxLength(50);

                entity.Property(e => e.RevolvingFundHoldName).HasMaxLength(50);

                entity.Property(e => e.RunningCost).HasComment("费用类型：1:运行费;2:单项费");

                entity.Property(e => e.SignSupplierCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("供应商编号");

                entity.Property(e => e.SignSupplierName)
                    .HasMaxLength(1200)
                    .HasComment("供应商名称");

                entity.Property(e => e.Subject2Type).HasComment("设计分包付款，1项目设计，2专业设计");

                entity.Property(e => e.TotalTaxBasic)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("计税数（施工用，进度款，结算款时，累计）");

                entity.Property(e => e.VoucherCode)
                    .HasMaxLength(50)
                    .HasComment("入帐单号");

                entity.Property(e => e.Voucherid)
                    .HasColumnName("VOUCHERID")
                    .HasComment("Main中对应入帐凭证主键");

                entity.Property(e => e.WithholdingTax)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("代扣营业税");
            });

            modelBuilder.Entity<TccPaymentProcessMultipleApplicationLog>(entity =>
            {
                entity.ToTable("TCC_PaymentProcessMultiple_ApplicationLog");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NewApplicationCode).HasComment("变更后用途");

                entity.Property(e => e.NewApplicationName).HasMaxLength(50);

                entity.Property(e => e.OldApplicationCode).HasComment("变更前用途");

                entity.Property(e => e.OldApplicationName).HasMaxLength(50);

                entity.Property(e => e.Pid).HasColumnName("PID");
            });

            modelBuilder.Entity<TccPaymentProcessMultipleBillsInfo>(entity =>
            {
                entity.ToTable("TCC_PaymentProcessMultiple_BillsInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AmountRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AmountRMB")
                    .HasComment("合计折人民币");

                entity.Property(e => e.BillAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BillAmountRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BillAmountRMB")
                    .HasComment("票额折人民币");

                entity.Property(e => e.BillCode).HasMaxLength(50);

                entity.Property(e => e.BillContent)
                    .HasMaxLength(1000)
                    .HasComment("票据内容");

                entity.Property(e => e.BillTaxAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BillTaxAmountRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BillTaxAmountRMB")
                    .HasComment("税额折人民币");

                entity.Property(e => e.ByAttachment).HasMaxLength(50);

                entity.Property(e => e.CalculateMode).HasComment("计算方式");

                entity.Property(e => e.Currency)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("币种");

                entity.Property(e => e.Exchange)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("汇率");

                entity.Property(e => e.Incident).HasDefaultValueSql("((0))");

                entity.Property(e => e.Inventory)
                    .HasDefaultValueSql("((0))")
                    .HasComment("清单数");

                entity.Property(e => e.InvoiceCode)
                    .HasMaxLength(50)
                    .HasComment("发票代码");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("datetime")
                    .HasComment("开票日期");

                entity.Property(e => e.OrgBillAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("票据金额对应原币金额");

                entity.Property(e => e.OrgBillTaxAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("票据税额对应原币金额");

                entity.Property(e => e.PaymentExchange)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("付款人民币折原币汇率");

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RCreateTime)
                    .HasMaxLength(50)
                    .HasColumnName("R_CreateTime");

                entity.Property(e => e.RId)
                    .HasMaxLength(36)
                    .HasColumnName("R_ID");

                entity.Property(e => e.RName)
                    .HasMaxLength(50)
                    .HasColumnName("R_name");

                entity.Property(e => e.RTitle)
                    .HasMaxLength(50)
                    .HasColumnName("R_Title");

                entity.Property(e => e.Requestor)
                    .HasMaxLength(50)
                    .HasComment("收取发票申请流程的申请人");

                entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TaxRateCode)
                    .HasMaxLength(50)
                    .HasComment("税率编号");

                entity.Property(e => e.TaxRateText)
                    .HasMaxLength(50)
                    .HasComment("税率显示值");
            });

            modelBuilder.Entity<TccPaymentProcessMultipleContractInfo>(entity =>
            {
                entity.ToTable("TCC_PaymentProcessMultiple_ContractInfo");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.CalculateMode)
                    .HasDefaultValueSql("((0))")
                    .HasComment("计算方式");

                entity.Property(e => e.ChangeLocalCurrencyAmount)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("折现金额");

                entity.Property(e => e.ContSid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Cont_sid")
                    .HasComment("普华主键");

                entity.Property(e => e.ContractActualPaymentsTotal)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("实付金额");

                entity.Property(e => e.ContractActualPaymentsTotalPercentage)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("实付比例");

                entity.Property(e => e.ContractAmountChange)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("变更金额");

                entity.Property(e => e.ContractAmountContract)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("签约金额");

                entity.Property(e => e.ContractAmountTotal)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("合同总价");

                entity.Property(e => e.ContractAmountTotalApplyOtherPayment)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("线上申请其它付款（施工使用）");

                entity.Property(e => e.ContractAmountTotalApplyPayablePayment)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("已申请累计应付金额");

                entity.Property(e => e.ContractAmountTotalApplyPayablePaymentPercentage)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("已申请累计应付比例");

                entity.Property(e => e.ContractAmountTotalApplyPayment)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("已申请金额");

                entity.Property(e => e.ContractAmountTotalApplyPaymentPercentage)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("ContractAMountTotalApplyPaymentPercentage")
                    .HasDefaultValueSql("((0))")
                    .HasComment("已申请比例");

                entity.Property(e => e.ContractAmountTotalOtherPayment)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("其它付款费用（施工使用：用于累计其它类型付款用）");

                entity.Property(e => e.ContractAmountTotalPayment)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("累计付款金额");

                entity.Property(e => e.ContractAmountTotalPaymentPercentage)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("累计付款金额百分比");

                entity.Property(e => e.ContractAmountTotalTimeOtherPayment)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("本次其它付款费用（施工使用：用于累计其它类型付款用）");

                entity.Property(e => e.ContractAmountTotalTimePayablePayment)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("本次应付累计金额");

                entity.Property(e => e.ContractAmountTotalTimePayablePaymentPercentage)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("本次应付累计比例");

                entity.Property(e => e.ContractAmountTotalTimePayment)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("本次付款累计金额");

                entity.Property(e => e.ContractAmountTotalTimePaymentPercentage)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("本次付款合计百分比");

                entity.Property(e => e.ContractAmountTotalWithholdingTax)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("累计代扣税");

                entity.Property(e => e.ContractCategory)
                    .HasMaxLength(50)
                    .HasComment("合同类型");

                entity.Property(e => e.ContractCode)
                    .HasMaxLength(50)
                    .HasComment("合同编号");

                entity.Property(e => e.ContractCurrencyType)
                    .HasMaxLength(50)
                    .HasComment("合同币种");

                entity.Property(e => e.ContractExchange)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("合同汇率");

                entity.Property(e => e.ContractForm)
                    .HasMaxLength(50)
                    .HasComment("合同形式");

                entity.Property(e => e.ContractIncludeTax)
                    .HasDefaultValueSql("((0))")
                    .HasComment("税金");

                entity.Property(e => e.ContractLg1)
                    .HasColumnName("ContractLG1")
                    .HasComment("预付款保函：-1不使用保函；0未收取保函；1已收取保函");

                entity.Property(e => e.ContractLg2)
                    .HasColumnName("ContractLG2")
                    .HasComment("履约保函：-1不使用保函；0未收取保函；1已收取保函");

                entity.Property(e => e.ContractLg3)
                    .HasColumnName("ContractLG3")
                    .HasComment("质保金保函：-1不使用保函；0未收取保函；1已收取保函");

                entity.Property(e => e.ContractLginto)
                    .HasMaxLength(500)
                    .HasColumnName("ContractLGInto")
                    .HasComment("保函信息说明");

                entity.Property(e => e.ContractName)
                    .HasMaxLength(1200)
                    .HasComment("合同名称");

                entity.Property(e => e.ContractOtherBuyAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("代购合同总额");

                entity.Property(e => e.ContractOtherBuyPaymentAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("累计已扣代购金额");

                entity.Property(e => e.ContractOtherBuyTotal)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("代购总付金额");

                entity.Property(e => e.ContractOtherBuyTotalTimeAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("本次代购金额");

                entity.Property(e => e.ContractPayableAmountTotal)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("累计应付金额");

                entity.Property(e => e.ContractPayableAmountTotalPercentage)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("累计应付比例");

                entity.Property(e => e.ContractProjectCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("项目编号");

                entity.Property(e => e.ContractProjectName)
                    .HasMaxLength(500)
                    .HasComment("项目名称");

                entity.Property(e => e.ContractTax)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("合同中是否含税;0不带;1带税");

                entity.Property(e => e.ContractTotalAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("合同总价+税额");

                entity.Property(e => e.ContractUnitCode)
                    .HasMaxLength(50)
                    .HasComment("合同签约单位编号");

                entity.Property(e => e.ContractUnitName)
                    .HasMaxLength(50)
                    .HasComment("合同签定单位");

                entity.Property(e => e.ContractWithholdingAmountTotal)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("累计扣款额");

                entity.Property(e => e.ContractWithholdingAmountTotalPercentage)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("累计扣款比例");

                entity.Property(e => e.ContractWithholdingAmountTotalTimePayments)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("本次扣款后累计值");

                entity.Property(e => e.DecimalDigit)
                    .HasDefaultValueSql("((0))")
                    .HasComment("主合同小数位数");

                entity.Property(e => e.IsMainContract)
                    .HasDefaultValueSql("((0))")
                    .HasComment("是否有主合同");

                entity.Property(e => e.LawsuitDSid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Lawsuit_d_sid")
                    .HasComment("普华80接口涉诉合同主键");

                entity.Property(e => e.LawsuitSid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Lawsuit_sid")
                    .HasComment("普华涉诉合同主键");

                entity.Property(e => e.Lcinfo)
                    .HasMaxLength(50)
                    .HasColumnName("LCInfo")
                    .HasComment("信用证信息");

                entity.Property(e => e.Lcper)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LCPer")
                    .HasComment("信用证已付百分比");

                entity.Property(e => e.MainContractCurrency)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .HasComment("主合同币种");

                entity.Property(e => e.OtherBuyContractCode)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasComment("代购子合同合同名");

                entity.Property(e => e.Pid)
                    .HasColumnName("PID")
                    .HasComment("付款主键");
            });

            modelBuilder.Entity<TccPaymentProcessMultipleCreditLetterInfo>(entity =>
            {
                entity.ToTable("TCC_PaymentProcessMultiple_CreditLetterInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CreditLetterAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CreditLetterCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CreditLetterSurplus).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PaymentAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Pid).HasColumnName("PID");
            });

            modelBuilder.Entity<TccPaymentProcessMultipleDepartment>(entity =>
            {
                entity.ToTable("TCC_PaymentProcessMultiple_Department");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("部分编号");

                entity.Property(e => e.DepartmentName)
                    .HasMaxLength(50)
                    .HasComment("部分编号");

                entity.Property(e => e.Flag)
                    .HasDefaultValueSql("((1))")
                    .HasComment("1部门，２项目");

                entity.Property(e => e.PaymentAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("金额");

                entity.Property(e => e.Pid)
                    .HasColumnName("PID")
                    .HasDefaultValueSql("((0))")
                    .HasComment("外部主键");

                entity.Property(e => e.Requestor)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("申请人");
            });

            modelBuilder.Entity<TccPaymentProcessMultipleDraftInfo>(entity =>
            {
                entity.ToTable("TCC_PaymentProcessMultiple_DraftInfo");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.DraftAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DraftId)
                    .HasColumnName("DraftID")
                    .HasComment("汇票主键");

                entity.Property(e => e.PaymentId)
                    .HasColumnName("PaymentID")
                    .HasComment("父主键");
            });

            modelBuilder.Entity<TccPaymentProcessMultipleDraftLog>(entity =>
            {
                entity.ToTable("TCC_PaymentProcessMultiple_DraftLog");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Method)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("记录更改方式");

                entity.Property(e => e.NewDraftId).HasColumnName("NewDraftID");

                entity.Property(e => e.NewPaymentId).HasColumnName("NewPaymentID");

                entity.Property(e => e.OldDraftId).HasColumnName("OldDraftID");

                entity.Property(e => e.OldPaymentId)
                    .HasColumnName("OldPaymentID")
                    .HasComment("原主键关联");
            });

            modelBuilder.Entity<TccPaymentProcessMultipleFinishNoticeLog>(entity =>
            {
                entity.ToTable("TCC_PaymentProcessMultiple_FinishNoticeLog");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.Emaill)
                    .HasMaxLength(50)
                    .HasColumnName("emaill")
                    .HasComment("邮件");

                entity.Property(e => e.LoginName)
                    .HasMaxLength(50)
                    .HasComment("接收人");

                entity.Property(e => e.Msg)
                    .HasMaxLength(500)
                    .HasComment("邮件内容");

                entity.Property(e => e.Pid)
                    .HasColumnName("PID")
                    .HasComment("付款ID");

                entity.Property(e => e.SendTime)
                    .HasColumnType("datetime")
                    .HasComment("发送时间");
            });

            modelBuilder.Entity<TccPaymentProcessMultipleFlowInfo>(entity =>
            {
                entity.ToTable("TCC_PaymentProcessMultiple_FlowInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.FlowId)
                    .HasColumnName("FlowID")
                    .HasComment("主ID");

                entity.Property(e => e.RelationFlowId)
                    .HasColumnName("RelationFlowID")
                    .HasComment("关联ＩＤ");
            });

            modelBuilder.Entity<TccPaymentProcessMultipleLetterOfCredit>(entity =>
            {
                entity.ToTable("TCC_PaymentProcessMultiple_LetterOfCredit");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.Beneficiary)
                    .HasMaxLength(500)
                    .HasComment("受益人");

                entity.Property(e => e.CalculateMode).HasComment("汇率计算方法");

                entity.Property(e => e.Currency)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("币种 ");

                entity.Property(e => e.DueDate)
                    .HasColumnType("datetime")
                    .HasComment("截止时间");

                entity.Property(e => e.IssuingBank)
                    .HasMaxLength(50)
                    .HasComment("开立行");

                entity.Property(e => e.LetterAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("金额");

                entity.Property(e => e.LetterCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("信用证编号");

                entity.Property(e => e.LetterExchange)
                    .HasColumnType("decimal(18, 6)")
                    .HasComment("汇率");

                entity.Property(e => e.LetterRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("LetterRMB")
                    .HasComment("人民币金额");

                entity.Property(e => e.LetterType).HasComment("信用证类别");

                entity.Property(e => e.LetterTypeName)
                    .HasMaxLength(10)
                    .HasComment("信用证类别");

                entity.Property(e => e.OpeningDate)
                    .HasColumnType("datetime")
                    .HasComment("开立时间");

                entity.Property(e => e.Pid)
                    .HasColumnName("PID")
                    .HasComment("外键");
            });

            modelBuilder.Entity<TccPaymentProcessMultipleOtherBuy>(entity =>
            {
                entity.ToTable("TCC_PaymentProcessMultiple_OtherBuy");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.ContractCode)
                    .HasMaxLength(50)
                    .HasComment("主合同号");

                entity.Property(e => e.ContractCodeP)
                    .HasMaxLength(50)
                    .HasColumnName("ContractCode_P")
                    .HasComment("代购合同");

                entity.Property(e => e.Dgpid)
                    .HasColumnName("DGPID")
                    .HasComment("代购付款主键");

                entity.Property(e => e.Pid)
                    .HasColumnName("PID")
                    .HasComment("外键");
            });

            modelBuilder.Entity<TccPaymentProcessMultiplePaymentInfo>(entity =>
            {
                entity.ToTable("TCC_PaymentProcessMultiple_PaymentInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CalculateMode)
                    .HasDefaultValueSql("((0))")
                    .HasComment("代购计算方式");

                entity.Property(e => e.ContractCode)
                    .HasMaxLength(50)
                    .HasComment("合同编号");

                entity.Property(e => e.DecimalDigit)
                    .HasDefaultValueSql("((0))")
                    .HasComment("代购小数字");

                entity.Property(e => e.FinanceWithoutInputVat)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("FinanceWithoutInputVAT")
                    .HasDefaultValueSql("((0))")
                    .HasComment("财务扣增值税");

                entity.Property(e => e.MainContractCurrency)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .HasComment("代购主合同币种");

                entity.Property(e => e.OtherBuyExchange)
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("代购汇率");

                entity.Property(e => e.OtherBuyRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("OtherBuyRMB")
                    .HasDefaultValueSql("((0))")
                    .HasComment("代购人民币");

                entity.Property(e => e.OtherCost)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("其它费用（水电费）");

                entity.Property(e => e.OtherPaymentAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("其它扣款（农民工工资）");

                entity.Property(e => e.PayContractExchange)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("合同汇率");

                entity.Property(e => e.PaymentActualPayments)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("实付金额");

                entity.Property(e => e.PaymentActualPaymentsPercentage)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("实付比例");

                entity.Property(e => e.PaymentAmountLowercase)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("付款金额");

                entity.Property(e => e.PaymentAmountPercentage)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("申请付款比例");

                entity.Property(e => e.PaymentAmountUppercase)
                    .HasMaxLength(500)
                    .HasComment("付款金额大写");

                entity.Property(e => e.PaymentCommercialInvoiceCode)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("商业发票编号");

                entity.Property(e => e.PaymentContractAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("合同付款金额");

                entity.Property(e => e.PaymentDescription)
                    .HasMaxLength(500)
                    .HasComment("付款说明");

                entity.Property(e => e.PaymentFineAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("罚款额");

                entity.Property(e => e.PaymentInputVat)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PaymentInputVAT")
                    .HasDefaultValueSql("((0))")
                    .HasComment("进项税额");

                entity.Property(e => e.PaymentNode).HasComment("付款点节");

                entity.Property(e => e.PaymentNodeName)
                    .HasMaxLength(50)
                    .HasComment("付款点节名称");

                entity.Property(e => e.PaymentNote).HasMaxLength(500);

                entity.Property(e => e.PaymentOtherBuyAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("本次扣代购金额");

                entity.Property(e => e.PaymentPayableAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("本期应付金额");

                entity.Property(e => e.PaymentPayableAmountPercentage)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("本期应付金额比例");

                entity.Property(e => e.PaymentPayableTotalTime)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("累计应付金额");

                entity.Property(e => e.PaymentPayableTotalTimePercentage)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("累计应付比例");

                entity.Property(e => e.PaymentReceiptCode)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("形式发票/收据编号");

                entity.Property(e => e.PaymentTotalTime)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("本次申请后付款金额");

                entity.Property(e => e.PaymentTotalTimePercentage)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("本次申请后付款比例　");

                entity.Property(e => e.PaymentWithholdingAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("本期扣款金额");

                entity.Property(e => e.PaymentWithholdingAmountPercentage)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("本期扣款比例");

                entity.Property(e => e.PaymentWithoutInputVat)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PaymentWithoutInputVAT")
                    .HasDefaultValueSql("((0))")
                    .HasComment("代扣增值税");

                entity.Property(e => e.PaymentWithoutOtherTax)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("代扣其它税");

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .HasComment("项目编号");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(1200)
                    .HasDefaultValueSql("('')")
                    .HasComment("项目名称");

                entity.Property(e => e.Sheamount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("SHEAmount")
                    .HasDefaultValueSql("((0))")
                    .HasComment("SHE费用");

                entity.Property(e => e.WithholdingTax)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("代扣税（保存时分配）");
            });

            modelBuilder.Entity<TccPaymentProcessMultiplePeptjInfo>(entity =>
            {
                entity.ToTable("TCC_PaymentProcessMultiple_PeptjInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("dept_code")
                    .HasDefaultValueSql("('')")
                    .HasComment("部门");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .HasColumnName("dept_name")
                    .HasDefaultValueSql("('')")
                    .HasComment("部门");

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("编号");

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("project_id")
                    .HasDefaultValueSql("('')")
                    .HasComment("项目名");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(500)
                    .HasColumnName("project_name")
                    .HasDefaultValueSql("('')")
                    .HasComment("项目名");

                entity.Property(e => e.Sid)
                    .HasMaxLength(50)
                    .HasColumnName("sid")
                    .HasComment("流程");

                entity.Property(e => e.Total)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("total")
                    .HasComment("金额");

                entity.Property(e => e.UnitCode)
                    .HasMaxLength(50)
                    .HasColumnName("unit_code")
                    .HasComment("分包单位");

                entity.Property(e => e.UnitSid)
                    .HasMaxLength(50)
                    .HasColumnName("unit_sid")
                    .HasComment("peptj主键");

                entity.Property(e => e.Xmjl)
                    .HasMaxLength(50)
                    .HasColumnName("xmjl")
                    .HasComment("项目经理");
            });

            modelBuilder.Entity<TccPaymentProcessMultipleReceivingInfo>(entity =>
            {
                entity.ToTable("TCC_PaymentProcessMultiple_ReceivingInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.OperateLoginName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("登陆号");

                entity.Property(e => e.OperateRealName)
                    .HasMaxLength(50)
                    .HasComment("姓名");

                entity.Property(e => e.OperateSfzh)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("身份证号");

                entity.Property(e => e.OperateTime)
                    .HasColumnType("datetime")
                    .HasComment("时间");

                entity.Property(e => e.PaymentAbacode)
                    .HasMaxLength(50)
                    .HasColumnName("PaymentABACode")
                    .HasComment("ABACode");

                entity.Property(e => e.PaymentBankAccount)
                    .HasMaxLength(50)
                    .HasComment("银行帐号");

                entity.Property(e => e.PaymentBankAddress).HasMaxLength(500);

                entity.Property(e => e.PaymentBankName)
                    .HasMaxLength(500)
                    .HasComment("付款银行");

                entity.Property(e => e.PaymentIbanCode)
                    .HasMaxLength(50)
                    .HasComment("IbanCode");

                entity.Property(e => e.PaymentLineNumbers)
                    .HasMaxLength(500)
                    .HasComment("联行行号");

                entity.Property(e => e.PaymentReceivingCompanyAddress)
                    .HasMaxLength(500)
                    .HasComment("收款地址");

                entity.Property(e => e.PaymentReceivingCompanyCode)
                    .HasMaxLength(500)
                    .HasComment("收款单位编号");

                entity.Property(e => e.PaymentReceivingCompanyName)
                    .HasMaxLength(500)
                    .HasComment("收款单位名称");

                entity.Property(e => e.PaymentSwiftCode)
                    .HasMaxLength(50)
                    .HasComment("SwiftCode");

                entity.Property(e => e.Ppid)
                    .HasColumnName("PPID")
                    .HasComment("流程主键");

                entity.Property(e => e.SignCode)
                    .HasMaxLength(50)
                    .HasComment("签定方编号");

                entity.Property(e => e.SignName)
                    .HasMaxLength(1000)
                    .HasComment("签定方名称");
            });

            modelBuilder.Entity<TccPaymentProcessMultipleServiceLog>(entity =>
            {
                entity.ToTable("TCC_PaymentProcessMultiple_ServiceLogs");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasComment("插入时间");

                entity.Property(e => e.Incident).HasComment("流程实例号");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名称");

                entity.Property(e => e.Status).HasComment("状态  0：初始化   1：成功");

                entity.Property(e => e.UpdateTime)
                    .HasColumnType("datetime")
                    .HasComment("更新时间");
            });

            modelBuilder.Entity<TccPaymentProcessMultipleSubmitLogTime>(entity =>
            {
                entity.ToTable("TCC_PaymentProcessMultiple_SubmitLogTimes");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.StepId).HasColumnName("StepID");

                entity.Property(e => e.StepName).HasMaxLength(50);

                entity.Property(e => e.SubmitTimes).HasMaxLength(50);
            });

            modelBuilder.Entity<TccPaymentProcessMultipleTicketInfo>(entity =>
            {
                entity.ToTable("TCC_PaymentProcessMultiple_TicketInfo");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.AccountDept).HasMaxLength(50);

                entity.Property(e => e.AccountProject).HasMaxLength(100);

                entity.Property(e => e.AccountProjectName).HasMaxLength(500);

                entity.Property(e => e.ActiveDate)
                    .HasColumnType("datetime")
                    .HasComment("出发日期");

                entity.Property(e => e.AirlineCompany)
                    .HasMaxLength(50)
                    .HasComment("航空公司名称");

                entity.Property(e => e.BillCode)
                    .HasMaxLength(50)
                    .HasComment("票号");

                entity.Property(e => e.BusinessAskForLeaveFormNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("请假单号");

                entity.Property(e => e.ExpenseClaimFormNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("报销单号");

                entity.Property(e => e.FlightNumber)
                    .HasMaxLength(50)
                    .HasComment("航班号");

                entity.Property(e => e.FlightPrice)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("飞机票件，仅做展示使用，不做逻辑处理");

                entity.Property(e => e.FromPlace)
                    .HasMaxLength(50)
                    .HasComment("出发地点");

                entity.Property(e => e.FuelSurcharge)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("燃油附加费，仅做展示使用，不参与实际运算");

                entity.Property(e => e.IsReturn).HasComment("是还往返");

                entity.Property(e => e.PersonDeptCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("所在部门");

                entity.Property(e => e.PersonDeptName)
                    .HasMaxLength(50)
                    .HasComment("所在部门");

                entity.Property(e => e.Pid)
                    .HasColumnName("PID")
                    .HasComment("外键");

                entity.Property(e => e.Price)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("价格");

                entity.Property(e => e.ReturnDate)
                    .HasColumnType("datetime")
                    .HasComment("往返时间");

                entity.Property(e => e.SeatRank)
                    .HasMaxLength(50)
                    .HasComment("座位等级");

                entity.Property(e => e.SelectLoginName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("登陆号");

                entity.Property(e => e.SelectRealName)
                    .HasMaxLength(50)
                    .HasComment("姓名");

                entity.Property(e => e.SelectSfzh)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SelectSFZH")
                    .HasComment("身份证号");

                entity.Property(e => e.StrokeNumber)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasComment("编号 ");

                entity.Property(e => e.ToPlace)
                    .HasMaxLength(50)
                    .HasComment("到达地点");

                entity.Property(e => e.TravelingPeople)
                    .HasMaxLength(50)
                    .HasComment("出行人");

                entity.Property(e => e.VoyageType).HasComment("航程类型，1是国际，而是国内。未填数据默认为国内");
            });

            modelBuilder.Entity<TccPaymentProcessMultipleTmpForModifyHistory>(entity =>
            {
                entity.ToTable("TCC_PaymentProcessMultiple_Tmp_ForModifyHistory");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AccountingAuditDate).HasColumnType("datetime");

                entity.Property(e => e.AccountingAuditLoginUserName).HasMaxLength(50);

                entity.Property(e => e.AccountingAuditUserName).HasMaxLength(50);

                entity.Property(e => e.Approver1).HasMaxLength(50);

                entity.Property(e => e.Approver1LoginName).HasMaxLength(50);

                entity.Property(e => e.Approver2).HasMaxLength(50);

                entity.Property(e => e.Approver2LoginName).HasMaxLength(50);

                entity.Property(e => e.Budget).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BudgetHappenedAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BudgetHappeningAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BudgetRemainAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BuyForeignAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BuyForeignCurrency)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.BuyForeignExchange).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.BuyForeignHanderCharge).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BuyForeignOperateLoginName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BuyForeignOperateName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BuyForeignOperateTime).HasColumnType("datetime");

                entity.Property(e => e.BuyForeignPostage).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CardBank).HasMaxLength(50);

                entity.Property(e => e.CardName).HasMaxLength(50);

                entity.Property(e => e.CardNo)
                    .HasMaxLength(50)
                    .HasColumnName("CardNO");

                entity.Property(e => e.CasierClaimDate).HasColumnType("datetime");

                entity.Property(e => e.CasierClaimLoginUserName).HasMaxLength(50);

                entity.Property(e => e.CasierClaimUserName).HasMaxLength(50);

                entity.Property(e => e.ContractExchange).HasColumnType("decimal(18, 8)");

                entity.Property(e => e.ContractType)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ContractUnitCode).HasMaxLength(50);

                entity.Property(e => e.ContractUnitJnw).HasMaxLength(50);

                entity.Property(e => e.ContractUnitName).HasMaxLength(50);

                entity.Property(e => e.ExchangeRateDifference).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ExchangeVoucher).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ExpectedRecoveryDate).HasColumnType("datetime");

                entity.Property(e => e.Finalengineeringcost)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FinanceChangeLocalCurrencyAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FinanceCurrency).HasMaxLength(50);

                entity.Property(e => e.FinanceDecimalDigitForVat).HasColumnName("FinanceDecimalDigitForVAT");

                entity.Property(e => e.FinanceDraftAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FinanceDraftEnabledAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FinanceDraftMode).HasMaxLength(50);

                entity.Property(e => e.FinanceDraftSurplusAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FinanceDraftTotal).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FinanceExchange).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.FinancePaymentAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FinancePaymentBank).HasMaxLength(100);

                entity.Property(e => e.FinancePaymentBankAccount).HasMaxLength(50);

                entity.Property(e => e.FinancePaymentDraftValidAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FinancePaymentItemSubjectCode).HasMaxLength(50);

                entity.Property(e => e.FinancePaymentItemSubjectName).HasMaxLength(1000);

                entity.Property(e => e.FinancePaymentItemSubjectNameAccount).HasMaxLength(50);

                entity.Property(e => e.FinancePaymentTotal).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FinancePaymentTotalTotal).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FinanceSubjectCode).HasMaxLength(50);

                entity.Property(e => e.FinanceSubjectName).HasMaxLength(500);

                entity.Property(e => e.FinanceWithHoldingInputVat)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("FinanceWithHoldingInputVAT");

                entity.Property(e => e.FinanceWithholdingTaxPercentage).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FineAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FinnaceCalculateModeForVat).HasColumnName("FinnaceCalculateModeForVAT");

                entity.Property(e => e.InvoiceBillAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.InvoiceCategoryText).HasMaxLength(50);

                entity.Property(e => e.InvoiceTaxAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.InvoiceTotalAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.InvoicesUnitName).HasMaxLength(1200);

                entity.Property(e => e.LockLoginUserName).HasMaxLength(50);

                entity.Property(e => e.LockUserName).HasMaxLength(50);

                entity.Property(e => e.OtherCost).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PaymentAbacode)
                    .HasMaxLength(50)
                    .HasColumnName("PaymentABACode");

                entity.Property(e => e.PaymentAcutlCurrencyPaymentAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PaymentAirlineTicketAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PaymentAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PaymentAmountLowercase).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PaymentAmountUppercase).HasMaxLength(500);

                entity.Property(e => e.PaymentApplicationName).HasMaxLength(50);

                entity.Property(e => e.PaymentBankAccount).HasMaxLength(50);

                entity.Property(e => e.PaymentBankAddress)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentBankName).HasMaxLength(500);

                entity.Property(e => e.PaymentBillAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PaymentChangeLocalCurrencyAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PaymentCommercialInvoiceCode)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentContractPaymentDate).HasColumnType("datetime");

                entity.Property(e => e.PaymentCurrency).HasMaxLength(50);

                entity.Property(e => e.PaymentDescription).HasMaxLength(4000);

                entity.Property(e => e.PaymentExchange).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.PaymentFundModeName).HasMaxLength(500);

                entity.Property(e => e.PaymentGuanDanCode).HasMaxLength(50);

                entity.Property(e => e.PaymentGuanDanCurrency).HasMaxLength(50);

                entity.Property(e => e.PaymentGuanDanGoodsName).HasMaxLength(50);

                entity.Property(e => e.PaymentGuanDanTotal).HasMaxLength(50);

                entity.Property(e => e.PaymentIbanCode).HasMaxLength(50);

                entity.Property(e => e.PaymentInputVat)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PaymentInputVAT");

                entity.Property(e => e.PaymentInputVatvoucher)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PaymentInputVATVoucher");

                entity.Property(e => e.PaymentLineNumbers).HasMaxLength(500);

                entity.Property(e => e.PaymentLinkFormNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentMethodName).HasMaxLength(50);

                entity.Property(e => e.PaymentOtherAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PaymentOtherBuyPaymentTotal).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PaymentOtherExchange).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.PaymentOtherPaymentTotal).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PaymentPayableAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PaymentProjectIsEpc).HasColumnName("PaymentProjectIsEPC");

                entity.Property(e => e.PaymentReceiptCode)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentReceivingCompanyAddress).HasMaxLength(500);

                entity.Property(e => e.PaymentReceivingCompanyCode).HasMaxLength(50);

                entity.Property(e => e.PaymentReceivingCompanyName).HasMaxLength(500);

                entity.Property(e => e.PaymentSwiftCode).HasMaxLength(50);

                entity.Property(e => e.PaymentTotal).HasColumnType("decimal(18, 8)");

                entity.Property(e => e.PaymentTotalContractAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PaymentTransportationMode).HasMaxLength(50);

                entity.Property(e => e.PaymentTransportationModeName).HasMaxLength(50);

                entity.Property(e => e.PaymentVatcurrency)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PaymentVATCurrency");

                entity.Property(e => e.PaymentVoucherDeptCode).HasMaxLength(50);

                entity.Property(e => e.PaymentVoucherDeptName).HasMaxLength(50);

                entity.Property(e => e.PaymentWithholdingAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PaymentWithoutInputVat)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PaymentWithoutInputVAT");

                entity.Property(e => e.PaymentWithoutInputVatvoucher)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PaymentWithoutInputVATVoucher");

                entity.Property(e => e.PaymentWithoutOtherTax).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PaymentWithoutOtherTaxVoucher).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PbillStatus).HasColumnName("PBillStatus");

                entity.Property(e => e.PeptjSid).HasColumnName("PeptjSID");

                entity.Property(e => e.ProcessFinishDate).HasColumnType("datetime");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectAccountPayable).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ProjectAdjustProcess).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ProjectBkapplyAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ProjectBKApplyAmount");

                entity.Property(e => e.ProjectBkpaymentAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ProjectBKPaymentAmount");

                entity.Property(e => e.ProjectBktotal)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ProjectBKTotal");

                entity.Property(e => e.ProjectCategory).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(200);

                entity.Property(e => e.ProjectCodeDev)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectContractAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ProjectJnw).HasMaxLength(10);

                entity.Property(e => e.ProjectManagementCost).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ProjectManager).HasMaxLength(50);

                entity.Property(e => e.ProjectManagerIdentityId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectManagerLoginName).HasMaxLength(50);

                entity.Property(e => e.ProjectName).HasMaxLength(200);

                entity.Property(e => e.ProjectNeiBuRenGongFei).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ProjectPaymentAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ProjectPaymentContractTotalAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ProjectPaymentInfo).HasMaxLength(200);

                entity.Property(e => e.ProjectPojectProgressPercentage).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ProjectProfitMargin).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ProjectQqflag).HasColumnName("ProjectQQFlag");

                entity.Property(e => e.ProjectQqlevel).HasColumnName("ProjectQQLevel");

                entity.Property(e => e.ProjectReceivedAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ProjectReceivedPercentage).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ProjectTypeName).HasMaxLength(50);

                entity.Property(e => e.ProjectXmgs).HasMaxLength(50);

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");

                entity.Property(e => e.RequestDate1)
                    .HasColumnType("datetime")
                    .HasColumnName("RequestDate");

                entity.Property(e => e.RequestDeptCode).HasMaxLength(50);

                entity.Property(e => e.RequestDeptName).HasMaxLength(200);

                entity.Property(e => e.RequestFormNumber).HasMaxLength(20);

                entity.Property(e => e.RequestLoginName).HasMaxLength(50);

                entity.Property(e => e.RequestPayCategoryName).HasMaxLength(50);

                entity.Property(e => e.RequestRealName).HasMaxLength(50);

                entity.Property(e => e.RequestSfzh).HasMaxLength(30);

                entity.Property(e => e.RequestSourceType2).HasMaxLength(50);

                entity.Property(e => e.RequestTelephone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RequestTypeName).HasMaxLength(50);

                entity.Property(e => e.SignSupplierCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SignSupplierName).HasMaxLength(1200);

                entity.Property(e => e.TotalTaxBasic).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.VoucherCode).HasMaxLength(50);

                entity.Property(e => e.Voucherid).HasColumnName("VOUCHERID");

                entity.Property(e => e.WithholdingTax).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<TccPaymentProcessUpdateInfoByPeptj90>(entity =>
            {
                entity.ToTable("TCC_PaymentProcess_UpdateInfo_ByPeptj90");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LogTime).HasColumnType("datetime");

                entity.Property(e => e.PeptjFlag)
                    .HasMaxLength(10)
                    .IsFixedLength(true);

                entity.Property(e => e.SupplyCode).HasMaxLength(50);
            });

            modelBuilder.Entity<TccPayrollProcess>(entity =>
            {
                entity.ToTable("TCC_PayrollProcess");

                entity.Property(e => e.ApplyDate).HasColumnType("datetime");

                entity.Property(e => e.ApplyDeptCode).HasMaxLength(50);

                entity.Property(e => e.ApplyDeptName).HasMaxLength(50);

                entity.Property(e => e.ApplyUserIidentityId)
                    .HasMaxLength(50)
                    .HasColumnName("ApplyUserIIdentityId");

                entity.Property(e => e.ApplyUserLoginName).HasMaxLength(50);

                entity.Property(e => e.ApplyUserRealName).HasMaxLength(50);

                entity.Property(e => e.IncidentNo).HasDefaultValueSql("((0))");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProcessStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.XinZiFaFangDiCode).HasMaxLength(50);

                entity.Property(e => e.XinZiFafangDiName).HasMaxLength(50);
            });

            modelBuilder.Entity<TccPeptj62AdjustDay>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_Peptj_62_AdjustDay");

                entity.Property(e => e.FkDays).HasColumnName("fk_days");

                entity.Property(e => e.FkShortdesc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("fk_shortdesc");

                entity.Property(e => e.Htbh)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("htbh");

                entity.Property(e => e.Sid)
                    .HasMaxLength(50)
                    .HasColumnName("sid");
            });

            modelBuilder.Entity<TccPeptj62AdjustDayTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_Peptj_62_AdjustDay_Temp");

                entity.Property(e => e.FkDays).HasColumnName("fk_days");

                entity.Property(e => e.FkShortdesc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("fk_shortdesc");

                entity.Property(e => e.Htbh)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("htbh");

                entity.Property(e => e.Sid)
                    .HasMaxLength(50)
                    .HasColumnName("sid");
            });

            modelBuilder.Entity<TccPeptj82ProjectProcess>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_Peptj_82_ProjectProcess");

                entity.Property(e => e.CheckValue).HasColumnName("check_value");

                entity.Property(e => e.Imonth)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("imonth");

                entity.Property(e => e.Iyear)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("iyear");

                entity.Property(e => e.ProjSid).HasColumnName("proj_sid");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("project_code");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("project_name");

                entity.Property(e => e.Sid).HasColumnName("sid");
            });

            modelBuilder.Entity<TccPeptj82ProjectProcessTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_Peptj_82_ProjectProcess_Temp");

                entity.Property(e => e.CheckValue).HasColumnName("check_value");

                entity.Property(e => e.Imonth)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("imonth");

                entity.Property(e => e.Iyear)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("iyear");

                entity.Property(e => e.ProjSid).HasColumnName("proj_sid");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("project_code");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("project_name");

                entity.Property(e => e.Sid).HasColumnName("sid");
            });

            modelBuilder.Entity<TccPeptj90Lawsuit>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_Peptj_90_Lawsuit");

                entity.Property(e => e.RemarkFirst).HasColumnName("remark_first");

                entity.Property(e => e.RemarkSecond).HasColumnName("remark_second");

                entity.Property(e => e.Sid).HasColumnName("sid");

                entity.Property(e => e.SupCode)
                    .HasMaxLength(50)
                    .HasColumnName("sup_code");

                entity.Property(e => e.SupName)
                    .HasMaxLength(200)
                    .HasColumnName("sup_name");

                entity.Property(e => e.SupSid).HasColumnName("sup_sid");
            });

            modelBuilder.Entity<TccPeptjCashlistIntf64>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_Peptj_Cashlist_intf_64");

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ProjId)
                    .HasMaxLength(50)
                    .HasColumnName("proj_id");
            });

            modelBuilder.Entity<TccPeptjCashlistIntf64Temp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_Peptj_Cashlist_intf_64_temp");

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ProjId)
                    .HasMaxLength(50)
                    .HasColumnName("proj_id");
            });

            modelBuilder.Entity<TccPeptjContractList>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_Peptj_Contract_List");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("amount");

                entity.Property(e => e.Htbh)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("htbh");

                entity.Property(e => e.Proid)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("proid");
            });

            modelBuilder.Entity<TccPeptjContractListTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_Peptj_Contract_List_Temp");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("amount");

                entity.Property(e => e.Htbh)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("htbh");

                entity.Property(e => e.Proid)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("proid");
            });

            modelBuilder.Entity<TccPeptjPayContractLawsuitInit>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_Peptj_PayContract_Lawsuit_Init");

                entity.Property(e => e.ConfirmDate).HasColumnType("datetime");

                entity.Property(e => e.ContractCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LawsuitDSid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Lawsuit_d_sid");

                entity.Property(e => e.LawsuitSid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Lawsuit_sid");
            });

            modelBuilder.Entity<TccPeptjProject49>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_Peptj_Project49");

                entity.Property(e => e.Bdevfee).HasColumnName("bdevfee");

                entity.Property(e => e.ProjId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("proj_id");

                entity.Property(e => e.ProjName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("proj_name");
            });

            modelBuilder.Entity<TccPeptjProject49Temp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_Peptj_Project49_TEMP");

                entity.Property(e => e.Bdevfee).HasColumnName("bdevfee");

                entity.Property(e => e.ProjId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("proj_id");

                entity.Property(e => e.ProjName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("proj_name");
            });

            modelBuilder.Entity<TccPeptjProjectInfo>(entity =>
            {
                entity.ToTable("TCC_Peptj_ProjectInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Accounttype)
                    .HasColumnName("accounttype")
                    .HasComment("1:EPC  2:非EPC  3：研发项目");

                entity.Property(e => e.AllowanceAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BeginDate)
                    .HasColumnType("datetime")
                    .HasColumnName("begin_date");

                entity.Property(e => e.BuildDate)
                    .HasColumnType("datetime")
                    .HasColumnName("build_date");

                entity.Property(e => e.ContractType)
                    .HasMaxLength(50)
                    .HasColumnName("contract_type");

                entity.Property(e => e.CountryCode)
                    .HasMaxLength(50)
                    .HasColumnName("country_code");

                entity.Property(e => e.CountryName)
                    .HasMaxLength(50)
                    .HasColumnName("country_name");

                entity.Property(e => e.EndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("end_date");

                entity.Property(e => e.Finishdate)
                    .HasColumnType("datetime")
                    .HasColumnName("finishdate");

                entity.Property(e => e.IsCost).HasColumnName("is_cost");

                entity.Property(e => e.Isfinish)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("isfinish");

                entity.Property(e => e.Jnw)
                    .HasMaxLength(10)
                    .HasColumnName("jnw");

                entity.Property(e => e.ProjStatus)
                    .HasMaxLength(20)
                    .HasColumnName("proj_status");

                entity.Property(e => e.ProjSubTypeDesc)
                    .HasMaxLength(50)
                    .HasColumnName("proj_sub_type_desc");

                entity.Property(e => e.ProjSubTypeDescLocation)
                    .HasMaxLength(50)
                    .HasColumnName("proj_sub_type_desc_Location");

                entity.Property(e => e.ProjTypeDesc)
                    .HasMaxLength(50)
                    .HasColumnName("proj_type_desc");

                entity.Property(e => e.ProjTypeDescLocation)
                    .HasMaxLength(50)
                    .HasColumnName("proj_type_desc_Location");

                entity.Property(e => e.ProjectCategory)
                    .HasMaxLength(50)
                    .HasColumnName("project_category");

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("project_id");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(500)
                    .HasColumnName("project_name");

                entity.Property(e => e.ProjectType)
                    .HasMaxLength(50)
                    .HasColumnName("project_type");

                entity.Property(e => e.RunningMode)
                    .HasMaxLength(50)
                    .HasColumnName("running_mode");

                entity.Property(e => e.Xmgs)
                    .HasMaxLength(50)
                    .HasColumnName("xmgs");

                entity.Property(e => e.Xmjl)
                    .HasMaxLength(50)
                    .HasColumnName("xmjl");
            });

            modelBuilder.Entity<TccPeptjProjectInfoBudgetByPeptj>(entity =>
            {
                entity.ToTable("TCC_Peptj_ProjectInfo_Budget_ByPeptj");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.CostApprove).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.CostChange).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.CostChanged).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ProjectID");

                entity.Property(e => e.ProjectName).HasMaxLength(200);

                entity.Property(e => e.ProjectType).HasMaxLength(50);

                entity.Property(e => e.SubjectId).HasColumnName("SubjectID");

                entity.Property(e => e.SubjectName).HasMaxLength(50);
            });

            modelBuilder.Entity<TccPeptjProjectInfoBudgetByPeptjTemp>(entity =>
            {
                entity.ToTable("TCC_Peptj_ProjectInfo_Budget_ByPeptj_Temp");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CostApprove).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.CostChange).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.CostChanged).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ProjectID");

                entity.Property(e => e.ProjectName).HasMaxLength(200);

                entity.Property(e => e.ProjectType).HasMaxLength(50);

                entity.Property(e => e.SubjectId).HasColumnName("SubjectID");

                entity.Property(e => e.SubjectName).HasMaxLength(50);
            });

            modelBuilder.Entity<TccPeptjProjectInfoTemp>(entity =>
            {
                entity.ToTable("TCC_Peptj_ProjectInfo_Temp");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Accounttype)
                    .HasColumnName("accounttype")
                    .HasComment("1:EPC  2:非EPC  3：研发项目");

                entity.Property(e => e.AllowanceAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BeginDate)
                    .HasColumnType("datetime")
                    .HasColumnName("begin_date");

                entity.Property(e => e.BuildDate)
                    .HasColumnType("datetime")
                    .HasColumnName("build_date");

                entity.Property(e => e.ContractType)
                    .HasMaxLength(50)
                    .HasColumnName("contract_type");

                entity.Property(e => e.CountryCode)
                    .HasMaxLength(50)
                    .HasColumnName("country_code");

                entity.Property(e => e.CountryName)
                    .HasMaxLength(50)
                    .HasColumnName("country_name");

                entity.Property(e => e.EndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("end_date");

                entity.Property(e => e.Finishdate)
                    .HasColumnType("datetime")
                    .HasColumnName("finishdate");

                entity.Property(e => e.IsCost).HasColumnName("is_cost");

                entity.Property(e => e.Isfinish)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("isfinish");

                entity.Property(e => e.Jnw)
                    .HasMaxLength(10)
                    .HasColumnName("jnw");

                entity.Property(e => e.ProjStatus)
                    .HasMaxLength(20)
                    .HasColumnName("proj_status");

                entity.Property(e => e.ProjSubTypeDesc)
                    .HasMaxLength(50)
                    .HasColumnName("proj_sub_type_desc");

                entity.Property(e => e.ProjSubTypeDescLocation)
                    .HasMaxLength(50)
                    .HasColumnName("proj_sub_type_desc_Location");

                entity.Property(e => e.ProjTypeDesc)
                    .HasMaxLength(50)
                    .HasColumnName("proj_type_desc");

                entity.Property(e => e.ProjTypeDescLocation)
                    .HasMaxLength(50)
                    .HasColumnName("proj_type_desc_Location");

                entity.Property(e => e.ProjectCategory)
                    .HasMaxLength(50)
                    .HasColumnName("project_category");

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("project_id");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(500)
                    .HasColumnName("project_name");

                entity.Property(e => e.ProjectType)
                    .HasMaxLength(50)
                    .HasColumnName("project_type");

                entity.Property(e => e.RunningMode)
                    .HasMaxLength(50)
                    .HasColumnName("running_mode");

                entity.Property(e => e.Xmgs)
                    .HasMaxLength(50)
                    .HasColumnName("xmgs");

                entity.Property(e => e.Xmjl)
                    .HasMaxLength(50)
                    .HasColumnName("xmjl");
            });

            modelBuilder.Entity<TccPersonalAsset>(entity =>
            {
                entity.ToTable("TCC_PersonalAsset");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BkInfo)
                    .HasMaxLength(50)
                    .HasColumnName("bk_Info");

                entity.Property(e => e.BkInfo1)
                    .HasMaxLength(50)
                    .HasColumnName("bk_Info1");

                entity.Property(e => e.Defined6)
                    .HasMaxLength(100)
                    .HasColumnName("defined6");

                entity.Property(e => e.DeptNo).HasMaxLength(50);

                entity.Property(e => e.Flmc)
                    .HasMaxLength(50)
                    .HasColumnName("flmc");

                entity.Property(e => e.Fwfs)
                    .HasMaxLength(100)
                    .HasColumnName("fwfs");

                entity.Property(e => e.IsAgree).HasMaxLength(50);

                entity.Property(e => e.KpPp)
                    .HasMaxLength(50)
                    .HasColumnName("kp_pp");

                entity.Property(e => e.KyStatus)
                    .HasMaxLength(50)
                    .HasColumnName("ky_status");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.OtherInfo).HasColumnName("Other_Info");

                entity.Property(e => e.RequstDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Requst_Date");

                entity.Property(e => e.Sn)
                    .HasMaxLength(50)
                    .HasColumnName("sn");

                entity.Property(e => e.StPosition).HasColumnName("st_Position");

                entity.Property(e => e.Szctm)
                    .HasMaxLength(50)
                    .HasColumnName("szctm");

                entity.Property(e => e.UserKey).HasMaxLength(50);

                entity.Property(e => e.YwStatus)
                    .HasMaxLength(50)
                    .HasColumnName("yw_status");

                entity.Property(e => e.ZcStatus)
                    .HasMaxLength(50)
                    .HasColumnName("zc_status");

                entity.Property(e => e.Zcmc)
                    .HasMaxLength(100)
                    .HasColumnName("zcmc");

                entity.Property(e => e.Zctm)
                    .HasMaxLength(50)
                    .HasColumnName("zctm");
            });

            modelBuilder.Entity<TccPersonalAssetAtt>(entity =>
            {
                entity.ToTable("TCC_PersonalAsset_Att");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IsAgree).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.OtherInfo)
                    .IsUnicode(false)
                    .HasColumnName("Other_Info");

                entity.Property(e => e.RequstDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Requst_Date");

                entity.Property(e => e.Zctm)
                    .HasMaxLength(50)
                    .HasColumnName("zctm");
            });

            modelBuilder.Entity<TccPhoneModify>(entity =>
            {
                entity.ToTable("TCC_PhoneModify");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyType).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.ModifySpecific).HasMaxLength(50);

                entity.Property(e => e.ModifyType).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProcessStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptCode");

                entity.Property(e => e.RequestDeptName).HasColumnName("Request_DeptName");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName");

                entity.Property(e => e.RequestTelPhone)
                    .HasMaxLength(50)
                    .HasColumnName("Request_TelPhone");

                entity.Property(e => e.RequestUserName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserName");
            });

            modelBuilder.Entity<TccPhoneModifyInfo>(entity =>
            {
                entity.ToTable("TCC_PhoneModify_Info");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.FareTypeText).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.ModifyType)
                    .HasMaxLength(50)
                    .HasComment("01 新增; 02_01 电话归属变更;02_02 通话业务变更;03 注销");

                entity.Property(e => e.NdeptName).HasColumnName("NDeptName");

                entity.Property(e => e.NdeptNo)
                    .HasMaxLength(50)
                    .HasColumnName("NDeptNo");

                entity.Property(e => e.Nettype).HasMaxLength(50);

                entity.Property(e => e.NewNettype).HasMaxLength(50);

                entity.Property(e => e.NphoneName)
                    .HasMaxLength(50)
                    .HasColumnName("NPhoneName");

                entity.Property(e => e.NphoneUserKey)
                    .HasMaxLength(50)
                    .HasColumnName("NPhoneUserKey");

                entity.Property(e => e.NroomNo)
                    .HasMaxLength(50)
                    .HasColumnName("NRoomNo")
                    .HasComment("房间号");

                entity.Property(e => e.NseatNo)
                    .HasMaxLength(50)
                    .HasColumnName("NSeatNo")
                    .HasComment("座位号");

                entity.Property(e => e.PhoneNo).HasMaxLength(50);

                entity.Property(e => e.PhoneType).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(50);

                entity.Property(e => e.ProjectName)
                    .HasDefaultValueSql("('')")
                    .HasComment("''");

                entity.Property(e => e.SphoneName)
                    .HasMaxLength(50)
                    .HasColumnName("SPhoneName");

                entity.Property(e => e.SphoneUserKey)
                    .HasMaxLength(50)
                    .HasColumnName("SPhoneUserKey");
            });

            modelBuilder.Entity<TccPostCategory>(entity =>
            {
                entity.ToTable("TCC_PostCategory");

                entity.HasComment("岗位类别");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasComment("创建时间");

                entity.Property(e => e.CreateUserLoginName)
                    .HasMaxLength(200)
                    .HasComment("创建人LoginName");

                entity.Property(e => e.CreateUserRealName)
                    .HasMaxLength(200)
                    .HasComment("创建人RealName");

                entity.Property(e => e.Post)
                    .HasMaxLength(200)
                    .HasComment("岗位等级");

                entity.Property(e => e.PostCategory)
                    .HasMaxLength(10)
                    .HasComment("岗位等级类别");

                entity.Property(e => e.UpdateDate)
                    .HasColumnType("datetime")
                    .HasComment("修改时间");

                entity.Property(e => e.UpdateUserLoginName)
                    .HasMaxLength(200)
                    .HasComment("修改人LoginName");

                entity.Property(e => e.UpdateUserRealName)
                    .HasMaxLength(200)
                    .HasComment("修改人RealName");
            });

            modelBuilder.Entity<TccPostForTelephoneSubsidy>(entity =>
            {
                entity.ToTable("TCC_PostForTelephoneSubsidy");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Flag).HasComment("岗位标识");

                entity.Property(e => e.PersonOrPost)
                    .HasMaxLength(50)
                    .HasComment("人员或岗位名称");
            });

            modelBuilder.Entity<TccPostForTransportSubsidy>(entity =>
            {
                entity.ToTable("TCC_PostForTransportSubsidy");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Flag).HasComment("岗位标识");

                entity.Property(e => e.PersonOrPost)
                    .HasMaxLength(50)
                    .HasComment("人员或岗位名称");
            });

            modelBuilder.Entity<TccPostLevel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TCC_PostLevel");

                entity.Property(e => e.C1714).HasColumnType("numeric(10, 2)");

                entity.Property(e => e.IsFanPin)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UserIdentity)
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.UserRealName)
                    .HasMaxLength(12)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TccPostingCarryoverRecord>(entity =>
            {
                entity.ToTable("TCC_PostingCarryoverRecord");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ActualPayMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CreateDate1)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreateUserLoginName).HasMaxLength(100);

                entity.Property(e => e.CreateUserName).HasMaxLength(100);

                entity.Property(e => e.CreditMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DebitMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FormNumber).HasMaxLength(100);

                entity.Property(e => e.JiuqiNumber).HasMaxLength(100);

                entity.Property(e => e.MainId).HasColumnName("MainID");

                entity.Property(e => e.Remark).HasMaxLength(2000);

                entity.Property(e => e.ResponseMessage).HasMaxLength(2000);

                entity.Property(e => e.ShouldPayMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TypeName).HasMaxLength(100);
            });

            modelBuilder.Entity<TccPriceLibraryApply>(entity =>
            {
                entity.ToTable("TCC_PriceLibraryApply");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProcessStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.PubDate).HasColumnType("datetime");

                entity.Property(e => e.RequestDate)
                    .HasMaxLength(50)
                    .HasColumnName("Request_Date");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptCode");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptName");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName");

                entity.Property(e => e.RequestTelPhone)
                    .HasMaxLength(50)
                    .HasColumnName("Request_TelPhone");

                entity.Property(e => e.RequestUserName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserName");
            });

            modelBuilder.Entity<TccPriceLibraryConfig>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_PriceLibrary_Config");

                entity.Property(e => e.ParProductCode).HasMaxLength(50);

                entity.Property(e => e.ParentId)
                    .HasMaxLength(50)
                    .HasColumnName("_parentId");

                entity.Property(e => e.ProductCode).HasMaxLength(50);

                entity.Property(e => e.ProductType).HasMaxLength(50);

                entity.Property(e => e.ProductUnit).HasMaxLength(50);
            });

            modelBuilder.Entity<TccPriceLibraryInfo>(entity =>
            {
                entity.ToTable("TCC_PriceLibraryInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ProcuctVersion).HasMaxLength(50);

                entity.Property(e => e.ProductCode).HasMaxLength(50);

                entity.Property(e => e.ProductTitle).HasMaxLength(100);

                entity.Property(e => e.ProductType).HasMaxLength(50);

                entity.Property(e => e.ProductUnit).HasMaxLength(50);

                entity.Property(e => e.PubDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<TccPriceLibraryInfoSub>(entity =>
            {
                entity.ToTable("TCC_PriceLibraryInfo_Sub");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyLogin).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.ProcuctVersion).HasMaxLength(50);

                entity.Property(e => e.ProductCode).HasMaxLength(50);

                entity.Property(e => e.ProductName).HasMaxLength(50);

                entity.Property(e => e.ProductTitle).HasMaxLength(50);

                entity.Property(e => e.PubDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<TccPrintApply>(entity =>
            {
                entity.ToTable("TCC_PrintApply");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyDate).HasColumnType("datetime");

                entity.Property(e => e.ApplyDept).HasMaxLength(50);

                entity.Property(e => e.ApplyDeptNo).HasMaxLength(50);

                entity.Property(e => e.ApplyLoginUser).HasMaxLength(50);

                entity.Property(e => e.ApplyName).HasMaxLength(50);

                entity.Property(e => e.ApplyPhone).HasMaxLength(50);

                entity.Property(e => e.ApplyType).HasMaxLength(50);

                entity.Property(e => e.ChangcostBeizhu).HasColumnName("changcost_beizhu");

                entity.Property(e => e.CostBelong)
                    .HasMaxLength(50)
                    .HasColumnName("costBelong");

                entity.Property(e => e.CostDept).HasMaxLength(50);

                entity.Property(e => e.CostDeptNo).HasMaxLength(50);

                entity.Property(e => e.CountCostLoginUser).HasMaxLength(50);

                entity.Property(e => e.Countcost)
                    .HasMaxLength(50)
                    .HasColumnName("countcost");

                entity.Property(e => e.DealLineTime).HasMaxLength(50);

                entity.Property(e => e.Discount)
                    .HasMaxLength(50)
                    .HasColumnName("discount");

                entity.Property(e => e.FormNumber)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.Gjcost)
                    .HasMaxLength(50)
                    .HasColumnName("gjcost");

                entity.Property(e => e.MsgSendCts).HasMaxLength(50);

                entity.Property(e => e.MsgSendTime).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectApprovalLoginName).HasMaxLength(50);

                entity.Property(e => e.ProjectApprovalRealName).HasMaxLength(50);

                entity.Property(e => e.ProjectManagerName).HasMaxLength(50);

                entity.Property(e => e.ProjectName).HasMaxLength(50);

                entity.Property(e => e.ProjectNo).HasMaxLength(50);

                entity.Property(e => e.ProjectSecAndPhone).HasMaxLength(100);

                entity.Property(e => e.RealDoneTime).HasMaxLength(50);

                entity.Property(e => e.RealZdDgzs)
                    .HasMaxLength(500)
                    .HasColumnName("Real_Zd_dgzs");

                entity.Property(e => e.Realcost)
                    .HasMaxLength(50)
                    .HasColumnName("realcost");

                entity.Property(e => e.RecieveTime).HasMaxLength(50);

                entity.Property(e => e.RecieveUser).HasMaxLength(50);

                entity.Property(e => e.Remarks).HasColumnName("remarks");

                entity.Property(e => e.ServiceFloor).HasMaxLength(50);

                entity.Property(e => e.ServiceMxType).HasMaxLength(50);

                entity.Property(e => e.ServiceStatus).HasMaxLength(50);

                entity.Property(e => e.ServiceType).HasMaxLength(50);

                entity.Property(e => e.SpfformNumber)
                    .HasMaxLength(50)
                    .HasColumnName("SPFFormNumber");

                entity.Property(e => e.WorkFloorNo)
                    .HasMaxLength(50)
                    .HasColumnName("workFloorNo");

                entity.Property(e => e.WorkLoginUser).HasMaxLength(50);

                entity.Property(e => e.WorkUserName).HasMaxLength(50);
            });

            modelBuilder.Entity<TccPrintApplyCost>(entity =>
            {
                entity.ToTable("TCC_PrintApplyCost");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CadCost)
                    .HasMaxLength(50)
                    .HasColumnName("cad_cost");

                entity.Property(e => e.DyCost)
                    .HasMaxLength(50)
                    .HasColumnName("dy_cost");

                entity.Property(e => e.DzQtCost)
                    .HasMaxLength(50)
                    .HasColumnName("dz_qt_cost");

                entity.Property(e => e.FormNumber)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.FyCost)
                    .HasMaxLength(50)
                    .HasColumnName("fy_cost");

                entity.Property(e => e.HtQtCost)
                    .HasMaxLength(50)
                    .HasColumnName("ht_qt_cost");

                entity.Property(e => e.LpCost)
                    .HasMaxLength(50)
                    .HasColumnName("lp_cost");

                entity.Property(e => e.PhCost)
                    .HasMaxLength(50)
                    .HasColumnName("ph_cost");

                entity.Property(e => e.SmCost)
                    .HasMaxLength(50)
                    .HasColumnName("sm_cost");

                entity.Property(e => e.StCost)
                    .HasMaxLength(50)
                    .HasColumnName("st_cost");

                entity.Property(e => e.TotalCost)
                    .HasMaxLength(50)
                    .HasColumnName("total_cost");

                entity.Property(e => e.ZdCost)
                    .HasMaxLength(50)
                    .HasColumnName("zd_cost");

                entity.Property(e => e.ZhCos)
                    .HasMaxLength(50)
                    .HasColumnName("zh_cos");
            });

            modelBuilder.Entity<TccPrintApplyDe>(entity =>
            {
                entity.HasKey(e => e.DeId);

                entity.ToTable("TCC_PrintApply_DE");

                entity.Property(e => e.DeId).HasColumnName("DE_ID");

                entity.Property(e => e.DeColor)
                    .HasMaxLength(50)
                    .HasColumnName("DE_Color");

                entity.Property(e => e.DeDayLiang)
                    .HasMaxLength(50)
                    .HasColumnName("DE_DayLiang");

                entity.Property(e => e.DeServiceType)
                    .HasMaxLength(50)
                    .HasColumnName("DE_ServiceType");

                entity.Property(e => e.DeSize)
                    .HasMaxLength(50)
                    .HasColumnName("DE_Size");
            });

            modelBuilder.Entity<TccPrintApplyMxDzDy>(entity =>
            {
                entity.HasKey(e => e.Dyid);

                entity.ToTable("TCC_PrintApply_Mx_dz_dy");

                entity.Property(e => e.Dyid).HasColumnName("DYID");

                entity.Property(e => e.DyBeizhu)
                    .HasMaxLength(50)
                    .HasColumnName("DY_beizhu");

                entity.Property(e => e.DyCaozuoren)
                    .HasMaxLength(50)
                    .HasColumnName("DY_caozuoren");

                entity.Property(e => e.DyChejian)
                    .HasMaxLength(50)
                    .HasColumnName("DY_chejian");

                entity.Property(e => e.DyCpdsm)
                    .HasMaxLength(50)
                    .HasColumnName("DY_cpdsm");

                entity.Property(e => e.DyCpgg)
                    .HasMaxLength(50)
                    .HasColumnName("DY_cpgg");

                entity.Property(e => e.DyDgzs)
                    .HasMaxLength(50)
                    .HasColumnName("DY_dgzs");

                entity.Property(e => e.DyDyfs)
                    .HasMaxLength(50)
                    .HasColumnName("DY_dyfs");

                entity.Property(e => e.DyFeiyong)
                    .HasMaxLength(50)
                    .HasColumnName("DY_feiyong");

                entity.Property(e => e.DyGongri)
                    .HasMaxLength(50)
                    .HasColumnName("DY_gongri");

                entity.Property(e => e.DyLiang)
                    .HasMaxLength(50)
                    .HasColumnName("DY_liang");

                entity.Property(e => e.DyMxNumber)
                    .HasMaxLength(50)
                    .HasColumnName("DY_MxNumber");

                entity.Property(e => e.DyYqwcsj)
                    .HasMaxLength(50)
                    .HasColumnName("DY_yqwcsj");

                entity.Property(e => e.DyYs)
                    .HasMaxLength(50)
                    .HasColumnName("DY_ys");

                entity.Property(e => e.DyYzks)
                    .HasMaxLength(50)
                    .HasColumnName("DY_yzks");

                entity.Property(e => e.DyYzlx)
                    .HasMaxLength(50)
                    .HasColumnName("DY_yzlx");

                entity.Property(e => e.DyZd)
                    .HasMaxLength(50)
                    .HasColumnName("DY_zd");

                entity.Property(e => e.FormNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<TccPrintApplyMxDzDzqt>(entity =>
            {
                entity.HasKey(e => e.Dzqtid)
                    .HasName("PK_TCC_PrintApply_Mx_dz_qt");

                entity.ToTable("TCC_PrintApply_Mx_dz_dzqt");

                entity.Property(e => e.Dzqtid).HasColumnName("DZQTID");

                entity.Property(e => e.DzqtBeizhu)
                    .HasMaxLength(50)
                    .HasColumnName("DZQT_beizhu");

                entity.Property(e => e.DzqtCaozuoren)
                    .HasMaxLength(50)
                    .HasColumnName("DZQT_caozuoren");

                entity.Property(e => e.DzqtChejian)
                    .HasMaxLength(50)
                    .HasColumnName("DZQT_chejian");

                entity.Property(e => e.DzqtFeiyong)
                    .HasMaxLength(50)
                    .HasColumnName("DZQT_feiyong");

                entity.Property(e => e.DzqtFwlx)
                    .HasMaxLength(50)
                    .HasColumnName("DZQT_fwlx");

                entity.Property(e => e.DzqtGg)
                    .HasMaxLength(50)
                    .HasColumnName("DZQT_gg");

                entity.Property(e => e.DzqtGongri)
                    .HasMaxLength(50)
                    .HasColumnName("DZQT_gongri");

                entity.Property(e => e.DzqtLiang)
                    .HasMaxLength(50)
                    .HasColumnName("DZQT_liang");

                entity.Property(e => e.DzqtMxNumber)
                    .HasMaxLength(50)
                    .HasColumnName("DZQT_MxNumber");

                entity.Property(e => e.DzqtSl)
                    .HasMaxLength(50)
                    .HasColumnName("DZQT_sl");

                entity.Property(e => e.DzqtYqwcsj)
                    .HasMaxLength(50)
                    .HasColumnName("DZQT_yqwcsj");

                entity.Property(e => e.FormNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<TccPrintApplyMxDzLp>(entity =>
            {
                entity.HasKey(e => e.Lpid);

                entity.ToTable("TCC_PrintApply_Mx_dz_lp");

                entity.Property(e => e.Lpid).HasColumnName("LPID");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.LpBeizhu)
                    .HasMaxLength(50)
                    .HasColumnName("LP_beizhu");

                entity.Property(e => e.LpCaozuoren)
                    .HasMaxLength(50)
                    .HasColumnName("LP_caozuoren");

                entity.Property(e => e.LpChejian)
                    .HasMaxLength(50)
                    .HasColumnName("LP_chejian");

                entity.Property(e => e.LpFeiyong)
                    .HasMaxLength(50)
                    .HasColumnName("LP_feiyong");

                entity.Property(e => e.LpGongri)
                    .HasMaxLength(50)
                    .HasColumnName("LP_gongri");

                entity.Property(e => e.LpGsbs)
                    .HasMaxLength(50)
                    .HasColumnName("LP_gsbs");

                entity.Property(e => e.LpLiang)
                    .HasMaxLength(50)
                    .HasColumnName("LP_liang");

                entity.Property(e => e.LpLplx)
                    .HasMaxLength(50)
                    .HasColumnName("LP_lplx");

                entity.Property(e => e.LpMxNumber)
                    .HasMaxLength(50)
                    .HasColumnName("LP_MxNumber");

                entity.Property(e => e.LpTbbs)
                    .HasMaxLength(50)
                    .HasColumnName("LP_tbbs");

                entity.Property(e => e.LpYqwcsj)
                    .HasMaxLength(50)
                    .HasColumnName("LP_yqwcsj");

                entity.Property(e => e.LpYwbs)
                    .HasMaxLength(50)
                    .HasColumnName("LP_ywbs");

                entity.Property(e => e.LpZwbs)
                    .HasMaxLength(50)
                    .HasColumnName("LP_zwbs");
            });

            modelBuilder.Entity<TccPrintApplyMxFsFy>(entity =>
            {
                entity.HasKey(e => e.Fyid)
                    .HasName("PK_TCC_PrintApply_Mx_fuyin");

                entity.ToTable("TCC_PrintApply_Mx_fs_fy");

                entity.Property(e => e.Fyid).HasColumnName("FYID");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.FyBeizhu).HasColumnName("FY_beizhu");

                entity.Property(e => e.FyCaozuoren)
                    .HasMaxLength(50)
                    .HasColumnName("FY_caozuoren");

                entity.Property(e => e.FyChejian)
                    .HasMaxLength(50)
                    .HasColumnName("FY_chejian");

                entity.Property(e => e.FyColor)
                    .HasMaxLength(50)
                    .HasColumnName("FY_Color");

                entity.Property(e => e.FyCpdsm)
                    .HasMaxLength(50)
                    .HasColumnName("FY_cpdsm");

                entity.Property(e => e.FyCpgg)
                    .HasMaxLength(50)
                    .HasColumnName("FY_cpgg");

                entity.Property(e => e.FyDggg)
                    .HasMaxLength(50)
                    .HasColumnName("FY_dggg");

                entity.Property(e => e.FyDgzs)
                    .HasMaxLength(50)
                    .HasColumnName("FY_dgzs");

                entity.Property(e => e.FyFeiyong)
                    .HasMaxLength(50)
                    .HasColumnName("FY_feiyong");

                entity.Property(e => e.FyFyfs)
                    .HasMaxLength(50)
                    .HasColumnName("FY_fyfs");

                entity.Property(e => e.FyGongri)
                    .HasMaxLength(50)
                    .HasColumnName("FY_gongri");

                entity.Property(e => e.FyLiang)
                    .HasMaxLength(50)
                    .HasColumnName("FY_liang");

                entity.Property(e => e.FyMxNumber)
                    .HasMaxLength(50)
                    .HasColumnName("FY_MxNumber");

                entity.Property(e => e.FyPrintType)
                    .HasMaxLength(50)
                    .HasColumnName("FY_PrintType");

                entity.Property(e => e.FyYqwcsj)
                    .HasMaxLength(50)
                    .HasColumnName("FY_yqwcsj");

                entity.Property(e => e.FyYzks)
                    .HasMaxLength(50)
                    .HasColumnName("FY_yzks");

                entity.Property(e => e.FyYzlx)
                    .HasMaxLength(50)
                    .HasColumnName("FY_yzlx");

                entity.Property(e => e.FyZd)
                    .HasMaxLength(50)
                    .HasColumnName("FY_zd");
            });

            modelBuilder.Entity<TccPrintApplyMxFsSm>(entity =>
            {
                entity.HasKey(e => e.Smid);

                entity.ToTable("TCC_PrintApply_Mx_fs_sm");

                entity.Property(e => e.Smid).HasColumnName("SMID");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.SmBeizhu).HasColumnName("SM_beizhu");

                entity.Property(e => e.SmCaozuoren)
                    .HasMaxLength(50)
                    .HasColumnName("SM_caozuoren");

                entity.Property(e => e.SmChejian)
                    .HasMaxLength(50)
                    .HasColumnName("SM_chejian");

                entity.Property(e => e.SmCpgg)
                    .HasMaxLength(50)
                    .HasColumnName("SM_cpgg");

                entity.Property(e => e.SmDggg)
                    .HasMaxLength(50)
                    .HasColumnName("SM_dggg");

                entity.Property(e => e.SmDgzs)
                    .HasMaxLength(50)
                    .HasColumnName("SM_dgzs");

                entity.Property(e => e.SmFeiyong)
                    .HasMaxLength(50)
                    .HasColumnName("SM_feiyong");

                entity.Property(e => e.SmGongri)
                    .HasMaxLength(50)
                    .HasColumnName("SM_gongri");

                entity.Property(e => e.SmLiang)
                    .HasMaxLength(50)
                    .HasColumnName("SM_liang");

                entity.Property(e => e.SmMxNumber)
                    .HasMaxLength(50)
                    .HasColumnName("SM_MxNumber");

                entity.Property(e => e.SmYqwcsj)
                    .HasMaxLength(50)
                    .HasColumnName("SM_yqwcsj");
            });

            modelBuilder.Entity<TccPrintApplyMxFsSt>(entity =>
            {
                entity.HasKey(e => e.Stid);

                entity.ToTable("TCC_PrintApply_Mx_fs_st");

                entity.Property(e => e.Stid).HasColumnName("STID");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.StBeizhu)
                    .HasMaxLength(50)
                    .HasColumnName("ST_beizhu");

                entity.Property(e => e.StCaozuoren)
                    .HasMaxLength(50)
                    .HasColumnName("ST_caozuoren");

                entity.Property(e => e.StChejian)
                    .HasMaxLength(50)
                    .HasColumnName("ST_chejian");

                entity.Property(e => e.StDgzs)
                    .HasMaxLength(50)
                    .HasColumnName("ST_dgzs");

                entity.Property(e => e.StFeiyong)
                    .HasMaxLength(50)
                    .HasColumnName("ST_feiyong");

                entity.Property(e => e.StFsdwDb)
                    .HasMaxLength(50)
                    .HasColumnName("ST_fsdw_db");

                entity.Property(e => e.StFsdwJf)
                    .HasMaxLength(50)
                    .HasColumnName("ST_fsdw_jf");

                entity.Property(e => e.StFsdwRk)
                    .HasMaxLength(50)
                    .HasColumnName("ST_fsdw_rk");

                entity.Property(e => e.StGongri)
                    .HasMaxLength(50)
                    .HasColumnName("ST_gongri");

                entity.Property(e => e.StLiang)
                    .HasMaxLength(50)
                    .HasColumnName("ST_liang");

                entity.Property(e => e.StMxNumber)
                    .HasMaxLength(50)
                    .HasColumnName("ST_MxNumber");

                entity.Property(e => e.StStfs)
                    .HasMaxLength(50)
                    .HasColumnName("ST_stfs");

                entity.Property(e => e.StYqwcsj)
                    .HasMaxLength(50)
                    .HasColumnName("ST_yqwcsj");
            });

            modelBuilder.Entity<TccPrintApplyMxHtCad>(entity =>
            {
                entity.HasKey(e => e.Cadid);

                entity.ToTable("TCC_PrintApply_Mx_ht_cad");

                entity.Property(e => e.Cadid).HasColumnName("CADID");

                entity.Property(e => e.CadBeizhu)
                    .HasMaxLength(50)
                    .HasColumnName("CAD_beizhu");

                entity.Property(e => e.CadCaozuoren)
                    .HasMaxLength(50)
                    .HasColumnName("CAD_caozuoren");

                entity.Property(e => e.CadChejian)
                    .HasMaxLength(50)
                    .HasColumnName("CAD_chejian");

                entity.Property(e => e.CadCpgg)
                    .HasMaxLength(50)
                    .HasColumnName("CAD_cpgg");

                entity.Property(e => e.CadCtfs)
                    .HasMaxLength(50)
                    .HasColumnName("CAD_ctfs");

                entity.Property(e => e.CadDgzs)
                    .HasMaxLength(50)
                    .HasColumnName("CAD_dgzs");

                entity.Property(e => e.CadFeiyong)
                    .HasMaxLength(50)
                    .HasColumnName("CAD_feiyong");

                entity.Property(e => e.CadGongri)
                    .HasMaxLength(50)
                    .HasColumnName("CAD_gongri");

                entity.Property(e => e.CadLiang)
                    .HasMaxLength(50)
                    .HasColumnName("CAD_liang");

                entity.Property(e => e.CadMxNumber)
                    .HasMaxLength(50)
                    .HasColumnName("CAD_MxNumber");

                entity.Property(e => e.CadQtdd)
                    .HasMaxLength(50)
                    .HasColumnName("CAD_qtdd");

                entity.Property(e => e.CadTxzh)
                    .HasMaxLength(50)
                    .HasColumnName("CAD_txzh");

                entity.Property(e => e.CadYqwcsj)
                    .HasMaxLength(50)
                    .HasColumnName("CAD_yqwcsj");

                entity.Property(e => e.CadYtb)
                    .HasMaxLength(50)
                    .HasColumnName("CAD_ytb");

                entity.Property(e => e.CadYzlx)
                    .HasMaxLength(50)
                    .HasColumnName("CAD_yzlx");

                entity.Property(e => e.FormNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<TccPrintApplyMxHtHtqt>(entity =>
            {
                entity.HasKey(e => e.Htqtid);

                entity.ToTable("TCC_PrintApply_Mx_ht_htqt");

                entity.Property(e => e.Htqtid).HasColumnName("HTQTID");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.HtqtBeizhu)
                    .HasMaxLength(50)
                    .HasColumnName("HTQT_beizhu");

                entity.Property(e => e.HtqtCaozuoren)
                    .HasMaxLength(50)
                    .HasColumnName("HTQT_caozuoren");

                entity.Property(e => e.HtqtChejian)
                    .HasMaxLength(50)
                    .HasColumnName("HTQT_chejian");

                entity.Property(e => e.HtqtFeiyong)
                    .HasMaxLength(50)
                    .HasColumnName("HTQT_feiyong");

                entity.Property(e => e.HtqtFwlx)
                    .HasMaxLength(50)
                    .HasColumnName("HTQT_fwlx");

                entity.Property(e => e.HtqtGg)
                    .HasMaxLength(50)
                    .HasColumnName("HTQT_gg");

                entity.Property(e => e.HtqtGongri)
                    .HasMaxLength(50)
                    .HasColumnName("HTQT_gongri");

                entity.Property(e => e.HtqtLiang)
                    .HasMaxLength(50)
                    .HasColumnName("HTQT_liang");

                entity.Property(e => e.HtqtMxNumber)
                    .HasMaxLength(50)
                    .HasColumnName("HTQT_MxNumber");

                entity.Property(e => e.HtqtSl)
                    .HasMaxLength(50)
                    .HasColumnName("HTQT_sl");

                entity.Property(e => e.HtqtYqwcsj)
                    .HasMaxLength(50)
                    .HasColumnName("HTQT_yqwcsj");
            });

            modelBuilder.Entity<TccPrintApplyMxHtPh>(entity =>
            {
                entity.HasKey(e => e.Phid);

                entity.ToTable("TCC_PrintApply_Mx_ht_ph");

                entity.Property(e => e.Phid).HasColumnName("PHID");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.PhBeizhu)
                    .HasMaxLength(50)
                    .HasColumnName("PH_beizhu");

                entity.Property(e => e.PhCaozuoren)
                    .HasMaxLength(50)
                    .HasColumnName("PH_caozuoren");

                entity.Property(e => e.PhChejian)
                    .HasMaxLength(50)
                    .HasColumnName("PH_chejian");

                entity.Property(e => e.PhCpgg)
                    .HasMaxLength(50)
                    .HasColumnName("PH_cpgg");

                entity.Property(e => e.PhDgzs)
                    .HasMaxLength(50)
                    .HasColumnName("PH_dgzs");

                entity.Property(e => e.PhFeiyong)
                    .HasMaxLength(50)
                    .HasColumnName("PH_feiyong");

                entity.Property(e => e.PhFujia).HasColumnName("PH_fujia");

                entity.Property(e => e.PhGongri)
                    .HasMaxLength(50)
                    .HasColumnName("PH_gongri");

                entity.Property(e => e.PhLiang)
                    .HasMaxLength(50)
                    .HasColumnName("PH_liang");

                entity.Property(e => e.PhMxNumber)
                    .HasMaxLength(50)
                    .HasColumnName("PH_MxNumber");

                entity.Property(e => e.PhPhfs)
                    .HasMaxLength(50)
                    .HasColumnName("PH_phfs");

                entity.Property(e => e.PhPmsj)
                    .HasMaxLength(50)
                    .HasColumnName("PH_pmsj");

                entity.Property(e => e.PhYqwcsj)
                    .HasMaxLength(50)
                    .HasColumnName("PH_yqwcsj");

                entity.Property(e => e.PhYzlx)
                    .HasMaxLength(50)
                    .HasColumnName("PH_yzlx");
            });

            modelBuilder.Entity<TccPrintApplyMxQt>(entity =>
            {
                entity.HasKey(e => e.Qtid);

                entity.ToTable("TCC_PrintApply_Mx_qt");

                entity.Property(e => e.Qtid).HasColumnName("QTID");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.QtCaozuoren)
                    .HasMaxLength(50)
                    .HasColumnName("QT_caozuoren");

                entity.Property(e => e.QtCaozuorenId)
                    .HasMaxLength(50)
                    .HasColumnName("QT_caozuorenID");

                entity.Property(e => e.QtFeiyong)
                    .HasMaxLength(50)
                    .HasColumnName("QT_feiyong");

                entity.Property(e => e.QtGgfwCont).HasColumnName("QT_GgfwCont");

                entity.Property(e => e.QtGgfwGs)
                    .HasMaxLength(50)
                    .HasColumnName("QT_GgfwGs");

                entity.Property(e => e.QtGgfwRs)
                    .HasMaxLength(50)
                    .HasColumnName("QT_GgfwRs");

                entity.Property(e => e.QtGongri)
                    .HasMaxLength(50)
                    .HasColumnName("QT_gongri");

                entity.Property(e => e.QtLiang)
                    .HasMaxLength(50)
                    .HasColumnName("QT_liang");

                entity.Property(e => e.QtLwName)
                    .HasMaxLength(50)
                    .HasColumnName("QT_LwName");

                entity.Property(e => e.QtLwSl)
                    .HasMaxLength(50)
                    .HasColumnName("QT_LwSl");

                entity.Property(e => e.QtParentId).HasColumnName("QT_parentID");

                entity.Property(e => e.QtQuestion).HasColumnName("QT_Question");

                entity.Property(e => e.QtServiceType)
                    .HasMaxLength(50)
                    .HasColumnName("QT_ServiceType");

                entity.Property(e => e.QtServiceTypeId)
                    .HasMaxLength(50)
                    .HasColumnName("QT_ServiceTypeID");

                entity.Property(e => e.QtYqwcsj)
                    .HasMaxLength(50)
                    .HasColumnName("QT_yqwcsj");

                entity.Property(e => e.State)
                    .HasMaxLength(50)
                    .HasColumnName("state");
            });

            modelBuilder.Entity<TccPrintApplyMxQtGgfw>(entity =>
            {
                entity.HasKey(e => e.Ggfwid);

                entity.ToTable("TCC_PrintApply_Mx_qt_ggfw");

                entity.Property(e => e.Ggfwid).HasColumnName("GGFWID");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.GgfwBeizhu)
                    .HasMaxLength(50)
                    .HasColumnName("GGFW_beizhu");

                entity.Property(e => e.GgfwCaozuoren)
                    .HasMaxLength(50)
                    .HasColumnName("GGFW_caozuoren");

                entity.Property(e => e.GgfwChejian)
                    .HasMaxLength(50)
                    .HasColumnName("GGFW_chejian");

                entity.Property(e => e.GgfwFeiyong)
                    .HasMaxLength(50)
                    .HasColumnName("GGFW_feiyong");

                entity.Property(e => e.GgfwGongri)
                    .HasMaxLength(50)
                    .HasColumnName("GGFW_gongri");

                entity.Property(e => e.GgfwGs)
                    .HasMaxLength(50)
                    .HasColumnName("GGFW_gs");

                entity.Property(e => e.GgfwLiang)
                    .HasMaxLength(50)
                    .HasColumnName("GGFW_liang");

                entity.Property(e => e.GgfwMxNumber)
                    .HasMaxLength(50)
                    .HasColumnName("GGFW_MxNumber");

                entity.Property(e => e.GgfwServicecontent)
                    .HasMaxLength(50)
                    .HasColumnName("GGFW_servicecontent");

                entity.Property(e => e.GgfwSl)
                    .HasMaxLength(50)
                    .HasColumnName("GGFW_sl");

                entity.Property(e => e.GgfwYqwcsj)
                    .HasMaxLength(50)
                    .HasColumnName("GGFW_yqwcsj");
            });

            modelBuilder.Entity<TccPrintApplyMxQtLw>(entity =>
            {
                entity.HasKey(e => e.Lwid);

                entity.ToTable("TCC_PrintApply_Mx_qt_lw");

                entity.Property(e => e.Lwid).HasColumnName("LWID");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.LwBeizhu)
                    .HasMaxLength(50)
                    .HasColumnName("LW_beizhu");

                entity.Property(e => e.LwCaozuoren)
                    .HasMaxLength(50)
                    .HasColumnName("LW_caozuoren");

                entity.Property(e => e.LwChejian)
                    .HasMaxLength(50)
                    .HasColumnName("LW_chejian");

                entity.Property(e => e.LwFeiyong)
                    .HasMaxLength(50)
                    .HasColumnName("LW_feiyong");

                entity.Property(e => e.LwGongri)
                    .HasMaxLength(50)
                    .HasColumnName("LW_gongri");

                entity.Property(e => e.LwLiang)
                    .HasMaxLength(50)
                    .HasColumnName("LW_liang");

                entity.Property(e => e.LwMxNumber)
                    .HasMaxLength(50)
                    .HasColumnName("LW_MxNumber");

                entity.Property(e => e.LwName)
                    .HasMaxLength(50)
                    .HasColumnName("LW_name");

                entity.Property(e => e.LwSl)
                    .HasMaxLength(50)
                    .HasColumnName("LW_sl");

                entity.Property(e => e.LwYqwcsj)
                    .HasMaxLength(50)
                    .HasColumnName("LW_yqwcsj");
            });

            modelBuilder.Entity<TccPrintApplyMxQtSbwh>(entity =>
            {
                entity.HasKey(e => e.Sbwhid);

                entity.ToTable("TCC_PrintApply_Mx_qt_sbwh");

                entity.Property(e => e.Sbwhid).HasColumnName("SBWHID");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.SbwhBeizhu)
                    .HasMaxLength(50)
                    .HasColumnName("SBWH_beizhu");

                entity.Property(e => e.SbwhCaozuoren)
                    .HasMaxLength(50)
                    .HasColumnName("SBWH_caozuoren");

                entity.Property(e => e.SbwhChejian)
                    .HasMaxLength(50)
                    .HasColumnName("SBWH_chejian");

                entity.Property(e => e.SbwhFeiyong)
                    .HasMaxLength(50)
                    .HasColumnName("SBWH_feiyong");

                entity.Property(e => e.SbwhGongri)
                    .HasMaxLength(50)
                    .HasColumnName("SBWH_gongri");

                entity.Property(e => e.SbwhLiang)
                    .HasMaxLength(50)
                    .HasColumnName("SBWH_liang");

                entity.Property(e => e.SbwhMxNumber)
                    .HasMaxLength(50)
                    .HasColumnName("SBWH_MxNumber");

                entity.Property(e => e.SbwhQuestioncontent).HasColumnName("SBWH_questioncontent");

                entity.Property(e => e.SbwhYqwcsj)
                    .HasMaxLength(50)
                    .HasColumnName("SBWH_yqwcsj");
            });

            modelBuilder.Entity<TccPrintApplyMxTwfz>(entity =>
            {
                entity.HasKey(e => e.Twfzid);

                entity.ToTable("TCC_PrintApply_Mx_twfz");

                entity.Property(e => e.Twfzid).HasColumnName("TWFZID");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.State)
                    .HasMaxLength(50)
                    .HasColumnName("state");

                entity.Property(e => e.TwfzCaozuoren)
                    .HasMaxLength(50)
                    .HasColumnName("TWFZ_caozuoren");

                entity.Property(e => e.TwfzCaozuorenId)
                    .HasMaxLength(50)
                    .HasColumnName("TWFZ_caozuorenID");

                entity.Property(e => e.TwfzColor)
                    .HasMaxLength(50)
                    .HasColumnName("TWFZ_Color");

                entity.Property(e => e.TwfzCpcd)
                    .HasMaxLength(50)
                    .HasColumnName("TWFZ_cpcd");

                entity.Property(e => e.TwfzCpdsm)
                    .HasMaxLength(50)
                    .HasColumnName("TWFZ_cpdsm");

                entity.Property(e => e.TwfzCpgg)
                    .HasMaxLength(50)
                    .HasColumnName("TWFZ_cpgg");

                entity.Property(e => e.TwfzCpkd)
                    .HasMaxLength(50)
                    .HasColumnName("TWFZ_cpkd");

                entity.Property(e => e.TwfzDggg)
                    .HasMaxLength(50)
                    .HasColumnName("TWFZ_dggg");

                entity.Property(e => e.TwfzDgzs)
                    .HasMaxLength(50)
                    .HasColumnName("TWFZ_dgzs");

                entity.Property(e => e.TwfzFeiyong)
                    .HasMaxLength(50)
                    .HasColumnName("TWFZ_feiyong");

                entity.Property(e => e.TwfzFyfs)
                    .HasMaxLength(50)
                    .HasColumnName("TWFZ_fyfs");

                entity.Property(e => e.TwfzGongri)
                    .HasMaxLength(50)
                    .HasColumnName("TWFZ_gongri");

                entity.Property(e => e.TwfzLiang)
                    .HasMaxLength(50)
                    .HasColumnName("TWFZ_liang");

                entity.Property(e => e.TwfzParentId).HasColumnName("TWFZ_parentID");

                entity.Property(e => e.TwfzServiceKind)
                    .HasMaxLength(50)
                    .HasColumnName("TWFZ_ServiceKind");

                entity.Property(e => e.TwfzServiceType)
                    .HasMaxLength(50)
                    .HasColumnName("TWFZ_ServiceType");

                entity.Property(e => e.TwfzServiceTypeId)
                    .HasMaxLength(50)
                    .HasColumnName("TWFZ_ServiceTypeID");

                entity.Property(e => e.TwfzYqwcsj)
                    .HasMaxLength(50)
                    .HasColumnName("TWFZ_yqwcsj");

                entity.Property(e => e.TwfzYzks)
                    .HasMaxLength(50)
                    .HasColumnName("TWFZ_yzks");

                entity.Property(e => e.TwfzYzlx)
                    .HasMaxLength(50)
                    .HasColumnName("TWFZ_yzlx");
            });

            modelBuilder.Entity<TccPrintApplyMxZhZh>(entity =>
            {
                entity.ToTable("TCC_PrintApply_Mx_zh_zh");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.FormNumber).HasMaxLength(20);

                entity.Property(e => e.ZdBeizhu).HasColumnName("ZD_beizhu");

                entity.Property(e => e.ZdCaozuoren)
                    .HasMaxLength(50)
                    .HasColumnName("ZD_caozuoren");

                entity.Property(e => e.ZdChejian)
                    .HasMaxLength(50)
                    .HasColumnName("ZD_chejian");

                entity.Property(e => e.ZdCpgg)
                    .HasMaxLength(50)
                    .HasColumnName("ZD_cpgg");

                entity.Property(e => e.ZdDggg)
                    .HasMaxLength(50)
                    .HasColumnName("ZD_dggg");

                entity.Property(e => e.ZdDgzs)
                    .HasMaxLength(50)
                    .HasColumnName("ZD_dgzs");

                entity.Property(e => e.ZdFeiyong)
                    .HasMaxLength(50)
                    .HasColumnName("ZD_feiyong");

                entity.Property(e => e.ZdFujia).HasColumnName("ZD_fujia");

                entity.Property(e => e.ZdGongri)
                    .HasMaxLength(50)
                    .HasColumnName("ZD_gongri");

                entity.Property(e => e.ZdGxMxNumber)
                    .HasMaxLength(50)
                    .HasColumnName("ZD_gxMxNumber");

                entity.Property(e => e.ZdLiang)
                    .HasMaxLength(50)
                    .HasColumnName("ZD_liang");

                entity.Property(e => e.ZdMxNumber)
                    .HasMaxLength(50)
                    .HasColumnName("ZD_MxNumber");

                entity.Property(e => e.ZdYqwcsj)
                    .HasMaxLength(50)
                    .HasColumnName("ZD_yqwcsj");

                entity.Property(e => e.ZdZdfs)
                    .HasMaxLength(50)
                    .HasColumnName("ZD_zdfs");

                entity.Property(e => e.ZdZdtype)
                    .HasMaxLength(50)
                    .HasColumnName("ZD_ZDType");
            });

            modelBuilder.Entity<TccPrintApplyOrg>(entity =>
            {
                entity.ToTable("TCC_PrintApply_org");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.OrgId).HasColumnName("ORG_ID");

                entity.Property(e => e.OrgName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("ORG_NAME");

                entity.Property(e => e.OrgParId).HasColumnName("ORG_PAR_ID");

                entity.Property(e => e.OrgParName)
                    .HasMaxLength(50)
                    .HasColumnName("ORG_PAR_NAME");
            });

            modelBuilder.Entity<TccPrintApplyPriceCad>(entity =>
            {
                entity.HasKey(e => e.CadId);

                entity.ToTable("TCC_PrintApply_Price_Cad");

                entity.Property(e => e.CadId).HasColumnName("CAD_ID");

                entity.Property(e => e.CadCpgg)
                    .HasMaxLength(50)
                    .HasColumnName("CAD_cpgg");

                entity.Property(e => e.CadPrice)
                    .HasMaxLength(50)
                    .HasColumnName("CAD_price");

                entity.Property(e => e.CadYzlx)
                    .HasMaxLength(50)
                    .HasColumnName("CAD_yzlx");
            });

            modelBuilder.Entity<TccPrintApplyPriceCgfy>(entity =>
            {
                entity.HasKey(e => e.CgfyId);

                entity.ToTable("TCC_PrintApply_Price_Cgfy");

                entity.Property(e => e.CgfyId).HasColumnName("CGFY_ID");

                entity.Property(e => e.CgfyColor)
                    .HasMaxLength(50)
                    .HasColumnName("CGFY_Color");

                entity.Property(e => e.CgfyCpdsm)
                    .HasMaxLength(50)
                    .HasColumnName("CGFY_cpdsm");

                entity.Property(e => e.CgfyCpgg)
                    .HasMaxLength(50)
                    .HasColumnName("CGFY_cpgg");

                entity.Property(e => e.CgfyPrice)
                    .HasMaxLength(50)
                    .HasColumnName("CGFY_Price");

                entity.Property(e => e.CgfyYzks)
                    .HasMaxLength(50)
                    .HasColumnName("CGFY_yzks");

                entity.Property(e => e.CgfyYzlx)
                    .HasMaxLength(50)
                    .HasColumnName("CGFY_yzlx");
            });

            modelBuilder.Entity<TccPrintApplyPriceDy>(entity =>
            {
                entity.HasKey(e => e.DyId);

                entity.ToTable("TCC_PrintApply_Price_Dy");

                entity.Property(e => e.DyId).HasColumnName("DY_ID");

                entity.Property(e => e.DyColor)
                    .HasMaxLength(50)
                    .HasColumnName("DY_Color");

                entity.Property(e => e.DyCpdsm)
                    .HasMaxLength(50)
                    .HasColumnName("DY_cpdsm");

                entity.Property(e => e.DyCpgg)
                    .HasMaxLength(50)
                    .HasColumnName("DY_cpgg");

                entity.Property(e => e.DyPrice)
                    .HasMaxLength(50)
                    .HasColumnName("DY_Price");

                entity.Property(e => e.DyYzks)
                    .HasMaxLength(50)
                    .HasColumnName("DY_yzks");

                entity.Property(e => e.DyYzlx)
                    .HasMaxLength(50)
                    .HasColumnName("DY_yzlx");
            });

            modelBuilder.Entity<TccPrintApplyPriceGcfy>(entity =>
            {
                entity.HasKey(e => e.GcfyId);

                entity.ToTable("TCC_PrintApply_Price_Gcfy");

                entity.Property(e => e.GcfyId).HasColumnName("GCFY_ID");

                entity.Property(e => e.GcfyCpgg)
                    .HasMaxLength(50)
                    .HasColumnName("GCFY_cpgg");

                entity.Property(e => e.GcfyPrice)
                    .HasMaxLength(50)
                    .HasColumnName("GCFY_price");
            });

            modelBuilder.Entity<TccPrintApplyPriceLw>(entity =>
            {
                entity.HasKey(e => e.LwId);

                entity.ToTable("TCC_PrintApply_Price_Lw");

                entity.Property(e => e.LwId).HasColumnName("LW_ID");

                entity.Property(e => e.LwName)
                    .HasMaxLength(50)
                    .HasColumnName("LW_name");

                entity.Property(e => e.LwPrice)
                    .HasMaxLength(50)
                    .HasColumnName("LW_price");
            });

            modelBuilder.Entity<TccPrintApplyPricePh>(entity =>
            {
                entity.HasKey(e => e.PhId);

                entity.ToTable("TCC_PrintApply_Price_Ph");

                entity.Property(e => e.PhId).HasColumnName("PH_ID");

                entity.Property(e => e.PhPrice)
                    .HasMaxLength(50)
                    .HasColumnName("PH_price");

                entity.Property(e => e.PhYzlx)
                    .HasMaxLength(50)
                    .HasColumnName("PH_yzlx");
            });

            modelBuilder.Entity<TccPrintApplyPriceQt>(entity =>
            {
                entity.HasKey(e => e.QtId);

                entity.ToTable("TCC_PrintApply_Price_Qt");

                entity.Property(e => e.QtId).HasColumnName("QT_ID");

                entity.Property(e => e.QtCpgg)
                    .HasMaxLength(50)
                    .HasColumnName("QT_cpgg");

                entity.Property(e => e.QtFwlx)
                    .HasMaxLength(50)
                    .HasColumnName("QT_fwlx");

                entity.Property(e => e.QtPrice)
                    .HasMaxLength(50)
                    .HasColumnName("QT_price");
            });

            modelBuilder.Entity<TccPrintApplyPriceSm>(entity =>
            {
                entity.HasKey(e => e.SmId);

                entity.ToTable("TCC_PrintApply_Price_Sm");

                entity.Property(e => e.SmId).HasColumnName("SM_ID");

                entity.Property(e => e.SmCpColor)
                    .HasMaxLength(50)
                    .HasColumnName("SM_cpColor");

                entity.Property(e => e.SmDggg)
                    .HasMaxLength(50)
                    .HasColumnName("SM_dggg");

                entity.Property(e => e.SmPrice)
                    .HasMaxLength(50)
                    .HasColumnName("SM_price");
            });

            modelBuilder.Entity<TccPrintApplyPriceSy>(entity =>
            {
                entity.HasKey(e => e.SyId);

                entity.ToTable("TCC_PrintApply_Price_Sy");

                entity.Property(e => e.SyId).HasColumnName("SY_ID");

                entity.Property(e => e.SyCpgg)
                    .HasMaxLength(50)
                    .HasColumnName("SY_cpgg");

                entity.Property(e => e.SyPrice)
                    .HasMaxLength(50)
                    .HasColumnName("SY_price");
            });

            modelBuilder.Entity<TccPrintApplyPriceZh>(entity =>
            {
                entity.HasKey(e => e.ZhId);

                entity.ToTable("TCC_PrintApply_Price_Zh");

                entity.Property(e => e.ZhId).HasColumnName("ZH_ID");

                entity.Property(e => e.ZhCpgg)
                    .HasMaxLength(50)
                    .HasColumnName("ZH_cpgg");

                entity.Property(e => e.ZhPrice)
                    .HasMaxLength(50)
                    .HasColumnName("ZH_price");

                entity.Property(e => e.ZhZdlx)
                    .HasMaxLength(50)
                    .HasColumnName("ZH_zdlx");
            });

            modelBuilder.Entity<TccPrintApplyRole>(entity =>
            {
                entity.ToTable("TCC_PrintApply_role");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.RoleId).HasColumnName("ROLE_ID");

                entity.Property(e => e.RoleName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("ROLE_NAME");
            });

            modelBuilder.Entity<TccPrintApplyServicetype>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_PrintApply_servicetype");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ServiceClass)
                    .HasMaxLength(50)
                    .HasColumnName("Service_CLASS");

                entity.Property(e => e.ServiceId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Service_ID");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(50)
                    .HasColumnName("Service_NAME");

                entity.Property(e => e.ServiceType)
                    .HasMaxLength(50)
                    .HasColumnName("Service_TYPE");
            });

            modelBuilder.Entity<TccPrintApplyTempMouthCostDept>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_PrintApply_TEMP_MouthCost_Dept");

                entity.Property(e => e.Deptid)
                    .HasMaxLength(50)
                    .HasColumnName("deptid");

                entity.Property(e => e.JsYm)
                    .HasMaxLength(50)
                    .HasColumnName("js_ym");

                entity.Property(e => e.Lxtype)
                    .HasMaxLength(50)
                    .HasColumnName("lxtype");

                entity.Property(e => e.Totalcost)
                    .HasMaxLength(50)
                    .HasColumnName("totalcost");

                entity.Property(e => e.Updatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("updatetime");
            });

            modelBuilder.Entity<TccPrintApplyTempMouthCostProj>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_PrintApply_TEMP_MouthCost_Proj");

                entity.Property(e => e.JsYm)
                    .HasMaxLength(50)
                    .HasColumnName("js_ym");

                entity.Property(e => e.Lxtype)
                    .HasMaxLength(50)
                    .HasColumnName("lxtype");

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(50)
                    .HasColumnName("project_id");

                entity.Property(e => e.Totalcost)
                    .HasMaxLength(50)
                    .HasColumnName("totalcost");

                entity.Property(e => e.Updatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("updatetime");
            });

            modelBuilder.Entity<TccPrintApplyTyprintFare>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_PrintApply_TYPrintFare");

                entity.Property(e => e.AcceptCompayCode).HasMaxLength(50);

                entity.Property(e => e.ApplyDept).HasMaxLength(50);

                entity.Property(e => e.ApplyDeptNo).HasMaxLength(50);

                entity.Property(e => e.ApplyEndDate).HasColumnType("datetime");

                entity.Property(e => e.ApplyLoginUser).HasMaxLength(50);

                entity.Property(e => e.ApplyMobile).HasMaxLength(50);

                entity.Property(e => e.ApplyName).HasMaxLength(50);

                entity.Property(e => e.ApplyStartDate).HasColumnType("datetime");

                entity.Property(e => e.ApplyTimeType).HasMaxLength(50);

                entity.Property(e => e.ApplyUserKey).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.PayCompnayCode).HasMaxLength(50);

                entity.Property(e => e.QuarterFare).HasColumnType("money");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");
            });

            modelBuilder.Entity<TccPrintApplyTyprintFareInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_PrintApply_TYPrintFareInfo");

                entity.Property(e => e.AcceptCompayCode).HasMaxLength(50);

                entity.Property(e => e.AcceptFare).HasColumnType("money");

                entity.Property(e => e.ApplyEndDate).HasColumnType("datetime");

                entity.Property(e => e.ApplyStartDate).HasColumnType("datetime");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ManagerInfo).HasMaxLength(50);

                entity.Property(e => e.ProjectNo).HasMaxLength(50);

                entity.Property(e => e.UseDeptId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("UseDeptID");
            });

            modelBuilder.Entity<TccPrintApplyUser>(entity =>
            {
                entity.ToTable("TCC_PrintApply_user");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .HasColumnName("USER_NAME");

                entity.Property(e => e.UserOrgid).HasColumnName("USER_ORGID");

                entity.Property(e => e.UserRoleid).HasColumnName("USER_ROLEID");
            });

            modelBuilder.Entity<TccProdDeptReallocationAwardDespense>(entity =>
            {
                entity.ToTable("TCC_ProdDeptReallocationAwardDespense");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyDate)
                    .HasColumnType("datetime")
                    .HasColumnName("APPLY_DATE");

                entity.Property(e => e.ApplyDept)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_DEPT");

                entity.Property(e => e.ApplyDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_DEPT_CODE");

                entity.Property(e => e.ApplyUserLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_USER_LOGIN_NAME");

                entity.Property(e => e.ApplyUserName)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_USER_NAME");

                entity.Property(e => e.AwardAlreadyPay).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AwardAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AWARD_AMOUNT")
                    .HasComment("年度奖金总预算");

                entity.Property(e => e.AwardRemaining).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AwayDaysPrice)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AwayDays_Price");

                entity.Property(e => e.CurrQreference)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Curr_QReference");

                entity.Property(e => e.FormSerialNumber)
                    .HasMaxLength(50)
                    .HasColumnName("FORM_SERIAL_NUMBER");

                entity.Property(e => e.IncidentNo).HasColumnName("INCIDENT_NO");

                entity.Property(e => e.OvertimePrice)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Overtime_Price");

                entity.Property(e => e.ProcessFinishDate).HasColumnType("datetime");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(100)
                    .HasColumnName("PROCESS_NAME");

                entity.Property(e => e.ProcessStatus)
                    .HasColumnName("PROCESS_STATUS")
                    .HasComment("一般Null为在走、1是审批归档、2是撤销");

                entity.Property(e => e.Remark).HasMaxLength(50);
            });

            modelBuilder.Entity<TccProdDeptReallocationAwardPay>(entity =>
            {
                entity.ToTable("TCC_ProdDeptReallocationAwardPay");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AllocatedPrizeAmount)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("ALLOCATED_PRIZE_AMOUNT");

                entity.Property(e => e.ApplyDate)
                    .HasColumnType("datetime")
                    .HasColumnName("APPLY_DATE");

                entity.Property(e => e.ApplyDept)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_DEPT");

                entity.Property(e => e.ApplyDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_DEPT_CODE");

                entity.Property(e => e.ApplyUserLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_USER_LOGIN_NAME");

                entity.Property(e => e.ApplyUserName)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_USER_NAME");

                entity.Property(e => e.AwayDaysAward)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AWAY_DAYS_AWARD");

                entity.Property(e => e.FormSerialNumber)
                    .HasMaxLength(50)
                    .HasColumnName("FORM_SERIAL_NUMBER");

                entity.Property(e => e.IncidentFk).HasColumnName("INCIDENT_FK");

                entity.Property(e => e.IncidentNo).HasColumnName("INCIDENT_NO");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(100)
                    .HasColumnName("PROCESS_NAME");

                entity.Property(e => e.ProcessStatus).HasColumnName("PROCESS_STATUS");

                entity.Property(e => e.RealWorkAward)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("REAL_WORK_AWARD");

                entity.Property(e => e.RemainingPrizeAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("REMAINING_PRIZE_AMOUNT");

                entity.Property(e => e.TotalAwardAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("TOTAL_AWARD_AMOUNT");

                entity.Property(e => e.WorkEffeAward)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("WORK_EFFE_AWARD");
            });

            modelBuilder.Entity<TccProdDeptReallocationAwardPayDetailList>(entity =>
            {
                entity.ToTable("TCC_ProdDeptReallocationAwardPay_DetailList");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ApplyDate).HasColumnType("datetime");

                entity.Property(e => e.AssignFromUser).HasMaxLength(100);

                entity.Property(e => e.AssignFromUserIdentity).HasMaxLength(100);

                entity.Property(e => e.AssignFromUserRealName).HasMaxLength(100);

                entity.Property(e => e.AwayDays).HasColumnType("decimal(18, 1)");

                entity.Property(e => e.AwayDaysAward).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DeptCode).HasMaxLength(100);

                entity.Property(e => e.DeptName).HasMaxLength(100);

                entity.Property(e => e.FormNumber).HasMaxLength(100);

                entity.Property(e => e.HoursCheck).HasColumnType("decimal(18, 1)");

                entity.Property(e => e.Incident).HasComment("对应奖金发放流程主表实例号");

                entity.Property(e => e.IncidentFk).HasColumnName("INCIDENT_FK");

                entity.Property(e => e.PersonLoginName).HasMaxLength(100);

                entity.Property(e => e.PersonRealName).HasMaxLength(100);

                entity.Property(e => e.ProcessName).HasMaxLength(100);

                entity.Property(e => e.RealWorkAward).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ReceiverDate)
                    .HasColumnType("datetime")
                    .HasComment("进入奖金池时间");

                entity.Property(e => e.Status).HasComment("奖金状态  1 未进奖金池  3  已进奖金池");

                entity.Property(e => e.UserIdentity).HasMaxLength(100);

                entity.Property(e => e.WorkEffeAward).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<TccProdDeptRelcAwardDeptInfoSavePlan>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_ProdDeptRelcAwardDeptInfoSavePlan");

                entity.Property(e => e.ApplyDept)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_DEPT");

                entity.Property(e => e.AwayDays).HasColumnName("Away_Days");

                entity.Property(e => e.DeptCode).HasMaxLength(50);

                entity.Property(e => e.PersonNum).HasColumnName("Person_Num");

                entity.Property(e => e.WorkOverTime)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Work_OverTime");
            });

            modelBuilder.Entity<TccProdDeptRelcAwardDespDetl>(entity =>
            {
                entity.ToTable("TCC_ProdDeptRelcAwardDespDetl");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyDate)
                    .HasColumnType("datetime")
                    .HasColumnName("APPLY_DATE")
                    .HasComment("入池时间");

                entity.Property(e => e.ApplyDept)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_DEPT");

                entity.Property(e => e.ApplyDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_DEPT_CODE");

                entity.Property(e => e.ApplyUserLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_USER_LOGIN_NAME");

                entity.Property(e => e.ApplyUserName)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_USER_NAME");

                entity.Property(e => e.AwarRelcAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AwarRelc_AMOUNT");

                entity.Property(e => e.AwayDays).HasColumnName("Away_Days");

                entity.Property(e => e.AwayDaysAward)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Away_Days_Award");

                entity.Property(e => e.FormSerialNumber)
                    .HasMaxLength(50)
                    .HasColumnName("FORM_SERIAL_NUMBER");

                entity.Property(e => e.IncidentNo).HasColumnName("INCIDENT_NO");

                entity.Property(e => e.PersonNum).HasColumnName("Person_Num");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(100)
                    .HasColumnName("Process_Name");

                entity.Property(e => e.ProcessStatus)
                    .HasColumnName("PROCESS_STATUS")
                    .HasComment("入池状态");

                entity.Property(e => e.RealWorkAward)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Real_Work_Award");

                entity.Property(e => e.Remark)
                    .HasMaxLength(50)
                    .HasComment("记录审批人login名");

                entity.Property(e => e.WorkEffeAward)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Work_Effe_Award");

                entity.Property(e => e.WorkOverTime)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Work_OverTime");
            });

            modelBuilder.Entity<TccProjectAdvanReceivedHistory>(entity =>
            {
                entity.ToTable("TCC_ProjectAdvanReceivedHistory");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ContractAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("合同金额");

                entity.Property(e => e.ContractCode)
                    .HasMaxLength(100)
                    .HasComment("合同编号");

                entity.Property(e => e.ContractName)
                    .HasMaxLength(100)
                    .HasComment("合同名称");

                entity.Property(e => e.Currency)
                    .HasMaxLength(100)
                    .HasComment("币种");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(100)
                    .HasComment("项目编号");

                entity.Property(e => e.ProjectManager)
                    .HasMaxLength(100)
                    .HasComment("项目经理名称");

                entity.Property(e => e.ProjectManagerIdentityId)
                    .HasMaxLength(50)
                    .HasComment("项目经理身份证号");

                entity.Property(e => e.ProjectManagerLoginName)
                    .HasMaxLength(100)
                    .HasComment("项目经理登录名");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(200)
                    .HasComment("项目名称");

                entity.Property(e => e.ProjectType)
                    .HasMaxLength(100)
                    .HasComment("项目类型");

                entity.Property(e => e.ReceiveAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("收款金额");

                entity.Property(e => e.ReceiveType)
                    .HasMaxLength(100)
                    .HasComment("收款类型");

                entity.Property(e => e.ReceivedBatch).HasComment("收款批次");

                entity.Property(e => e.ReceivedDate)
                    .HasColumnType("datetime")
                    .HasComment("收款日期");
            });

            modelBuilder.Entity<TccProjectArtificialTimeHistory>(entity =>
            {
                entity.ToTable("TCC_Project_ArtificialTime_History");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AwardCode)
                    .HasMaxLength(50)
                    .HasComment("奖项编号");

                entity.Property(e => e.Incident).HasComment("实例号");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(200)
                    .HasComment("项目名称");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .HasComment("项目编号");
            });

            modelBuilder.Entity<TccProjectAwardAllAssignApply>(entity =>
            {
                entity.ToTable("TCC_ProjectAwardAllAssignApply");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyDate).HasColumnType("datetime");

                entity.Property(e => e.ApplyDept).HasMaxLength(50);

                entity.Property(e => e.ApplyDeptNo).HasMaxLength(50);

                entity.Property(e => e.ApplyLoginUser).HasMaxLength(50);

                entity.Property(e => e.ApplyName).HasMaxLength(50);

                entity.Property(e => e.ApplyPhone).HasMaxLength(50);

                entity.Property(e => e.ApplyUserIdentity).HasMaxLength(50);

                entity.Property(e => e.AwardApplyProcessName).HasMaxLength(50);

                entity.Property(e => e.AwardApplyRecordId).HasColumnName("AwardApplyRecordID");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectNo).HasMaxLength(50);
            });

            modelBuilder.Entity<TccProjectAwardAllowSendStatus>(entity =>
            {
                entity.ToTable("TCC_ProjectAward_AllowSendStatus");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AllowSendStatus)
                    .HasColumnName("ALLOW_SEND_STATUS")
                    .HasDefaultValueSql("((0))")
                    .HasComment("0 不运行继续发放  1 允许继续发放 ");

                entity.Property(e => e.Creattime)
                    .HasMaxLength(50)
                    .HasColumnName("CREATTIME");

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .HasColumnName("OPERATOR");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .HasColumnName("PROJECT_CODE");
            });

            modelBuilder.Entity<TccProjectAwardApplyProcess>(entity =>
            {
                entity.ToTable("TCC_ProjectAwardApplyProcess");

                entity.HasComment("项目奖发放流程，只申请项目奖，但是会在审核的时候有前期报价奖加入，最终也只会通过该流程发放这两类奖项");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.ActivityAward)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("工程活动奖");

                entity.Property(e => e.AdjustAward)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("管理活动、调剂奖");

                entity.Property(e => e.AfterCurrentApproveLeftMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("本次批准后剩余金额");

                entity.Property(e => e.ApplyDate)
                    .HasColumnType("datetime")
                    .HasComment("申请日期");

                entity.Property(e => e.ApplyDept)
                    .HasMaxLength(200)
                    .HasComment("申请人部门");

                entity.Property(e => e.ApplyDeptCode)
                    .HasMaxLength(200)
                    .HasComment("申请人部门编号");

                entity.Property(e => e.ApplyUserLoginName)
                    .HasMaxLength(200)
                    .HasComment("申请人帐号");

                entity.Property(e => e.ApplyUserName)
                    .HasMaxLength(200)
                    .HasComment("申请人姓名");

                entity.Property(e => e.ApproveMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("项目部技术部核定额");

                entity.Property(e => e.ArchiveDate).HasColumnType("datetime");

                entity.Property(e => e.AwardComposeCode)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("((3003))");

                entity.Property(e => e.AwardStatus)
                    .HasDefaultValueSql("((0))")
                    .HasComment("奖金数据状态");

                entity.Property(e => e.Balances)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("奖金余额");

                entity.Property(e => e.ContractChargeProportion)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("合同收费比例");

                entity.Property(e => e.ContractMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("合同额");

                entity.Property(e => e.ContractType)
                    .HasMaxLength(100)
                    .HasComment("合同类型");

                entity.Property(e => e.CurrentLeftMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("当前剩余金额");

                entity.Property(e => e.CurrentMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("本次申请金额");

                entity.Property(e => e.CurrentQapproveMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("CurrentQApproveMoney")
                    .HasDefaultValueSql("((0))")
                    .HasComment("当前季度批准额");

                entity.Property(e => e.FirstAssignPlan).HasComment("第一次分配方案");

                entity.Property(e => e.ForeignUnitAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("其中外单位金额");

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(200)
                    .HasComment("申请单号");

                entity.Property(e => e.IdentityId)
                    .HasMaxLength(200)
                    .HasComment("身份证号");

                entity.Property(e => e.IncidentNo)
                    .HasDefaultValueSql("((0))")
                    .HasComment("实例号");

                entity.Property(e => e.ManageAward).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OldProjectAward).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OldZanTiaoAwardMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PaymentyMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("已发放额");

                entity.Property(e => e.PorjectApproveBiLi)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("项目部审批后项目奖金累积发放比例");

                entity.Property(e => e.PorjectApproveProjectStatus)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("项目部、技术部审核项目进度状态");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(200)
                    .HasComment("流程名");

                entity.Property(e => e.ProjectApproveAdjustAward)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("项目部、技术部审核调剂奖");

                entity.Property(e => e.ProjectApproveManageAward).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ProjectAward)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("项目奖金总额");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(100)
                    .HasComment("项目编号");

                entity.Property(e => e.ProjectDesc)
                    .HasMaxLength(1000)
                    .HasComment("项目情况简述");

                entity.Property(e => e.ProjectDetailStatus).HasMaxLength(200);

                entity.Property(e => e.ProjectManagerAdjustMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("项目部技术部主任核定调剂奖金额");

                entity.Property(e => e.ProjectManagerApproveMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("项目部技术部主任核定金额");

                entity.Property(e => e.ProjectManagerBiLi)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("项目部经理审批后项目奖金累积发放比例");

                entity.Property(e => e.ProjectManagerManageMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ProjectManagerProjectStatus).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(100)
                    .HasComment("项目名称");

                entity.Property(e => e.ProjectStatus)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("项目进展状态");

                entity.Property(e => e.ProjectType)
                    .HasMaxLength(200)
                    .HasComment("项目类型");

                entity.Property(e => e.Proportion)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("累计发放比例");

                entity.Property(e => e.ReceiveMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SecondAssignPlan).HasComment("第二次分配方案");

                entity.Property(e => e.Status)
                    .HasDefaultValueSql("((0))")
                    .HasComment("流程状态");

                entity.Property(e => e.YearAwardBudget)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("年度预算金额");

                entity.Property(e => e.YearBalance)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("年度剩余金额");

                entity.Property(e => e.YearPayment)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("年度已发放额");

                entity.Property(e => e.ZanTiaoAwardMoney).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<TccProjectAwardNewFlowAllowProject>(entity =>
            {
                entity.ToTable("TCC_ProjectAward_NewFlow_AllowProject");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CreatTime)
                    .HasColumnType("datetime")
                    .HasColumnName("CREAT_TIME");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .HasColumnName("PROJECT_CODE");
            });

            modelBuilder.Entity<TccProjectAwardPaymentHistroy>(entity =>
            {
                entity.ToTable("TCC_ProjectAwardPaymentHistroy");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApproveMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ArchiveDate)
                    .HasColumnType("datetime")
                    .HasComment("进入奖金池时间");

                entity.Property(e => e.AwardComposed)
                    .HasMaxLength(50)
                    .HasComment("奖项名称");

                entity.Property(e => e.AwardComposedCode).HasMaxLength(50);

                entity.Property(e => e.AwardDesc)
                    .HasMaxLength(100)
                    .HasComment("奖项描述。如：项目奖-工作节点奖");

                entity.Property(e => e.AwardMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FormNumber).HasMaxLength(100);

                entity.Property(e => e.IncidentNo).HasComment("对应奖金发放流程主表实例号");

                entity.Property(e => e.PaymentDate).HasColumnType("datetime");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(50);

                entity.Property(e => e.ProjectMajor).HasMaxLength(50);

                entity.Property(e => e.ProjectName).HasMaxLength(400);

                entity.Property(e => e.ProjectType).HasMaxLength(50);

                entity.Property(e => e.ReceiverMajor).HasMaxLength(50);

                entity.Property(e => e.ReceiverRole).HasMaxLength(50);

                entity.Property(e => e.ReceiverUserIdentityId).HasMaxLength(50);

                entity.Property(e => e.ReceiverUserLoginName).HasMaxLength(50);

                entity.Property(e => e.ReceiverUserName).HasMaxLength(50);

                entity.Property(e => e.SenderLoginName).HasMaxLength(50);

                entity.Property(e => e.SenderUserName).HasMaxLength(50);

                entity.Property(e => e.Status).HasComment("奖金状态  1 未进奖金池  3  已进奖金池");

                entity.Property(e => e.SubAward)
                    .HasMaxLength(50)
                    .HasComment("子奖项名称，如：工作节点奖");

                entity.Property(e => e.SubAwardCode).HasMaxLength(50);
            });

            modelBuilder.Entity<TccProjectAwardSendApplyMileStone>(entity =>
            {
                entity.ToTable("TCC_ProjectAwardSendApply_MileStone");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("APPLY_AMOUNT");

                entity.Property(e => e.ApplyDate)
                    .HasColumnType("datetime")
                    .HasColumnName("APPLY_DATE");

                entity.Property(e => e.ApplyDept)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_DEPT");

                entity.Property(e => e.ApplyDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_DEPT_CODE");

                entity.Property(e => e.ApplyUserLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_USER_LOGIN_NAME");

                entity.Property(e => e.ApplyUserName)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_USER_NAME");

                entity.Property(e => e.BalanceAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BALANCE_AMOUNT");

                entity.Property(e => e.FormSerialNumber)
                    .HasMaxLength(50)
                    .HasColumnName("FORM_SERIAL_NUMBER");

                entity.Property(e => e.IncidentNo).HasColumnName("INCIDENT_NO");

                entity.Property(e => e.PaymentAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PAYMENT_AMOUNT");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(100)
                    .HasColumnName("PROCESS_NAME");

                entity.Property(e => e.ProcessStatus).HasColumnName("PROCESS_STATUS");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .HasColumnName("PROJECT_CODE");

                entity.Property(e => e.ProjectMajor)
                    .HasMaxLength(50)
                    .HasColumnName("PROJECT_MAJOR");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(200)
                    .HasColumnName("PROJECT_NAME");

                entity.Property(e => e.ProjectType)
                    .HasMaxLength(50)
                    .HasColumnName("PROJECT_TYPE");

                entity.Property(e => e.TotalAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("TOTAL_AMOUNT");
            });

            modelBuilder.Entity<TccProjectAwardSendApplyProjectImprove>(entity =>
            {
                entity.ToTable("TCC_ProjectAwardSendApply_ProjectImprove");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("APPLY_AMOUNT");

                entity.Property(e => e.ApplyDate)
                    .HasColumnType("datetime")
                    .HasColumnName("APPLY_DATE");

                entity.Property(e => e.ApplyDept)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_DEPT");

                entity.Property(e => e.ApplyDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_DEPT_CODE");

                entity.Property(e => e.ApplyUserLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_USER_LOGIN_NAME");

                entity.Property(e => e.ApplyUserName)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_USER_NAME");

                entity.Property(e => e.BalanceAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BALANCE_AMOUNT");

                entity.Property(e => e.FormSerialNumber)
                    .HasMaxLength(50)
                    .HasColumnName("FORM_SERIAL_NUMBER");

                entity.Property(e => e.IncidentNo).HasColumnName("INCIDENT_NO");

                entity.Property(e => e.PaymentAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PAYMENT_AMOUNT");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(100)
                    .HasColumnName("PROCESS_NAME");

                entity.Property(e => e.ProcessStatus).HasColumnName("PROCESS_STATUS");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .HasColumnName("PROJECT_CODE");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(200)
                    .HasColumnName("PROJECT_NAME");

                entity.Property(e => e.ProjectType)
                    .HasMaxLength(50)
                    .HasColumnName("PROJECT_TYPE");

                entity.Property(e => e.TotalAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("TOTAL_AMOUNT");
            });

            modelBuilder.Entity<TccProjectAwardSendApplyProjectManage>(entity =>
            {
                entity.ToTable("TCC_ProjectAwardSendApply_ProjectManage");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("APPLY_AMOUNT");

                entity.Property(e => e.ApplyDate)
                    .HasColumnType("datetime")
                    .HasColumnName("APPLY_DATE");

                entity.Property(e => e.ApplyDept)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_DEPT");

                entity.Property(e => e.ApplyDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_DEPT_CODE");

                entity.Property(e => e.ApplyUserLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_USER_LOGIN_NAME");

                entity.Property(e => e.ApplyUserName)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_USER_NAME");

                entity.Property(e => e.BalanceAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BALANCE_AMOUNT");

                entity.Property(e => e.FormSerialNumber)
                    .HasMaxLength(50)
                    .HasColumnName("FORM_SERIAL_NUMBER");

                entity.Property(e => e.IncidentNo).HasColumnName("INCIDENT_NO");

                entity.Property(e => e.PaymentAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PAYMENT_AMOUNT");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(100)
                    .HasColumnName("PROCESS_NAME");

                entity.Property(e => e.ProcessStatus).HasColumnName("PROCESS_STATUS");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .HasColumnName("PROJECT_CODE");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(200)
                    .HasColumnName("PROJECT_NAME");

                entity.Property(e => e.ProjectType)
                    .HasMaxLength(50)
                    .HasColumnName("PROJECT_TYPE");

                entity.Property(e => e.TotalAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("TOTAL_AMOUNT");
            });

            modelBuilder.Entity<TccProjectAwardSendApplyWorkQuality>(entity =>
            {
                entity.ToTable("TCC_ProjectAwardSendApply_WorkQuality");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("APPLY_AMOUNT");

                entity.Property(e => e.ApplyDate)
                    .HasColumnType("datetime")
                    .HasColumnName("APPLY_DATE");

                entity.Property(e => e.ApplyDept)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_DEPT");

                entity.Property(e => e.ApplyDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_DEPT_CODE");

                entity.Property(e => e.ApplyUserLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_USER_LOGIN_NAME");

                entity.Property(e => e.ApplyUserName)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_USER_NAME");

                entity.Property(e => e.BalanceAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BALANCE_AMOUNT");

                entity.Property(e => e.FormSerialNumber)
                    .HasMaxLength(50)
                    .HasColumnName("FORM_SERIAL_NUMBER");

                entity.Property(e => e.IncidentNo).HasColumnName("INCIDENT_NO");

                entity.Property(e => e.PaymentAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PAYMENT_AMOUNT");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(100)
                    .HasColumnName("PROCESS_NAME");

                entity.Property(e => e.ProcessStatus).HasColumnName("PROCESS_STATUS");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .HasColumnName("PROJECT_CODE");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(200)
                    .HasColumnName("PROJECT_NAME");

                entity.Property(e => e.ProjectType)
                    .HasMaxLength(50)
                    .HasColumnName("PROJECT_TYPE");

                entity.Property(e => e.TotalAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("TOTAL_AMOUNT");
            });

            modelBuilder.Entity<TccProjectAwardSendDict>(entity =>
            {
                entity.ToTable("TCC_ProjectAwardSend_DICT");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BelongDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("BELONG_DEPT_CODE");

                entity.Property(e => e.BelongDeptName)
                    .HasMaxLength(50)
                    .HasColumnName("BELONG_DEPT_NAME");

                entity.Property(e => e.BelongProjectType)
                    .HasMaxLength(50)
                    .HasColumnName("BELONG_PROJECT_TYPE");

                entity.Property(e => e.DictName)
                    .HasMaxLength(50)
                    .HasColumnName("DICT_NAME");

                entity.Property(e => e.DictTypeName)
                    .HasMaxLength(50)
                    .HasColumnName("DICT_TYPE_NAME");

                entity.Property(e => e.DictValue)
                    .HasMaxLength(50)
                    .HasColumnName("DICT_VALUE");

                entity.Property(e => e.Need).HasColumnName("NEED");

                entity.Property(e => e.OrderId).HasColumnName("ORDER_ID");

                entity.Property(e => e.SenderRole)
                    .HasMaxLength(50)
                    .HasColumnName("SENDER_ROLE");
            });

            modelBuilder.Entity<TccProjectAwardSendPlanApply>(entity =>
            {
                entity.ToTable("TCC_ProjectAwardSendPlanApply");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyDate)
                    .HasColumnType("datetime")
                    .HasColumnName("APPLY_DATE");

                entity.Property(e => e.ApplyDept)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_DEPT");

                entity.Property(e => e.ApplyDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_DEPT_CODE");

                entity.Property(e => e.ApplyUserLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_USER_LOGIN_NAME");

                entity.Property(e => e.ApplyUserName)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_USER_NAME");

                entity.Property(e => e.FormSerialNumber)
                    .HasMaxLength(50)
                    .HasColumnName("FORM_SERIAL_NUMBER");

                entity.Property(e => e.IncidentNo).HasColumnName("INCIDENT_NO");

                entity.Property(e => e.OldprocessSendAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("OLDPROCESS_SEND_AMOUNT");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(100)
                    .HasColumnName("PROCESS_NAME");

                entity.Property(e => e.ProcessStatus).HasColumnName("PROCESS_STATUS");

                entity.Property(e => e.ProjectAwardAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PROJECT_AWARD_AMOUNT");

                entity.Property(e => e.ProjectAwardCode)
                    .HasMaxLength(4)
                    .HasColumnName("PROJECT_AWARD_CODE");

                entity.Property(e => e.ProjectAwardName)
                    .HasMaxLength(50)
                    .HasColumnName("PROJECT_AWARD_NAME");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .HasColumnName("PROJECT_CODE");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(200)
                    .HasColumnName("PROJECT_NAME");

                entity.Property(e => e.ProjectType)
                    .HasMaxLength(50)
                    .HasColumnName("PROJECT_TYPE");

                entity.Property(e => e.RatifyAwardAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("RATIFY_AWARD_AMOUNT");
            });

            modelBuilder.Entity<TccProjectAwardSendPlanDetailAwardType>(entity =>
            {
                entity.ToTable("TCC_ProjectAwardSendPlan_Detail_AwardType");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyDate)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_DATE");

                entity.Property(e => e.ProcessIncidentNoFk)
                    .HasColumnName("PROCESS_INCIDENT_NO_FK")
                    .HasComment("奖金分配方案主表TCC_ProjectAwardSendPlanApply实例号外键");

                entity.Property(e => e.ProjectAwardAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PROJECT_AWARD_AMOUNT");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .HasColumnName("PROJECT_CODE");

                entity.Property(e => e.SubAwardAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("SUB_AWARD_AMOUNT");

                entity.Property(e => e.SubAwardCode)
                    .HasMaxLength(10)
                    .HasColumnName("SUB_AWARD_CODE");

                entity.Property(e => e.SubAwardName)
                    .HasMaxLength(50)
                    .HasColumnName("SUB_AWARD_NAME");

                entity.Property(e => e.SubAwardPercentage)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("SUB_AWARD_PERCENTAGE");
            });

            modelBuilder.Entity<TccProjectAwardSendPlanDetailDesignMajor>(entity =>
            {
                entity.ToTable("TCC_ProjectAwardSendPlan_Detail_DesignMajor");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyDate)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_DATE");

                entity.Property(e => e.CanSend)
                    .HasColumnName("CAN_SEND")
                    .HasComment("是否允许发放  1：能   其他值：不能");

                entity.Property(e => e.DeptDesignPercentage)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("DEPT_DESIGN_PERCENTAGE");

                entity.Property(e => e.DeptProjectPercentage)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("DEPT_PROJECT_PERCENTAGE");

                entity.Property(e => e.DesignDeptAwardAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("DESIGN_DEPT_AWARD_AMOUNT");

                entity.Property(e => e.DesignMajorAwardAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("DESIGN_MAJOR_AWARD_AMOUNT");

                entity.Property(e => e.DesignMajorCode)
                    .HasMaxLength(50)
                    .HasColumnName("DESIGN_MAJOR_CODE");

                entity.Property(e => e.DesignMajorDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("DESIGN_MAJOR_DEPT_CODE");

                entity.Property(e => e.DesignMajorDeptName)
                    .HasMaxLength(50)
                    .HasColumnName("DESIGN_MAJOR_DEPT_NAME");

                entity.Property(e => e.DesignMajorName)
                    .HasMaxLength(50)
                    .HasColumnName("DESIGN_MAJOR_NAME");

                entity.Property(e => e.MajorDesignPercentage)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("MAJOR_DESIGN_PERCENTAGE");

                entity.Property(e => e.MajorProjectPercentage)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("MAJOR_PROJECT_PERCENTAGE");

                entity.Property(e => e.ProcessIncidentNoFk)
                    .HasColumnName("PROCESS_INCIDENT_NO_FK")
                    .HasComment("奖金分配方案主表TCC_ProjectAwardSendPlanApply实例号外键");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .HasColumnName("PROJECT_CODE");
            });

            modelBuilder.Entity<TccProjectAwardSendPlanDetailProjectMajor>(entity =>
            {
                entity.ToTable("TCC_ProjectAwardSendPlan_Detail_ProjectMajor");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyDate)
                    .HasMaxLength(50)
                    .HasColumnName("APPLY_DATE");

                entity.Property(e => e.CanSend)
                    .HasColumnName("CAN_SEND")
                    .HasComment("是否允许发放  1：能   其他值：不能");

                entity.Property(e => e.MilestoneAwardAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MILESTONE_AWARD_AMOUNT");

                entity.Property(e => e.ProcessIncidentNoFk)
                    .HasColumnName("PROCESS_INCIDENT_NO_FK")
                    .HasComment("奖金分配方案主表TCC_ProjectAwardSendPlanApply实例号外键");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .HasColumnName("PROJECT_CODE");

                entity.Property(e => e.ProjectMajorAwardAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("PROJECT_MAJOR_AWARD_AMOUNT");

                entity.Property(e => e.ProjectMajorAwardPercentage)
                    .HasColumnType("decimal(5, 2)")
                    .HasColumnName("PROJECT_MAJOR_AWARD_PERCENTAGE");

                entity.Property(e => e.ProjectMajorCode)
                    .HasMaxLength(50)
                    .HasColumnName("PROJECT_MAJOR_CODE");

                entity.Property(e => e.ProjectMajorName)
                    .HasMaxLength(50)
                    .HasColumnName("PROJECT_MAJOR_NAME");
            });

            modelBuilder.Entity<TccProjectCostMonthReportApply>(entity =>
            {
                entity.ToTable("TCC_ProjectCostMonthReportApply");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyDate).HasColumnType("datetime");

                entity.Property(e => e.ApplyDept).HasMaxLength(50);

                entity.Property(e => e.ApplyDeptNo).HasMaxLength(50);

                entity.Property(e => e.ApplyLoginUser).HasMaxLength(50);

                entity.Property(e => e.ApplyName).HasMaxLength(50);

                entity.Property(e => e.ApplyPhone).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectNo).HasMaxLength(50);

                entity.Property(e => e.ReportContent).HasComment("从普华提取的数据");

                entity.Property(e => e.ReportContentEdoc)
                    .HasColumnName("ReportContent_edoc")
                    .HasComment("在edoc流程中允许编辑的数据");

                entity.Property(e => e.ReportMonth).HasMaxLength(50);
            });

            modelBuilder.Entity<TccProjectFinancialInfoForStatement>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .IsClustered(false);

                entity.ToTable("TCC_ProjectFinancialInfo_ForStatement");

                entity.HasIndex(e => e.ProjectCode, "IX_TCC_ProjectFinancialInfo_ForStatement")
                    .IsClustered();

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ContractPayAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("合同已付款金额");

                entity.Property(e => e.ManagerFee)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("管理费");

                entity.Property(e => e.PayAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("已付款额");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProjectMargin)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("项目资金结存");

                entity.Property(e => e.ReceiveAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("已收款金额");
            });

            modelBuilder.Entity<TccProjectHistory>(entity =>
            {
                entity.ToTable("TCC_ProjectHistory");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AwardAmountTotal)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("项目奖金总计");

                entity.Property(e => e.AwardAuditAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("项目奖核定金额");

                entity.Property(e => e.AwardPayAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("项目奖已发金额");

                entity.Property(e => e.ContractAfterChangeAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("变更后的合同额");

                entity.Property(e => e.ContractAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ContractType)
                    .HasMaxLength(10)
                    .IsFixedLength(true)
                    .HasComment("合同类型");

                entity.Property(e => e.ContractUnit)
                    .HasMaxLength(50)
                    .HasComment("合同额货币单位");

                entity.Property(e => e.ProjectCategory)
                    .HasMaxLength(50)
                    .HasComment("项目类型");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .HasComment("项目编号");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(200)
                    .HasComment("项目名称");

                entity.Property(e => e.ProjectStatus)
                    .HasMaxLength(50)
                    .HasColumnName("projectStatus")
                    .HasComment("项目状态");

                entity.Property(e => e.ReceivablesAmount)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("已收款金额");

                entity.Property(e => e.RemainingAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("未收款金额");
            });

            modelBuilder.Entity<TccProjectInfoFinanceReceivable>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_ProjectInfo_Finance_Receivables");

                entity.Property(e => e.Proid)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("proid");

                entity.Property(e => e.RperCny).HasColumnName("RPer_CNY");
            });

            modelBuilder.Entity<TccProjectInfoForStatement>(entity =>
            {
                entity.ToTable("TCC_ProjectInfo_ForStatement");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ContractPaymentTotal).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ProjectCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProjectContractAmountShow)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ProjectContractAmount_Show");

                entity.Property(e => e.ProjectManagementCostShow)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ProjectManagementCost_Show");

                entity.Property(e => e.ProjectName).HasMaxLength(200);

                entity.Property(e => e.ProjectNeiBuRenGongFeiShow)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ProjectNeiBuRenGongFei_Show");

                entity.Property(e => e.ProjectOtherCostShow)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ProjectOtherCost_Show");

                entity.Property(e => e.ProjectPaymentAmountShow)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ProjectPaymentAmount_Show");

                entity.Property(e => e.ProjectPaymentContractTotalAmountShow)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ProjectPaymentContractTotalAmount_Show");

                entity.Property(e => e.ProjectProfitMarginShow)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ProjectProfitMargin_Show");

                entity.Property(e => e.ProjectProfitMarginWithoutHuman).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ProjectReceivedAmountShow)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ProjectReceivedAmount_Show");

                entity.Property(e => e.ProjectReceivedPercentageShow)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ProjectReceivedPercentage_Show");
            });

            modelBuilder.Entity<TccProjectInfoForStatementTemp>(entity =>
            {
                entity.ToTable("TCC_ProjectInfo_ForStatement_Temp");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ContractPaymentTotal).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ProjectCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProjectContractAmountShow)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ProjectContractAmount_Show");

                entity.Property(e => e.ProjectManagementCostShow)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ProjectManagementCost_Show");

                entity.Property(e => e.ProjectName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ProjectNeiBuRenGongFeiShow)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ProjectNeiBuRenGongFei_Show");

                entity.Property(e => e.ProjectOtherCostShow)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ProjectOtherCost_Show");

                entity.Property(e => e.ProjectPaymentAmountShow)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ProjectPaymentAmount_Show");

                entity.Property(e => e.ProjectPaymentContractTotalAmountShow)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ProjectPaymentContractTotalAmount_Show");

                entity.Property(e => e.ProjectProfitMarginShow)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ProjectProfitMargin_Show");

                entity.Property(e => e.ProjectProfitMarginWithoutHuman).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ProjectReceivedAmountShow)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ProjectReceivedAmount_Show");

                entity.Property(e => e.ProjectReceivedPercentageShow)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ProjectReceivedPercentage_Show");
            });

            modelBuilder.Entity<TccProjectInfoStatus>(entity =>
            {
                entity.ToTable("TCC_ProjectInfo_Status");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Status).HasComment("项目状态；0正常。1清欠项目。");
            });

            modelBuilder.Entity<TccProjectLoanApplication>(entity =>
            {
                entity.ToTable("TCC_ProjectLoanApplication");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.BankName)
                    .HasMaxLength(100)
                    .HasComment("开户行");

                entity.Property(e => e.CardCurrency)
                    .HasMaxLength(100)
                    .HasComment("卡号币别");

                entity.Property(e => e.CardholdLogin)
                    .HasMaxLength(100)
                    .HasComment("持卡人登录名");

                entity.Property(e => e.CardholdName)
                    .HasMaxLength(100)
                    .HasComment("持卡人");

                entity.Property(e => e.CardholdUserIdentity)
                    .HasMaxLength(50)
                    .HasComment("持卡人身份证号");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Delegation)
                    .HasMaxLength(50)
                    .HasComment("委托经办人");

                entity.Property(e => e.DelegationLoginname).HasMaxLength(50);

                entity.Property(e => e.DelegationUserIdentityId).HasMaxLength(50);

                entity.Property(e => e.Deptcode)
                    .HasMaxLength(50)
                    .HasColumnName("deptcode")
                    .HasComment("持卡人申请此卡时所在的部门编码");

                entity.Property(e => e.Enabled)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("((1))")
                    .IsFixedLength(true)
                    .HasComment("是否启用，1为启用，0为不启用");

                entity.Property(e => e.EnabledDate).HasColumnType("datetime");

                entity.Property(e => e.EnabledEndDate).HasColumnType("datetime");

                entity.Property(e => e.FirstEnabledEndDate).HasColumnType("datetime");

                entity.Property(e => e.FirstQuotaYb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("FirstQuotaYB");

                entity.Property(e => e.PayCheque)
                    .HasMaxLength(100)
                    .HasComment("卡号");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(200)
                    .HasComment("项目编号");

                entity.Property(e => e.ProjectManager)
                    .HasMaxLength(100)
                    .HasComment("项目经理");

                entity.Property(e => e.ProjectManagerLoginName)
                    .HasMaxLength(200)
                    .HasComment("项目经理登录名");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(200)
                    .HasComment("项目名称");

                entity.Property(e => e.Quota)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("限额");

                entity.Property(e => e.QuotaYb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("QuotaYB")
                    .HasComment("限额--原币");
            });

            modelBuilder.Entity<TccProjectManageSale>(entity =>
            {
                entity.ToTable("TCC_ProjectManageSale");

                entity.HasIndex(e => e.ProjectId, "IX_TCC_ProjectManageSale");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("花费金额");

                entity.Property(e => e.AmountYb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AmountYB");

                entity.Property(e => e.Currency)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Digest).HasMaxLength(200);

                entity.Property(e => e.Item6).HasMaxLength(50);

                entity.Property(e => e.PaymentDate)
                    .HasColumnType("datetime")
                    .HasComment("付款日期");

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(50)
                    .HasColumnName("Project_id")
                    .HasComment("项目编号");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(500)
                    .HasColumnName("Project_Name")
                    .HasComment("项目名称");

                entity.Property(e => e.Recid)
                    .HasMaxLength(16)
                    .HasColumnName("RECID");

                entity.Property(e => e.SubjectId)
                    .HasMaxLength(50)
                    .HasColumnName("Subject_id")
                    .HasComment("科目号");

                entity.Property(e => e.SubjectId1)
                    .HasColumnName("SubjectID")
                    .HasComment("对应普华预算编号");

                entity.Property(e => e.SubjectName)
                    .HasMaxLength(200)
                    .HasColumnName("Subject_Name")
                    .HasComment("科目名称");

                entity.Property(e => e.SubjectName1)
                    .HasMaxLength(100)
                    .HasColumnName("SubjectName")
                    .HasComment("对应普华预算名称");
            });

            modelBuilder.Entity<TccProjectManageSale20160415bak>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_ProjectManageSale20160415bak");

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AmountYb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AmountYB");

                entity.Property(e => e.Currency)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Digest).HasMaxLength(200);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Item6).HasMaxLength(50);

                entity.Property(e => e.PaymentDate).HasColumnType("datetime");

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(50)
                    .HasColumnName("Project_id");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(500)
                    .HasColumnName("Project_Name");

                entity.Property(e => e.Recid)
                    .HasMaxLength(16)
                    .HasColumnName("RECID");

                entity.Property(e => e.SubjectId)
                    .HasMaxLength(50)
                    .HasColumnName("Subject_id");

                entity.Property(e => e.SubjectName)
                    .HasMaxLength(200)
                    .HasColumnName("Subject_Name");
            });

            modelBuilder.Entity<TccProjectManageSaleBak>(entity =>
            {
                entity.ToTable("TCC_ProjectManageSale_BAK");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("花费金额");

                entity.Property(e => e.AmountYb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AmountYB");

                entity.Property(e => e.Currency)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Digest).HasMaxLength(200);

                entity.Property(e => e.Item6).HasMaxLength(50);

                entity.Property(e => e.PaymentDate)
                    .HasColumnType("datetime")
                    .HasComment("付款日期");

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(50)
                    .HasColumnName("Project_id")
                    .HasComment("项目编号");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(500)
                    .HasColumnName("Project_Name")
                    .HasComment("项目名称");

                entity.Property(e => e.SubjectId)
                    .HasMaxLength(50)
                    .HasColumnName("Subject_id")
                    .HasComment("科目号");

                entity.Property(e => e.SubjectName)
                    .HasMaxLength(200)
                    .HasColumnName("Subject_Name")
                    .HasComment("科目名称");
            });

            modelBuilder.Entity<TccProjectSpecialAmountInit>(entity =>
            {
                entity.ToTable("TCC_ProjectSpecialAmount_Init");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ProjTypeDesc)
                    .HasMaxLength(50)
                    .HasColumnName("proj_type_desc");

                entity.Property(e => e.ProjectCode).HasMaxLength(50);

                entity.Property(e => e.ProjectManager).HasMaxLength(50);

                entity.Property(e => e.ProjectManagerIdentity).HasMaxLength(50);

                entity.Property(e => e.ProjectName).HasMaxLength(500);

                entity.Property(e => e.SpecAllowance)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("spec_allowance");
            });

            modelBuilder.Entity<TccProposal>(entity =>
            {
                entity.ToTable("TCC_Proposal");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyLoginName).HasMaxLength(50);

                entity.Property(e => e.ApplyMobile)
                    .HasMaxLength(50)
                    .HasComment("联系方式");

                entity.Property(e => e.ApplyName)
                    .HasMaxLength(50)
                    .HasComment("提案人");

                entity.Property(e => e.ApplyType).HasComment("是否实名　1 实名　0. 匿名");

                entity.Property(e => e.ApplyUnion)
                    .HasMaxLength(200)
                    .HasComment("所属分会");

                entity.Property(e => e.ApplyUnionNo).HasMaxLength(200);

                entity.Property(e => e.AttNames).HasComment("附议人");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProcessStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.PropContent).HasComment("提案内容");

                entity.Property(e => e.PropType)
                    .HasMaxLength(50)
                    .HasComment("提案类别");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");
            });

            modelBuilder.Entity<TccProposalAnserUser>(entity =>
            {
                entity.ToTable("TCC_Proposal_Anser_User");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.UserKey).HasMaxLength(50);

                entity.Property(e => e.Username)
                    .HasMaxLength(50)
                    .HasColumnName("username");
            });

            modelBuilder.Entity<TccProposalAnswer>(entity =>
            {
                entity.HasKey(e => e.AnserId);

                entity.ToTable("TCC_Proposal_Answer");

                entity.Property(e => e.AnserId).HasColumnName("AnserID");

                entity.Property(e => e.AnserName).HasMaxLength(500);

                entity.Property(e => e.AnswerTime).HasColumnType("datetime");

                entity.Property(e => e.AnswerUser).HasMaxLength(300);

                entity.Property(e => e.AnswerUserKey).HasMaxLength(500);

                entity.Property(e => e.FlagStatus)
                    .HasColumnName("Flag_Status")
                    .HasDefaultValueSql("((0))")
                    .HasComment("0 初始值, 1 分配答复人员，2 审核状态　3 完成状态");

                entity.Property(e => e.IsPublic).HasComment("是否公开 1公开,2不公开");

                entity.Property(e => e.ProposalId).HasColumnName("ProposalID");
            });

            modelBuilder.Entity<TccProposalDict>(entity =>
            {
                entity.ToTable("TCC_Proposal_Dict");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DicDes)
                    .HasMaxLength(100)
                    .HasColumnName("Dic_Des");

                entity.Property(e => e.DicValue)
                    .HasMaxLength(100)
                    .HasColumnName("Dic_Value");

                entity.Property(e => e.PType).HasColumnName("P_Type");
            });

            modelBuilder.Entity<TccProvidentFundDetail>(entity =>
            {
                entity.ToTable("TCC_ProvidentFundDetail");

                entity.HasIndex(e => new { e.Month, e.UserIdentityId, e.IncidentNo, e.Year }, "IX_AutoGen_20140724_4114");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Money).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MoneyRate).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MonthDesc).HasMaxLength(100);

                entity.Property(e => e.NaShuiTiaoZheng)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("纳税调整");

                entity.Property(e => e.ProcessName).HasMaxLength(200);

                entity.Property(e => e.UserIdentityId).HasMaxLength(200);
            });

            modelBuilder.Entity<TccProvidentFundHistroy>(entity =>
            {
                entity.ToTable("TCC_ProvidentFundHistroy");

                entity.HasIndex(e => new { e.Month, e.UserIdentityId, e.Year }, "IX_AutoGen_20140724_1668");

                entity.HasIndex(e => e.UserIdentityId, "IX_AutoGen_20140724_4102");

                entity.HasIndex(e => new { e.UserIdentityId, e.Year }, "IX_AutoGen_20140724_4104");

                entity.HasIndex(e => new { e.UserIdentityId, e.Year, e.Month }, "IX_AutoGen_20140724_4106");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IncidentNo).HasDefaultValueSql("((0))");

                entity.Property(e => e.Money)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.MonthDesc).HasMaxLength(100);

                entity.Property(e => e.NaShuiStatus)
                    .HasDefaultValueSql("((0))")
                    .HasComment("纳税调整是否使用过，0：未使用，1:已使用");

                entity.Property(e => e.NaShuiTiaoZheng)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("纳税调整额");

                entity.Property(e => e.ProcessName).HasMaxLength(200);

                entity.Property(e => e.Status).HasDefaultValueSql("((0))");

                entity.Property(e => e.UserIdentityId).HasMaxLength(200);

                entity.Property(e => e.WageMonth).HasComment("工资发放月份");

                entity.Property(e => e.WageYear).HasComment("工资发放年度");
            });

            modelBuilder.Entity<TccProvidentFundProcess>(entity =>
            {
                entity.ToTable("TCC_ProvidentFundProcess");

                entity.Property(e => e.Id).HasComment("主键");

                entity.Property(e => e.ApplyDate)
                    .HasColumnType("datetime")
                    .HasComment("申请时间");

                entity.Property(e => e.ApplyUserDept)
                    .HasMaxLength(200)
                    .HasComment("主管部门");

                entity.Property(e => e.ApplyUserDeptCode)
                    .HasMaxLength(200)
                    .HasComment("主管部门编号");

                entity.Property(e => e.ApplyUserIdentityId)
                    .HasMaxLength(200)
                    .HasComment("申请人身份证号");

                entity.Property(e => e.ApplyUserLoginName)
                    .HasMaxLength(200)
                    .HasComment("申请人登录名");

                entity.Property(e => e.ApplyUserName)
                    .HasMaxLength(200)
                    .HasComment("申请人");

                entity.Property(e => e.CreditType).HasComment("贷款方式（表单中有申请类型）");

                entity.Property(e => e.IncidentNo).HasComment("实例号");

                entity.Property(e => e.Month).HasComment("月份（申请类型为利息调整时使用）");

                entity.Property(e => e.Opinion)
                    .HasMaxLength(1000)
                    .HasComment("财务部审核意见（申请类型为利息调整时使用）");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(200)
                    .HasComment("流程名");

                entity.Property(e => e.ProcessStatus).HasComment("流程状态");

                entity.Property(e => e.TotalAdjusted)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("累计纳税调整（申请类型为利息调整时使用）");

                entity.Property(e => e.Year).HasComment("年度");
            });

            modelBuilder.Entity<TccPurchaseBudget>(entity =>
            {
                entity.ToTable("TCC_PurchaseBudget");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("总价");

                entity.Property(e => e.AssetName)
                    .HasMaxLength(500)
                    .HasComment("资产名称");

                entity.Property(e => e.AssetNameValue).HasMaxLength(50);

                entity.Property(e => e.AttCreateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Att_CreateDate");

                entity.Property(e => e.AttFileId).HasColumnName("Att_FileID");

                entity.Property(e => e.AttFileName)
                    .HasMaxLength(4000)
                    .HasColumnName("Att_FileName");

                entity.Property(e => e.AttState).HasColumnName("Att_State");

                entity.Property(e => e.AttUserId).HasColumnName("Att_UserID");

                entity.Property(e => e.AttUserName)
                    .HasMaxLength(200)
                    .HasColumnName("Att_userName");

                entity.Property(e => e.BudgetAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BudgetNumber).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BudgetPrice).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CclassCode)
                    .HasMaxLength(100)
                    .HasColumnName("CClassCode")
                    .HasComment("小类编码");

                entity.Property(e => e.CclassName)
                    .HasMaxLength(100)
                    .HasColumnName("CClassName")
                    .HasComment("小类名称");

                entity.Property(e => e.GclassCode)
                    .HasMaxLength(100)
                    .HasColumnName("GClassCode")
                    .HasComment("大类编码");

                entity.Property(e => e.GclassName)
                    .HasMaxLength(100)
                    .HasColumnName("GClassName")
                    .HasComment("大类名称");

                entity.Property(e => e.ManageDept)
                    .HasMaxLength(50)
                    .HasComment("管理部门编号");

                entity.Property(e => e.ManageDeptName)
                    .HasMaxLength(50)
                    .HasComment("管理部门名称");

                entity.Property(e => e.Number)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("数量");

                entity.Property(e => e.NumberAct)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Number_Act");

                entity.Property(e => e.PclassCode)
                    .HasMaxLength(100)
                    .HasColumnName("PClassCode")
                    .HasComment("种类编码");

                entity.Property(e => e.PclassName)
                    .HasMaxLength(100)
                    .HasColumnName("PClassName")
                    .HasComment("中类名称");

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .HasComment("备注说明");

                entity.Property(e => e.Unit)
                    .HasMaxLength(50)
                    .HasComment("单位");

                entity.Property(e => e.UnitPrice)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("单价");

                entity.Property(e => e.UseDept)
                    .HasMaxLength(50)
                    .HasComment("使用部门  1: 部门名称  全部:各部门  其他:相关 部门");
            });

            modelBuilder.Entity<TccPurchaseBudgetBased>(entity =>
            {
                entity.ToTable("TCC_PurchaseBudgetBased");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .HasComment("编码");

                entity.Property(e => e.DeptRange)
                    .HasMaxLength(50)
                    .HasComment("选择部门范围");

                entity.Property(e => e.EncodingParents)
                    .HasMaxLength(50)
                    .HasComment("父编码");

                entity.Property(e => e.IsLastNode).HasComment("是否是末级节点  1 是  0不是");

                entity.Property(e => e.ManageDept)
                    .HasMaxLength(50)
                    .HasComment("归属部门");
            });

            modelBuilder.Entity<TccPurchaseBudgetTemp>(entity =>
            {
                entity.ToTable("TCC_PurchaseBudgetTEMP");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("总价");

                entity.Property(e => e.AssetName)
                    .HasMaxLength(500)
                    .HasComment("资产名称");

                entity.Property(e => e.AttCreateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Att_CreateDate");

                entity.Property(e => e.AttFileId).HasColumnName("Att_FileID");

                entity.Property(e => e.AttFileName)
                    .HasMaxLength(4000)
                    .HasColumnName("Att_FileName");

                entity.Property(e => e.AttState).HasColumnName("Att_State");

                entity.Property(e => e.AttUserId).HasColumnName("Att_UserID");

                entity.Property(e => e.AttUserName)
                    .HasMaxLength(200)
                    .HasColumnName("Att_userName");

                entity.Property(e => e.CclassCode)
                    .HasMaxLength(100)
                    .HasColumnName("CClassCode")
                    .HasComment("小类编码");

                entity.Property(e => e.CclassName)
                    .HasMaxLength(100)
                    .HasColumnName("CClassName")
                    .HasComment("小类名称");

                entity.Property(e => e.GclassCode)
                    .HasMaxLength(100)
                    .HasColumnName("GClassCode")
                    .HasComment("大类编码");

                entity.Property(e => e.GclassName)
                    .HasMaxLength(100)
                    .HasColumnName("GClassName")
                    .HasComment("大类名称");

                entity.Property(e => e.ManageDept)
                    .HasMaxLength(50)
                    .HasComment("管理部门编号");

                entity.Property(e => e.ManageDeptName)
                    .HasMaxLength(50)
                    .HasComment("管理部门名称");

                entity.Property(e => e.Number)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("数量");

                entity.Property(e => e.NumberAct)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Number_Act");

                entity.Property(e => e.PclassCode)
                    .HasMaxLength(100)
                    .HasColumnName("PClassCode")
                    .HasComment("种类编码");

                entity.Property(e => e.PclassName)
                    .HasMaxLength(100)
                    .HasColumnName("PClassName")
                    .HasComment("中类名称");

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .HasComment("备注说明");

                entity.Property(e => e.Unit)
                    .HasMaxLength(50)
                    .HasComment("单位");

                entity.Property(e => e.UnitPrice)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("单价");

                entity.Property(e => e.UseDept)
                    .HasMaxLength(50)
                    .HasComment("使用部门  1: 部门名称  全部:各部门  其他:相关 部门");
            });

            modelBuilder.Entity<TccPurchaseRecord>(entity =>
            {
                entity.ToTable("TCC_PurchaseRecord");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BudgetFareLowercase).HasColumnType("money");

                entity.Property(e => e.BudgetFareUppercase).HasMaxLength(50);

                entity.Property(e => e.Category).HasMaxLength(50);

                entity.Property(e => e.CategoryCode).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.Manager).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProcessStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.ProductCode).HasMaxLength(50);

                entity.Property(e => e.ProductType).HasMaxLength(50);

                entity.Property(e => e.ProductVersion)
                    .HasMaxLength(50)
                    .HasComment("版本");

                entity.Property(e => e.ProjectApply).HasMaxLength(50);

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");

                entity.Property(e => e.RequestDeptName).HasMaxLength(50);

                entity.Property(e => e.RequestDeptNo).HasMaxLength(50);

                entity.Property(e => e.RequestRealName).HasMaxLength(50);

                entity.Property(e => e.RequestTelephone).HasMaxLength(50);

                entity.Property(e => e.RequestUserName).HasMaxLength(50);
            });

            modelBuilder.Entity<TccPutProjectTurnoverRecord>(entity =>
            {
                entity.ToTable("TCC_PutProjectTurnoverRecord");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.ApplyDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(((1900)-(1))-(1))")
                    .HasComment("申请时间");

                entity.Property(e => e.ApplyUser)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(N'')")
                    .HasComment("申请人");

                entity.Property(e => e.ApplyUserIdentityId)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(N'')")
                    .HasComment("申请人身份证号");

                entity.Property(e => e.ApplyUserLoginName)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(N'')")
                    .HasComment("申请人登录名");

                entity.Property(e => e.BalanceCeiling)
                    .HasMaxLength(100)
                    .HasComment("财务核定限额折人民币");

                entity.Property(e => e.BankAccountNo)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(N'')")
                    .HasComment("银行卡号");

                entity.Property(e => e.BankName)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(N'')")
                    .HasComment("开户行名称");

                entity.Property(e => e.CardCurrency).HasMaxLength(50);

                entity.Property(e => e.CardHolder)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(N'')");

                entity.Property(e => e.CardHolderLoginname)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(N'')")
                    .HasComment("持卡人登录名");

                entity.Property(e => e.CardHolderUserIdentityId)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(N'')")
                    .HasComment("持卡人身份证号");

                entity.Property(e => e.ContractAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("项目合同额");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'')")
                    .HasComment("申请人所在部门编号");

                entity.Property(e => e.DpetName)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(N'')")
                    .HasComment("申请人所在部门");

                entity.Property(e => e.EnabledDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(((1900)-(1))-(1))")
                    .HasComment("启用时间");

                entity.Property(e => e.EnabledEndDate)
                    .HasColumnType("datetime")
                    .HasComment("截止时间");

                entity.Property(e => e.ForUse)
                    .HasMaxLength(500)
                    .HasDefaultValueSql("(N'')")
                    .HasComment("开卡用途");

                entity.Property(e => e.ForecastPersonNo)
                    .HasDefaultValueSql("((0))")
                    .HasComment("预计现场人数");

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(N'')")
                    .HasComment("表单编号");

                entity.Property(e => e.IsApprove).HasComment("财务员工是否确认已经结转完毕旧卡余额");

                entity.Property(e => e.IsChangePaymentCeiling)
                    .HasDefaultValueSql("((0))")
                    .HasComment("申请人员是否同意修改上限，0否1是");

                entity.Property(e => e.OldMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("原卡余额");

                entity.Property(e => e.PayRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Pay_RMB")
                    .HasComment("财务核定原币金额");

                entity.Property(e => e.PayTaxRate).HasMaxLength(50);

                entity.Property(e => e.PaymentCeiling)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("最高金额上限");

                entity.Property(e => e.ProcessName).HasMaxLength(100);

                entity.Property(e => e.ProjectBeginDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(((1900)-(1))-(1))")
                    .HasComment("项目开始时间");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(N'')")
                    .HasComment("项目编号");

                entity.Property(e => e.ProjectEndDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(((1900)-(1))-(1))")
                    .HasComment("项目结束时间");

                entity.Property(e => e.ProjectManager)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'')")
                    .HasComment("项目经理");

                entity.Property(e => e.ProjectManagerLoginName)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'')")
                    .HasComment("项目经理登录名");

                entity.Property(e => e.ProjectManagerUserIdentityid).HasMaxLength(50);

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(N'')")
                    .HasComment("项目名称");

                entity.Property(e => e.ProjectPlace)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(N'')")
                    .HasComment("项目地点");

                entity.Property(e => e.ProjectType)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(N'')")
                    .HasComment("项目类型");

                entity.Property(e => e.ReimbursementManager)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(N'')")
                    .HasComment("报销经办人");

                entity.Property(e => e.ReimbursementManagerLoginname)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(N'')")
                    .HasComment("报销经办人登录名");

                entity.Property(e => e.ReimbursementManagerUserIdentityId)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(N'')")
                    .HasComment("报销经办人身份证号");

                entity.Property(e => e.Rmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("RMB");

                entity.Property(e => e.Status).HasDefaultValueSql("((0))");

                entity.Property(e => e.Supervisor)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(N'')")
                    .HasComment("财务监管人");

                entity.Property(e => e.SupervisorLoginname)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(N'')")
                    .HasComment("监管人登录名");

                entity.Property(e => e.SupervisorUserIdentityid)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'')")
                    .HasComment("监管人身份证号");

                entity.Property(e => e.TaxRate).HasMaxLength(50);
            });

            modelBuilder.Entity<TccPutProjectTurnoverRecordChangeInfo>(entity =>
            {
                entity.ToTable("TCC_PutProjectTurnoverRecordChangeInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CardCurrency)
                    .HasMaxLength(50)
                    .HasComment("币种");

                entity.Property(e => e.CardholdLogin)
                    .HasMaxLength(50)
                    .HasComment("持卡人账号");

                entity.Property(e => e.CardholdName)
                    .HasMaxLength(50)
                    .HasComment("持卡人姓名");

                entity.Property(e => e.EnabledDate).HasColumnType("datetime");

                entity.Property(e => e.EnabledEndDate).HasColumnType("datetime");

                entity.Property(e => e.FinanceQuota)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("财务确认周转金限额");

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(50)
                    .HasComment("表单号");

                entity.Property(e => e.IsEnabled)
                    .HasDefaultValueSql("((0))")
                    .HasComment("0:不启用，1：启用");

                entity.Property(e => e.MoneyYb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MONEY_YB")
                    .HasComment("周转金余额");

                entity.Property(e => e.PayCheque)
                    .HasMaxLength(50)
                    .HasComment("银行卡号");

                entity.Property(e => e.Quota)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("周转金限额");

                entity.Property(e => e.QuotaChange)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("申请人申请此次变更的周转金金额");
            });

            modelBuilder.Entity<TccPutProjectTurnoverRecordChangeMain>(entity =>
            {
                entity.ToTable("TCC_PutProjectTurnoverRecordChangeMain");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AccountId)
                    .HasColumnName("AccountID")
                    .HasComment("台账记录ID");

                entity.Property(e => e.ApplyType)
                    .HasColumnName("applyType")
                    .HasComment("周转金卡类型");

                entity.Property(e => e.BankCard)
                    .HasMaxLength(50)
                    .HasComment("变更银行卡号");

                entity.Property(e => e.ChangeQuotaType).HasComment("是否变更周转金限额");

                entity.Property(e => e.ChangeType).HasComment("操作类型（不确定是否需要）");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .HasComment("部门编号");

                entity.Property(e => e.DpetName)
                    .HasMaxLength(50)
                    .HasComment("部门名称");

                entity.Property(e => e.EnabledEndDate)
                    .HasColumnType("datetime")
                    .HasComment("延期截止日期");

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(50)
                    .HasComment("表单编号");

                entity.Property(e => e.Incident).HasComment("实例号");

                entity.Property(e => e.ModifyType).HasComment("变更类型（1：延期变更2：变更持卡人3：撤销）");

                entity.Property(e => e.ModifyTypeName)
                    .HasMaxLength(50)
                    .HasComment("变更类型名称");

                entity.Property(e => e.NewBankCard)
                    .HasMaxLength(50)
                    .HasComment("变更后新的银行卡号");

                entity.Property(e => e.NewBankCardType).HasComment("0:新卡 1:已开卡 ");

                entity.Property(e => e.NewBankName).HasMaxLength(200);

                entity.Property(e => e.NewCardHolder)
                    .HasMaxLength(50)
                    .HasComment("新持卡人");

                entity.Property(e => e.NewCardHolderLoginname)
                    .HasMaxLength(50)
                    .HasComment("新持卡人账号");

                entity.Property(e => e.NewCardHolderUserIdentityId)
                    .HasMaxLength(50)
                    .HasComment("新持卡人身份证号");

                entity.Property(e => e.NewReimbursementManager)
                    .HasMaxLength(50)
                    .HasComment("新委托经办人");

                entity.Property(e => e.NewReimbursementManagerLoginname)
                    .HasMaxLength(50)
                    .HasComment("新委托经办人账号");

                entity.Property(e => e.NewReimbursementManagerUserIdentityId)
                    .HasMaxLength(50)
                    .HasComment("新委托经办人身份证号");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名");

                entity.Property(e => e.ProcessStatus).HasComment("流程状态");

                entity.Property(e => e.ProcessTime)
                    .HasColumnType("datetime")
                    .HasComment("流程归档时间");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasComment("申请时间");

                entity.Property(e => e.RequestUser)
                    .HasMaxLength(50)
                    .HasComment("申请人");

                entity.Property(e => e.RequestUserIdentityId)
                    .HasMaxLength(50)
                    .HasComment("申请人身份证号");

                entity.Property(e => e.RequestUserLoginName)
                    .HasMaxLength(50)
                    .HasComment("申请人账号");
            });

            modelBuilder.Entity<TccRecDocReport>(entity =>
            {
                entity.ToTable("TCC_RecDocReport");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.FileId)
                    .HasMaxLength(50)
                    .HasColumnName("FileID");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ReportDate).HasColumnType("datetime");

                entity.Property(e => e.ReportDept).HasMaxLength(50);

                entity.Property(e => e.ReportDeptNo).HasMaxLength(50);

                entity.Property(e => e.ReportLoginUser).HasMaxLength(50);

                entity.Property(e => e.ReportPerson).HasMaxLength(50);
            });

            modelBuilder.Entity<TccRecDocReportRelation>(entity =>
            {
                entity.ToTable("TCC_RecDocReportRelation");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DealPerson).HasMaxLength(50);

                entity.Property(e => e.DeptLeader).HasMaxLength(50);

                entity.Property(e => e.Incident).HasColumnName("incident");

                entity.Property(e => e.LeaderType).HasMaxLength(50);

                entity.Property(e => e.XieBanLeader).HasMaxLength(50);

                entity.Property(e => e.ZhuBanLeader).HasMaxLength(50);
            });

            modelBuilder.Entity<TccRecDocument>(entity =>
            {
                entity.ToTable("TCC_RecDocument");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyLoginUser).HasMaxLength(50);

                entity.Property(e => e.ApplyName).HasMaxLength(50);

                entity.Property(e => e.ChiefDept).HasMaxLength(50);

                entity.Property(e => e.ChiefDeptNo).HasMaxLength(50);

                entity.Property(e => e.ChiefLerderAccount).HasMaxLength(50);

                entity.Property(e => e.ChiefLerderName).HasMaxLength(50);

                entity.Property(e => e.ChiefUserAccount).HasMaxLength(50);

                entity.Property(e => e.ChiefUserName).HasMaxLength(50);

                entity.Property(e => e.DocDegree).HasMaxLength(50);

                entity.Property(e => e.DocTitle).HasMaxLength(50);

                entity.Property(e => e.DocType).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.FromComp).HasMaxLength(50);

                entity.Property(e => e.FromDocNo).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.RecDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Rec_Date");

                entity.Property(e => e.RecNo).HasMaxLength(50);

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");

                entity.Property(e => e.SubDept).HasMaxLength(50);

                entity.Property(e => e.SubDeptNo).HasMaxLength(50);

                entity.Property(e => e.SubLeaderAccount).HasMaxLength(50);

                entity.Property(e => e.SubLeaderName).HasMaxLength(50);

                entity.Property(e => e.SubUserAccount).HasMaxLength(50);

                entity.Property(e => e.SubUserName).HasMaxLength(50);
            });

            modelBuilder.Entity<TccReceivablesProcess>(entity =>
            {
                entity.ToTable("TCC_ReceivablesProcess");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AccountStatus)
                    .HasDefaultValueSql("((1))")
                    .HasComment("冲账状态  1=未冲账 2=已冲账");

                entity.Property(e => e.AccountSubject)
                    .HasMaxLength(50)
                    .HasComment("入账科目编号");

                entity.Property(e => e.AmountAdd)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Amount_Add")
                    .HasComment("增加金额");

                entity.Property(e => e.AmountContract)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Amount_Contract")
                    .HasComment("签约金额");

                entity.Property(e => e.AmountReduce)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Amount_Reduce")
                    .HasComment("减少金额");

                entity.Property(e => e.AmountTotal)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Amount_Total")
                    .HasComment("合计金额");

                entity.Property(e => e.ContractCurrency)
                    .HasColumnName("Contract_Currency")
                    .HasComment("合同金额的币种");

                entity.Property(e => e.ContractCurrencyName)
                    .HasMaxLength(50)
                    .HasColumnName("Contract_CurrencyName")
                    .HasComment("合同金额的币种");

                entity.Property(e => e.ContractFormDesign)
                    .HasMaxLength(200)
                    .HasColumnName("ContractForm_Design")
                    .HasComment("设计类项目合同形式");

                entity.Property(e => e.ContractFormEpc)
                    .HasColumnName("ContractForm_EPC")
                    .HasComment("EPC项目合同形式");

                entity.Property(e => e.ContractName)
                    .HasMaxLength(200)
                    .HasComment("合同名称");

                entity.Property(e => e.ContractNumber)
                    .HasMaxLength(200)
                    .HasComment("合同编号");

                entity.Property(e => e.Currency).HasComment("币种");

                entity.Property(e => e.CurrencyName)
                    .HasMaxLength(50)
                    .HasComment("币种名称");

                entity.Property(e => e.CurrentReceivablesAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("本次收款金额");

                entity.Property(e => e.CurrentReceivablesAmountBig)
                    .HasMaxLength(50)
                    .HasColumnName("CurrentReceivablesAmount_big")
                    .HasComment("本次收款金额大写");

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(20)
                    .HasComment("表单编号");

                entity.Property(e => e.Incident).HasComment("实例号");

                entity.Property(e => e.IsEpc)
                    .HasMaxLength(10)
                    .HasColumnName("IsEPC")
                    .HasDefaultValueSql("(N'N')")
                    .HasComment("是否为EPC项目");

                entity.Property(e => e.NotesAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("票具金额");

                entity.Property(e => e.NotesIssuingDate)
                    .HasColumnType("datetime")
                    .HasComment("票具开具日期");

                entity.Property(e => e.NotesNo)
                    .HasMaxLength(100)
                    .HasColumnName("NotesNO")
                    .HasComment("票具编号");

                entity.Property(e => e.PayBankAccount)
                    .HasMaxLength(50)
                    .HasComment("开户行账号");

                entity.Property(e => e.PayBankName)
                    .HasMaxLength(200)
                    .HasComment("开户行");

                entity.Property(e => e.PayCompanyName)
                    .HasMaxLength(200)
                    .HasComment("付款单位名称");

                entity.Property(e => e.PayUnitedBankNumber)
                    .HasMaxLength(50)
                    .HasComment("联行行号");

                entity.Property(e => e.ProcessFinishDate)
                    .HasColumnType("datetime")
                    .HasComment("流程结束时间");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(500)
                    .HasComment("流程名");

                entity.Property(e => e.ProcessStatus)
                    .HasDefaultValueSql("((0))")
                    .HasComment("流程状态");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(200)
                    .HasComment("项目编号");

                entity.Property(e => e.ProjectManager)
                    .HasMaxLength(50)
                    .HasComment("项目经理 登录名");

                entity.Property(e => e.ProjectManagerIdentity)
                    .HasMaxLength(50)
                    .HasComment("项目经理 身份证号");

                entity.Property(e => e.ProjectManagerName)
                    .HasMaxLength(50)
                    .HasComment("项目经理 真实姓名");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(200)
                    .HasComment("项目名称");

                entity.Property(e => e.ReceivablesBankAccount)
                    .HasMaxLength(50)
                    .HasComment("收款账号");

                entity.Property(e => e.ReceivablesBankName)
                    .HasMaxLength(200)
                    .HasComment("收款单位名称");

                entity.Property(e => e.ReceivablesCategory).HasComment("收款类型");

                entity.Property(e => e.ReceivablesCategoryName)
                    .HasMaxLength(50)
                    .HasComment("收款类型");

                entity.Property(e => e.ReceivablesMethod).HasComment("收款方式");

                entity.Property(e => e.ReceivablesMethodName)
                    .HasMaxLength(100)
                    .HasComment("收款方式");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date")
                    .HasComment("申请日期");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptCode")
                    .HasComment("申请人主管部门");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(200)
                    .HasColumnName("Request_DeptName")
                    .HasComment("申请人主管部门");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName")
                    .HasComment("申请人");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName")
                    .HasComment("申请人");

                entity.Property(e => e.SupplierCode)
                    .HasMaxLength(200)
                    .HasComment("供应商代码");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(200)
                    .HasComment("供应商名称");
            });

            modelBuilder.Entity<TccReceivablesRecord>(entity =>
            {
                entity.ToTable("TCC_ReceivablesRecord");

                entity.HasIndex(e => new { e.ProjectCode, e.ReceiveType }, "IX_AutoGen_20140724_17372");

                entity.Property(e => e.AccountingTime)
                    .HasColumnType("datetime")
                    .HasComment("到帐时间");

                entity.Property(e => e.AmountReceivable)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("应收金额");

                entity.Property(e => e.AmountReceivableRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AmountReceivableRMB")
                    .HasComment("应收金额折合人民币金额");

                entity.Property(e => e.BuckleWaElecAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("业主代扣水电费");

                entity.Property(e => e.BusinessManager1)
                    .HasMaxLength(100)
                    .HasComment("合同对应的商务经理");

                entity.Property(e => e.BusinessManager2)
                    .HasMaxLength(100)
                    .HasComment("合同对应的商务经理");

                entity.Property(e => e.BusinessManagerId1)
                    .HasMaxLength(100)
                    .HasColumnName("BusinessManagerID1")
                    .HasComment("合同对应商务经理");

                entity.Property(e => e.BusinessManagerId2)
                    .HasMaxLength(100)
                    .HasColumnName("BusinessManagerID2");

                entity.Property(e => e.BusinessManagerLoginName1)
                    .HasMaxLength(100)
                    .HasComment("合同对应的商务经理");

                entity.Property(e => e.BusinessManagerLoginName2)
                    .HasMaxLength(100)
                    .HasComment("合同对应商务经理登录名");

                entity.Property(e => e.ChangeLocalCurrencyAmount)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("折人民币金额");

                entity.Property(e => e.ContractCode)
                    .HasMaxLength(100)
                    .HasComment("合同编号");

                entity.Property(e => e.ContractDate)
                    .HasMaxLength(100)
                    .HasComment("合同签订日期");

                entity.Property(e => e.ContractName)
                    .HasMaxLength(1000)
                    .HasComment("合同名称");

                entity.Property(e => e.ContractType)
                    .HasMaxLength(100)
                    .HasComment("合同类型：如EPC类");

                entity.Property(e => e.ContractTypeId).HasColumnName("ContractTypeID");

                entity.Property(e => e.ConvertedRate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.CounterFee)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("银行手续费");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("创建时间");

                entity.Property(e => e.Currency)
                    .HasMaxLength(50)
                    .HasComment("币种");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(100)
                    .HasComment("合同对应的部门编号");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(100)
                    .HasComment("合同对于部门名称");

                entity.Property(e => e.Exchange)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("汇率");

                entity.Property(e => e.Handing)
                    .HasMaxLength(50)
                    .HasComment("经手人");

                entity.Property(e => e.HandingIdnumber)
                    .HasMaxLength(50)
                    .HasColumnName("HandingIDNumber")
                    .HasComment("经手人身份证号");

                entity.Property(e => e.IdentifySource).HasComment("其他收款：来源：1代表先付后收 2代表先收后付");

                entity.Property(e => e.Operater)
                    .HasMaxLength(50)
                    .HasComment("操作人");

                entity.Property(e => e.OperaterIdnumber)
                    .HasMaxLength(50)
                    .HasColumnName("OperaterIDNumber")
                    .HasComment("操作人身份证号");

                entity.Property(e => e.OwnerForfeit)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("业主罚款");

                entity.Property(e => e.PayInfoAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("代付金额");

                entity.Property(e => e.PayTheOtherAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("业主代付");

                entity.Property(e => e.ProName).HasMaxLength(50);

                entity.Property(e => e.ProcessFinishDate)
                    .HasColumnType("datetime")
                    .HasComment("完结时间");

                entity.Property(e => e.ProcessName).HasMaxLength(1000);

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(100)
                    .HasComment("项目编号");

                entity.Property(e => e.ProjectManager)
                    .HasMaxLength(100)
                    .HasComment("项目经理姓名");

                entity.Property(e => e.ProjectManagerId)
                    .HasMaxLength(100)
                    .HasColumnName("ProjectManagerID")
                    .HasComment("项目经理身份证号");

                entity.Property(e => e.ProjectManagerLoginName)
                    .HasMaxLength(100)
                    .HasComment("项目经理登录名");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(100)
                    .HasComment("项目名称");

                entity.Property(e => e.ProjectPayment)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("本次收取增值税");

                entity.Property(e => e.ProjectType)
                    .HasMaxLength(100)
                    .HasComment("项目类型");

                entity.Property(e => e.RId)
                    .HasColumnName("R_ID")
                    .HasComment("对应收款管理流程外键");

                entity.Property(e => e.RateProfitAndLoss)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("汇率盈亏");

                entity.Property(e => e.ReceivablesTime)
                    .HasColumnType("datetime")
                    .HasComment("收款时间");

                entity.Property(e => e.ReceiveAmount)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("收款金额");

                entity.Property(e => e.ReceiveMethod)
                    .HasMaxLength(50)
                    .HasComment("收款方式，例如：电汇什么的");

                entity.Property(e => e.ReceiveMethodId).HasColumnName("ReceiveMethodID");

                entity.Property(e => e.ReceiveType)
                    .HasMaxLength(100)
                    .HasComment("收款节点");

                entity.Property(e => e.ReceivedDate)
                    .HasColumnType("datetime")
                    .HasComment("收款日期");

                entity.Property(e => e.RefundAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Remark).HasMaxLength(200);

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasComment("申请时间");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasComment("收款管理流程：收款人主管部门编号");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(50)
                    .HasComment("收款管理流程：收款人主管部门名称");

                entity.Property(e => e.RequestFormNumber)
                    .HasMaxLength(50)
                    .HasComment("申请表编号");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasComment("申请人登陆名");

                entity.Property(e => e.RequestPayCategory).HasComment("收款类型:对应字典表TCC_BasicData 取值");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasComment("申请人名称");

                entity.Property(e => e.RequestType).HasComment("2015-2-4新增 申请类型 0项目收款 1其他收款");

                entity.Property(e => e.RequsetSfzh)
                    .HasMaxLength(50)
                    .HasComment("申请人身份证");

                entity.Property(e => e.Rpid)
                    .HasColumnName("RPID")
                    .HasComment("收款流程主键");

                entity.Property(e => e.Status).HasComment("数据状态，0不可以用，1可用");

                entity.Property(e => e.TaxWithholding)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("代扣税金");

                entity.Property(e => e.ValueAddedTax)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("本次收取增值税");

                entity.Property(e => e.WaElecAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("代扣供应商水电费");

                entity.Property(e => e.WithholdingAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("业主代扣额");

                entity.Property(e => e.WithholdingOfVat)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("WithholdingOfVAT")
                    .HasDefaultValueSql("((0))")
                    .HasComment("代扣增值税");
            });

            modelBuilder.Entity<TccReceivablesRecordBak>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_ReceivablesRecordBAK");

                entity.Property(e => e.AccountingTime).HasColumnType("datetime");

                entity.Property(e => e.BusinessManager1).HasMaxLength(100);

                entity.Property(e => e.BusinessManager2).HasMaxLength(100);

                entity.Property(e => e.BusinessManagerId1)
                    .HasMaxLength(100)
                    .HasColumnName("BusinessManagerID1");

                entity.Property(e => e.BusinessManagerId2)
                    .HasMaxLength(100)
                    .HasColumnName("BusinessManagerID2");

                entity.Property(e => e.BusinessManagerLoginName1).HasMaxLength(100);

                entity.Property(e => e.BusinessManagerLoginName2).HasMaxLength(100);

                entity.Property(e => e.ChangeLocalCurrencyAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ContractCode).HasMaxLength(100);

                entity.Property(e => e.ContractDate).HasMaxLength(100);

                entity.Property(e => e.ContractName).HasMaxLength(100);

                entity.Property(e => e.ContractType).HasMaxLength(100);

                entity.Property(e => e.ContractTypeId).HasColumnName("ContractTypeID");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Currency).HasMaxLength(50);

                entity.Property(e => e.DeptCode).HasMaxLength(100);

                entity.Property(e => e.DeptName).HasMaxLength(100);

                entity.Property(e => e.Exchange).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Handing).HasMaxLength(50);

                entity.Property(e => e.HandingIdnumber)
                    .HasMaxLength(50)
                    .HasColumnName("HandingIDNumber");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Operater).HasMaxLength(50);

                entity.Property(e => e.OperaterIdnumber)
                    .HasMaxLength(50)
                    .HasColumnName("OperaterIDNumber");

                entity.Property(e => e.ProcessFinishDate).HasColumnType("datetime");

                entity.Property(e => e.ProcessName).HasMaxLength(1000);

                entity.Property(e => e.ProjectCode).HasMaxLength(100);

                entity.Property(e => e.ProjectManager).HasMaxLength(100);

                entity.Property(e => e.ProjectManagerId)
                    .HasMaxLength(100)
                    .HasColumnName("ProjectManagerID");

                entity.Property(e => e.ProjectManagerLoginName).HasMaxLength(100);

                entity.Property(e => e.ProjectName).HasMaxLength(100);

                entity.Property(e => e.ProjectType).HasMaxLength(100);

                entity.Property(e => e.ReceivablesTime).HasColumnType("datetime");

                entity.Property(e => e.ReceiveAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ReceiveMethod).HasMaxLength(50);

                entity.Property(e => e.ReceiveMethodId).HasColumnName("ReceiveMethodID");

                entity.Property(e => e.ReceiveType).HasMaxLength(100);

                entity.Property(e => e.ReceivedDate).HasColumnType("datetime");

                entity.Property(e => e.RequestDate).HasMaxLength(50);

                entity.Property(e => e.RequestFormNumber).HasMaxLength(50);

                entity.Property(e => e.RequestLoginName).HasMaxLength(50);

                entity.Property(e => e.RequestRealName).HasMaxLength(50);

                entity.Property(e => e.RequsetSfzh).HasMaxLength(50);

                entity.Property(e => e.Rpid).HasColumnName("RPID");
            });

            modelBuilder.Entity<TccReceivablesRecordDeposit>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_ReceivablesRecord_Deposit");

                entity.Property(e => e.AccountingTime).HasColumnType("datetime");

                entity.Property(e => e.AmountReceivable).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AmountReceivableRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AmountReceivableRMB");

                entity.Property(e => e.BuckleWaElecAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BusinessManager1).HasMaxLength(100);

                entity.Property(e => e.BusinessManager2).HasMaxLength(100);

                entity.Property(e => e.BusinessManagerId1)
                    .HasMaxLength(100)
                    .HasColumnName("BusinessManagerID1");

                entity.Property(e => e.BusinessManagerId2)
                    .HasMaxLength(100)
                    .HasColumnName("BusinessManagerID2");

                entity.Property(e => e.BusinessManagerLoginName1).HasMaxLength(100);

                entity.Property(e => e.BusinessManagerLoginName2).HasMaxLength(100);

                entity.Property(e => e.ChangeLocalCurrencyAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ContractCode).HasMaxLength(100);

                entity.Property(e => e.ContractDate).HasMaxLength(100);

                entity.Property(e => e.ContractName).HasMaxLength(1000);

                entity.Property(e => e.ContractType).HasMaxLength(100);

                entity.Property(e => e.ContractTypeId).HasColumnName("ContractTypeID");

                entity.Property(e => e.CounterFee).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Currency).HasMaxLength(50);

                entity.Property(e => e.DeptCode).HasMaxLength(100);

                entity.Property(e => e.DeptName).HasMaxLength(100);

                entity.Property(e => e.Exchange).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Handing).HasMaxLength(50);

                entity.Property(e => e.HandingIdnumber)
                    .HasMaxLength(50)
                    .HasColumnName("HandingIDNumber");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Operater).HasMaxLength(50);

                entity.Property(e => e.OperaterIdnumber)
                    .HasMaxLength(50)
                    .HasColumnName("OperaterIDNumber");

                entity.Property(e => e.ProName).HasMaxLength(50);

                entity.Property(e => e.ProcessFinishDate).HasColumnType("datetime");

                entity.Property(e => e.ProcessName).HasMaxLength(1000);

                entity.Property(e => e.ProjectCode).HasMaxLength(100);

                entity.Property(e => e.ProjectManager).HasMaxLength(100);

                entity.Property(e => e.ProjectManagerId)
                    .HasMaxLength(100)
                    .HasColumnName("ProjectManagerID");

                entity.Property(e => e.ProjectManagerLoginName).HasMaxLength(100);

                entity.Property(e => e.ProjectName).HasMaxLength(100);

                entity.Property(e => e.ProjectType).HasMaxLength(100);

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.RateProfitAndLoss).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ReceivablesTime).HasColumnType("datetime");

                entity.Property(e => e.ReceiveAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ReceiveMethod).HasMaxLength(50);

                entity.Property(e => e.ReceiveMethodId).HasColumnName("ReceiveMethodID");

                entity.Property(e => e.ReceiveType).HasMaxLength(100);

                entity.Property(e => e.ReceivedDate).HasColumnType("datetime");

                entity.Property(e => e.RefundAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Remark).HasMaxLength(200);

                entity.Property(e => e.RequestDate).HasColumnType("datetime");

                entity.Property(e => e.RequestDeptCode).HasMaxLength(50);

                entity.Property(e => e.RequestDeptName).HasMaxLength(50);

                entity.Property(e => e.RequestFormNumber).HasMaxLength(50);

                entity.Property(e => e.RequestLoginName).HasMaxLength(50);

                entity.Property(e => e.RequestRealName).HasMaxLength(50);

                entity.Property(e => e.RequsetSfzh).HasMaxLength(50);

                entity.Property(e => e.Rpid).HasColumnName("RPID");

                entity.Property(e => e.TaxWithholding).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ValueAddedTax).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.WithholdingAmount).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<TccReceivablesRecordDepositInit>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_ReceivablesRecord_Deposit_init");

                entity.Property(e => e.AccountingTime).HasColumnType("datetime");

                entity.Property(e => e.BillCategoryName).HasMaxLength(50);

                entity.Property(e => e.ChangeLocalCurrencyAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ContCode).HasMaxLength(50);

                entity.Property(e => e.ContractCode).HasMaxLength(100);

                entity.Property(e => e.ContractName).HasMaxLength(1000);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DeptCode).HasMaxLength(100);

                entity.Property(e => e.DeptName).HasMaxLength(100);

                entity.Property(e => e.Exchange).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.GrtLtType).HasMaxLength(50);

                entity.Property(e => e.PayCmpAddress).HasMaxLength(500);

                entity.Property(e => e.PayCmpBank).HasMaxLength(500);

                entity.Property(e => e.PayCmpBankAcct).HasMaxLength(500);

                entity.Property(e => e.PayCmpBankUnionAcct).HasMaxLength(500);

                entity.Property(e => e.PayCmpCode).HasMaxLength(30);

                entity.Property(e => e.PayCmpName).HasMaxLength(500);

                entity.Property(e => e.ProcessName).HasMaxLength(1000);

                entity.Property(e => e.ProjectCode).HasMaxLength(100);

                entity.Property(e => e.ProjectName).HasMaxLength(100);

                entity.Property(e => e.ReceiveAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ReceivedDate).HasColumnType("datetime");

                entity.Property(e => e.RequestDate).HasColumnType("datetime");

                entity.Property(e => e.RequestDeptCode).HasMaxLength(50);

                entity.Property(e => e.RequestDeptName).HasMaxLength(50);

                entity.Property(e => e.RequestFormNumber).HasMaxLength(50);

                entity.Property(e => e.RequestLoginName).HasMaxLength(50);

                entity.Property(e => e.RequestPayCategoryName).HasMaxLength(100);

                entity.Property(e => e.RequestRealName).HasMaxLength(50);

                entity.Property(e => e.RequestTypeName)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.WithholdingAmount).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<TccReceivablesRecordInit>(entity =>
            {
                entity.ToTable("TCC_ReceivablesRecord_Init");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BuckleWaElecAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("业主代扣水电费");

                entity.Property(e => e.ContanctCurrency)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("合同币种");

                entity.Property(e => e.ContractCode)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("合同号");

                entity.Property(e => e.ContractDate)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("合同签订日期");

                entity.Property(e => e.ContractName)
                    .HasMaxLength(1200)
                    .HasDefaultValueSql("('')")
                    .HasComment("合同名称");

                entity.Property(e => e.CounterFee)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("银行手续费");

                entity.Property(e => e.CreateDate)
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("创建日期");

                entity.Property(e => e.Currency)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("收款币种");

                entity.Property(e => e.OwnerForfeit)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("业主罚款");

                entity.Property(e => e.PayInfoAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("代付金额");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("项目号");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("项目名称");

                entity.Property(e => e.ProjectPayment)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("本次收取工程款");

                entity.Property(e => e.ReceiveAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("本次实收款");

                entity.Property(e => e.ReceiveAmountRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ReceiveAmountRMB")
                    .HasDefaultValueSql("((0))")
                    .HasComment("本次实收款 折人民币金额");

                entity.Property(e => e.ReceiveDate)
                    .HasColumnType("datetime")
                    .HasComment("实际收款日期");

                entity.Property(e => e.RequestAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("申请收款");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("申请日期");

                entity.Property(e => e.RequestNodeText)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("收款节点");

                entity.Property(e => e.RequestTypeText)
                    .HasMaxLength(100)
                    .HasDefaultValueSql("('')")
                    .HasComment("收款类型名称");

                entity.Property(e => e.ShouldReceiveAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("本次应收工程款");

                entity.Property(e => e.ShouldReceiveAmountRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ShouldReceiveAmountRMB")
                    .HasDefaultValueSql("((0))")
                    .HasComment("本次应收工程款 折人民币金额");

                entity.Property(e => e.TaxWithholding)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("业主代扣税金");

                entity.Property(e => e.ValueAddedTax)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("本次收取增值税");

                entity.Property(e => e.Vourcherchrnum)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')")
                    .HasComment("久其入账凭证号   年度-月份-凭证号；2016-01-110");

                entity.Property(e => e.WithholdingAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("业主代扣其他");

                entity.Property(e => e.WithholdingOfVat)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("WithholdingOfVAT")
                    .HasDefaultValueSql("((0))")
                    .HasComment("代扣增值税");
            });

            modelBuilder.Entity<TccReceivablesRecordbak1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_ReceivablesRecordbak1");

                entity.Property(e => e.AccountingTime).HasColumnType("datetime");

                entity.Property(e => e.BusinessManager1).HasMaxLength(100);

                entity.Property(e => e.BusinessManager2).HasMaxLength(100);

                entity.Property(e => e.BusinessManagerId1)
                    .HasMaxLength(100)
                    .HasColumnName("BusinessManagerID1");

                entity.Property(e => e.BusinessManagerId2)
                    .HasMaxLength(100)
                    .HasColumnName("BusinessManagerID2");

                entity.Property(e => e.BusinessManagerLoginName1).HasMaxLength(100);

                entity.Property(e => e.BusinessManagerLoginName2).HasMaxLength(100);

                entity.Property(e => e.ChangeLocalCurrencyAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ContractCode).HasMaxLength(100);

                entity.Property(e => e.ContractDate).HasMaxLength(100);

                entity.Property(e => e.ContractName).HasMaxLength(100);

                entity.Property(e => e.ContractType).HasMaxLength(100);

                entity.Property(e => e.ContractTypeId).HasColumnName("ContractTypeID");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Currency).HasMaxLength(50);

                entity.Property(e => e.DeptCode).HasMaxLength(100);

                entity.Property(e => e.DeptName).HasMaxLength(100);

                entity.Property(e => e.Exchange).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Handing).HasMaxLength(50);

                entity.Property(e => e.HandingIdnumber)
                    .HasMaxLength(50)
                    .HasColumnName("HandingIDNumber");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Operater).HasMaxLength(50);

                entity.Property(e => e.OperaterIdnumber)
                    .HasMaxLength(50)
                    .HasColumnName("OperaterIDNumber");

                entity.Property(e => e.ProcessFinishDate).HasColumnType("datetime");

                entity.Property(e => e.ProcessName).HasMaxLength(1000);

                entity.Property(e => e.ProjectCode).HasMaxLength(100);

                entity.Property(e => e.ProjectManager).HasMaxLength(100);

                entity.Property(e => e.ProjectManagerId)
                    .HasMaxLength(100)
                    .HasColumnName("ProjectManagerID");

                entity.Property(e => e.ProjectManagerLoginName).HasMaxLength(100);

                entity.Property(e => e.ProjectName).HasMaxLength(100);

                entity.Property(e => e.ProjectType).HasMaxLength(100);

                entity.Property(e => e.ReceivablesTime).HasColumnType("datetime");

                entity.Property(e => e.ReceiveAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ReceiveMethod).HasMaxLength(50);

                entity.Property(e => e.ReceiveMethodId).HasColumnName("ReceiveMethodID");

                entity.Property(e => e.ReceiveType).HasMaxLength(100);

                entity.Property(e => e.ReceivedDate).HasColumnType("datetime");

                entity.Property(e => e.Remark).HasMaxLength(200);

                entity.Property(e => e.RequestDate).HasMaxLength(50);

                entity.Property(e => e.RequestFormNumber).HasMaxLength(50);

                entity.Property(e => e.RequestLoginName).HasMaxLength(50);

                entity.Property(e => e.RequestRealName).HasMaxLength(50);

                entity.Property(e => e.RequsetSfzh).HasMaxLength(50);

                entity.Property(e => e.Rpid).HasColumnName("RPID");
            });

            modelBuilder.Entity<TccReceiveDocument202009>(entity =>
            {
                entity.HasKey(e => e.NewId)
                    .HasName("PK__TCC_Rece__7CC3769E11FFEF6C");

                entity.ToTable("TCC_ReceiveDocument_202009");

                entity.Property(e => e.NewId).HasColumnName("NewID");

                entity.Property(e => e.ApplyDate).HasColumnType("datetime");

                entity.Property(e => e.ApplyLoginUser).HasMaxLength(50);

                entity.Property(e => e.ApplyName).HasMaxLength(50);

                entity.Property(e => e.AttAsdocId)
                    .IsUnicode(false)
                    .HasColumnName("Att_ASDocID");

                entity.Property(e => e.AttDocType).HasComment("1 正文 2 附件");

                entity.Property(e => e.AttFileId).HasMaxLength(50);

                entity.Property(e => e.DeadLine).HasColumnType("datetime");

                entity.Property(e => e.DocTitle).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.HasOpinion).HasColumnName("hasOpinion");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InfoOpen).HasMaxLength(50);

                entity.Property(e => e.IsReport).HasMaxLength(50);

                entity.Property(e => e.MainSendDeptLeader).HasColumnName("mainSendDeptLeader");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.RecDocDate).HasColumnType("datetime");

                entity.Property(e => e.RecDocNo).HasMaxLength(50);

                entity.Property(e => e.SenDocCorp).HasMaxLength(50);

                entity.Property(e => e.SenDocNo).HasMaxLength(50);

                entity.Property(e => e.SendDocDate).HasColumnType("datetime");

                entity.Property(e => e.YbleaderNum).HasColumnName("YBLeaderNum");
            });

            modelBuilder.Entity<TccRecieveDocument>(entity =>
            {
                entity.ToTable("TCC_RecieveDocument");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyDate).HasColumnType("datetime");

                entity.Property(e => e.ApplyLoginUser).HasMaxLength(50);

                entity.Property(e => e.ApplyName).HasMaxLength(50);

                entity.Property(e => e.AttFileId).HasMaxLength(50);

                entity.Property(e => e.DeadLine).HasColumnType("datetime");

                entity.Property(e => e.DocTitle).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.HasOpinion).HasColumnName("hasOpinion");

                entity.Property(e => e.InfoOpen).HasMaxLength(50);

                entity.Property(e => e.IsReport).HasMaxLength(50);

                entity.Property(e => e.MainSendDeptLeader).HasColumnName("mainSendDeptLeader");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.RecDocDate).HasColumnType("datetime");

                entity.Property(e => e.RecDocNo).HasMaxLength(50);

                entity.Property(e => e.SenDocCorp).HasMaxLength(50);

                entity.Property(e => e.SenDocNo).HasMaxLength(50);

                entity.Property(e => e.SendDocDate).HasColumnType("datetime");

                entity.Property(e => e.YbleaderNum).HasColumnName("YBLeaderNum");
            });

            modelBuilder.Entity<TccRecordAssignedTouser>(entity =>
            {
                entity.ToTable("TCC_RecordAssignedTouser");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Assignedtouser)
                    .HasMaxLength(50)
                    .HasColumnName("ASSIGNEDTOUSER");

                entity.Property(e => e.ProcessName).HasMaxLength(50);
            });

            modelBuilder.Entity<TccRegistrationSubsidyBillsInfo>(entity =>
            {
                entity.ToTable("TCC_RegistrationSubsidyBillsInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("价税合计金额");

                entity.Property(e => e.BillAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("发票金额");

                entity.Property(e => e.BillCode)
                    .HasMaxLength(50)
                    .HasComment("发票编号");

                entity.Property(e => e.BillContent)
                    .HasMaxLength(50)
                    .HasComment("发票内容");

                entity.Property(e => e.BillTaxAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("发票税额");

                entity.Property(e => e.ByAttachment).HasMaxLength(50);

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .HasComment("部门编号");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .HasComment("部门名称");

                entity.Property(e => e.Inventory).HasComment("清单张数");

                entity.Property(e => e.InvoiceCategoryName).HasMaxLength(50);

                entity.Property(e => e.InvoiceCode)
                    .HasMaxLength(50)
                    .HasComment("发票代码");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("datetime")
                    .HasComment("开票时间");

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.RCreateTime)
                    .HasMaxLength(50)
                    .HasColumnName("R_CreateTime");

                entity.Property(e => e.RId)
                    .HasMaxLength(36)
                    .HasColumnName("R_ID");

                entity.Property(e => e.RName)
                    .HasMaxLength(50)
                    .HasColumnName("R_name");

                entity.Property(e => e.RTitle)
                    .HasMaxLength(50)
                    .HasColumnName("R_Title");

                entity.Property(e => e.Requestor)
                    .HasMaxLength(50)
                    .HasComment("提交人姓名");

                entity.Property(e => e.TaxRateCode)
                    .HasMaxLength(50)
                    .HasComment("税率编号");

                entity.Property(e => e.TaxRateText)
                    .HasMaxLength(50)
                    .HasComment("税率显示值");

                entity.Property(e => e.UserIdenity)
                    .HasMaxLength(50)
                    .HasComment("提交人身份证号");
            });

            modelBuilder.Entity<TccRegistrationSubsidyDetail>(entity =>
            {
                entity.ToTable("TCC_RegistrationSubsidyDetails");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyIdNumber)
                    .HasMaxLength(50)
                    .HasComment("申请人身份证号");

                entity.Property(e => e.ApplyLoginName)
                    .HasMaxLength(50)
                    .HasComment("申请人登录名");

                entity.Property(e => e.ApplyRealname)
                    .HasMaxLength(50)
                    .HasComment("申请人名称");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .HasComment("报销人主管部门编号");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .HasComment("报销人主管部门");

                entity.Property(e => e.IsReimburse)
                    .HasMaxLength(50)
                    .HasComment("本次是否报销");

                entity.Property(e => e.Money)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("报销金额");

                entity.Property(e => e.Pid)
                    .HasColumnName("PID")
                    .HasComment("外键");

                entity.Property(e => e.RealName)
                    .HasMaxLength(50)
                    .HasComment("报销人姓名");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .HasComment("原因");

                entity.Property(e => e.Useridentity)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("报销人身份证号");
            });

            modelBuilder.Entity<TccRegistrationSubsidyHeader>(entity =>
            {
                entity.ToTable("TCC_RegistrationSubsidyHeader");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键ID");

                entity.Property(e => e.AdressLocation)
                    .HasMaxLength(50)
                    .HasComment("报销地点");

                entity.Property(e => e.Agency).HasComment("是否代办  1不代办  2代办");

                entity.Property(e => e.BusinessObject).HasComment("业务对象");

                entity.Property(e => e.ClaimsDepartmentCode)
                    .HasMaxLength(50)
                    .HasComment("报销部门编号");

                entity.Property(e => e.ClaimsDepartmentName)
                    .HasMaxLength(50)
                    .HasComment("报销部门名称");

                entity.Property(e => e.ConfirmStatus).HasComment("是否已付款  0未付款  1已付款");

                entity.Property(e => e.DomesticOversea).HasComment("1 境内  2境外");

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(50)
                    .HasComment("表单号");

                entity.Property(e => e.Incident).HasComment("流程实例号");

                entity.Property(e => e.IsComplete).HasComment("人力资源是否审核提交  1是  2否");

                entity.Property(e => e.Location).HasComment("报销地点：1:天津 2：北京");

                entity.Property(e => e.MoneyActual)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("实报金额");

                entity.Property(e => e.MoneyShallBig)
                    .HasMaxLength(50)
                    .HasColumnName("MoneyShall_big")
                    .HasComment("报销金额大写");

                entity.Property(e => e.MoneyShallSmall)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MoneyShall_small")
                    .HasComment("报销金额");

                entity.Property(e => e.Origin)
                    .HasDefaultValueSql("((0))")
                    .HasComment("数据来源：0部门办事员提交  1人力资源部单独提交");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名称");

                entity.Property(e => e.ProcessStatus).HasComment("流程状态：0进行中 1已完成 2已撤销");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date")
                    .HasComment("流程申请时间");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptCode")
                    .HasComment("申请人的主管部门名称");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptName")
                    .HasComment("申请人的主管部门名称");

                entity.Property(e => e.RequestFinishDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_FinishDate")
                    .HasComment("流程结束时间");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName")
                    .HasComment("申请人登录名");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName")
                    .HasComment("申请人姓名");

                entity.Property(e => e.RequestTelPhone)
                    .HasMaxLength(200)
                    .HasColumnName("Request_TelPhone")
                    .HasComment("申请人联系方式");

                entity.Property(e => e.RequestUserIdentity)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserIdentity")
                    .HasComment("申请人身份证号");

                entity.Property(e => e.RequestUserPost)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserPost")
                    .HasComment("申请人岗位等级");
            });

            modelBuilder.Entity<TccRegistrationSubsidyInfo>(entity =>
            {
                entity.ToTable("TCC_RegistrationSubsidyInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AdressLocation)
                    .HasMaxLength(50)
                    .HasComment("报销地点");

                entity.Property(e => e.AttachmentNum).HasComment("附件张数-天津");

                entity.Property(e => e.AttachmentNumBj)
                    .HasColumnName("AttachmentNum_BJ")
                    .HasComment("附件张数-北京");

                entity.Property(e => e.AuditDate)
                    .HasColumnType("datetime")
                    .HasComment("天津审核时间");

                entity.Property(e => e.AuditDateBj)
                    .HasColumnType("datetime")
                    .HasColumnName("AuditDate_BJ")
                    .HasComment("北京审核时间");

                entity.Property(e => e.BankAccount)
                    .HasMaxLength(50)
                    .HasComment("银行账号-天津");

                entity.Property(e => e.BankAccountBj)
                    .HasMaxLength(50)
                    .HasColumnName("BankAccount_BJ")
                    .HasComment("银行账号-北京");

                entity.Property(e => e.ConfirmAuditLoginName)
                    .HasMaxLength(50)
                    .HasComment("天津财务业务审核人登录名");

                entity.Property(e => e.ConfirmAuditLoginNameBj)
                    .HasMaxLength(50)
                    .HasColumnName("ConfirmAuditLoginName_BJ")
                    .HasComment("北京财务业务审核人登录名");

                entity.Property(e => e.ConfirmAuditName)
                    .HasMaxLength(50)
                    .HasComment("天津财务业务审核人姓名");

                entity.Property(e => e.ConfirmAuditNameBj)
                    .HasMaxLength(50)
                    .HasColumnName("ConfirmAuditName_BJ")
                    .HasComment("北京财务业务审核人姓名");

                entity.Property(e => e.ConfirmAuditUserIdentity)
                    .HasMaxLength(50)
                    .HasComment("天津财务业务审核人身份证号");

                entity.Property(e => e.ConfirmAuditUserIdentityBj)
                    .HasMaxLength(50)
                    .HasColumnName("ConfirmAuditUserIdentity_BJ")
                    .HasComment("北京财务业务审核人身份证号");

                entity.Property(e => e.ConfirmDate)
                    .HasColumnType("datetime")
                    .HasComment("天津接单时间");

                entity.Property(e => e.ConfirmDateBj)
                    .HasColumnType("datetime")
                    .HasColumnName("ConfirmDate_BJ")
                    .HasComment("北京接单时间");

                entity.Property(e => e.ConfirmFinaceLoginName)
                    .HasMaxLength(50)
                    .HasComment("天津财务接单人登录名");

                entity.Property(e => e.ConfirmFinaceLoginNameBj)
                    .HasMaxLength(50)
                    .HasColumnName("ConfirmFinaceLoginName_BJ")
                    .HasComment("北京财务接单人登录名");

                entity.Property(e => e.ConfirmFinaceName)
                    .HasMaxLength(50)
                    .HasComment("天津财务接单人姓名");

                entity.Property(e => e.ConfirmFinaceNameBj)
                    .HasMaxLength(50)
                    .HasColumnName("ConfirmFinaceName_BJ")
                    .HasComment("北京财务接单人姓名");

                entity.Property(e => e.ConfirmFinaceUserIdentity)
                    .HasMaxLength(50)
                    .HasComment("天津财务接单人身份证号");

                entity.Property(e => e.ConfirmFinaceUserIdentityBj)
                    .HasMaxLength(50)
                    .HasColumnName("ConfirmFinaceUserIdentity_BJ")
                    .HasComment("北京财务接单人身份证号");

                entity.Property(e => e.ConfirmStatus).HasComment("是否已付款  0未付款  1已付款(天津)");

                entity.Property(e => e.ConfirmStatusBj)
                    .HasColumnName("ConfirmStatus_BJ")
                    .HasComment("是否已付款  0未付款  1已付款(北京)");

                entity.Property(e => e.DesSummary)
                    .HasMaxLength(500)
                    .HasComment("摘要");

                entity.Property(e => e.DomesticOversea).HasComment("1 境内  2境外");

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(50)
                    .HasComment("表单号");

                entity.Property(e => e.Location).HasComment("报销地点：1:天津 2：北京");

                entity.Property(e => e.MoneyActual)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("实报金额");

                entity.Property(e => e.MoneyShallBig)
                    .HasMaxLength(50)
                    .HasColumnName("MoneyShall_big")
                    .HasComment("补贴金额大写");

                entity.Property(e => e.MoneyShallSmall)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MoneyShall_small")
                    .HasComment("补贴金额");

                entity.Property(e => e.NumTotal).HasComment("报销地点总数");

                entity.Property(e => e.PaymentMethod).HasComment("付款方式编号-天津");

                entity.Property(e => e.PaymentMethodBj)
                    .HasColumnName("PaymentMethod_BJ")
                    .HasComment("付款方式编号-北京");

                entity.Property(e => e.PaymentType)
                    .HasMaxLength(50)
                    .HasComment("付款方式名称-天津");

                entity.Property(e => e.PaymentTypeBj)
                    .HasMaxLength(50)
                    .HasColumnName("PaymentType_BJ")
                    .HasComment("付款方式名称-北京");

                entity.Property(e => e.PayorBank)
                    .HasMaxLength(200)
                    .HasComment("付款银行-天津");

                entity.Property(e => e.PayorBankBj)
                    .HasMaxLength(200)
                    .HasColumnName("PayorBank_BJ")
                    .HasComment("付款银行-北京");

                entity.Property(e => e.PayorBankCode)
                    .HasMaxLength(50)
                    .HasComment("付款银行编号-天津");

                entity.Property(e => e.PayorBankCodeBj)
                    .HasMaxLength(50)
                    .HasColumnName("PayorBankCode_BJ")
                    .HasComment("付款银行编号-北京");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProcessStatus).HasComment("流程状态：0进行中 1已完成 2已撤销");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date")
                    .HasComment("流程申请时间");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptCode")
                    .HasComment("申请人的主管部门编号");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptName")
                    .HasComment("申请人的主管部门名称");

                entity.Property(e => e.RequestFinishDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_FinishDate")
                    .HasComment("流程结束时间");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName")
                    .HasComment("申请人登录名");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName")
                    .HasComment("申请人姓名");

                entity.Property(e => e.RequestTelPhone)
                    .HasMaxLength(200)
                    .HasColumnName("Request_TelPhone")
                    .HasComment("申请人联系方式");

                entity.Property(e => e.RequestUserIdentity)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserIdentity")
                    .HasComment("nvarchar(50)");

                entity.Property(e => e.Retype)
                    .HasColumnName("retype")
                    .HasComment("1 :注册师补贴  7:其他");

                entity.Property(e => e.SumNum).HasComment("报销地点审核提交计数器");

                entity.Property(e => e.TravelClaimCategory)
                    .HasMaxLength(50)
                    .HasColumnName("Travel_ClaimCategory")
                    .HasComment("报销类型");

                entity.Property(e => e.Voucherid)
                    .HasColumnName("VOUCHERID")
                    .HasComment("凭证ID号-天津");

                entity.Property(e => e.VoucheridBj)
                    .HasColumnName("VOUCHERID_BJ")
                    .HasComment("凭证ID号-北京");
            });

            modelBuilder.Entity<TccRelationOfPayAndRec>(entity =>
            {
                entity.ToTable("TCC_RelationOfPayAndRec");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.AccountStatus).HasComment("流程入账状态 0未入账  1 已入账");

                entity.Property(e => e.PayInfoId)
                    .HasColumnName("PayInfoID")
                    .HasComment("付款ID（保证金、押金）");

                entity.Property(e => e.ReceiveId)
                    .HasMaxLength(36)
                    .HasColumnName("ReceiveID")
                    .HasComment("收款ID（收押金、保证金）");
            });

            modelBuilder.Entity<TccResearchAndDevelopmentProjectBudget>(entity =>
            {
                entity.ToTable("TCC_ResearchAndDevelopmentProjectBudget");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AccumulatedCapitalizedAmount).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.AccumulatedExpensedAmount).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.CompName).HasMaxLength(50);

                entity.Property(e => e.CompletionProgress).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.DeptCode).HasMaxLength(50);

                entity.Property(e => e.DeptName).HasMaxLength(50);

                entity.Property(e => e.ImplementationYear).HasMaxLength(10);

                entity.Property(e => e.LastYearDevelopmentPayBalance).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.MakeUnit).HasMaxLength(50);

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.ProjectName).HasMaxLength(200);

                entity.Property(e => e.SelfAmountRaised).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.TotalInvested).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.TotalPlannedInvestment).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.YearAmountCapitalized).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.YearCompletionSchedule).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.YearDevelopmentPayBalanceBudget).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.YearExpenseAmount).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.YearPlannedInvestment).HasColumnType("decimal(18, 6)");
            });

            modelBuilder.Entity<TccResearchAndDevelopmentProjectBudgetTemp>(entity =>
            {
                entity.ToTable("TCC_ResearchAndDevelopmentProjectBudgetTEMP");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AccumulatedCapitalizedAmount).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.AccumulatedExpensedAmount).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.CompName).HasMaxLength(50);

                entity.Property(e => e.CompletionProgress).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.DeptCode).HasMaxLength(50);

                entity.Property(e => e.DeptName).HasMaxLength(50);

                entity.Property(e => e.ImplementationYear).HasMaxLength(10);

                entity.Property(e => e.LastYearDevelopmentPayBalance).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.MakeUnit).HasMaxLength(50);

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.ProjectName).HasMaxLength(200);

                entity.Property(e => e.SelfAmountRaised).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.TotalInvested).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.TotalPlannedInvestment).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.YearAmountCapitalized).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.YearCompletionSchedule).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.YearDevelopmentPayBalanceBudget).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.YearExpenseAmount).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.YearPlannedInvestment).HasColumnType("decimal(18, 6)");
            });

            modelBuilder.Entity<TccRiskMortgageDetail>(entity =>
            {
                entity.ToTable("TCC_RiskMortgageDetail");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键ID");

                entity.Property(e => e.AccountDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1900-01-01 00:00:00.000')")
                    .HasComment("到账时间");

                entity.Property(e => e.AlbowlAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("已扣风险抵押金");

                entity.Property(e => e.AlreadyAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("已收取风险抵押金");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("风险抵押金");

                entity.Property(e => e.BowlAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("bowlAmount")
                    .HasDefaultValueSql("((0))")
                    .HasComment("扣风险抵押金");

                entity.Property(e => e.DutyArea)
                    .HasMaxLength(500)
                    .HasComment("责任区域");

                entity.Property(e => e.DutyCode)
                    .HasMaxLength(50)
                    .HasComment("责任区域编号");

                entity.Property(e => e.Incident).HasComment("流程实例号");

                entity.Property(e => e.Operate).HasComment("1：收风险抵押金 2：返回风险抵押金");

                entity.Property(e => e.Person)
                    .HasMaxLength(50)
                    .HasComment("责任人");

                entity.Property(e => e.PredictsafetyHours)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("predictsafetyHours")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名");

                entity.Property(e => e.Remark)
                    .HasMaxLength(200)
                    .HasComment("说明");

                entity.Property(e => e.RemissionAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("返回风险抵押金");

                entity.Property(e => e.RequestLogin).HasMaxLength(50);

                entity.Property(e => e.RequestPerson).HasMaxLength(50);

                entity.Property(e => e.RequestUserIdentity).HasMaxLength(50);

                entity.Property(e => e.Status)
                    .HasDefaultValueSql("((0))")
                    .HasComment("标识 0：不需开票  1：需要开票 2：已开票");

                entity.Property(e => e.UserIdentity)
                    .HasMaxLength(50)
                    .HasComment("责任人身份证号");
            });

            modelBuilder.Entity<TccRiskMortgagesHeader>(entity =>
            {
                entity.ToTable("TCC_RiskMortgagesHeader");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键ID");

                entity.Property(e => e.DirectorApproveDate)
                    .HasColumnType("datetime")
                    .HasComment("主管经理审批时间");

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(50)
                    .HasComment("流程表单号");

                entity.Property(e => e.Incident).HasComment("流程实例号");

                entity.Property(e => e.Operate).HasComment("1：收风险抵押金 2：返回风险抵押金");

                entity.Property(e => e.ProcessFinishDate)
                    .HasColumnType("datetime")
                    .HasComment("流程结束时间");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名称");

                entity.Property(e => e.ProcessStatus).HasComment("流程结束标识 1结束 2作废 0进行中");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date")
                    .HasComment("流程申请时间");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptCode")
                    .HasComment("主管部门编号");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptName")
                    .HasComment("主管部门名称");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName")
                    .HasComment("申请人登录名");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName")
                    .HasComment("申请人姓名");

                entity.Property(e => e.RequestUserIdentity)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserIdentity")
                    .HasComment("申请人身份证号");
            });

            modelBuilder.Entity<TccRiskMortgagesOtherCategoryDetail>(entity =>
            {
                entity.ToTable("TCC_RiskMortgagesOtherCategoryDetail");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键ID");

                entity.Property(e => e.AccountDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1900-01-01 00:00:00.000')")
                    .HasComment("到账时间");

                entity.Property(e => e.AlRemissionAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("已返还风险抵押金");

                entity.Property(e => e.AlbowlAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("已扣风险抵押金");

                entity.Property(e => e.AlreadyAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("已收取风险抵押金");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("风险抵押金");

                entity.Property(e => e.BowlAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("bowlAmount")
                    .HasDefaultValueSql("((0))")
                    .HasComment("扣风险抵押金");

                entity.Property(e => e.Did)
                    .HasColumnName("DID")
                    .HasComment("退款、扣款对应的收取主键ID");

                entity.Property(e => e.DutyArea)
                    .HasMaxLength(500)
                    .HasComment("责任区域");

                entity.Property(e => e.Incident).HasComment("流程实例号");

                entity.Property(e => e.Operate).HasComment("1：收风险抵押金 2：返回风险抵押金");

                entity.Property(e => e.Person)
                    .HasMaxLength(50)
                    .HasComment("责任人");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名");

                entity.Property(e => e.Remark)
                    .HasMaxLength(200)
                    .HasComment("说明");

                entity.Property(e => e.RemissionAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("返回风险抵押金");

                entity.Property(e => e.RequestLogin).HasMaxLength(50);

                entity.Property(e => e.RequestPerson).HasMaxLength(50);

                entity.Property(e => e.RequestUserIdentity).HasMaxLength(50);

                entity.Property(e => e.Status)
                    .HasDefaultValueSql("((0))")
                    .HasComment("标识 0：不需开票  1：需要开票 2：已开票");

                entity.Property(e => e.UserIdentity)
                    .HasMaxLength(50)
                    .HasComment("责任人身份证号");
            });

            modelBuilder.Entity<TccRiskMortgagesOtherCategoryHeader>(entity =>
            {
                entity.ToTable("TCC_RiskMortgagesOtherCategoryHeader");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DirectorApproveDate)
                    .HasColumnType("datetime")
                    .HasComment("主管经理审批时间");

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(50)
                    .HasComment("流程表单号");

                entity.Property(e => e.Incident).HasComment("流程实例号");

                entity.Property(e => e.Operate).HasComment("0：扣风险抵押金 1：收风险抵押金");

                entity.Property(e => e.ProcessFinishDate)
                    .HasColumnType("datetime")
                    .HasComment("流程结束时间");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名称");

                entity.Property(e => e.ProcessStatus).HasComment("流程结束标识 1结束 2作废 0进行中");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date")
                    .HasComment("流程申请时间");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptCode")
                    .HasComment("主管部门编号");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptName")
                    .HasComment("主管部门名称");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName")
                    .HasComment("申请人登录名");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName")
                    .HasComment("申请人姓名");

                entity.Property(e => e.RequestUserIdentity)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserIdentity")
                    .HasComment("申请人身份证号");
            });

            modelBuilder.Entity<TccRole>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TCC_ROLE");

                entity.Property(e => e.RoleClass)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Role_Class");

                entity.Property(e => e.RoleClassId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Role_Class_Id");

                entity.Property(e => e.RoleDesc)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Role_Desc");

                entity.Property(e => e.RoleId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Role_Id");
            });

            modelBuilder.Entity<TccRoleAuthorityRelation>(entity =>
            {
                entity.ToTable("TCC_RoleAuthorityRelation");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Code).HasComment("对应字典表Code值");

                entity.Property(e => e.Falg)
                    .HasMaxLength(50)
                    .HasComment("对应字典表Flag值");

                entity.Property(e => e.IdcardNo)
                    .HasMaxLength(50)
                    .HasColumnName("IDCardNo")
                    .HasComment("身份证号");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .HasComment("对应字典表Name值");

                entity.Property(e => e.Roleid)
                    .HasMaxLength(50)
                    .HasComment("角色编号");
            });

            modelBuilder.Entity<TccRperInfo>(entity =>
            {
                entity.ToTable("TCC_RPerInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Proid)
                    .HasMaxLength(50)
                    .HasColumnName("proid");

                entity.Property(e => e.RperCny)
                    .HasMaxLength(50)
                    .HasColumnName("RPer_CNY");
            });

            modelBuilder.Entity<TccSafetyManagementProcess>(entity =>
            {
                entity.ToTable("TCC_SafetyManagementProcess");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AfterCurrentApproveLeftMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("本次批准后剩余金额");

                entity.Property(e => e.AppAuditAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("appAuditAmount")
                    .HasComment("审核 页面中 核定奖金总额");

                entity.Property(e => e.AppCurrentAssignAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("appCurrentAssignAmount")
                    .HasComment("审核 页面  本次发放额");

                entity.Property(e => e.AppForeignUnitAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("appForeignUnitAmount")
                    .HasComment("审核 页面中 其中外单位金额");

                entity.Property(e => e.AssignAmountTotal)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("累计发放金额（最终审批金额合计）");

                entity.Property(e => e.AssignDate)
                    .HasColumnType("datetime")
                    .HasComment("分配时间");

                entity.Property(e => e.AssignStatus)
                    .HasDefaultValueSql("((1))")
                    .HasComment("分配状态 1=未分配 2=已分配");

                entity.Property(e => e.AwardCategory)
                    .HasMaxLength(50)
                    .HasComment("奖项编号");

                entity.Property(e => e.CanAssign)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("(N'N')")
                    .HasComment("是否可分配");

                entity.Property(e => e.ContractType)
                    .HasMaxLength(50)
                    .HasComment("合同类型");

                entity.Property(e => e.CurrentLeftMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("当前剩余金额");

                entity.Property(e => e.CurrentQapproveMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("CurrentQApproveMoney")
                    .HasDefaultValueSql("((0))")
                    .HasComment("当前季度批准额");

                entity.Property(e => e.CurrentRequestAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("本次申请金额");

                entity.Property(e => e.ForeignUnitAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("其中外单位金额");

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(20)
                    .HasComment("流程表单号");

                entity.Property(e => e.HoursSafe)
                    .HasMaxLength(50)
                    .HasComment("安全工时");

                entity.Property(e => e.HoursTotal)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("累计工时");

                entity.Property(e => e.Incident).HasComment("实例号");

                entity.Property(e => e.PlanCompleteDate)
                    .HasColumnType("datetime")
                    .HasComment("计划完工日期");

                entity.Property(e => e.ProcessFinishDate).HasColumnType("datetime");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(500)
                    .HasComment("流程名");

                entity.Property(e => e.ProcessStatus)
                    .HasDefaultValueSql("((0))")
                    .HasComment("流程状态  0=未归档  1= 已归档  2=已撤销");

                entity.Property(e => e.ProjectCategory)
                    .HasMaxLength(200)
                    .HasComment("项目类型");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(200)
                    .HasComment("项目编号");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(200)
                    .HasComment("项目名称");

                entity.Property(e => e.ProjectProgressStatus)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("项目进展状态（百分之字段中存的数据） 如需要用到此字段进行计算需进行转换");

                entity.Property(e => e.ProjectReamrk).HasComment("项目安全情况简述");

                entity.Property(e => e.ReceiverDate)
                    .HasColumnType("datetime")
                    .HasComment("接收时间");

                entity.Property(e => e.RejectTimes)
                    .HasDefaultValueSql("((0))")
                    .HasComment("在流程中明细确认步骤被退回的次数");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date")
                    .HasComment("流程申请时间");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptCode")
                    .HasComment("流程申请人所在的主管部门");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(200)
                    .HasColumnName("Request_DeptName")
                    .HasComment("流程申请人所在的主管部门");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName")
                    .HasComment("流程申请人");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName")
                    .HasComment("流程申请人");

                entity.Property(e => e.RequestUserIdentity)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserIdentity")
                    .HasComment("流程申请人");

                entity.Property(e => e.SafetyAuditScore)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("安全审核得分");

                entity.Property(e => e.StartWorkDate)
                    .HasColumnType("datetime")
                    .HasComment("开工日期");

                entity.Property(e => e.YearAwardBudget)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("年度预算额");

                entity.Property(e => e.YearBalance)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("年度剩余额");

                entity.Property(e => e.YearPayment)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("年度已发放额");
            });

            modelBuilder.Entity<TccSalaryAdjustmentPlan>(entity =>
            {
                entity.ToTable("TCC_SalaryAdjustmentPlan");

                entity.HasComment("用于薪酬管理流程中保存薪资调整信息");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("自增主键");

                entity.Property(e => e.Dept)
                    .HasMaxLength(200)
                    .HasComment("主管部门(名称不会重复)");

                entity.Property(e => e.IdentityId)
                    .HasMaxLength(100)
                    .HasComment("身份证号");

                entity.Property(e => e.IncidentNo)
                    .HasDefaultValueSql("((0))")
                    .HasComment("实例号");

                entity.Property(e => e.IsUpdated)
                    .HasDefaultValueSql("((0))")
                    .HasComment("是否是历史数据");

                entity.Property(e => e.NewPostCode)
                    .HasMaxLength(200)
                    .HasComment("现岗位编号");

                entity.Property(e => e.NewPostName)
                    .HasMaxLength(100)
                    .HasComment("现岗位");

                entity.Property(e => e.NewReservationWages)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("现保留工资");

                entity.Property(e => e.NewSalaryLevel)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("现薪级");

                entity.Property(e => e.OrinigalPostCode)
                    .HasMaxLength(200)
                    .HasComment("原岗位编号");

                entity.Property(e => e.OrinigalPostName)
                    .HasMaxLength(100)
                    .HasComment("原岗位");

                entity.Property(e => e.OrinigalReservationWages)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("原保留工资");

                entity.Property(e => e.OrinigalSalaryLevel)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("原薪级");

                entity.Property(e => e.PostAllowance)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("岗位津贴");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(200)
                    .HasComment("流程名");

                entity.Property(e => e.StableSalary)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("固定工资");

                entity.Property(e => e.UploadDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("修改日期");

                entity.Property(e => e.UserName)
                    .HasMaxLength(200)
                    .HasComment("姓名");
            });

            modelBuilder.Entity<TccSalaryBasic>(entity =>
            {
                entity.ToTable("TCC_SalaryBasic");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.AllowanceProportion)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("岗位津贴比例");

                entity.Property(e => e.FixedSalaryProportion)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("固定工资比例");

                entity.Property(e => e.SalaryLevel).HasComment("薪资等级");

                entity.Property(e => e.StandardSalary)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("标准薪资额度");
            });

            modelBuilder.Entity<TccSalaryManageProcess>(entity =>
            {
                entity.ToTable("TCC_SalaryManageProcess");

                entity.Property(e => e.ApplyDate).HasColumnType("datetime");

                entity.Property(e => e.ApplyUserDeptName).HasMaxLength(200);

                entity.Property(e => e.ApplyUserLoginName).HasMaxLength(200);

                entity.Property(e => e.ApplyUserName).HasMaxLength(200);

                entity.Property(e => e.ProcessName).HasMaxLength(200);
            });

            modelBuilder.Entity<TccSealDocInfo>(entity =>
            {
                entity.ToTable("TCC_SealDocInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.FileNum).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.SealNum).HasMaxLength(50);
            });

            modelBuilder.Entity<TccSealInfo>(entity =>
            {
                entity.ToTable("TCC_SealInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyRemark).HasMaxLength(200);

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.FormNumber).HasMaxLength(20);

                entity.Property(e => e.ObtainTime).HasColumnType("datetime");

                entity.Property(e => e.RepayTime).HasColumnType("datetime");

                entity.Property(e => e.RepayUser).HasMaxLength(50);

                entity.Property(e => e.SealEndDate).HasMaxLength(50);

                entity.Property(e => e.SealName).HasMaxLength(50);

                entity.Property(e => e.SealStartDate).HasMaxLength(50);

                entity.Property(e => e.SealType).HasMaxLength(50);

                entity.Property(e => e.UsePerson).HasMaxLength(50);
            });

            modelBuilder.Entity<TccSealMadeApply>(entity =>
            {
                entity.ToTable("TCC_SealMadeApply");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyDate).HasColumnType("datetime");

                entity.Property(e => e.ApplyDept).HasMaxLength(50);

                entity.Property(e => e.ApplyDeptNo).HasMaxLength(50);

                entity.Property(e => e.ApplyLoginUser).HasMaxLength(50);

                entity.Property(e => e.ApplyName).HasMaxLength(50);

                entity.Property(e => e.ApplyPhone).HasMaxLength(50);

                entity.Property(e => e.Demo1).HasMaxLength(50);

                entity.Property(e => e.Demo2).HasMaxLength(50);

                entity.Property(e => e.FormNumber)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectName).HasMaxLength(50);

                entity.Property(e => e.ProjectNo).HasMaxLength(50);

                entity.Property(e => e.SealType).HasMaxLength(50);
            });

            modelBuilder.Entity<TccSealUseApply>(entity =>
            {
                entity.ToTable("TCC_SealUseApply");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyDate).HasColumnType("datetime");

                entity.Property(e => e.ApplyDept).HasMaxLength(50);

                entity.Property(e => e.ApplyDeptNo).HasMaxLength(50);

                entity.Property(e => e.ApplyLoginUser).HasMaxLength(50);

                entity.Property(e => e.ApplyName).HasMaxLength(50);

                entity.Property(e => e.ApplyPhone).HasMaxLength(50);

                entity.Property(e => e.ApplyType).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.HtBothSideName).HasMaxLength(50);

                entity.Property(e => e.HtNum).HasMaxLength(50);

                entity.Property(e => e.HtPrice).HasMaxLength(50);

                entity.Property(e => e.HtType)
                    .HasMaxLength(50)
                    .HasColumnName("htType");

                entity.Property(e => e.IsThirdPart)
                    .HasMaxLength(50)
                    .HasColumnName("isThirdPart");

                entity.Property(e => e.MsgSendTime).HasColumnType("datetime");

                entity.Property(e => e.OtherSeal).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectName).HasMaxLength(200);

                entity.Property(e => e.ProjectNo).HasMaxLength(50);

                entity.Property(e => e.SealCount).HasMaxLength(50);

                entity.Property(e => e.SealDept).HasMaxLength(50);

                entity.Property(e => e.SealDeptNo).HasMaxLength(50);

                entity.Property(e => e.SealType).HasMaxLength(50);

                entity.Property(e => e.SecretSealStatus).HasMaxLength(50);

                entity.Property(e => e.SendComp).HasMaxLength(50);

                entity.Property(e => e.SpecialSealType).HasMaxLength(50);

                entity.Property(e => e.SqContent).HasColumnName("SQ_Content");

                entity.Property(e => e.SqDonePerson)
                    .HasMaxLength(50)
                    .HasColumnName("SQ_DonePerson");

                entity.Property(e => e.SqEndDate)
                    .HasMaxLength(50)
                    .HasColumnName("SQ_EndDate");

                entity.Property(e => e.SqIdcardNo)
                    .HasMaxLength(50)
                    .HasColumnName("SQ_IDCardNo");

                entity.Property(e => e.SqJydept)
                    .HasMaxLength(50)
                    .HasColumnName("SQ_JYdept");

                entity.Property(e => e.SqNeedGz)
                    .HasMaxLength(50)
                    .HasColumnName("SQ_NeedGZ");

                entity.Property(e => e.SqNeedSeal)
                    .HasMaxLength(50)
                    .HasColumnName("SQ_NeedSeal");

                entity.Property(e => e.SqNeedSealCount)
                    .HasMaxLength(50)
                    .HasColumnName("SQ_NeedSealCount");

                entity.Property(e => e.SqNumber)
                    .HasMaxLength(50)
                    .HasColumnName("SQ_number");

                entity.Property(e => e.SqPerson)
                    .HasMaxLength(50)
                    .HasColumnName("SQ_person");

                entity.Property(e => e.SqReason)
                    .HasMaxLength(50)
                    .HasColumnName("SQ_reason");

                entity.Property(e => e.SqStartDate)
                    .HasMaxLength(50)
                    .HasColumnName("SQ_StartDate");

                entity.Property(e => e.SqType)
                    .HasMaxLength(50)
                    .HasColumnName("SQ_type");

                entity.Property(e => e.ThirdPartId)
                    .HasMaxLength(50)
                    .HasColumnName("ThirdPartID");

                entity.Property(e => e.ThirdPartSealType).HasMaxLength(50);

                entity.Property(e => e.ThirdPartUseType).HasMaxLength(50);

                entity.Property(e => e.UseType).HasMaxLength(50);
            });

            modelBuilder.Entity<TccSenDocForwardRecord>(entity =>
            {
                entity.ToTable("TCC_SenDocForwardRecord");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.SendFromRealName).HasMaxLength(50);

                entity.Property(e => e.SendFromloginName).HasMaxLength(50);
            });

            modelBuilder.Entity<TccSenDocGroup>(entity =>
            {
                entity.ToTable("TCC_SenDocGroup");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Enabled).HasColumnName("enabled");

                entity.Property(e => e.SenDocGroupName).HasMaxLength(50);

                entity.Property(e => e.SenDocGroupType).HasMaxLength(50);
            });

            modelBuilder.Entity<TccSenDocument>(entity =>
            {
                entity.ToTable("TCC_SenDocument");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyDate).HasColumnType("datetime");

                entity.Property(e => e.ApplyDept).HasMaxLength(50);

                entity.Property(e => e.ApplyDeptNo).HasMaxLength(50);

                entity.Property(e => e.ApplyLoginUser).HasMaxLength(50);

                entity.Property(e => e.ApplyName).HasMaxLength(50);

                entity.Property(e => e.CoptyToLeaderId).HasColumnName("copty_to_leader_id");

                entity.Property(e => e.DocFileId).HasMaxLength(50);

                entity.Property(e => e.DocType).HasMaxLength(50);

                entity.Property(e => e.Exammark).HasMaxLength(500);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.HegaoContent).HasColumnName("hegao_content");

                entity.Property(e => e.HegaoPerson)
                    .HasMaxLength(50)
                    .HasColumnName("hegao_person");

                entity.Property(e => e.HegaoPersonId)
                    .HasMaxLength(50)
                    .HasColumnName("hegao_person_id");

                entity.Property(e => e.HegaoTime)
                    .HasColumnType("datetime")
                    .HasColumnName("hegao_time");

                entity.Property(e => e.InfoOpen)
                    .HasMaxLength(50)
                    .HasColumnName("infoOpen");

                entity.Property(e => e.IsExam).HasMaxLength(50);

                entity.Property(e => e.Oaid)
                    .HasMaxLength(50)
                    .HasColumnName("OAId");

                entity.Property(e => e.Optionmark).HasMaxLength(500);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.QianfaContent).HasColumnName("qianfa_content");

                entity.Property(e => e.QianfaPerson)
                    .HasMaxLength(50)
                    .HasColumnName("qianfa_person");

                entity.Property(e => e.QianfaPersonId)
                    .HasMaxLength(50)
                    .HasColumnName("qianfa_person_id");

                entity.Property(e => e.QianfaTime)
                    .HasColumnType("datetime")
                    .HasColumnName("qianfa_time");

                entity.Property(e => e.SendDocDate).HasColumnType("datetime");

                entity.Property(e => e.SendDocNo).HasMaxLength(50);

                entity.Property(e => e.SendFw).HasMaxLength(50);

                entity.Property(e => e.SendKind).HasMaxLength(50);

                entity.Property(e => e.SendNo).HasColumnName("sendNo");

                entity.Property(e => e.SendToLeaderId).HasColumnName("send_to_leader_id");

                entity.Property(e => e.SendType).HasMaxLength(50);

                entity.Property(e => e.SendUnit)
                    .HasMaxLength(50)
                    .HasColumnName("send_unit");

                entity.Property(e => e.SendUnitId)
                    .HasMaxLength(50)
                    .HasColumnName("send_unit_id");

                entity.Property(e => e.Sendmark).HasMaxLength(500);

                entity.Property(e => e.XmlToYonyou).HasColumnName("xmlToYonyou");
            });

            modelBuilder.Entity<TccSenDocument202009>(entity =>
            {
                entity.HasKey(e => e.NewId)
                    .HasName("PK__TCC_SenD__7CC3769E0E2F5E88");

                entity.ToTable("TCC_SenDocument_202009");

                entity.Property(e => e.NewId).HasColumnName("NewID");

                entity.Property(e => e.ApplyDate).HasColumnType("datetime");

                entity.Property(e => e.ApplyDept).HasMaxLength(50);

                entity.Property(e => e.ApplyDeptNo).HasMaxLength(50);

                entity.Property(e => e.ApplyLoginUser).HasMaxLength(50);

                entity.Property(e => e.ApplyName).HasMaxLength(50);

                entity.Property(e => e.AttAsdocId)
                    .IsUnicode(false)
                    .HasColumnName("Att_ASDocID");

                entity.Property(e => e.AttDocType).HasComment("1 正文 2 附件");

                entity.Property(e => e.CoptyToLeaderId).HasColumnName("copty_to_leader_id");

                entity.Property(e => e.DocFileId).HasMaxLength(50);

                entity.Property(e => e.DocType).HasMaxLength(50);

                entity.Property(e => e.Exammark).HasMaxLength(500);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.HegaoContent).HasColumnName("hegao_content");

                entity.Property(e => e.HegaoPerson)
                    .HasMaxLength(50)
                    .HasColumnName("hegao_person");

                entity.Property(e => e.HegaoPersonId)
                    .HasMaxLength(50)
                    .HasColumnName("hegao_person_id");

                entity.Property(e => e.HegaoTime)
                    .HasColumnType("datetime")
                    .HasColumnName("hegao_time");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InfoOpen)
                    .HasMaxLength(50)
                    .HasColumnName("infoOpen");

                entity.Property(e => e.IsExam).HasMaxLength(50);

                entity.Property(e => e.Oaid)
                    .HasMaxLength(50)
                    .HasColumnName("OAId");

                entity.Property(e => e.Optionmark).HasMaxLength(500);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.QianfaContent).HasColumnName("qianfa_content");

                entity.Property(e => e.QianfaPerson)
                    .HasMaxLength(50)
                    .HasColumnName("qianfa_person");

                entity.Property(e => e.QianfaPersonId)
                    .HasMaxLength(50)
                    .HasColumnName("qianfa_person_id");

                entity.Property(e => e.QianfaTime)
                    .HasColumnType("datetime")
                    .HasColumnName("qianfa_time");

                entity.Property(e => e.SendDocDate).HasColumnType("datetime");

                entity.Property(e => e.SendDocNo).HasMaxLength(50);

                entity.Property(e => e.SendFw).HasMaxLength(50);

                entity.Property(e => e.SendKind).HasMaxLength(50);

                entity.Property(e => e.SendNo).HasColumnName("sendNo");

                entity.Property(e => e.SendToLeaderId).HasColumnName("send_to_leader_id");

                entity.Property(e => e.SendType).HasMaxLength(50);

                entity.Property(e => e.SendUnit)
                    .HasMaxLength(50)
                    .HasColumnName("send_unit");

                entity.Property(e => e.SendUnitId)
                    .HasMaxLength(50)
                    .HasColumnName("send_unit_id");

                entity.Property(e => e.Sendmark).HasMaxLength(500);

                entity.Property(e => e.XmlToYonyou).HasColumnName("xmlToYonyou");
            });

            modelBuilder.Entity<TccSenDocumentRule>(entity =>
            {
                entity.ToTable("TCC_SenDocument_Rule");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyDate).HasMaxLength(50);

                entity.Property(e => e.ApplyLoginUser).HasMaxLength(50);

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.RuleName).HasMaxLength(200);

                entity.Property(e => e.RuleNo).HasMaxLength(50);

                entity.Property(e => e.RuleType).HasComment("1 直接点击预览查看\r\n2 打开发文正文附件列表查看");

                entity.Property(e => e.Source).HasComment("2 走发文流程写入\r\n1 初始化");
            });

            modelBuilder.Entity<TccSenDocumentTxDoc>(entity =>
            {
                entity.ToTable("TCC_SenDocument_TxDoc");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyDate).HasMaxLength(50);

                entity.Property(e => e.ApplyLoginUser).HasMaxLength(50);

                entity.Property(e => e.DocType).HasMaxLength(50);

                entity.Property(e => e.FileId).HasColumnName("FileID");

                entity.Property(e => e.HasAtt)
                    .HasColumnName("hasAtt")
                    .HasComment("0 无附件  1 有附件");

                entity.Property(e => e.RuleName).HasMaxLength(200);

                entity.Property(e => e.RuleNo).HasMaxLength(50);

                entity.Property(e => e.RuleType).HasComment("1 直接点击预览查看\r\n2 打开发文正文附件列表查看");

                entity.Property(e => e.Source).HasComment("2 走发文流程写入\r\n1 初始化");
            });

            modelBuilder.Entity<TccSenDocumentTxDocAtt>(entity =>
            {
                entity.ToTable("TCC_SenDocument_TxDoc_Att");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AttFileId).HasColumnName("Att_FileID");

                entity.Property(e => e.AttFileName).HasColumnName("Att_FileName");

                entity.Property(e => e.TxDocId).HasColumnName("TxDocID");
            });

            modelBuilder.Entity<TccSeparationCompletion>(entity =>
            {
                entity.ToTable("TCC_SeparationCompletion");

                entity.Property(e => e.UserIdentityId)
                    .HasMaxLength(50)
                    .HasComment("用户身份证号");
            });

            modelBuilder.Entity<TccSheBaoHistroy>(entity =>
            {
                entity.ToTable("TCC_SheBaoHistroy");

                entity.HasIndex(e => new { e.Month, e.Year }, "<Name of Missing Index, sysname,>");

                entity.HasIndex(e => new { e.Month, e.Year, e.UserIdentityId }, "PK_M_Y_U");

                entity.Property(e => e.AnYueZhuFangBuTie).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DaEyiLiao)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("DaEYiLiao");

                entity.Property(e => e.DeptCode).HasMaxLength(50);

                entity.Property(e => e.DeptName).HasMaxLength(50);

                entity.Property(e => e.GongJiJinGeRen).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.GongJiJinGeRen2).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.GongJiJinGeRenBuJiao).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.GongJiJinGongSi).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.GongJiJinGongSiBuJiao).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.GongJinJinGongSi2).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.GongJinJinGuiShui).HasMaxLength(50);

                entity.Property(e => e.GongShangGeRen).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.NewSalaryVest).HasMaxLength(50);

                entity.Property(e => e.QiYeNianJinGeRen).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.QiYeNianJinGongSi).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SalaryVest).HasMaxLength(50);

                entity.Property(e => e.SheBaoGuiShui).HasMaxLength(50);

                entity.Property(e => e.SheBaoJiShu).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ShengYuGeRen).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ShiYeGeRen).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ShiYeGongSi).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.UserIdentityId).HasMaxLength(50);

                entity.Property(e => e.UserLoginName).HasMaxLength(50);

                entity.Property(e => e.UserName).HasMaxLength(50);

                entity.Property(e => e.YangLaoGeRen).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.YangLaoGongSi).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.YiLiaoGeRen).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.YiLiaoGongSi).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<TccSmFile>(entity =>
            {
                entity.ToTable("TCC_SM_File");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.FileAtt)
                    .HasDefaultValueSql("((0))")
                    .HasComment("是否有附件附表 1，0");

                entity.Property(e => e.FileCode)
                    .HasMaxLength(50)
                    .HasComment("文件编号");

                entity.Property(e => e.FileDept).HasComment("责任部门");

                entity.Property(e => e.FileId)
                    .HasMaxLength(50)
                    .HasColumnName("FileID");

                entity.Property(e => e.FileName).HasComment("文件名称");

                entity.Property(e => e.FileRegId)
                    .HasMaxLength(50)
                    .HasColumnName("FileRegID");

                entity.Property(e => e.FileRegName).HasComment("风险登记表");

                entity.Property(e => e.FileType)
                    .HasMaxLength(50)
                    .HasComment("文件类型");

                entity.Property(e => e.FileVersion)
                    .HasMaxLength(50)
                    .HasComment("版本");

                entity.Property(e => e.ProgressCode)
                    .HasMaxLength(50)
                    .HasComment("过程编号");

                entity.Property(e => e.PubDate)
                    .HasColumnType("date")
                    .HasComment("实施日期");
            });

            modelBuilder.Entity<TccSocialSecurityProportion>(entity =>
            {
                entity.ToTable("TCC_SocialSecurityProportion");

                entity.HasComment("社保比例维护表");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.Annuity)
                    .HasColumnType("decimal(18, 3)")
                    .HasComment("企业年金基数");

                entity.Property(e => e.CFund)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("C_Fund")
                    .HasComment("公司缴纳公积金的比例");

                entity.Property(e => e.CInjuryInsurance)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("C_InjuryInsurance")
                    .HasComment("公司缴纳工伤保险的比例");

                entity.Property(e => e.CMaternityInsurance)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("C_MaternityInsurance")
                    .HasComment("公司缴纳生育保险的比例");

                entity.Property(e => e.CMedicalInsurance)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("C_MedicalInsurance")
                    .HasComment("公司缴纳医疗保险的比例");

                entity.Property(e => e.CPensionInsurance)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("C_PensionInsurance")
                    .HasComment("公司缴纳养老保险的比例");

                entity.Property(e => e.CTotalProportion)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("C_TotalProportion")
                    .HasComment("公司缴纳社保比例合计");

                entity.Property(e => e.CUnemploymentInsurance)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("C_UnemploymentInsurance")
                    .HasComment("公司缴纳失业保险的比例");

                entity.Property(e => e.MaxAmount)
                    .HasColumnType("decimal(18, 3)")
                    .HasComment("社保缴费基数Max值");

                entity.Property(e => e.MinAmount)
                    .HasColumnType("decimal(18, 3)")
                    .HasComment("社保缴费基数Min值");

                entity.Property(e => e.PFund)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("P_Fund")
                    .HasComment("个人缴纳公积金的比例");

                entity.Property(e => e.PMedicalInsurance)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("P_MedicalInsurance")
                    .HasComment("个人缴纳医疗保险的比例");

                entity.Property(e => e.PPensionInsurance)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("P_PensionInsurance")
                    .HasComment("个人缴纳养老保险的比例");

                entity.Property(e => e.PTotalProportion)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("P_TotalProportion")
                    .HasComment("个人缴纳社保比例合计");

                entity.Property(e => e.PUnemploymentInsurance)
                    .HasColumnType("decimal(18, 3)")
                    .HasColumnName("P_UnemploymentInsurance")
                    .HasComment("个人缴纳失业保险的比例");

                entity.Property(e => e.Year).HasComment("年度");
            });

            modelBuilder.Entity<TccSpecialAwardHeader>(entity =>
            {
                entity.ToTable("TCC_SpecialAward_header");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AmountManagementSubc)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Amount_ManagementSubc")
                    .HasComment("");

                entity.Property(e => e.AwardAlreadyPay)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("已发放奖金总额");

                entity.Property(e => e.AwardBudget)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("年度预算奖金总额 ");

                entity.Property(e => e.AwardCategory)
                    .HasMaxLength(50)
                    .HasComment("奖金类别 编号  从TCC_BasicAward表中获得");

                entity.Property(e => e.AwardRemaining)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("剩余奖金   ");

                entity.Property(e => e.AwardsContentSummary)
                    .HasMaxLength(200)
                    .HasComment("奖项摘要");

                entity.Property(e => e.ForeignUnitAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("本次发放的外单位金额");

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(20)
                    .HasComment("表单编号");

                entity.Property(e => e.IncludeForeignUnitAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("其中外单位金额");

                entity.Property(e => e.ProcessFinishDate)
                    .HasColumnType("datetime")
                    .HasComment("流程结束时间");

                entity.Property(e => e.ProcessName).HasMaxLength(500);

                entity.Property(e => e.ProcessStatus)
                    .HasDefaultValueSql("((0))")
                    .HasComment("流程状态  0=未完成 1=已完成 2=已撤销");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date")
                    .HasComment("申请日期");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptCode")
                    .HasComment("申请人所在主管部门编号");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(200)
                    .HasColumnName("Request_DeptName")
                    .HasComment("申请人所在主管部门名称");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName")
                    .HasComment("申请人登录名");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName")
                    .HasComment("申请人姓名");

                entity.Property(e => e.UserIdentity)
                    .HasMaxLength(50)
                    .HasComment("身份证号");

                entity.Property(e => e.WageAlreadPay)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("工资已发放总额（分子公司奖）");

                entity.Property(e => e.WageBudget)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("工资预算总额（分子公司奖）");

                entity.Property(e => e.WageRemaining)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("工资剩余总额（分子公司奖）");
            });

            modelBuilder.Entity<TccSpecialAwardPersonLine>(entity =>
            {
                entity.ToTable("TCC_SpecialAward_PersonLines");

                entity.HasIndex(e => e.UserIdentity, "IX_AutoGen_20140724_6385");

                entity.HasIndex(e => new { e.AwardCategory, e.ProjectCode }, "IX_AutoGen_20140724_6914");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("奖金额");

                entity.Property(e => e.AwardCategory)
                    .HasMaxLength(50)
                    .HasComment("奖项编号");

                entity.Property(e => e.CanAssign)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("(N'N')")
                    .HasComment("此行奖金是否可以进行分配 （默认值为N）   Y=可以分配   N=不可以分配 ");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .HasComment("人员主管部门编号");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(200)
                    .HasComment("人员主管部门名称");

                entity.Property(e => e.IsFanPin)
                    .HasMaxLength(10)
                    .HasComment("是否返聘  Y=是 N=否");

                entity.Property(e => e.PersonLoginName)
                    .HasMaxLength(50)
                    .HasComment("人员登录名");

                entity.Property(e => e.PersonRealName)
                    .HasMaxLength(50)
                    .HasComment("人员真实姓名");

                entity.Property(e => e.ProcessName).HasMaxLength(500);

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(200)
                    .HasComment("项目编号（技术开发奖 使用些字段）");

                entity.Property(e => e.ProjectManagerIdentity)
                    .HasMaxLength(50)
                    .HasComment("项目经理身份证号");

                entity.Property(e => e.ProjectManagerLoginName)
                    .HasMaxLength(50)
                    .HasComment("项目经理登录名");

                entity.Property(e => e.ProjectManagerRealName)
                    .HasMaxLength(50)
                    .HasComment("项目经理真实姓名");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(500)
                    .HasComment("项目名称（技术开发奖 使用些字段）");

                entity.Property(e => e.ReceiverDate)
                    .HasColumnType("datetime")
                    .HasComment("接收时间");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName")
                    .HasComment("流程申请人");

                entity.Property(e => e.UserIdentity)
                    .HasMaxLength(50)
                    .HasComment("身份证号");

                entity.Property(e => e.WorkContent).HasComment("工作内容 （安全管理奖、基础工作奖 使用此字段）");
            });

            modelBuilder.Entity<TccSpecialFareRole>(entity =>
            {
                entity.ToTable("TCC_SpecialFare_Role");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyType).HasMaxLength(50);

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .HasColumnName("userName");
            });

            modelBuilder.Entity<TccSpecialSubsidyHeader>(entity =>
            {
                entity.ToTable("TCC_SpecialSubsidyHeader");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("申请补贴金额");

                entity.Property(e => e.ApplyCategory).HasComment("申请类型");

                entity.Property(e => e.ApplyCategoryName)
                    .HasMaxLength(50)
                    .HasComment("申请类型名称");

                entity.Property(e => e.AuitAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("批准补贴金额");

                entity.Property(e => e.DeptCountry)
                    .HasMaxLength(50)
                    .HasComment("部门所在地");

                entity.Property(e => e.ExsitAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("现有补贴标准");

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(50)
                    .HasComment("表单号");

                entity.Property(e => e.GeographicalPosition)
                    .HasMaxLength(500)
                    .HasComment("地理位置因素");

                entity.Property(e => e.Incident).HasComment("流程实例号");

                entity.Property(e => e.IsHighAltitude).HasComment("是否高海拔");

                entity.Property(e => e.IsHighAltitudeName)
                    .HasMaxLength(50)
                    .HasComment("是否高海拔");

                entity.Property(e => e.IsTropicalRegion).HasComment("是否热带地区");

                entity.Property(e => e.IsTropicalRegionName)
                    .HasMaxLength(50)
                    .HasComment("是否热带地区");

                entity.Property(e => e.MedicalAndHealthWork)
                    .HasMaxLength(500)
                    .HasComment("医疗卫生环境");

                entity.Property(e => e.PoliticalInstabilityRisk).HasComment("政局动荡风险");

                entity.Property(e => e.PoliticalInstabilityRiskName)
                    .HasMaxLength(50)
                    .HasComment("政局动荡风险");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名称");

                entity.Property(e => e.ProjectAdress)
                    .HasMaxLength(50)
                    .HasComment("项目所在地");

                entity.Property(e => e.ProjectBeginDate)
                    .HasColumnType("datetime")
                    .HasComment("项目开始时间");

                entity.Property(e => e.ProjectCategory)
                    .HasMaxLength(50)
                    .HasComment("项目类型");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .HasComment("项目编号");

                entity.Property(e => e.ProjectEndDate)
                    .HasColumnType("datetime")
                    .HasComment("项目结束时间");

                entity.Property(e => e.ProjectManager)
                    .HasMaxLength(50)
                    .HasComment("项目经理");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(500)
                    .HasComment("项目名称");

                entity.Property(e => e.ProjectStatus)
                    .HasMaxLength(50)
                    .HasComment("项目状态");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date")
                    .HasComment("流程申请时间");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptCode")
                    .HasComment("申请人的主管部门编号");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptName")
                    .HasComment("申请人的主管部门名称");

                entity.Property(e => e.RequestFinishDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_FinishDate")
                    .HasComment("流程结束时间");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName")
                    .HasComment("申请人登录名");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName")
                    .HasComment("申请人姓名");

                entity.Property(e => e.RequestTelPhone)
                    .HasMaxLength(200)
                    .HasColumnName("Request_TelPhone")
                    .HasComment("申请人联系方式");

                entity.Property(e => e.RequestUserIdentity)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserIdentity")
                    .HasComment("申请人身份证号");

                entity.Property(e => e.RequestUserPost)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserPost")
                    .HasComment("申请人岗位等级");

                entity.Property(e => e.TerrorismRisk).HasComment("恐怖主义风险");

                entity.Property(e => e.TerrorismRiskName)
                    .HasMaxLength(50)
                    .HasComment("恐怖主义风险");
            });

            modelBuilder.Entity<TccSpecialTaxDeduct>(entity =>
            {
                entity.ToTable("TCC_SpecialTaxDeduct");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CreatTime).HasColumnType("datetime");

                entity.Property(e => e.DeductChildEducation)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("Deduct_ChildEducation");

                entity.Property(e => e.DeductContinueEducation)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("Deduct_ContinueEducation");

                entity.Property(e => e.DeductEndDate).HasColumnType("date");

                entity.Property(e => e.DeductHouseLoan)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("Deduct_HouseLoan");

                entity.Property(e => e.DeductHouseRent)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("Deduct_HouseRent");

                entity.Property(e => e.DeductStartDate).HasColumnType("date");

                entity.Property(e => e.DeductSupportElderly)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("Deduct_SupportElderly");

                entity.Property(e => e.IdentityId).HasMaxLength(50);

                entity.Property(e => e.UserName).HasMaxLength(50);
            });

            modelBuilder.Entity<TccSpecialTaxDeduct20190130>(entity =>
            {
                entity.ToTable("TCC_SpecialTaxDeduct20190130");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CreatTime).HasColumnType("datetime");

                entity.Property(e => e.DeductChildEducation)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Deduct_ChildEducation");

                entity.Property(e => e.DeductContinueEducation)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Deduct_ContinueEducation");

                entity.Property(e => e.DeductEndDate).HasColumnType("date");

                entity.Property(e => e.DeductHouseLoan)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Deduct_HouseLoan");

                entity.Property(e => e.DeductHouseRent)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Deduct_HouseRent");

                entity.Property(e => e.DeductStartDate).HasColumnType("date");

                entity.Property(e => e.DeductSupportElderly)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Deduct_SupportElderly");

                entity.Property(e => e.IdentityId).HasMaxLength(50);

                entity.Property(e => e.UserName).HasMaxLength(50);
            });

            modelBuilder.Entity<TccSpecialTaxDeduct20190227>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_SpecialTaxDeduct20190227");

                entity.Property(e => e.CreatTime).HasColumnType("datetime");

                entity.Property(e => e.DeductChildEducation)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("Deduct_ChildEducation");

                entity.Property(e => e.DeductContinueEducation)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("Deduct_ContinueEducation");

                entity.Property(e => e.DeductEndDate).HasColumnType("date");

                entity.Property(e => e.DeductHouseLoan)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("Deduct_HouseLoan");

                entity.Property(e => e.DeductHouseRent)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("Deduct_HouseRent");

                entity.Property(e => e.DeductStartDate).HasColumnType("date");

                entity.Property(e => e.DeductSupportElderly)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("Deduct_SupportElderly");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdentityId).HasMaxLength(50);

                entity.Property(e => e.UserName).HasMaxLength(50);
            });

            modelBuilder.Entity<TccSpecialTaxDeduct20191210>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_SpecialTaxDeduct20191210");

                entity.Property(e => e.CreatTime).HasColumnType("datetime");

                entity.Property(e => e.DeductChildEducation)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("Deduct_ChildEducation");

                entity.Property(e => e.DeductContinueEducation)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("Deduct_ContinueEducation");

                entity.Property(e => e.DeductEndDate).HasColumnType("date");

                entity.Property(e => e.DeductHouseLoan)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("Deduct_HouseLoan");

                entity.Property(e => e.DeductHouseRent)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("Deduct_HouseRent");

                entity.Property(e => e.DeductStartDate).HasColumnType("date");

                entity.Property(e => e.DeductSupportElderly)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("Deduct_SupportElderly");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdentityId).HasMaxLength(50);

                entity.Property(e => e.UserName).HasMaxLength(50);
            });

            modelBuilder.Entity<TccStandardforHouseSubsidy>(entity =>
            {
                entity.ToTable("TCC_StandardforHouseSubsidy");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AlterDate)
                    .HasColumnType("datetime")
                    .HasComment("修改时间");

                entity.Property(e => e.EducationLevel).HasMaxLength(50);

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(50)
                    .HasComment("发放地");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(50)
                    .HasComment("发放地名称");

                entity.Property(e => e.Standard)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("补贴标准");
            });

            modelBuilder.Entity<TccStandardforTelephoneSubsidy>(entity =>
            {
                entity.ToTable("TCC_StandardforTelephoneSubsidy");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Flag).HasComment("标识为2取人员 其他取岗位");

                entity.Property(e => e.PersonOrPost)
                    .HasMaxLength(50)
                    .HasComment("人员或岗位名称");

                entity.Property(e => e.Standard)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("标准");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .HasComment("类型");

                entity.Property(e => e.UserIdentity).HasMaxLength(50);
            });

            modelBuilder.Entity<TccStandardforTransportSubsidy>(entity =>
            {
                entity.ToTable("TCC_StandardforTransportSubsidy");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Flag).HasComment("标识为2取人员 其他取岗位");

                entity.Property(e => e.PersonOrPost)
                    .HasMaxLength(500)
                    .HasComment("人员或岗位名称");

                entity.Property(e => e.Standard)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("标准");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .HasComment("类型");

                entity.Property(e => e.UserIdentity).HasMaxLength(50);
            });

            modelBuilder.Entity<TccSuggestSurveyValue>(entity =>
            {
                entity.ToTable("TCC_Suggest_SurveyValue");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");

                entity.Property(e => e.SId)
                    .HasMaxLength(50)
                    .HasColumnName("sID");

                entity.Property(e => e.SugestValue).HasMaxLength(50);

                entity.Property(e => e.SurveyDept)
                    .HasMaxLength(50)
                    .HasColumnName("Survey_Dept");

                entity.Property(e => e.SurveyId).HasColumnName("SurveyID");

                entity.Property(e => e.SurveyPossition)
                    .HasMaxLength(50)
                    .HasColumnName("Survey_Possition");

                entity.Property(e => e.SurveyTitle)
                    .HasMaxLength(500)
                    .HasColumnName("Survey_Title");

                entity.Property(e => e.SurveyUserType)
                    .HasMaxLength(50)
                    .HasColumnName("Survey_UserType");
            });

            modelBuilder.Entity<TccSurvey>(entity =>
            {
                entity.ToTable("TCC_Survey");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DeptName).HasMaxLength(200);

                entity.Property(e => e.DeptNo).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(50);

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");

                entity.Property(e => e.RequestQuarter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Request_Quarter");

                entity.Property(e => e.RequestYear).HasColumnName("Request_Year");

                entity.Property(e => e.UserKey).HasMaxLength(50);

                entity.Property(e => e.UserName).HasMaxLength(50);
            });

            modelBuilder.Entity<TccSurveyRisk>(entity =>
            {
                entity.ToTable("TCC_Survey_Risk");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DeptName).HasMaxLength(200);

                entity.Property(e => e.DeptNo).HasMaxLength(50);

                entity.Property(e => e.Efficiency).HasMaxLength(50);

                entity.Property(e => e.Emergency).HasMaxLength(50);

                entity.Property(e => e.EventDesc).HasMaxLength(50);

                entity.Property(e => e.Possibility).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(50);

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");

                entity.Property(e => e.RequestQuarter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Request_Quarter");

                entity.Property(e => e.RequestYear).HasColumnName("Request_Year");

                entity.Property(e => e.SurveyCode).HasMaxLength(50);

                entity.Property(e => e.UserKey).HasMaxLength(50);

                entity.Property(e => e.UserName).HasMaxLength(100);
            });

            modelBuilder.Entity<TccSyncProjectTaxAmtPeptj>(entity =>
            {
                entity.ToTable("TCC_Sync_ProjectTaxAmt_Peptj");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TaxAmount).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<TccSystemQueryBusinessAndQuery>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_SystemQuery_BusinessAndQuery");

                entity.Property(e => e.AccessLink).HasMaxLength(200);

                entity.Property(e => e.AccessPath).HasMaxLength(100);

                entity.Property(e => e.BelongSystem).HasMaxLength(50);

                entity.Property(e => e.BusinessKind).HasMaxLength(50);

                entity.Property(e => e.BusinessName).HasMaxLength(50);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.UserAccount).HasMaxLength(50);

                entity.Property(e => e.UserIdcardNo)
                    .HasMaxLength(50)
                    .HasColumnName("UserIDCardNo");

                entity.Property(e => e.UserName).HasMaxLength(50);
            });

            modelBuilder.Entity<TccSystemQueryDeptInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_SystemQuery_DeptInfo");

                entity.Property(e => e.DeptId).HasMaxLength(50);

                entity.Property(e => e.DeptName).HasMaxLength(50);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.StepInfoFk).HasColumnName("StepInfo_FK");
            });

            modelBuilder.Entity<TccSystemQueryDict>(entity =>
            {
                entity.ToTable("TCC_SystemQuery_Dict");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DataName).HasMaxLength(50);

                entity.Property(e => e.DataType).HasMaxLength(50);

                entity.Property(e => e.DataValue).HasMaxLength(50);
            });

            modelBuilder.Entity<TccSystemQueryGwinfo>(entity =>
            {
                entity.ToTable("TCC_SystemQuery_GWInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.GwId)
                    .HasMaxLength(50)
                    .HasColumnName("GW_Id");

                entity.Property(e => e.GwKindName)
                    .HasMaxLength(50)
                    .HasColumnName("GW_KindName");

                entity.Property(e => e.GwName)
                    .HasMaxLength(50)
                    .HasColumnName("GW_Name");

                entity.Property(e => e.StepInfoFk).HasColumnName("StepInfo_FK");
            });

            modelBuilder.Entity<TccSystemQueryPerson>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_SystemQuery_Person");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.StepInfoFk).HasColumnName("StepInfo_FK");

                entity.Property(e => e.UserAccount).HasMaxLength(50);

                entity.Property(e => e.UserIdcardNo)
                    .HasMaxLength(50)
                    .HasColumnName("UserIDCardNo");

                entity.Property(e => e.UserName).HasMaxLength(50);
            });

            modelBuilder.Entity<TccSystemQueryProcessNameMap>(entity =>
            {
                entity.ToTable("TCC_SystemQuery_ProcessNameMap");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BusinessProcessName).HasMaxLength(100);

                entity.Property(e => e.UltimusProcessName).HasMaxLength(100);
            });

            modelBuilder.Entity<TccSystemQueryQualificationInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_SystemQuery_QualificationInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.QualificationDeptName)
                    .HasMaxLength(50)
                    .HasColumnName("Qualification_DeptName");

                entity.Property(e => e.QualificationId)
                    .HasMaxLength(50)
                    .HasColumnName("Qualification_Id");

                entity.Property(e => e.QualificationName)
                    .HasMaxLength(50)
                    .HasColumnName("Qualification_Name");

                entity.Property(e => e.StepInfoFk).HasColumnName("StepInfo_FK");
            });

            modelBuilder.Entity<TccSystemQueryRoleInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_SystemQuery_RoleInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.RoleDeptId)
                    .HasMaxLength(50)
                    .HasColumnName("Role_DeptId");

                entity.Property(e => e.RoleDeptName)
                    .HasMaxLength(50)
                    .HasColumnName("Role_DeptName");

                entity.Property(e => e.RoleId)
                    .HasMaxLength(50)
                    .HasColumnName("Role_Id");

                entity.Property(e => e.RoleName)
                    .HasMaxLength(50)
                    .HasColumnName("Role_Name");

                entity.Property(e => e.StepInfoFk).HasColumnName("StepInfo_FK");
            });

            modelBuilder.Entity<TccSystemQueryStepInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_SystemQuery_StepInfo");

                entity.Property(e => e.AccessLink).HasMaxLength(200);

                entity.Property(e => e.AccessPath).HasMaxLength(200);

                entity.Property(e => e.BelongSystem).HasMaxLength(50);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.QueryType).HasMaxLength(50);

                entity.Property(e => e.RuleFileId)
                    .HasMaxLength(50)
                    .HasColumnName("RuleFileID");

                entity.Property(e => e.StepName).HasMaxLength(50);

                entity.Property(e => e.StepNameShow)
                    .HasMaxLength(50)
                    .HasColumnName("StepName_show");

                entity.Property(e => e.UserBookFileId).HasColumnName("UserBookFileID");
            });

            modelBuilder.Entity<TccTasksUserChangeTemp>(entity =>
            {
                entity.ToTable("TCC_TasksUserChangeTemp");

                entity.HasIndex(e => new { e.Taskid, e.IsDelete }, "IX_AutoGen_20140724_60");

                entity.HasIndex(e => e.IsDelete, "IX_AutoGen_20140724_62");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Assignedtouser)
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnName("ASSIGNEDTOUSER")
                    .IsFixedLength(true);

                entity.Property(e => e.CreateLoginUserName).HasMaxLength(50);

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.CreateUserName).HasMaxLength(50);

                entity.Property(e => e.DeleteTime).HasColumnType("datetime");

                entity.Property(e => e.Incident).HasColumnName("INCIDENT");

                entity.Property(e => e.Processname)
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnName("PROCESSNAME")
                    .IsFixedLength(true);

                entity.Property(e => e.Steplabel)
                    .HasMaxLength(128)
                    .HasColumnName("STEPLABEL");

                entity.Property(e => e.Taskid)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("TASKID")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<TccTaxRateMapping>(entity =>
            {
                entity.ToTable("TCC_TaxRateMapping");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.QuickDeduction)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("速算扣除数");

                entity.Property(e => e.TaxPoint)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("征税点");

                entity.Property(e => e.TaxRate)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("税率");
            });

            modelBuilder.Entity<TccTaxRateMappingYearIncome>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_TaxRateMapping_YearIncome");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.QuickDeduction).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TaxPoint).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<TccTelephoneSubsidyBillsInfo>(entity =>
            {
                entity.ToTable("TCC_TelephoneSubsidyBillsInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("价税合计金额");

                entity.Property(e => e.BillAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("发票金额");

                entity.Property(e => e.BillCode)
                    .HasMaxLength(50)
                    .HasComment("发票编号");

                entity.Property(e => e.BillContent)
                    .HasMaxLength(50)
                    .HasComment("发票内容");

                entity.Property(e => e.BillTaxAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("发票税额");

                entity.Property(e => e.ByAttachment).HasMaxLength(50);

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .HasComment("部门编号");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .HasComment("部门名称");

                entity.Property(e => e.Inventory).HasComment("清单张数");

                entity.Property(e => e.InvoiceCategoryName).HasMaxLength(50);

                entity.Property(e => e.InvoiceCode)
                    .HasMaxLength(50)
                    .HasComment("发票代码");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("datetime")
                    .HasComment("开票时间");

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.RCreateTime)
                    .HasMaxLength(50)
                    .HasColumnName("R_CreateTime");

                entity.Property(e => e.RId)
                    .HasMaxLength(36)
                    .HasColumnName("R_ID");

                entity.Property(e => e.RName)
                    .HasMaxLength(50)
                    .HasColumnName("R_name");

                entity.Property(e => e.RTitle)
                    .HasMaxLength(50)
                    .HasColumnName("R_Title");

                entity.Property(e => e.Requestor)
                    .HasMaxLength(50)
                    .HasComment("提交人姓名");

                entity.Property(e => e.TaxRateCode)
                    .HasMaxLength(50)
                    .HasComment("税率编号");

                entity.Property(e => e.TaxRateText)
                    .HasMaxLength(50)
                    .HasComment("税率显示值");

                entity.Property(e => e.UserIdenity)
                    .HasMaxLength(50)
                    .HasComment("提交人身份证号");
            });

            modelBuilder.Entity<TccTelephoneSubsidyInfoDetail>(entity =>
            {
                entity.ToTable("TCC_TelephoneSubsidyInfoDetails");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("本次报销金额");

                entity.Property(e => e.ApplyPerson)
                    .HasMaxLength(50)
                    .HasComment("报销人姓名");

                entity.Property(e => e.ApplyUseridentity)
                    .HasMaxLength(50)
                    .HasComment("报销人身份证号");

                entity.Property(e => e.DeptCode).HasMaxLength(50);

                entity.Property(e => e.DeptName).HasMaxLength(50);

                entity.Property(e => e.HasHappenedSubsidy)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("已报销金额");

                entity.Property(e => e.Incident).HasComment("流程实例号");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名称");

                entity.Property(e => e.RemainSubsidy)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("剩余金额");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName")
                    .HasComment("申请人登录名");

                entity.Property(e => e.Standard)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("报销标准");

                entity.Property(e => e.YearStandard)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("年度标准合计");
            });

            modelBuilder.Entity<TccTelephoneSubsidyInfoHeader>(entity =>
            {
                entity.ToTable("TCC_TelephoneSubsidyInfoHeader");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Agency).HasComment("是否代办  1不代办  2代办");

                entity.Property(e => e.AttachmentNum).HasComment("附件张数");

                entity.Property(e => e.BankAccount)
                    .HasMaxLength(50)
                    .HasComment("银行账号");

                entity.Property(e => e.BillConfirmUserLogin)
                    .HasMaxLength(50)
                    .HasComment("票据归档确认-接单会计帐号");

                entity.Property(e => e.BillConfirmUserName)
                    .HasMaxLength(50)
                    .HasComment("票据归档确认-接单会计姓名");

                entity.Property(e => e.BudgetMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("预算金额");

                entity.Property(e => e.BusinessObject).HasComment("业务对象");

                entity.Property(e => e.BussinessCard)
                    .HasMaxLength(50)
                    .HasComment("公务卡号");

                entity.Property(e => e.ClaimCategory)
                    .HasMaxLength(50)
                    .HasComment("报销类型");

                entity.Property(e => e.ClaimsDepartmentCode)
                    .HasMaxLength(50)
                    .HasComment("费用承担部门编号");

                entity.Property(e => e.ClaimsDepartmentName)
                    .HasMaxLength(50)
                    .HasComment("费用承担部门名称");

                entity.Property(e => e.ConfirmAuditDate)
                    .HasColumnType("datetime")
                    .HasComment("财务业务审核时间");

                entity.Property(e => e.ConfirmAuditLoginName)
                    .HasMaxLength(50)
                    .HasComment("财务业务审核人登录名");

                entity.Property(e => e.ConfirmAuditName)
                    .HasMaxLength(50)
                    .HasComment("财务业务审核人姓名");

                entity.Property(e => e.ConfirmAuditUserIdentity)
                    .HasMaxLength(50)
                    .HasComment("财务业务审核人身份证号");

                entity.Property(e => e.ConfirmDate)
                    .HasColumnType("datetime")
                    .HasComment("付款时间");

                entity.Property(e => e.ConfirmFinaceLoginName)
                    .HasMaxLength(50)
                    .HasComment("财务接单人登录名");

                entity.Property(e => e.ConfirmFinaceName)
                    .HasMaxLength(50)
                    .HasComment("财务接单人姓名");

                entity.Property(e => e.ConfirmFinaceUserIdentity)
                    .HasMaxLength(50)
                    .HasComment("财务接单人身份证号");

                entity.Property(e => e.ConfirmStatus).HasComment("是否已付款  0未付款  1已付款");

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(50)
                    .HasComment("表单号");

                entity.Property(e => e.Incident).HasComment("流程实例号");

                entity.Property(e => e.Location).HasComment("报销地点：1:天津 2：北京");

                entity.Property(e => e.MoneyActual)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("实报金额");

                entity.Property(e => e.MoneyShallBig)
                    .HasMaxLength(200)
                    .HasColumnName("MoneyShall_big")
                    .HasComment("报销金额大写");

                entity.Property(e => e.MoneyShallSmall)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MoneyShall_small")
                    .HasComment("报销金额");

                entity.Property(e => e.Payee).HasComment("收款人  1=经办人  2=报销人");

                entity.Property(e => e.PaymentMethod).HasComment("付款方式编号");

                entity.Property(e => e.PaymentType)
                    .HasMaxLength(50)
                    .HasComment("付款方式名称");

                entity.Property(e => e.PayorBank)
                    .HasMaxLength(200)
                    .HasComment("付款银行");

                entity.Property(e => e.PayorBankCode)
                    .HasMaxLength(50)
                    .HasComment("付款银行编号");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名称");

                entity.Property(e => e.ProcessStatus).HasComment("流程状态：0进行中 1已完成 2已撤销");

                entity.Property(e => e.Reason).HasMaxLength(500);

                entity.Property(e => e.ReimburseMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("报销后剩余金额");

                entity.Property(e => e.RemainBudget)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("剩余预算金额");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date")
                    .HasComment("流程申请时间");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptCode")
                    .HasComment("申请人的主管部门编号");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptName")
                    .HasComment("申请人的主管部门名称");

                entity.Property(e => e.RequestFinishDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_FinishDate")
                    .HasComment("流程结束时间");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName")
                    .HasComment("申请人登录名");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName")
                    .HasComment("申请人姓名");

                entity.Property(e => e.RequestTelPhone)
                    .HasMaxLength(200)
                    .HasColumnName("Request_TelPhone")
                    .HasComment("申请人联系方式");

                entity.Property(e => e.RequestUserIdentity)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserIdentity")
                    .HasComment("申请人身份证号");

                entity.Property(e => e.RequestUserPost)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserPost")
                    .HasComment("申请人岗位等级");

                entity.Property(e => e.ShowPayee).HasComment("是否显示收款人  0=不显示并清空选中值  1=报销人与经办人是同一人 不需要显示但设值为经办人  2=需要显示 供经办人选择");

                entity.Property(e => e.Tractor)
                    .HasMaxLength(50)
                    .HasComment("领款人");

                entity.Property(e => e.VisaDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_DeptCode")
                    .HasComment("经办人主管部门编号");

                entity.Property(e => e.VisaDeptName)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_DeptName")
                    .HasComment("经办人主管部门名称");

                entity.Property(e => e.VisaLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_LoginName")
                    .HasComment("经办人登录账号");

                entity.Property(e => e.VisaRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_RealName")
                    .HasComment("经办人姓名");

                entity.Property(e => e.VisaUserIdentity)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_UserIdentity")
                    .HasComment("经办人身份证号");

                entity.Property(e => e.VisaUserPost)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_UserPost")
                    .HasComment("经办人岗位等级");

                entity.Property(e => e.Voucherid)
                    .HasColumnName("VOUCHERID")
                    .HasComment("对应凭证ID号");
            });

            modelBuilder.Entity<TccTelephoneSubsidyOperateLog>(entity =>
            {
                entity.ToTable("TCC_TelephoneSubsidyOperateLogs");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Category)
                    .HasMaxLength(50)
                    .HasComment("操作类型");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasComment("创建修改日期");

                entity.Property(e => e.Message).HasMaxLength(3000);
            });

            modelBuilder.Entity<TccTempDatum>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_TempData");

                entity.Property(e => e.AuditSaving).HasColumnName("audit_saving");

                entity.Property(e => e.ProId)
                    .HasMaxLength(50)
                    .HasColumnName("pro_id");
            });

            modelBuilder.Entity<TccTempInterfaceDatum>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_TempInterfaceData");

                entity.Property(e => e.Idnumber)
                    .HasMaxLength(30)
                    .HasColumnName("IDNumber");

                entity.Property(e => e.PProjId)
                    .HasMaxLength(20)
                    .HasColumnName("p_proj_id");

                entity.Property(e => e.PProjName)
                    .HasMaxLength(500)
                    .HasColumnName("p_proj_name");

                entity.Property(e => e.ProjId)
                    .HasMaxLength(20)
                    .HasColumnName("proj_id");

                entity.Property(e => e.ProjName)
                    .HasMaxLength(500)
                    .HasColumnName("proj_name");
            });

            modelBuilder.Entity<TccTestForTheForthAward>(entity =>
            {
                entity.ToTable("TCC_TestForTheForthAward");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ArchiveDate).HasColumnType("datetime");

                entity.Property(e => e.AwardComposedCode).HasMaxLength(50);

                entity.Property(e => e.AwardMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.UserIdentityId).HasMaxLength(50);
            });

            modelBuilder.Entity<TccTheForthAwardHistroy>(entity =>
            {
                entity.ToTable("TCC_TheForthAwardHistroy");

                entity.HasComment("用于工资发放流程");

                entity.HasIndex(e => e.CreateTime, "idx_createTime");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.AwardMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("奖金额度");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("发放时间");

                entity.Property(e => e.Dept)
                    .HasMaxLength(200)
                    .HasComment("主管部门");

                entity.Property(e => e.DeptCode).HasMaxLength(100);

                entity.Property(e => e.Editor).HasMaxLength(100);

                entity.Property(e => e.IdentityId)
                    .HasMaxLength(200)
                    .HasComment("身份证号");

                entity.Property(e => e.IncidentNo)
                    .HasDefaultValueSql("((0))")
                    .HasComment("实例号");

                entity.Property(e => e.IncomTaxPable)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("应纳税所得额");

                entity.Property(e => e.JieZhuanShengYuE)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("结转剩余的额度");

                entity.Property(e => e.LeftMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("放到第二年第一季度发的钱，包括结转的钱");

                entity.Property(e => e.NewSalaryVest).HasMaxLength(50);

                entity.Property(e => e.PersonStatus)
                    .HasDefaultValueSql("((0))")
                    .HasComment("0:正常，1：离退，2：离职");

                entity.Property(e => e.PersonalTax)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("代扣个人税");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(200)
                    .HasComment("流程名");

                entity.Property(e => e.ShiFaJiangJin).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ShiYongShuiLv).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Status)
                    .HasDefaultValueSql("((0))")
                    .HasComment("状态");

                entity.Property(e => e.UserName)
                    .HasMaxLength(200)
                    .HasComment("姓名");

                entity.Property(e => e.XinZiGuiShu).HasMaxLength(100);

                entity.Property(e => e.Year).HasComment("年度");
            });

            modelBuilder.Entity<TccTheForthAwardRecordPackage>(entity =>
            {
                entity.ToTable("TCC_TheForthAwardRecordPackage");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Money).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.NewSalaryVest).HasMaxLength(50);

                entity.Property(e => e.UserIdentityId).HasMaxLength(50);
            });

            modelBuilder.Entity<TccTheForthAwardSection>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_TheForthAwardSection");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.MaxSectionValue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.MinrSectionValue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Minuend).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SectionDesc).HasMaxLength(50);
            });

            modelBuilder.Entity<TccTheForthAwardSection2>(entity =>
            {
                entity.ToTable("TCC_TheForthAwardSection2");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.EffectType).HasComment("效果类型，1，无效，2，低效");

                entity.Property(e => e.MaxSectionValue)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("区间最大值");

                entity.Property(e => e.MinrSectionValue)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("区间最小值");

                entity.Property(e => e.Minuend).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SectionDesc)
                    .HasMaxLength(50)
                    .HasComment("区间描述");
            });

            modelBuilder.Entity<TccTransportMonthlyReimbursementCriterion>(entity =>
            {
                entity.ToTable("TCC_TransportMonthlyReimbursementCriteria");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BlowAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("上个月的扣款金额");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .HasComment("主管部门编号");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .HasComment("主管部门名称");

                entity.Property(e => e.Month)
                    .HasMaxLength(50)
                    .HasComment("月");

                entity.Property(e => e.RealName)
                    .HasMaxLength(50)
                    .HasComment("姓名");

                entity.Property(e => e.Standard).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.UserIdentify)
                    .HasMaxLength(50)
                    .HasComment("身份证号");

                entity.Property(e => e.Year)
                    .HasMaxLength(50)
                    .HasComment("年");
            });

            modelBuilder.Entity<TccTransportSubsidyBillsInfo>(entity =>
            {
                entity.ToTable("TCC_TransportSubsidyBillsInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("价税合计金额");

                entity.Property(e => e.BillAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("发票金额");

                entity.Property(e => e.BillCode)
                    .HasMaxLength(50)
                    .HasComment("发票编号");

                entity.Property(e => e.BillContent)
                    .HasMaxLength(50)
                    .HasComment("发票内容");

                entity.Property(e => e.BillTaxAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("发票税额");

                entity.Property(e => e.ByAttachment).HasMaxLength(50);

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .HasComment("部门编号");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .HasComment("部门名称");

                entity.Property(e => e.Inventory).HasComment("清单张数");

                entity.Property(e => e.InvoiceCategoryName).HasMaxLength(50);

                entity.Property(e => e.InvoiceCode)
                    .HasMaxLength(50)
                    .HasComment("发票代码");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("datetime")
                    .HasComment("开票时间");

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.RCreateTime)
                    .HasMaxLength(50)
                    .HasColumnName("R_CreateTime");

                entity.Property(e => e.RId)
                    .HasMaxLength(36)
                    .HasColumnName("R_ID");

                entity.Property(e => e.RName)
                    .HasMaxLength(50)
                    .HasColumnName("R_name");

                entity.Property(e => e.RTitle)
                    .HasMaxLength(50)
                    .HasColumnName("R_Title");

                entity.Property(e => e.Requestor)
                    .HasMaxLength(50)
                    .HasComment("提交人姓名");

                entity.Property(e => e.TaxRateCode)
                    .HasMaxLength(50)
                    .HasComment("税率编号");

                entity.Property(e => e.TaxRateText)
                    .HasMaxLength(50)
                    .HasComment("税率显示值");

                entity.Property(e => e.UserIdenity)
                    .HasMaxLength(50)
                    .HasComment("提交人身份证号");
            });

            modelBuilder.Entity<TccTransportSubsidyInfoDetail>(entity =>
            {
                entity.ToTable("TCC_TransportSubsidyInfoDetails");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("本次报销金额");

                entity.Property(e => e.ApplyPerson)
                    .HasMaxLength(50)
                    .HasComment("报销人姓名");

                entity.Property(e => e.ApplyUseridentity)
                    .HasMaxLength(50)
                    .HasComment("报销人身份证号");

                entity.Property(e => e.BlowAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("扣除金额");

                entity.Property(e => e.DeptCode).HasMaxLength(50);

                entity.Property(e => e.DeptName).HasMaxLength(50);

                entity.Property(e => e.HasHappenedSubsidy)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("已报销金额");

                entity.Property(e => e.Incident).HasComment("流程实例号");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名称");

                entity.Property(e => e.RemainSubsidy)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("剩余金额");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName")
                    .HasComment("申请人登录名");

                entity.Property(e => e.Standard)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("报销标准");

                entity.Property(e => e.YearStandard)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("年度标准合计");
            });

            modelBuilder.Entity<TccTransportSubsidyInfoHeader>(entity =>
            {
                entity.ToTable("TCC_TransportSubsidyInfoHeader");

                entity.HasIndex(e => e.FormNumber, "IX_TCC_TransportSubsidyInfoHeader_ForNumber")
                    .IsUnique();

                entity.HasIndex(e => new { e.ProcessName, e.Incident }, "IX_TCC_TransportSubsidyInfoHeader_Search");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Agency).HasComment("是否代办  1不代办  2代办");

                entity.Property(e => e.AttachmentNum).HasComment("附件张数");

                entity.Property(e => e.BankAccount)
                    .HasMaxLength(50)
                    .HasComment("银行账号");

                entity.Property(e => e.BillConfirmUserLogin)
                    .HasMaxLength(50)
                    .HasComment("票据归档确认-接单会计帐号");

                entity.Property(e => e.BillConfirmUserName)
                    .HasMaxLength(50)
                    .HasComment("票据归档确认-接单会计姓名");

                entity.Property(e => e.BudgetMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("预算金额");

                entity.Property(e => e.BusinessObject).HasComment("业务对象");

                entity.Property(e => e.BussinessCard)
                    .HasMaxLength(50)
                    .HasComment("公务卡号");

                entity.Property(e => e.ClaimCategory)
                    .HasMaxLength(50)
                    .HasComment("报销类型");

                entity.Property(e => e.ClaimsDepartmentCode)
                    .HasMaxLength(50)
                    .HasComment("费用承担部门编号");

                entity.Property(e => e.ClaimsDepartmentName)
                    .HasMaxLength(50)
                    .HasComment("费用承担部门名称");

                entity.Property(e => e.ConfirmAuditDate)
                    .HasColumnType("datetime")
                    .HasComment("财务业务审核时间");

                entity.Property(e => e.ConfirmAuditLoginName)
                    .HasMaxLength(50)
                    .HasComment("财务业务审核人登录名");

                entity.Property(e => e.ConfirmAuditName)
                    .HasMaxLength(50)
                    .HasComment("财务业务审核人姓名");

                entity.Property(e => e.ConfirmAuditUserIdentity)
                    .HasMaxLength(50)
                    .HasComment("财务业务审核人身份证号");

                entity.Property(e => e.ConfirmDate)
                    .HasColumnType("datetime")
                    .HasComment("付款时间");

                entity.Property(e => e.ConfirmFinaceLoginName)
                    .HasMaxLength(50)
                    .HasComment("财务接单人登录名");

                entity.Property(e => e.ConfirmFinaceName)
                    .HasMaxLength(50)
                    .HasComment("财务接单人姓名");

                entity.Property(e => e.ConfirmFinaceUserIdentity)
                    .HasMaxLength(50)
                    .HasComment("财务接单人身份证号");

                entity.Property(e => e.ConfirmStatus).HasComment("是否已付款  0未付款  1已付款");

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(50)
                    .HasComment("表单号");

                entity.Property(e => e.Incident).HasComment("流程实例号");

                entity.Property(e => e.Location).HasComment("报销地点：1:天津 2：北京");

                entity.Property(e => e.MoneyActual)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("实报金额");

                entity.Property(e => e.MoneyShallBig)
                    .HasMaxLength(200)
                    .HasColumnName("MoneyShall_big")
                    .HasComment("报销金额大写");

                entity.Property(e => e.MoneyShallSmall)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MoneyShall_small")
                    .HasComment("报销金额");

                entity.Property(e => e.Payee).HasComment("收款人  1=经办人  2=报销人");

                entity.Property(e => e.PaymentMethod).HasComment("付款方式编号");

                entity.Property(e => e.PaymentType)
                    .HasMaxLength(50)
                    .HasComment("付款方式名称");

                entity.Property(e => e.PayorBank)
                    .HasMaxLength(200)
                    .HasComment("付款银行");

                entity.Property(e => e.PayorBankCode)
                    .HasMaxLength(50)
                    .HasComment("付款银行编号");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名称");

                entity.Property(e => e.ProcessStatus).HasComment("流程状态：0进行中 1已完成 2已撤销");

                entity.Property(e => e.Reason).HasMaxLength(500);

                entity.Property(e => e.ReimburseMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("报销后剩余金额");

                entity.Property(e => e.RemainBudget)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("剩余预算金额");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date")
                    .HasComment("流程申请时间");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptCode")
                    .HasComment("申请人的主管部门编号");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptName")
                    .HasComment("申请人的主管部门名称");

                entity.Property(e => e.RequestFinishDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_FinishDate")
                    .HasComment("流程结束时间");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName")
                    .HasComment("申请人登录名");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName")
                    .HasComment("申请人姓名");

                entity.Property(e => e.RequestTelPhone)
                    .HasMaxLength(200)
                    .HasColumnName("Request_TelPhone")
                    .HasComment("申请人联系方式");

                entity.Property(e => e.RequestUserIdentity)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserIdentity")
                    .HasComment("申请人身份证号");

                entity.Property(e => e.RequestUserPost)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserPost")
                    .HasComment("申请人岗位等级");

                entity.Property(e => e.ShowPayee).HasComment("是否显示收款人  0=不显示并清空选中值  1=报销人与经办人是同一人 不需要显示但设值为经办人  2=需要显示 供经办人选择");

                entity.Property(e => e.Tractor)
                    .HasMaxLength(50)
                    .HasComment("领款人");

                entity.Property(e => e.VisaDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_DeptCode")
                    .HasComment("经办人主管部门编号");

                entity.Property(e => e.VisaDeptName)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_DeptName")
                    .HasComment("经办人主管部门名称");

                entity.Property(e => e.VisaLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_LoginName")
                    .HasComment("经办人登录账号");

                entity.Property(e => e.VisaRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_RealName")
                    .HasComment("经办人姓名");

                entity.Property(e => e.VisaUserIdentity)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_UserIdentity")
                    .HasComment("经办人身份证号");

                entity.Property(e => e.VisaUserPost)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_UserPost")
                    .HasComment("经办人岗位等级");

                entity.Property(e => e.Voucherid)
                    .HasColumnName("VOUCHERID")
                    .HasComment("对应凭证ID号");
            });

            modelBuilder.Entity<TccTransportSubsidyOperateLog>(entity =>
            {
                entity.ToTable("TCC_TransportSubsidyOperateLogs");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Category)
                    .HasMaxLength(50)
                    .HasComment("操作类型");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasComment("创建修改日期");

                entity.Property(e => e.Message).HasMaxLength(3000);
            });

            modelBuilder.Entity<TccTransportSubsidyWithholdingInfo>(entity =>
            {
                entity.ToTable("TCC_TransportSubsidy_WithholdingInfo");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键ID");

                entity.Property(e => e.ApplyName)
                    .HasMaxLength(50)
                    .HasComment("姓名");

                entity.Property(e => e.ApplyUserKey)
                    .HasMaxLength(50)
                    .HasComment("身份证号");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasComment("创建时间");

                entity.Property(e => e.KkAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("KK_Amount")
                    .HasComment("扣款金额");

                entity.Property(e => e.YkAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("YK_Amount")
                    .HasComment("已扣金额");
            });

            modelBuilder.Entity<TccTransportSubsidyWithholdingList>(entity =>
            {
                entity.ToTable("TCC_TransportSubsidy_WithholdingList");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键ID");

                entity.Property(e => e.ActualBeginDate)
                    .HasMaxLength(50)
                    .HasComment("请假开始时间");

                entity.Property(e => e.ActualEndDate)
                    .HasMaxLength(50)
                    .HasComment("请假结束时间");

                entity.Property(e => e.ApplyDept)
                    .HasMaxLength(50)
                    .HasComment("部门");

                entity.Property(e => e.ApplyName)
                    .HasMaxLength(50)
                    .HasComment("姓名");

                entity.Property(e => e.ApplyUserKey)
                    .HasMaxLength(50)
                    .HasComment("身份证号");

                entity.Property(e => e.ConsecutiveDaysOff).HasComment("连续请假工作日天数");

                entity.Property(e => e.KkAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("KK_Amount")
                    .HasComment("扣款金额");

                entity.Property(e => e.Month).HasComment("月");

                entity.Property(e => e.Year)
                    .HasColumnName("year")
                    .HasComment("年");
            });

            modelBuilder.Entity<TccTripStandard>(entity =>
            {
                entity.ToTable("TCC_TripStandard");

                entity.HasComment("关于津贴和交通工具");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.AirPlane)
                    .HasMaxLength(200)
                    .HasComment("飞机");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasComment("创建时间");

                entity.Property(e => e.CreateUserLoginName)
                    .HasMaxLength(200)
                    .HasComment("创建人LoginName");

                entity.Property(e => e.CreateUserRealName)
                    .HasMaxLength(200)
                    .HasComment("创建人RealName");

                entity.Property(e => e.DomesticOversea).HasComment("境内或境外  1=境内  2=境外");

                entity.Property(e => e.PostCategory)
                    .HasMaxLength(10)
                    .HasComment("岗位等级");

                entity.Property(e => e.Regions)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("地区住宿费限额");

                entity.Property(e => e.SteamShip)
                    .HasMaxLength(200)
                    .HasComment("轮船");

                entity.Property(e => e.Train)
                    .HasMaxLength(200)
                    .HasComment("火车");

                entity.Property(e => e.UpdateDate)
                    .HasColumnType("datetime")
                    .HasComment("修改时间");

                entity.Property(e => e.UpdateUserLoginName)
                    .HasMaxLength(200)
                    .HasComment("修改人LoginName");

                entity.Property(e => e.UpdateUserRealName)
                    .HasMaxLength(200)
                    .HasComment("修改人RealName");
            });

            modelBuilder.Entity<TccTsDictDeptOfDevCenter>(entity =>
            {
                entity.ToTable("TCC_TS_Dict_DeptOfDevCenter");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DeptId)
                    .HasMaxLength(50)
                    .HasColumnName("DeptID");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .HasColumnName("DeptNAME");
            });

            modelBuilder.Entity<TccTsDictPlanDetail>(entity =>
            {
                entity.ToTable("TCC_TS_Dict_PlanDetail");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DeptId).HasColumnName("DeptID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.Needed).HasMaxLength(50);

                entity.Property(e => e.OrderId).HasColumnName("OrderID");

                entity.Property(e => e.PlanLevel).HasMaxLength(50);

                entity.Property(e => e.PlanYear).HasMaxLength(50);

                entity.Property(e => e.TypeName).HasMaxLength(50);

                entity.Property(e => e.Value).HasMaxLength(50);
            });

            modelBuilder.Entity<TccTsDictPlanDetail0321>(entity =>
            {
                entity.ToTable("TCC_TS_Dict_PlanDetail0321");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DeptId).HasColumnName("DeptID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.Needed).HasMaxLength(50);

                entity.Property(e => e.OrderId).HasColumnName("OrderID");

                entity.Property(e => e.PlanLevel).HasMaxLength(50);

                entity.Property(e => e.PlanYear).HasMaxLength(50);

                entity.Property(e => e.TypeName).HasMaxLength(50);

                entity.Property(e => e.Value).HasMaxLength(50);
            });

            modelBuilder.Entity<TccTsDictPlanItemCount>(entity =>
            {
                entity.ToTable("TCC_TS_Dict_PlanItemCount");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DeptName).HasMaxLength(50);

                entity.Property(e => e.DeptNo).HasMaxLength(50);

                entity.Property(e => e.PlanItemCount).HasMaxLength(50);

                entity.Property(e => e.TrainYear)
                    .HasMaxLength(50)
                    .HasColumnName("Train_Year");
            });

            modelBuilder.Entity<TccTsDictShouldDoneHour>(entity =>
            {
                entity.ToTable("TCC_TS_Dict_ShouldDoneHours");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.GroupName).HasMaxLength(50);
            });

            modelBuilder.Entity<TccTsPartyTrainResult>(entity =>
            {
                entity.ToTable("TCC_TS_PartyTrainResult");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CreatDate).HasColumnType("datetime");

                entity.Property(e => e.DeptName).HasMaxLength(50);

                entity.Property(e => e.PartyGroupName).HasMaxLength(50);

                entity.Property(e => e.PersonName).HasMaxLength(50);

                entity.Property(e => e.Teacher).HasMaxLength(50);

                entity.Property(e => e.TeacherHours).HasMaxLength(50);

                entity.Property(e => e.TrainContent).HasMaxLength(200);

                entity.Property(e => e.TrainEndTime).HasMaxLength(50);

                entity.Property(e => e.TrainHours).HasMaxLength(50);

                entity.Property(e => e.TrainStartTime).HasMaxLength(50);

                entity.Property(e => e.TrainStyle).HasMaxLength(50);
            });

            modelBuilder.Entity<TccTsTrainBookInfo>(entity =>
            {
                entity.ToTable("TCC_TS_TrainBookInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BookCost).HasMaxLength(50);

                entity.Property(e => e.TrainTeacherDetailFk).HasColumnName("TrainTeacherDetail_FK");

                entity.Property(e => e.TrainTeacherDetailFkSjs)
                    .HasMaxLength(50)
                    .HasColumnName("TrainTeacherDetail_FK_sjs");
            });

            modelBuilder.Entity<TccTsTrainChangeApply>(entity =>
            {
                entity.ToTable("TCC_TS_TrainChangeApply");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyDate).HasColumnType("datetime");

                entity.Property(e => e.ApplyDept).HasMaxLength(50);

                entity.Property(e => e.ApplyDeptNo).HasMaxLength(50);

                entity.Property(e => e.ApplyLoginUser).HasMaxLength(50);

                entity.Property(e => e.ApplyName).HasMaxLength(50);

                entity.Property(e => e.ApplyPhone).HasMaxLength(50);

                entity.Property(e => e.ApplyType).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);
            });

            modelBuilder.Entity<TccTsTrainChangeApplyDetail>(entity =>
            {
                entity.ToTable("TCC_TS_TrainChangeApply_Detail");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyDate).HasColumnType("datetime");

                entity.Property(e => e.ApplyLoginUser).HasMaxLength(50);

                entity.Property(e => e.FormNumberFk)
                    .HasMaxLength(50)
                    .HasColumnName("FormNumber_FK");

                entity.Property(e => e.TrainContent).HasColumnName("Train_Content");

                entity.Property(e => e.TrainCost).HasColumnName("Train_Cost");

                entity.Property(e => e.TrainDate)
                    .HasMaxLength(50)
                    .HasColumnName("Train_Date");

                entity.Property(e => e.TrainDetailId).HasColumnName("TrainDetail_ID");

                entity.Property(e => e.TrainExamKind)
                    .HasMaxLength(50)
                    .HasColumnName("Train_ExamKind");

                entity.Property(e => e.TrainHlepDept).HasColumnName("Train_HlepDept");

                entity.Property(e => e.TrainHlepDeptNo).HasColumnName("Train_HlepDeptNo");

                entity.Property(e => e.TrainHours).HasColumnName("Train_Hours");

                entity.Property(e => e.TrainObject).HasColumnName("Train_Object");

                entity.Property(e => e.TrainOption)
                    .HasMaxLength(50)
                    .HasColumnName("Train_Option");

                entity.Property(e => e.TrainPlanDeptFk).HasColumnName("TrainPlan_dept_FK");

                entity.Property(e => e.TrainPlanLevel)
                    .HasMaxLength(50)
                    .HasColumnName("TrainPlan_level");

                entity.Property(e => e.TrainRemark).HasColumnName("Train_Remark");

                entity.Property(e => e.TrainRspDept)
                    .HasMaxLength(50)
                    .HasColumnName("Train_RspDept");

                entity.Property(e => e.TrainRspDeptNo)
                    .HasMaxLength(50)
                    .HasColumnName("Train_RspDeptNo");

                entity.Property(e => e.TrainRspPerson)
                    .HasMaxLength(50)
                    .HasColumnName("Train_RspPerson");

                entity.Property(e => e.TrainRspPersonId)
                    .HasMaxLength(50)
                    .HasColumnName("Train_RspPersonID");

                entity.Property(e => e.TrainStatus).HasMaxLength(50);

                entity.Property(e => e.TrainStudsNum).HasColumnName("Train_studsNum");

                entity.Property(e => e.TrainStyle)
                    .HasMaxLength(50)
                    .HasColumnName("Train_Style");

                entity.Property(e => e.TrainTarget).HasColumnName("Train_Target");

                entity.Property(e => e.TrainTeacher)
                    .HasMaxLength(50)
                    .HasColumnName("Train_Teacher");

                entity.Property(e => e.TrainTeacherSource)
                    .HasMaxLength(50)
                    .HasColumnName("Train_TeacherSource");

                entity.Property(e => e.TrainType)
                    .HasMaxLength(50)
                    .HasColumnName("Train_Type");
            });

            modelBuilder.Entity<TccTsTrainDoneDetail>(entity =>
            {
                entity.ToTable("TCC_TS_TrainDoneDetail");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BsFormNumber).HasColumnName("BS_FormNumber");

                entity.Property(e => e.BsIncident).HasColumnName("BS_Incident");

                entity.Property(e => e.HasZhengShu).HasMaxLength(50);

                entity.Property(e => e.IsOutTeacher).HasMaxLength(50);

                entity.Property(e => e.TrainContent).HasColumnName("Train_Content");

                entity.Property(e => e.TrainContentChild).HasColumnName("Train_Content_child");

                entity.Property(e => e.TrainDoneIdFather).HasColumnName("TrainDone_ID_Father");

                entity.Property(e => e.TrainDoneSubmitTime)
                    .HasMaxLength(50)
                    .HasColumnName("TrainDone_SubmitTime");

                entity.Property(e => e.TrainDoneType)
                    .HasMaxLength(50)
                    .HasColumnName("Train_DoneType");

                entity.Property(e => e.TrainDoneUserDept)
                    .HasMaxLength(50)
                    .HasColumnName("TrainDone_UserDept");

                entity.Property(e => e.TrainDoneUserDeptNo)
                    .HasMaxLength(50)
                    .HasColumnName("TrainDone_UserDeptNo");

                entity.Property(e => e.TrainDoneUserLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("TrainDone_UserLoginName");

                entity.Property(e => e.TrainDoneUserName)
                    .HasMaxLength(50)
                    .HasColumnName("TrainDone_UserName");

                entity.Property(e => e.TrainEndDate)
                    .HasMaxLength(50)
                    .HasColumnName("Train_EndDate");

                entity.Property(e => e.TrainExamKind)
                    .HasMaxLength(50)
                    .HasColumnName("Train_ExamKind");

                entity.Property(e => e.TrainHours).HasColumnName("Train_Hours");

                entity.Property(e => e.TrainLevel)
                    .HasMaxLength(50)
                    .HasColumnName("Train_level");

                entity.Property(e => e.TrainPlanFk).HasColumnName("TrainPlan_FK");

                entity.Property(e => e.TrainPlanOption)
                    .HasMaxLength(50)
                    .HasColumnName("Train_PlanOption");

                entity.Property(e => e.TrainRspDept)
                    .HasMaxLength(50)
                    .HasColumnName("Train_RspDept");

                entity.Property(e => e.TrainRspDeptNo)
                    .HasMaxLength(50)
                    .HasColumnName("Train_RspDeptNo");

                entity.Property(e => e.TrainRspPerson)
                    .HasMaxLength(50)
                    .HasColumnName("Train_RspPerson");

                entity.Property(e => e.TrainRspPersonId)
                    .HasMaxLength(50)
                    .HasColumnName("Train_RspPersonID");

                entity.Property(e => e.TrainStartDate)
                    .HasMaxLength(50)
                    .HasColumnName("Train_StartDate");

                entity.Property(e => e.TrainStatus)
                    .HasMaxLength(50)
                    .HasColumnName("Train_status");

                entity.Property(e => e.TrainStyle)
                    .HasMaxLength(50)
                    .HasColumnName("Train_Style");

                entity.Property(e => e.TrainTeacher)
                    .HasMaxLength(50)
                    .HasColumnName("Train_Teacher");

                entity.Property(e => e.TrainTeacherCost).HasColumnName("Train_TeacherCost");

                entity.Property(e => e.TrainTeacherSource)
                    .HasMaxLength(50)
                    .HasColumnName("Train_TeacherSource");

                entity.Property(e => e.ZhengShuCmp).HasColumnName("ZhengShu_Cmp");

                entity.Property(e => e.ZhengShuName).HasColumnName("ZhengShu_Name");
            });

            modelBuilder.Entity<TccTsTrainDonePerson>(entity =>
            {
                entity.ToTable("TCC_TS_TrainDonePerson");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DeptName).HasMaxLength(50);

                entity.Property(e => e.DeptNo).HasMaxLength(50);

                entity.Property(e => e.Docm).HasMaxLength(50);

                entity.Property(e => e.EvaleTime).HasMaxLength(50);

                entity.Property(e => e.EvaluLevel).HasMaxLength(50);

                entity.Property(e => e.Paper).HasMaxLength(50);

                entity.Property(e => e.PersonLoginName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PersonName).HasMaxLength(50);

                entity.Property(e => e.PersonStatus).HasMaxLength(50);

                entity.Property(e => e.Point).HasMaxLength(50);

                entity.Property(e => e.Report).HasMaxLength(50);

                entity.Property(e => e.SignCount).HasMaxLength(50);

                entity.Property(e => e.SignTime).HasMaxLength(50);

                entity.Property(e => e.Source)
                    .HasMaxLength(50)
                    .HasColumnName("source");

                entity.Property(e => e.TrainDoneDetailChildFk).HasColumnName("TrainDoneDetail_child_FK");

                entity.Property(e => e.TrainDoneDetailFk).HasColumnName("TrainDoneDetail_FK");

                entity.Property(e => e.TrainHours)
                    .HasMaxLength(50)
                    .HasColumnName("Train_hours");
            });

            modelBuilder.Entity<TccTsTrainDoneSignDetail>(entity =>
            {
                entity.ToTable("TCC_TS_TrainDoneSignDetail");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DeptName).HasMaxLength(50);

                entity.Property(e => e.DeptNo).HasMaxLength(50);

                entity.Property(e => e.PersonLoginName).HasMaxLength(50);

                entity.Property(e => e.PersonName).HasMaxLength(50);

                entity.Property(e => e.SignTime).HasMaxLength(50);

                entity.Property(e => e.Source)
                    .HasMaxLength(50)
                    .HasColumnName("source");

                entity.Property(e => e.TrainDoneDetailFk).HasColumnName("TrainDoneDetail_FK");

                entity.Property(e => e.TrainDonePersonFk).HasColumnName("TrainDonePerson_FK");
            });

            modelBuilder.Entity<TccTsTrainDoneTeacher>(entity =>
            {
                entity.ToTable("TCC_TS_TrainDoneTeacher");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DeptName).HasMaxLength(50);

                entity.Property(e => e.DeptNo).HasMaxLength(50);

                entity.Property(e => e.PersonLoginName).HasMaxLength(50);

                entity.Property(e => e.PersonName).HasMaxLength(50);

                entity.Property(e => e.TrainCost)
                    .HasMaxLength(50)
                    .HasColumnName("Train_Cost");

                entity.Property(e => e.TrainDoneDetailFk).HasColumnName("TrainDoneDetail_FK");

                entity.Property(e => e.TrainHours)
                    .HasMaxLength(50)
                    .HasColumnName("Train_hours");

                entity.Property(e => e.TrainPrice)
                    .HasMaxLength(50)
                    .HasColumnName("Train_Price");
            });

            modelBuilder.Entity<TccTsTrainPlanBaseInfo>(entity =>
            {
                entity.ToTable("TCC_TS_TrainPlanBaseInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyDate).HasMaxLength(50);

                entity.Property(e => e.ApplyDept).HasMaxLength(50);

                entity.Property(e => e.ApplyDeptNo).HasMaxLength(50);

                entity.Property(e => e.ApplyLoginUser).HasMaxLength(50);

                entity.Property(e => e.ApplyName).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.TrainStartPersonLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Train_StartPersonLoginName");

                entity.Property(e => e.TrainStartPersonName)
                    .HasMaxLength(50)
                    .HasColumnName("Train_StartPersonName");

                entity.Property(e => e.TrainStartTime)
                    .HasMaxLength(50)
                    .HasColumnName("Train_StartTime");

                entity.Property(e => e.TrainStatus)
                    .HasMaxLength(50)
                    .HasColumnName("Train_status");

                entity.Property(e => e.TrainYear)
                    .HasMaxLength(50)
                    .HasColumnName("Train_Year");
            });

            modelBuilder.Entity<TccTsTrainPlanDept>(entity =>
            {
                entity.ToTable("TCC_TS_TrainPlan_dept");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyDate).HasMaxLength(50);

                entity.Property(e => e.ApplyDept).HasMaxLength(50);

                entity.Property(e => e.ApplyDeptNo).HasMaxLength(50);

                entity.Property(e => e.ApplyLoginUser).HasMaxLength(50);

                entity.Property(e => e.ApplyName).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.TrainBacktime)
                    .HasMaxLength(50)
                    .HasColumnName("Train_backtime");

                entity.Property(e => e.TrainHrshenhe)
                    .HasMaxLength(50)
                    .HasColumnName("Train_HRShenhe");

                entity.Property(e => e.TrainLevel)
                    .HasMaxLength(50)
                    .HasColumnName("Train_level");

                entity.Property(e => e.TrainPlanFk).HasColumnName("TrainPlan_FK");

                entity.Property(e => e.TrainShenbao)
                    .HasMaxLength(50)
                    .HasColumnName("Train_Shenbao");

                entity.Property(e => e.TrainShenhe)
                    .HasMaxLength(50)
                    .HasColumnName("Train_Shenhe");

                entity.Property(e => e.TrainShenpi)
                    .HasMaxLength(50)
                    .HasColumnName("Train_Shenpi");

                entity.Property(e => e.TrainYear)
                    .HasMaxLength(50)
                    .HasColumnName("Train_Year");
            });

            modelBuilder.Entity<TccTsTrainPlanDeptDetail>(entity =>
            {
                entity.ToTable("TCC_TS_TrainPlan_DeptDetail");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.TrainContent).HasColumnName("Train_Content");

                entity.Property(e => e.TrainCost).HasColumnName("Train_Cost");

                entity.Property(e => e.TrainDate)
                    .HasMaxLength(50)
                    .HasColumnName("Train_Date");

                entity.Property(e => e.TrainExamKind)
                    .HasMaxLength(50)
                    .HasColumnName("Train_ExamKind");

                entity.Property(e => e.TrainHlepDept).HasColumnName("Train_HlepDept");

                entity.Property(e => e.TrainHlepDeptNo).HasColumnName("Train_HlepDeptNo");

                entity.Property(e => e.TrainHours).HasColumnName("Train_Hours");

                entity.Property(e => e.TrainObject).HasColumnName("Train_Object");

                entity.Property(e => e.TrainOption)
                    .HasMaxLength(50)
                    .HasColumnName("Train_Option");

                entity.Property(e => e.TrainPlanDeptFk).HasColumnName("TrainPlan_dept_FK");

                entity.Property(e => e.TrainPlanLevel)
                    .HasMaxLength(50)
                    .HasColumnName("TrainPlan_level");

                entity.Property(e => e.TrainRemark).HasColumnName("Train_Remark");

                entity.Property(e => e.TrainRspDept)
                    .HasMaxLength(50)
                    .HasColumnName("Train_RspDept");

                entity.Property(e => e.TrainRspDeptNo)
                    .HasMaxLength(50)
                    .HasColumnName("Train_RspDeptNo");

                entity.Property(e => e.TrainRspPerson)
                    .HasMaxLength(50)
                    .HasColumnName("Train_RspPerson");

                entity.Property(e => e.TrainRspPersonId)
                    .HasMaxLength(50)
                    .HasColumnName("Train_RspPersonID");

                entity.Property(e => e.TrainStatus).HasMaxLength(50);

                entity.Property(e => e.TrainStudsNum).HasColumnName("Train_studsNum");

                entity.Property(e => e.TrainStyle)
                    .HasMaxLength(50)
                    .HasColumnName("Train_Style");

                entity.Property(e => e.TrainTarget).HasColumnName("Train_Target");

                entity.Property(e => e.TrainTeacher)
                    .HasMaxLength(50)
                    .HasColumnName("Train_Teacher");

                entity.Property(e => e.TrainTeacherSource)
                    .HasMaxLength(50)
                    .HasColumnName("Train_TeacherSource");

                entity.Property(e => e.TrainType)
                    .HasMaxLength(50)
                    .HasColumnName("Train_Type");
            });

            modelBuilder.Entity<TccTsTrainPlanReturnInfo>(entity =>
            {
                entity.ToTable("TCC_TS_TrainPlan_ReturnInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ReturnPerson).HasMaxLength(50);

                entity.Property(e => e.ReturnStatus).HasMaxLength(50);

                entity.Property(e => e.ReturnTime).HasMaxLength(50);

                entity.Property(e => e.StepName).HasMaxLength(50);

                entity.Property(e => e.TrainPlanDeptFk).HasColumnName("TrainPlan_dept_FK");
            });

            modelBuilder.Entity<TccTsTrainTeacherApply>(entity =>
            {
                entity.ToTable("TCC_TS_TrainTeacherApply");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyDate).HasMaxLength(50);

                entity.Property(e => e.ApplyDept).HasMaxLength(50);

                entity.Property(e => e.ApplyDeptNo).HasMaxLength(50);

                entity.Property(e => e.ApplyLoginUser).HasMaxLength(50);

                entity.Property(e => e.ApplyName).HasMaxLength(50);

                entity.Property(e => e.ApplyPhone).HasMaxLength(50);

                entity.Property(e => e.ApplyType).HasMaxLength(50);

                entity.Property(e => e.BookCost).HasMaxLength(50);

                entity.Property(e => e.BookName).HasMaxLength(50);

                entity.Property(e => e.BookPrice).HasMaxLength(50);

                entity.Property(e => e.ExamKind).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.StudentNum).HasMaxLength(50);

                entity.Property(e => e.TeacherCost).HasMaxLength(50);

                entity.Property(e => e.TeacherHours).HasMaxLength(50);

                entity.Property(e => e.TeacherName).HasMaxLength(50);

                entity.Property(e => e.TeacherSource).HasMaxLength(50);

                entity.Property(e => e.TotalCost).HasMaxLength(50);

                entity.Property(e => e.TrainEndTime).HasMaxLength(50);

                entity.Property(e => e.TrainLevel).HasMaxLength(50);

                entity.Property(e => e.TrainOption).HasMaxLength(50);

                entity.Property(e => e.TrainStartTime).HasMaxLength(50);

                entity.Property(e => e.TrainTarget).HasColumnName("Train_Target");

                entity.Property(e => e.TrainType)
                    .HasMaxLength(50)
                    .HasColumnName("Train_Type");
            });

            modelBuilder.Entity<TccTsTrainTeacherAttInfo>(entity =>
            {
                entity.ToTable("TCC_TS_TrainTeacher_AttInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AttFileId)
                    .HasMaxLength(50)
                    .HasColumnName("Att_FileID");

                entity.Property(e => e.AttFileName).HasColumnName("Att_FileName");

                entity.Property(e => e.TeacherFk).HasColumnName("Teacher_FK");
            });

            modelBuilder.Entity<TccTsTrainTeacherDetail>(entity =>
            {
                entity.ToTable("TCC_TS_TrainTeacherDetail");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.IdSjs)
                    .HasMaxLength(50)
                    .HasColumnName("ID_sjs");

                entity.Property(e => e.StudentNum).HasMaxLength(50);

                entity.Property(e => e.TeacherCost).HasMaxLength(50);

                entity.Property(e => e.TeacherType).HasMaxLength(50);

                entity.Property(e => e.TrainDoneFk).HasColumnName("TrainDone_FK");

                entity.Property(e => e.TrainEndTime).HasMaxLength(50);

                entity.Property(e => e.TrainOption).HasMaxLength(50);

                entity.Property(e => e.TrainPlanFk).HasColumnName("TrainPlan_FK");

                entity.Property(e => e.TrainStartTime).HasMaxLength(50);

                entity.Property(e => e.TrainTarget).HasColumnName("Train_Target");

                entity.Property(e => e.TrainTeacherApplyFk).HasColumnName("TrainTeacherApply_FK");
            });

            modelBuilder.Entity<TccTsTrainTeacherInfo>(entity =>
            {
                entity.ToTable("TCC_TS_TrainTeacherInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.FileId)
                    .HasMaxLength(50)
                    .HasColumnName("FileID");

                entity.Property(e => e.TeacherComp).HasMaxLength(200);

                entity.Property(e => e.TeacherCost).HasMaxLength(50);

                entity.Property(e => e.TeacherHours).HasMaxLength(50);

                entity.Property(e => e.TeacherName).HasMaxLength(50);

                entity.Property(e => e.TrainTeacherDetailFk).HasColumnName("TrainTeacherDetail_FK");

                entity.Property(e => e.TrainTeacherDetailFkSjs)
                    .HasMaxLength(50)
                    .HasColumnName("TrainTeacherDetail_FK_sjs");
            });

            modelBuilder.Entity<TccTxdocReviewOpinion>(entity =>
            {
                entity.ToTable("TCC_TXDocReviewOpinion");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Demo).HasMaxLength(50);

                entity.Property(e => e.HuigaoPerson)
                    .HasMaxLength(50)
                    .HasColumnName("huigao_person");

                entity.Property(e => e.HuigaoPersonId)
                    .HasMaxLength(50)
                    .HasColumnName("huigao_person_id");

                entity.Property(e => e.HuigaoTime)
                    .HasColumnType("datetime")
                    .HasColumnName("huigao_time");

                entity.Property(e => e.OpinionDept).HasMaxLength(50);

                entity.Property(e => e.SendDeptAdvice).HasMaxLength(50);
            });

            modelBuilder.Entity<TccTxdocumentReview>(entity =>
            {
                entity.ToTable("TCC_TXDocumentReview");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyDate).HasColumnType("datetime");

                entity.Property(e => e.ApplyDept).HasMaxLength(50);

                entity.Property(e => e.ApplyDeptNo).HasMaxLength(50);

                entity.Property(e => e.ApplyLoginUser).HasMaxLength(50);

                entity.Property(e => e.ApplyName).HasMaxLength(50);

                entity.Property(e => e.ApplyPhone).HasMaxLength(50);

                entity.Property(e => e.DocFileId).HasMaxLength(50);

                entity.Property(e => e.DocType).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.SendDocDate).HasColumnType("datetime");

                entity.Property(e => e.SendDocNo).HasMaxLength(50);

                entity.Property(e => e.SendType).HasMaxLength(50);
            });

            modelBuilder.Entity<TccUserAnnuity>(entity =>
            {
                entity.ToTable("TCC_UserAnnuity");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AnnuityBase)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("企业年金基数");

                entity.Property(e => e.IdentityId)
                    .HasMaxLength(50)
                    .HasComment("身份证号");

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .HasComment("姓名");
            });

            modelBuilder.Entity<TccUserCompleteBak>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TCC_User_Complete_bak");

                entity.Property(e => e.A0100)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("a0100");

                entity.Property(e => e.Account)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("account");

                entity.Property(e => e.DeptSid)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("dept_sid");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("email");

                entity.Property(e => e.Hr部门)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("hr部门");

                entity.Property(e => e.HumanS)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("human_s");

                entity.Property(e => e.专业)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.专业码)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.主管部门)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.主管部门码)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.人员类别)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.入院时间).HasColumnType("datetime");

                entity.Property(e => e.全局id)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.单位)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.姓名)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.学历)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.岗位)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.工作证号)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.工号)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.归属码)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.性别1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.性别码)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.晋升职务)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.毕业时间).HasColumnType("datetime");

                entity.Property(e => e.民族)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.民族码)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.考勤卡号)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.职务名称)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.职务类别)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.职称名称)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.联系电话)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.聘用日期).HasColumnType("datetime");

                entity.Property(e => e.解聘日期).HasColumnType("datetime");

                entity.Property(e => e.资质)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.资质码)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.身份证号)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.返聘时间).HasColumnType("datetime");

                entity.Property(e => e.退休时间).HasColumnType("datetime");

                entity.Property(e => e.部门)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.部门码)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.隶属)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TccUserDefinedApplicationForAward>(entity =>
            {
                entity.ToTable("TCC_UserDefinedApplicationForAward");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AllYearMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("年度奖金总额");

                entity.Property(e => e.AlreadyPay)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("已发放金额");

                entity.Property(e => e.ApplyDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("创建时间");

                entity.Property(e => e.ApplyUser).HasMaxLength(100);

                entity.Property(e => e.ApplyUserIdentityId).HasMaxLength(100);

                entity.Property(e => e.ApplyUserLoginNane).HasMaxLength(100);

                entity.Property(e => e.AwardSendType)
                    .HasDefaultValueSql("((0))")
                    .HasComment("奖金发放类型，1：平时发放，2：全年一次性奖金");

                entity.Property(e => e.BalanceMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("奖金余额");

                entity.Property(e => e.CurrentMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("本次申领额");

                entity.Property(e => e.DefaultMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Dept).HasMaxLength(100);

                entity.Property(e => e.DeptCode).HasMaxLength(10);

                entity.Property(e => e.DiXiaoJieZhuanE)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("低效结转额");

                entity.Property(e => e.FormNumber).HasMaxLength(100);

                entity.Property(e => e.InToAwardPoolYear).HasComment("进入奖金池的年度");

                entity.Property(e => e.InToAwardpoolQuarter).HasComment("发放哪个季度的奖金额【所谓哪个季度，是奖金进入奖金池的时间】");

                entity.Property(e => e.IsOneTime)
                    .HasDefaultValueSql("((0))")
                    .HasComment("");

                entity.Property(e => e.IsUsed)
                    .HasDefaultValueSql("((0))")
                    .HasComment("是否已经使用过。0：未使用，1：已使用");

                entity.Property(e => e.KeShenLin).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Month).HasComment("使用的月份,在生成工资的存储过程中填充");

                entity.Property(e => e.NoeffctConvert)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("低效结转金额，只有在发放全年一次性奖金的时候才会有");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ShiYongShuilv).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.WuXiaoJieZhuanE)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("无效结转额");

                entity.Property(e => e.Year).HasComment("使用的年份,在生成工资的存储过程中填充");

                entity.Property(e => e.YuJiShiJiSuoDeE)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("预计税后所得额");

                entity.Property(e => e.YuJiYingNaShui)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("应纳税");

                entity.Property(e => e.YuJiYingNaShuiSuoDeE)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("应纳税所得额");
            });

            modelBuilder.Entity<TccUserDefinedApplicationForAwardDeleteRecord>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_UserDefinedApplicationForAward_DeleteRecord");

                entity.Property(e => e.AllYearMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AlreadyPay).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ApplyDate).HasColumnType("datetime");

                entity.Property(e => e.ApplyUser).HasMaxLength(100);

                entity.Property(e => e.ApplyUserIdentityId).HasMaxLength(100);

                entity.Property(e => e.ApplyUserLoginNane).HasMaxLength(100);

                entity.Property(e => e.BalanceMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CurrentMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DefaultMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DeleteDate).HasColumnType("datetime");

                entity.Property(e => e.DeleteUser).HasMaxLength(100);

                entity.Property(e => e.Dept).HasMaxLength(100);

                entity.Property(e => e.DeptCode).HasMaxLength(10);

                entity.Property(e => e.DiXiaoJieZhuanE).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FormNumber).HasMaxLength(100);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.KeShenLin).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.NoeffctConvert).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ShiYongShuilv).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.WuXiaoJieZhuanE).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.YuJiShiJiSuoDeE).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.YuJiYingNaShui).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.YuJiYingNaShuiSuoDeE).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<TccUserDefinedApplicationForAwardLog>(entity =>
            {
                entity.ToTable("TCC_UserDefinedApplicationForAwardLog");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasComment("创建时间");

                entity.Property(e => e.LoginName)
                    .HasMaxLength(50)
                    .HasComment("用户名");

                entity.Property(e => e.OpDesc)
                    .HasMaxLength(500)
                    .HasComment("修改说明");

                entity.Property(e => e.RealName)
                    .HasMaxLength(50)
                    .HasComment("姓名");

                entity.Property(e => e.UserIdentityId)
                    .HasMaxLength(50)
                    .HasComment("身份证号");
            });

            modelBuilder.Entity<TccUserMobileTempt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_User_Mobile_Tempt");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Mobile).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<TccUserRole>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TCC_User_Role");

                entity.Property(e => e.IdcardNo)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("IDCardNo");

                entity.Property(e => e.RoleId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Role_Id");

                entity.Property(e => e.RoleScope)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Role_Scope");

                entity.Property(e => e.RoleScopeId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Role_Scope_Id");
            });

            modelBuilder.Entity<TccVehicle>(entity =>
            {
                entity.ToTable("TCC_Vehicles");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CarNumber).HasMaxLength(50);

                entity.Property(e => e.CarType).HasMaxLength(50);

                entity.Property(e => e.Price).HasColumnType("money");

                entity.Property(e => e.Status).HasDefaultValueSql("((0))");

                entity.Property(e => e.VehicleBong).HasMaxLength(50);

                entity.Property(e => e.VehicleUseCom).HasMaxLength(50);
            });

            modelBuilder.Entity<TccVehicleInfo>(entity =>
            {
                entity.ToTable("TCC_VehicleInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AcceptFare).HasColumnType("money");

                entity.Property(e => e.ApplyDept).HasMaxLength(50);

                entity.Property(e => e.ApplyDeptNo).HasMaxLength(50);

                entity.Property(e => e.ApplyEmail).HasMaxLength(50);

                entity.Property(e => e.ApplyLoginUser).HasMaxLength(50);

                entity.Property(e => e.ApplyMobile).HasMaxLength(50);

                entity.Property(e => e.ApplyName).HasMaxLength(50);

                entity.Property(e => e.ApplyTelephone).HasMaxLength(50);

                entity.Property(e => e.BoardSite).HasMaxLength(50);

                entity.Property(e => e.CarFare).HasColumnType("money");

                entity.Property(e => e.CarNumber).HasMaxLength(50);

                entity.Property(e => e.CarType).HasMaxLength(50);

                entity.Property(e => e.CardNo).HasMaxLength(50);

                entity.Property(e => e.ContratBelong).HasMaxLength(50);

                entity.Property(e => e.DeptManagerName).HasMaxLength(50);

                entity.Property(e => e.DriverId).HasColumnName("DriverID");

                entity.Property(e => e.DriverName).HasMaxLength(50);

                entity.Property(e => e.DriverPhone).HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Flag)
                    .HasDefaultValueSql("((0))")
                    .HasComment("1车辆未安排，2车辆已安排");

                entity.Property(e => e.FlagInfo).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.LeaveTime).HasColumnType("datetime");

                entity.Property(e => e.MagerKey).HasMaxLength(50);

                entity.Property(e => e.MagerUser).HasMaxLength(50);

                entity.Property(e => e.MailesInterval).HasMaxLength(100);

                entity.Property(e => e.Operationer).HasMaxLength(50);

                entity.Property(e => e.People).HasMaxLength(50);

                entity.Property(e => e.Price).HasColumnType("money");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProcessStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.ProjectManagerName).HasMaxLength(50);

                entity.Property(e => e.ProjectNo).HasMaxLength(50);

                entity.Property(e => e.ReasonInfo).HasMaxLength(50);

                entity.Property(e => e.ReceFare).HasColumnType("money");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");

                entity.Property(e => e.ReturnDate).HasColumnType("datetime");

                entity.Property(e => e.RoadFare).HasColumnType("money");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UseDept).HasMaxLength(50);

                entity.Property(e => e.UseDeptId)
                    .HasMaxLength(50)
                    .HasColumnName("UseDeptID");

                entity.Property(e => e.UseSite).HasMaxLength(50);

                entity.Property(e => e.VehicleBong).HasMaxLength(50);

                entity.Property(e => e.VehicleUseCom).HasMaxLength(50);

                entity.Property(e => e.WaitMails).HasMaxLength(50);
            });

            modelBuilder.Entity<TccVehicleSeat>(entity =>
            {
                entity.ToTable("TCC_VehicleSeat");

                entity.HasComment("交通工具席别");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.Category)
                    .HasMaxLength(50)
                    .HasComment("分类   Travel = 交通 Hotel = 住宿  Other = 其它");

                entity.Property(e => e.Code).HasComment("编号");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasComment("创建时间");

                entity.Property(e => e.CreateUserLoginName)
                    .HasMaxLength(200)
                    .HasComment("创建人LoginName");

                entity.Property(e => e.CreateUserRealName)
                    .HasMaxLength(200)
                    .HasComment("创建人RealName");

                entity.Property(e => e.IsEnabled)
                    .HasDefaultValueSql("((1))")
                    .HasComment("是否禁用  0 禁用  1启用");

                entity.Property(e => e.SeatName)
                    .HasMaxLength(100)
                    .HasComment("席别名称");

                entity.Property(e => e.UpdateDate)
                    .HasColumnType("datetime")
                    .HasComment("修改时间");

                entity.Property(e => e.UpdateUserLoginName)
                    .HasMaxLength(200)
                    .HasComment("修改人LoginName");

                entity.Property(e => e.UpdateUserRealName)
                    .HasMaxLength(200)
                    .HasComment("修改人RealName");

                entity.Property(e => e.VehicleCategory)
                    .HasMaxLength(20)
                    .HasComment("交通工具类型");
            });

            modelBuilder.Entity<TccVoucherExpenseClaimOfRelation>(entity =>
            {
                entity.ToTable("TCC_VoucherExpenseClaimOfRelation");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ExpenseClaimId).HasColumnName("ExpenseClaim_ID");

                entity.Property(e => e.ExpenseClaimStatus).HasColumnName("ExpenseClaim_Status");

                entity.Property(e => e.Voucherid).HasColumnName("VOUCHERID");
            });

            modelBuilder.Entity<TccVoucherIdrelation>(entity =>
            {
                entity.ToTable("TCC_VoucherIDRelation");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Incident).HasComment("流程实例号");

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .HasComment("流程名称");

                entity.Property(e => e.Status).HasComment("是否可用：0可用 1不可用");

                entity.Property(e => e.Voucherid)
                    .HasColumnName("VOUCHERID")
                    .HasComment("凭证ID号");
            });

            modelBuilder.Entity<TccVoucherOfRelation>(entity =>
            {
                entity.ToTable("TCC_VoucherOfRelation");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.RIncident).HasColumnName("R_Incident");

                entity.Property(e => e.RProName)
                    .HasMaxLength(50)
                    .HasColumnName("R_ProName");

                entity.Property(e => e.RStatus).HasColumnName("R_Status");

                entity.Property(e => e.RVoucherId).HasColumnName("R_VoucherID");
            });

            modelBuilder.Entity<TccWagePay>(entity =>
            {
                entity.ToTable("TCC_WagePay");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Code).HasMaxLength(100);

                entity.Property(e => e.Coefficient1).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Coefficient2).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Coefficient3).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Coefficient4).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Coefficient5).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<TccWagePaymentHistroy>(entity =>
            {
                entity.ToTable("TCC_WagePaymentHistroy");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Annuity).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.AnnuityPreTax).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.BankAccount).HasMaxLength(200);

                entity.Property(e => e.BeiYongJin).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Cardholder).HasMaxLength(200);

                entity.Property(e => e.ChildDeptCode).HasMaxLength(50);

                entity.Property(e => e.ChildDeptName).HasMaxLength(100);

                entity.Property(e => e.CommunicationSubsidies).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CompanyAllowance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CompanyIncomTaxPable).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CompanyPersonalTax).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Dept).HasMaxLength(200);

                entity.Property(e => e.DeptCode).HasMaxLength(200);

                entity.Property(e => e.DisPatchUnit).HasMaxLength(50);

                entity.Property(e => e.Editor).HasMaxLength(100);

                entity.Property(e => e.FengXianJin).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FixWages).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ForthAwardMoney).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FuLi).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.GongJiJinGuiShu).HasMaxLength(100);

                entity.Property(e => e.HolidaySubsidies).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.HrshuiHouKouKuan)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("HRShuiHouKouKuan");

                entity.Property(e => e.HuiFei).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.IdentityId).HasMaxLength(200);

                entity.Property(e => e.JiXiaoGongZi).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.JiaBanFei).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.KouKuan).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.LargeMedicalal).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Leaves).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.MedicalInsurance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.MeritPay).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.NaShuiTiaoZheng).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.NewProvidentFund).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.NewSalaryVest).HasMaxLength(100);

                entity.Property(e => e.OtherAllowance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PensionInsurance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PostAllowance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ProcessName).HasMaxLength(200);

                entity.Property(e => e.ProvidentFund).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ProvidentFundRate).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ProvidentFundRepay).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.QiTaBuTie).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.QuitFlag).HasMaxLength(50);

                entity.Property(e => e.RealWages).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Reissue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Rent).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ReservationWage).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SalaryIncrease).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SalaryVest).HasMaxLength(200);

                entity.Property(e => e.SheBaoGuiShu).HasMaxLength(100);

                entity.Property(e => e.SheBaoHeJi).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ShiFaGongZi).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ShuiHouKouKuan).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SpecialAllowance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SpecialDebit).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TotalDebit).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TransportSubsidies).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.UnemploymentInsurance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.UserName).HasMaxLength(200);

                entity.Property(e => e.WageIncomTaxPable).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.WageIncomTaxPableTotal)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("WageIncomTaxPable_total");

                entity.Property(e => e.WageIncomTaxPableTotalNoDeduct)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("WageIncomTaxPable_total_NoDeduct");

                entity.Property(e => e.WagePersonalTax).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.WagePersonalTaxTotal)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("WagePersonalTax_total");

                entity.Property(e => e.WagesShould).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.WaiFuDanWei).HasMaxLength(50);

                entity.Property(e => e.WorkingMeals).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.YingFaGongZi).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ZaiGangBuTie).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ZhunYuKouChu).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<TccWagePaymentHistroy20160225bak>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_WagePaymentHistroy20160225bak");

                entity.Property(e => e.Annuity).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AnnuityPreTax).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BankAccount).HasMaxLength(200);

                entity.Property(e => e.BeiYongJin).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Cardholder).HasMaxLength(200);

                entity.Property(e => e.CommunicationSubsidies).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CompanyAllowance).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CompanyIncomTaxPable).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CompanyPersonalTax).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Dept).HasMaxLength(200);

                entity.Property(e => e.DeptCode).HasMaxLength(200);

                entity.Property(e => e.Editor).HasMaxLength(100);

                entity.Property(e => e.FengXianJin).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FixWages).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ForthAwardMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FuLi).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.GongJiJinGuiShu).HasMaxLength(100);

                entity.Property(e => e.HolidaySubsidies).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.HuiFei).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.IdentityId).HasMaxLength(200);

                entity.Property(e => e.JiXiaoGongZi).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.JiaBanFei).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.KouKuan).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LargeMedicalal).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Leaves).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MedicalInsurance).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MeritPay).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.NaShuiTiaoZheng).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.NewProvidentFund).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.NewSalaryVest).HasMaxLength(100);

                entity.Property(e => e.OtherAllowance).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PensionInsurance).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PostAllowance).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ProcessName).HasMaxLength(200);

                entity.Property(e => e.ProvidentFund).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ProvidentFundRate).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ProvidentFundRepay).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.QiTaBuTie).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RealWages).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Reissue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Rent).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ReservationWage).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SalaryIncrease).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SalaryVest).HasMaxLength(200);

                entity.Property(e => e.SheBaoGuiShu).HasMaxLength(100);

                entity.Property(e => e.SheBaoHeJi).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ShiFaGongZi).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SpecialAllowance).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SpecialDebit).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalDebit).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TransportSubsidies).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.UnemploymentInsurance).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.UserName).HasMaxLength(200);

                entity.Property(e => e.WageIncomTaxPable).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.WagePersonalTax).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.WagesShould).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.WorkingMeals).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.YingFaGongZi).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ZaiGangBuTie).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ZhunYuKouChu).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<TccWagePaymentHistroy20181220>(entity =>
            {
                entity.ToTable("TCC_WagePaymentHistroy20181220");

                entity.HasIndex(e => new { e.Month, e.Year, e.NewSalaryVest }, "IDX_NC_TCC_WagePaymentHistroy");

                entity.HasIndex(e => new { e.Month, e.Year, e.Editor, e.CanBeRead }, "IX_AutoGen_20140724_1226");

                entity.HasIndex(e => new { e.Month, e.Year, e.Editor, e.WageStatus, e.SocialSecurityStatus, e.AnnuityStatus, e.FundStatus, e.RealWages }, "IX_AutoGen_20140724_1228");

                entity.HasIndex(e => new { e.Month, e.Year, e.Editor }, "IX_AutoGen_20140724_146");

                entity.HasIndex(e => new { e.Month, e.Year, e.Editor }, "IX_AutoGen_20140724_148");

                entity.HasIndex(e => new { e.Month, e.Year, e.Editor }, "IX_AutoGen_20140724_150");

                entity.HasIndex(e => new { e.Month, e.Year, e.Editor }, "IX_AutoGen_20140724_152");

                entity.HasIndex(e => new { e.Month, e.Year, e.Editor, e.WageStatus, e.SocialSecurityStatus, e.AnnuityStatus, e.FundStatus }, "IX_AutoGen_20140724_154");

                entity.HasIndex(e => new { e.Month, e.Year, e.Editor, e.WageStatus }, "IX_AutoGen_20140724_156");

                entity.HasIndex(e => new { e.Month, e.Year, e.Editor, e.SocialSecurityStatus }, "IX_AutoGen_20140724_158");

                entity.HasIndex(e => new { e.Month, e.Year, e.Editor, e.AnnuityStatus }, "IX_AutoGen_20140724_160");

                entity.HasIndex(e => new { e.Month, e.Year, e.Editor, e.FundStatus }, "IX_AutoGen_20140724_162");

                entity.HasIndex(e => new { e.Month, e.Year }, "IX_AutoGen_20140724_21437");

                entity.HasIndex(e => new { e.Month, e.Year, e.Editor }, "IX_AutoGen_20140724_3359");

                entity.HasIndex(e => new { e.Month, e.Year, e.NewSalaryVest }, "IX_AutoGen_20140724_387");

                entity.HasIndex(e => new { e.Month, e.Year }, "IX_AutoGen_20140724_4765");

                entity.HasIndex(e => new { e.Month, e.Year, e.WageStatus, e.SocialSecurityStatus, e.AnnuityStatus, e.FundStatus, e.CarryoverDeptWageCarryoverDebitStatus, e.CarryoverProjectWageCarryoverDebitStatus, e.CarryoverWageAndSubsidyStatus, e.CarryoverInjuryInsuranceStatus, e.CarryoverAnnuityStatus, e.CarryoverMaternityInsuranceStatus, e.CarryoverUnemploymentInsuranceStatus, e.CarryoverPensionInsuranceStatus, e.CarryoverMedicalInsuranceStatus, e.CarryoverFundStatus }, "IX_AutoGen_20140724_4873");

                entity.HasIndex(e => new { e.Month, e.Year, e.WageStatus, e.SocialSecurityStatus, e.AnnuityStatus, e.FundStatus, e.CarryoverDeptWageCarryoverDebitStatus, e.CarryoverProjectWageCarryoverDebitStatus, e.CarryoverWageAndSubsidyStatus, e.CarryoverInjuryInsuranceStatus, e.CarryoverAnnuityStatus, e.CarryoverMaternityInsuranceStatus, e.CarryoverUnemploymentInsuranceStatus, e.CarryoverPensionInsuranceStatus, e.CarryoverMedicalInsuranceStatus, e.CarryoverFundStatus }, "IX_AutoGen_20140724_4875");

                entity.HasIndex(e => new { e.Month, e.Year, e.NewSalaryVest }, "IX_AutoGen_20140724_548");

                entity.HasIndex(e => new { e.Month, e.Year, e.NewSalaryVest }, "IX_AutoGen_20140724_558");

                entity.HasIndex(e => new { e.Month, e.Year, e.NewSalaryVest }, "IX_AutoGen_20140724_560");

                entity.HasIndex(e => new { e.Month, e.Year, e.CanBeRead, e.NewSalaryVest }, "IX_AutoGen_20140724_7398");

                entity.HasIndex(e => new { e.Month, e.Year, e.CanBeRead, e.WageStatus, e.SocialSecurityStatus, e.AnnuityStatus, e.FundStatus }, "IX_AutoGen_20140724_7487");

                entity.HasIndex(e => e.Year, "idx_nc_TCC_WagePaymentHistroy_y");

                entity.HasIndex(e => new { e.IdentityId, e.Month, e.Year }, "idx_nc_id_m_y");

                entity.HasIndex(e => e.IdentityId, "idx_nc_my_TCC_WagePaymentHistroyX");

                entity.HasIndex(e => new { e.Month, e.Year }, "idx_nc_my_i_i_d_d_u_TCC_WagePaymentHistroy");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.Annuity)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0.00))")
                    .HasComment("企业年金");

                entity.Property(e => e.AnnuityPreTax)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0.0))")
                    .HasComment("企业年金税前");

                entity.Property(e => e.AnnuityStatus)
                    .HasDefaultValueSql("((0))")
                    .HasComment("企业年金状态：0：未入账，1：已入账");

                entity.Property(e => e.AnnuityStatusForSupplementary)
                    .HasDefaultValueSql("((0))")
                    .HasComment("补充企业年金入账");

                entity.Property(e => e.BankAccount)
                    .HasMaxLength(200)
                    .HasComment("银行帐号");

                entity.Property(e => e.BeiYongJin).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CanBeRead).HasComment("用于出纳点击确认发放之后标识可以在报表查询中看到");

                entity.Property(e => e.Cardholder)
                    .HasMaxLength(200)
                    .HasComment("持卡人");

                entity.Property(e => e.CarryoverAnnuityStatus)
                    .HasDefaultValueSql("((0))")
                    .HasComment("结转企业年金");

                entity.Property(e => e.CarryoverAnnuityStatusForSupplementary)
                    .HasDefaultValueSql("((0))")
                    .HasComment("结转企业年金补缴");

                entity.Property(e => e.CarryoverDeptWageCarryoverDebitStatus)
                    .HasDefaultValueSql("((0))")
                    .HasComment("结转部门奖金，0是未结转，1是已结转");

                entity.Property(e => e.CarryoverDeptWageCarryoverDebitStatusForSupplementary)
                    .HasDefaultValueSql("((0))")
                    .HasComment("结转部门奖金（补缴）");

                entity.Property(e => e.CarryoverFundStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.CarryoverFundStatusForSupplementary)
                    .HasDefaultValueSql("((0))")
                    .HasComment("结转公积金补缴");

                entity.Property(e => e.CarryoverInjuryInsuranceStatus)
                    .HasDefaultValueSql("((0))")
                    .HasComment("结转工伤保险");

                entity.Property(e => e.CarryoverInjuryInsuranceStatusForSupplementary)
                    .HasDefaultValueSql("((0))")
                    .HasComment("结转工伤补缴");

                entity.Property(e => e.CarryoverMaternityInsuranceStatus)
                    .HasDefaultValueSql("((0))")
                    .HasComment("结转生育保险");

                entity.Property(e => e.CarryoverMaternityInsuranceStatusForSupplementary)
                    .HasDefaultValueSql("((0))")
                    .HasComment("结转生育保险补缴");

                entity.Property(e => e.CarryoverMedicalInsuranceStatus)
                    .HasDefaultValueSql("((0))")
                    .HasComment("结转医疗保险");

                entity.Property(e => e.CarryoverMedicalInsuranceStatusForSupplementary)
                    .HasDefaultValueSql("((0))")
                    .HasComment("结转医疗保险补缴");

                entity.Property(e => e.CarryoverPensionInsuranceStatus)
                    .HasDefaultValueSql("((0))")
                    .HasComment("结转养老保险");

                entity.Property(e => e.CarryoverPensionInsuranceStatusForSupplementary)
                    .HasDefaultValueSql("((0))")
                    .HasComment("结转养老保险补缴");

                entity.Property(e => e.CarryoverProjectWageCarryoverDebitStatus)
                    .HasDefaultValueSql("((0))")
                    .HasComment("结转项目奖金，同部门奖金状态");

                entity.Property(e => e.CarryoverProjectWageCarryoverDebitStatusForSupplementary)
                    .HasDefaultValueSql("((0))")
                    .HasComment("结转项目奖金（补缴）");

                entity.Property(e => e.CarryoverUnemploymentInsuranceStatus)
                    .HasDefaultValueSql("((0))")
                    .HasComment("结转失业保险");

                entity.Property(e => e.CarryoverUnemploymentInsuranceStatusForSupplementary)
                    .HasDefaultValueSql("((0))")
                    .HasComment("结转失业保险补缴");

                entity.Property(e => e.CarryoverWageAndSubsidyStatus)
                    .HasDefaultValueSql("((0))")
                    .HasComment("结转工资及补贴，状态同上");

                entity.Property(e => e.CarryoverWageAndSubsidyStatusForSupplementary)
                    .HasDefaultValueSql("((0))")
                    .HasComment("结转工资（补缴）");

                entity.Property(e => e.ChangeType)
                    .HasDefaultValueSql("((0))")
                    .HasComment("变动类型");

                entity.Property(e => e.ChildDeptCode).HasMaxLength(50);

                entity.Property(e => e.ChildDeptName).HasMaxLength(50);

                entity.Property(e => e.CommunicationSubsidies)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0.00))")
                    .HasComment("通讯补贴");

                entity.Property(e => e.CompanyAllowance)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0.00))")
                    .HasComment("企工补");

                entity.Property(e => e.CompanyIncomTaxPable)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0.00))")
                    .HasComment("企业年金应纳所得税");

                entity.Property(e => e.CompanyPersonalTax)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0.00))")
                    .HasComment("企业年金代扣个人税");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("记录日期");

                entity.Property(e => e.Dept)
                    .HasMaxLength(200)
                    .HasComment("主管部门");

                entity.Property(e => e.DeptCode).HasMaxLength(200);

                entity.Property(e => e.Editor).HasMaxLength(100);

                entity.Property(e => e.FengXianJin).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FixWages)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0.00))")
                    .HasComment("固定工资");

                entity.Property(e => e.ForthAwardMoney)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.FuLi)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0.00))")
                    .HasComment("福利");

                entity.Property(e => e.FundStatus)
                    .HasDefaultValueSql("((0))")
                    .HasComment("公积金状态，标识同企业年金");

                entity.Property(e => e.FundStatusForSupplementary)
                    .HasDefaultValueSql("((0))")
                    .HasComment("补充公积金入账");

                entity.Property(e => e.GongJiJinGuiShu)
                    .HasMaxLength(100)
                    .HasComment("公积金归属");

                entity.Property(e => e.HolidaySubsidies)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0.00))")
                    .HasComment("节日补贴");

                entity.Property(e => e.HrshuiHouKouKuan)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("HRShuiHouKouKuan");

                entity.Property(e => e.HuiFei)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("会费");

                entity.Property(e => e.IdentityId)
                    .HasMaxLength(200)
                    .HasComment("身份证号");

                entity.Property(e => e.IncidentNo)
                    .HasDefaultValueSql("((0))")
                    .HasComment("实例号");

                entity.Property(e => e.IsForthAward)
                    .HasDefaultValueSql("((0))")
                    .HasComment("是否为全年一次性奖金，0表示不是，1表示是");

                entity.Property(e => e.JiXiaoGongZi)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0.0))")
                    .HasComment("绩效工资");

                entity.Property(e => e.JiaBanFei)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0.0))")
                    .HasComment("加班费");

                entity.Property(e => e.KouKuan).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LargeMedicalal)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0.00))")
                    .HasComment("大额医疗");

                entity.Property(e => e.Leaves)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0.00))")
                    .HasComment("病事假");

                entity.Property(e => e.MedicalInsurance)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0.00))")
                    .HasComment("医疗保险");

                entity.Property(e => e.MeritPay)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0.00))")
                    .HasComment("奖金（绩效工资）");

                entity.Property(e => e.Month).HasComment("月份");

                entity.Property(e => e.NaShuiTiaoZheng).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.NewProvidentFund)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("公积金个人");

                entity.Property(e => e.NewSalaryVest)
                    .HasMaxLength(100)
                    .HasComment("发放地");

                entity.Property(e => e.OtherAllowance)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0.00))")
                    .HasComment("其他补贴");

                entity.Property(e => e.PensionInsurance)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0.00))")
                    .HasComment("养老保险");

                entity.Property(e => e.PersonStatus)
                    .HasDefaultValueSql("((0))")
                    .HasComment("0标识正常在职，1标识离职，2标识离退");

                entity.Property(e => e.PersonStatusDetail)
                    .HasDefaultValueSql("((0))")
                    .HasComment("人员状态详细说明。0.在职，1.离退，2.离职，3.内延，4.返聘");

                entity.Property(e => e.PostAllowance)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0.00))")
                    .HasComment("岗位津贴");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(200)
                    .HasComment("流程名");

                entity.Property(e => e.ProvidentFund)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0.00))")
                    .HasComment("公积金");

                entity.Property(e => e.ProvidentFundRate)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0.00))")
                    .HasComment("公积金贷款利息");

                entity.Property(e => e.ProvidentFundRepay)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0.00))")
                    .HasComment("公积金补缴");

                entity.Property(e => e.QiTaBuTie)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QuitFlag).HasMaxLength(50);

                entity.Property(e => e.RealWages)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0.00))")
                    .HasComment("实发工资");

                entity.Property(e => e.Reissue)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0.00))")
                    .HasComment("补发");

                entity.Property(e => e.Rent)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0.00))")
                    .HasComment("租房费");

                entity.Property(e => e.ReservationWage)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0.00))")
                    .HasComment("保留工资");

                entity.Property(e => e.SalaryIncrease)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0.00))")
                    .HasComment("年度加薪");

                entity.Property(e => e.SalaryLevel).HasComment("当时的薪资等级");

                entity.Property(e => e.SalaryVest)
                    .HasMaxLength(200)
                    .HasComment("薪资归属");

                entity.Property(e => e.SheBaoGuiShu)
                    .HasMaxLength(100)
                    .HasComment("社保归属");

                entity.Property(e => e.SheBaoHeJi).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ShiFaGongZi).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ShuiHouKouKuan).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SocialSecurityStatus)
                    .HasDefaultValueSql("((0))")
                    .HasComment("付社保状态，0:入账,1:已入账");

                entity.Property(e => e.SocialSecurityStatusForSupplementary)
                    .HasDefaultValueSql("((0))")
                    .HasComment("补充社保入账");

                entity.Property(e => e.SpecialAllowance)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0.00))")
                    .HasComment("特殊津贴");

                entity.Property(e => e.SpecialDebit)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0.00))")
                    .HasComment("特殊扣款");

                entity.Property(e => e.Status)
                    .HasDefaultValueSql("((0))")
                    .HasComment("状态");

                entity.Property(e => e.TotalDebit)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0.00))")
                    .HasComment("扣款合计");

                entity.Property(e => e.TransportSubsidies)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0.00))")
                    .HasComment("交通补贴");

                entity.Property(e => e.UnemploymentInsurance)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0.00))")
                    .HasComment("失业保险");

                entity.Property(e => e.UserName)
                    .HasMaxLength(200)
                    .HasComment("姓名");

                entity.Property(e => e.WageIncomTaxPable)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0.00))")
                    .HasComment("正常工资应纳所得税");

                entity.Property(e => e.WagePersonalTax)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0.00))")
                    .HasComment("正常工资代扣个人税");

                entity.Property(e => e.WageStatus)
                    .HasDefaultValueSql("((0))")
                    .HasComment("付工资奖金状态，0:未入账,1:已入账");

                entity.Property(e => e.WageStatusForSupplementary)
                    .HasDefaultValueSql("((0))")
                    .HasComment("补充工资入账");

                entity.Property(e => e.WagesShould)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0.00))")
                    .HasComment("应发薪酬");

                entity.Property(e => e.WaiFuDanWei).HasMaxLength(50);

                entity.Property(e => e.WorkingMeals)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0.00))")
                    .HasComment("工作餐");

                entity.Property(e => e.Year).HasComment("年度");

                entity.Property(e => e.YingFaGongZi).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ZaiGangBuTie)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("在岗补贴");

                entity.Property(e => e.ZhunYuKouChu)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TccWagePaymentHistroy20190130>(entity =>
            {
                entity.ToTable("TCC_WagePaymentHistroy20190130");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Annuity).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.AnnuityPreTax).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.BankAccount).HasMaxLength(200);

                entity.Property(e => e.BeiYongJin).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Cardholder).HasMaxLength(200);

                entity.Property(e => e.ChildDeptCode).HasMaxLength(50);

                entity.Property(e => e.ChildDeptName).HasMaxLength(100);

                entity.Property(e => e.CommunicationSubsidies).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CompanyAllowance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CompanyIncomTaxPable).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CompanyPersonalTax).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Dept).HasMaxLength(200);

                entity.Property(e => e.DeptCode).HasMaxLength(200);

                entity.Property(e => e.DisPatchUnit).HasMaxLength(50);

                entity.Property(e => e.Editor).HasMaxLength(100);

                entity.Property(e => e.FengXianJin).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FixWages).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ForthAwardMoney).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FuLi).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.GongJiJinGuiShu).HasMaxLength(100);

                entity.Property(e => e.HolidaySubsidies).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.HrshuiHouKouKuan)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("HRShuiHouKouKuan");

                entity.Property(e => e.HuiFei).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.IdentityId).HasMaxLength(200);

                entity.Property(e => e.JiXiaoGongZi).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.JiaBanFei).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.KouKuan).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.LargeMedicalal).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Leaves).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.MedicalInsurance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.MeritPay).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.NaShuiTiaoZheng).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.NewProvidentFund).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.NewSalaryVest).HasMaxLength(100);

                entity.Property(e => e.OtherAllowance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PensionInsurance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PostAllowance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ProcessName).HasMaxLength(200);

                entity.Property(e => e.ProvidentFund).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ProvidentFundRate).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ProvidentFundRepay).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.QiTaBuTie).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.QuitFlag).HasMaxLength(50);

                entity.Property(e => e.RealWages).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Reissue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Rent).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ReservationWage).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SalaryIncrease).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SalaryVest).HasMaxLength(200);

                entity.Property(e => e.SheBaoGuiShu).HasMaxLength(100);

                entity.Property(e => e.SheBaoHeJi).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ShiFaGongZi).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ShuiHouKouKuan).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SpecialAllowance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SpecialDebit).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TotalDebit).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TransportSubsidies).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.UnemploymentInsurance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.UserName).HasMaxLength(200);

                entity.Property(e => e.WageIncomTaxPable).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.WageIncomTaxPableTotal)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("WageIncomTaxPable_total")
                    .HasComment("累计应纳税所得额(已减去累计专项扣除)");

                entity.Property(e => e.WageIncomTaxPableTotalNoDeduct)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("WageIncomTaxPable_total_NoDeduct")
                    .HasComment("累计应纳税所得额（未减去专项扣除）");

                entity.Property(e => e.WagePersonalTax).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.WagePersonalTaxTotal)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("WagePersonalTax_total")
                    .HasComment("累计个人所得税");

                entity.Property(e => e.WagesShould).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.WaiFuDanWei).HasMaxLength(50);

                entity.Property(e => e.WorkingMeals).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.YingFaGongZi).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ZaiGangBuTie).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ZhunYuKouChu).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<TccWagePaymentHistroy20190218>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_WagePaymentHistroy20190218");

                entity.Property(e => e.Annuity).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.AnnuityPreTax).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.BankAccount).HasMaxLength(200);

                entity.Property(e => e.BeiYongJin).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Cardholder).HasMaxLength(200);

                entity.Property(e => e.ChildDeptCode).HasMaxLength(50);

                entity.Property(e => e.ChildDeptName).HasMaxLength(100);

                entity.Property(e => e.CommunicationSubsidies).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CompanyAllowance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CompanyIncomTaxPable).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CompanyPersonalTax).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Dept).HasMaxLength(200);

                entity.Property(e => e.DeptCode).HasMaxLength(200);

                entity.Property(e => e.DisPatchUnit).HasMaxLength(50);

                entity.Property(e => e.Editor).HasMaxLength(100);

                entity.Property(e => e.FengXianJin).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FixWages).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ForthAwardMoney).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FuLi).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.GongJiJinGuiShu).HasMaxLength(100);

                entity.Property(e => e.HolidaySubsidies).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.HrshuiHouKouKuan)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("HRShuiHouKouKuan");

                entity.Property(e => e.HuiFei).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdentityId).HasMaxLength(200);

                entity.Property(e => e.JiXiaoGongZi).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.JiaBanFei).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.KouKuan).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.LargeMedicalal).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Leaves).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.MedicalInsurance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.MeritPay).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.NaShuiTiaoZheng).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.NewProvidentFund).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.NewSalaryVest).HasMaxLength(100);

                entity.Property(e => e.OtherAllowance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PensionInsurance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PostAllowance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ProcessName).HasMaxLength(200);

                entity.Property(e => e.ProvidentFund).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ProvidentFundRate).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ProvidentFundRepay).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.QiTaBuTie).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.QuitFlag).HasMaxLength(50);

                entity.Property(e => e.RealWages).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Reissue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Rent).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ReservationWage).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SalaryIncrease).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SalaryVest).HasMaxLength(200);

                entity.Property(e => e.SheBaoGuiShu).HasMaxLength(100);

                entity.Property(e => e.SheBaoHeJi).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ShiFaGongZi).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ShuiHouKouKuan).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SpecialAllowance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SpecialDebit).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TotalDebit).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TransportSubsidies).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.UnemploymentInsurance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.UserName).HasMaxLength(200);

                entity.Property(e => e.WageIncomTaxPable).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.WageIncomTaxPableTotal)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("WageIncomTaxPable_total");

                entity.Property(e => e.WageIncomTaxPableTotalNoDeduct)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("WageIncomTaxPable_total_NoDeduct");

                entity.Property(e => e.WagePersonalTax).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.WagePersonalTaxTotal)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("WagePersonalTax_total");

                entity.Property(e => e.WagesShould).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.WaiFuDanWei).HasMaxLength(50);

                entity.Property(e => e.WorkingMeals).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.YingFaGongZi).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ZaiGangBuTie).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ZhunYuKouChu).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<TccWagePaymentHistroy20190227>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_WagePaymentHistroy20190227");

                entity.Property(e => e.Annuity).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.AnnuityPreTax).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.BankAccount).HasMaxLength(200);

                entity.Property(e => e.BeiYongJin).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Cardholder).HasMaxLength(200);

                entity.Property(e => e.ChildDeptCode).HasMaxLength(50);

                entity.Property(e => e.ChildDeptName).HasMaxLength(100);

                entity.Property(e => e.CommunicationSubsidies).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CompanyAllowance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CompanyIncomTaxPable).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CompanyPersonalTax).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Dept).HasMaxLength(200);

                entity.Property(e => e.DeptCode).HasMaxLength(200);

                entity.Property(e => e.DisPatchUnit).HasMaxLength(50);

                entity.Property(e => e.Editor).HasMaxLength(100);

                entity.Property(e => e.FengXianJin).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FixWages).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ForthAwardMoney).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FuLi).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.GongJiJinGuiShu).HasMaxLength(100);

                entity.Property(e => e.HolidaySubsidies).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.HrshuiHouKouKuan)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("HRShuiHouKouKuan");

                entity.Property(e => e.HuiFei).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdentityId).HasMaxLength(200);

                entity.Property(e => e.JiXiaoGongZi).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.JiaBanFei).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.KouKuan).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.LargeMedicalal).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Leaves).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.MedicalInsurance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.MeritPay).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.NaShuiTiaoZheng).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.NewProvidentFund).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.NewSalaryVest).HasMaxLength(100);

                entity.Property(e => e.OtherAllowance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PensionInsurance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PostAllowance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ProcessName).HasMaxLength(200);

                entity.Property(e => e.ProvidentFund).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ProvidentFundRate).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ProvidentFundRepay).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.QiTaBuTie).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.QuitFlag).HasMaxLength(50);

                entity.Property(e => e.RealWages).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Reissue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Rent).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ReservationWage).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SalaryIncrease).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SalaryVest).HasMaxLength(200);

                entity.Property(e => e.SheBaoGuiShu).HasMaxLength(100);

                entity.Property(e => e.SheBaoHeJi).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ShiFaGongZi).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ShuiHouKouKuan).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SpecialAllowance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SpecialDebit).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TotalDebit).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TransportSubsidies).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.UnemploymentInsurance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.UserName).HasMaxLength(200);

                entity.Property(e => e.WageIncomTaxPable).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.WageIncomTaxPableTotal)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("WageIncomTaxPable_total");

                entity.Property(e => e.WageIncomTaxPableTotalNoDeduct)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("WageIncomTaxPable_total_NoDeduct");

                entity.Property(e => e.WagePersonalTax).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.WagePersonalTaxTotal)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("WagePersonalTax_total");

                entity.Property(e => e.WagesShould).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.WaiFuDanWei).HasMaxLength(50);

                entity.Property(e => e.WorkingMeals).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.YingFaGongZi).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ZaiGangBuTie).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ZhunYuKouChu).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<TccWagePaymentHistroy20190403>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_WagePaymentHistroy20190403");

                entity.Property(e => e.Annuity).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.AnnuityPreTax).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.BankAccount).HasMaxLength(200);

                entity.Property(e => e.BeiYongJin).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Cardholder).HasMaxLength(200);

                entity.Property(e => e.ChildDeptCode).HasMaxLength(50);

                entity.Property(e => e.ChildDeptName).HasMaxLength(100);

                entity.Property(e => e.CommunicationSubsidies).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CompanyAllowance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CompanyIncomTaxPable).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CompanyPersonalTax).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Dept).HasMaxLength(200);

                entity.Property(e => e.DeptCode).HasMaxLength(200);

                entity.Property(e => e.DisPatchUnit).HasMaxLength(50);

                entity.Property(e => e.Editor).HasMaxLength(100);

                entity.Property(e => e.FengXianJin).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FixWages).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ForthAwardMoney).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FuLi).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.GongJiJinGuiShu).HasMaxLength(100);

                entity.Property(e => e.HolidaySubsidies).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.HrshuiHouKouKuan)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("HRShuiHouKouKuan");

                entity.Property(e => e.HuiFei).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdentityId).HasMaxLength(200);

                entity.Property(e => e.JiXiaoGongZi).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.JiaBanFei).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.KouKuan).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.LargeMedicalal).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Leaves).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.MedicalInsurance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.MeritPay).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.NaShuiTiaoZheng).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.NewProvidentFund).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.NewSalaryVest).HasMaxLength(100);

                entity.Property(e => e.OtherAllowance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PensionInsurance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PostAllowance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ProcessName).HasMaxLength(200);

                entity.Property(e => e.ProvidentFund).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ProvidentFundRate).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ProvidentFundRepay).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.QiTaBuTie).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.QuitFlag).HasMaxLength(50);

                entity.Property(e => e.RealWages).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Reissue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Rent).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ReservationWage).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SalaryIncrease).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SalaryVest).HasMaxLength(200);

                entity.Property(e => e.SheBaoGuiShu).HasMaxLength(100);

                entity.Property(e => e.SheBaoHeJi).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ShiFaGongZi).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ShuiHouKouKuan).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SpecialAllowance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SpecialDebit).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TotalDebit).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TransportSubsidies).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.UnemploymentInsurance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.UserName).HasMaxLength(200);

                entity.Property(e => e.WageIncomTaxPable).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.WageIncomTaxPableTotal)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("WageIncomTaxPable_total");

                entity.Property(e => e.WageIncomTaxPableTotalNoDeduct)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("WageIncomTaxPable_total_NoDeduct");

                entity.Property(e => e.WagePersonalTax).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.WagePersonalTaxTotal)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("WagePersonalTax_total");

                entity.Property(e => e.WagesShould).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.WaiFuDanWei).HasMaxLength(50);

                entity.Property(e => e.WorkingMeals).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.YingFaGongZi).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ZaiGangBuTie).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ZhunYuKouChu).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<TccWagePaymentHistroy20190506>(entity =>
            {
                entity.ToTable("TCC_WagePaymentHistroy20190506");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Annuity).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.AnnuityPreTax).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.BankAccount).HasMaxLength(200);

                entity.Property(e => e.BeiYongJin).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Cardholder).HasMaxLength(200);

                entity.Property(e => e.ChildDeptCode).HasMaxLength(50);

                entity.Property(e => e.ChildDeptName).HasMaxLength(100);

                entity.Property(e => e.CommunicationSubsidies).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CompanyAllowance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CompanyIncomTaxPable).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CompanyPersonalTax).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Dept).HasMaxLength(200);

                entity.Property(e => e.DeptCode).HasMaxLength(200);

                entity.Property(e => e.DisPatchUnit).HasMaxLength(50);

                entity.Property(e => e.Editor).HasMaxLength(100);

                entity.Property(e => e.FengXianJin).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FixWages).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ForthAwardMoney).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FuLi).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.GongJiJinGuiShu).HasMaxLength(100);

                entity.Property(e => e.HolidaySubsidies).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.HrshuiHouKouKuan)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("HRShuiHouKouKuan");

                entity.Property(e => e.HuiFei).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.IdentityId).HasMaxLength(200);

                entity.Property(e => e.JiXiaoGongZi).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.JiaBanFei).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.KouKuan).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.LargeMedicalal).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Leaves).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.MedicalInsurance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.MeritPay).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.NaShuiTiaoZheng).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.NewProvidentFund).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.NewSalaryVest).HasMaxLength(100);

                entity.Property(e => e.OtherAllowance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PensionInsurance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PostAllowance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ProcessName).HasMaxLength(200);

                entity.Property(e => e.ProvidentFund).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ProvidentFundRate).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ProvidentFundRepay).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.QiTaBuTie).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.QuitFlag).HasMaxLength(50);

                entity.Property(e => e.RealWages).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Reissue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Rent).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ReservationWage).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SalaryIncrease).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SalaryVest).HasMaxLength(200);

                entity.Property(e => e.SheBaoGuiShu).HasMaxLength(100);

                entity.Property(e => e.SheBaoHeJi).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ShiFaGongZi).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ShuiHouKouKuan).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SpecialAllowance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SpecialDebit).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TotalDebit).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TransportSubsidies).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.UnemploymentInsurance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.UserName).HasMaxLength(200);

                entity.Property(e => e.WageIncomTaxPable).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.WageIncomTaxPableTotal)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("WageIncomTaxPable_total");

                entity.Property(e => e.WageIncomTaxPableTotalNoDeduct)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("WageIncomTaxPable_total_NoDeduct");

                entity.Property(e => e.WagePersonalTax).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.WagePersonalTaxTotal)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("WagePersonalTax_total");

                entity.Property(e => e.WagesShould).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.WaiFuDanWei).HasMaxLength(50);

                entity.Property(e => e.WorkingMeals).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.YingFaGongZi).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ZaiGangBuTie).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ZhunYuKouChu).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<TccWagePaymentHistroy20191021>(entity =>
            {
                entity.ToTable("TCC_WagePaymentHistroy20191021");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Annuity).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.AnnuityPreTax).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.BankAccount).HasMaxLength(200);

                entity.Property(e => e.BeiYongJin).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Cardholder).HasMaxLength(200);

                entity.Property(e => e.ChildDeptCode).HasMaxLength(50);

                entity.Property(e => e.ChildDeptName).HasMaxLength(100);

                entity.Property(e => e.CommunicationSubsidies).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CompanyAllowance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CompanyIncomTaxPable).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CompanyPersonalTax).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Dept).HasMaxLength(200);

                entity.Property(e => e.DeptCode).HasMaxLength(200);

                entity.Property(e => e.DisPatchUnit).HasMaxLength(50);

                entity.Property(e => e.Editor).HasMaxLength(100);

                entity.Property(e => e.FengXianJin).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FixWages).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ForthAwardMoney).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FuLi).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.GongJiJinGuiShu).HasMaxLength(100);

                entity.Property(e => e.HolidaySubsidies).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.HrshuiHouKouKuan)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("HRShuiHouKouKuan");

                entity.Property(e => e.HuiFei).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.IdentityId).HasMaxLength(200);

                entity.Property(e => e.JiXiaoGongZi).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.JiaBanFei).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.KouKuan).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.LargeMedicalal).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Leaves).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.MedicalInsurance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.MeritPay).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.NaShuiTiaoZheng).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.NewProvidentFund).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.NewSalaryVest).HasMaxLength(100);

                entity.Property(e => e.OtherAllowance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PensionInsurance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PostAllowance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ProcessName).HasMaxLength(200);

                entity.Property(e => e.ProvidentFund).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ProvidentFundRate).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ProvidentFundRepay).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.QiTaBuTie).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.QuitFlag).HasMaxLength(50);

                entity.Property(e => e.RealWages).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Reissue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Rent).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ReservationWage).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SalaryIncrease).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SalaryVest).HasMaxLength(200);

                entity.Property(e => e.SheBaoGuiShu).HasMaxLength(100);

                entity.Property(e => e.SheBaoHeJi).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ShiFaGongZi).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ShuiHouKouKuan).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SpecialAllowance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SpecialDebit).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TotalDebit).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TransportSubsidies).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.UnemploymentInsurance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.UserName).HasMaxLength(200);

                entity.Property(e => e.WageIncomTaxPable).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.WageIncomTaxPableTotal)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("WageIncomTaxPable_total");

                entity.Property(e => e.WageIncomTaxPableTotalNoDeduct)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("WageIncomTaxPable_total_NoDeduct");

                entity.Property(e => e.WagePersonalTax).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.WagePersonalTaxTotal)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("WagePersonalTax_total");

                entity.Property(e => e.WagesShould).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.WaiFuDanWei).HasMaxLength(50);

                entity.Property(e => e.WorkingMeals).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.YingFaGongZi).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ZaiGangBuTie).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ZhunYuKouChu).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<TccWagePaymentHistroy20191210>(entity =>
            {
                entity.ToTable("TCC_WagePaymentHistroy20191210");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Annuity).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.AnnuityPreTax).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.BankAccount).HasMaxLength(200);

                entity.Property(e => e.BeiYongJin).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Cardholder).HasMaxLength(200);

                entity.Property(e => e.ChildDeptCode).HasMaxLength(50);

                entity.Property(e => e.ChildDeptName).HasMaxLength(100);

                entity.Property(e => e.CommunicationSubsidies).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CompanyAllowance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CompanyIncomTaxPable).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CompanyPersonalTax).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Dept).HasMaxLength(200);

                entity.Property(e => e.DeptCode).HasMaxLength(200);

                entity.Property(e => e.DisPatchUnit).HasMaxLength(50);

                entity.Property(e => e.Editor).HasMaxLength(100);

                entity.Property(e => e.FengXianJin).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FixWages).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ForthAwardMoney).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FuLi).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.GongJiJinGuiShu).HasMaxLength(100);

                entity.Property(e => e.HolidaySubsidies).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.HrshuiHouKouKuan)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("HRShuiHouKouKuan");

                entity.Property(e => e.HuiFei).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.IdentityId).HasMaxLength(200);

                entity.Property(e => e.JiXiaoGongZi).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.JiaBanFei).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.KouKuan).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.LargeMedicalal).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Leaves).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.MedicalInsurance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.MeritPay).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.NaShuiTiaoZheng).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.NewProvidentFund).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.NewSalaryVest).HasMaxLength(100);

                entity.Property(e => e.OtherAllowance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PensionInsurance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PostAllowance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ProcessName).HasMaxLength(200);

                entity.Property(e => e.ProvidentFund).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ProvidentFundRate).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ProvidentFundRepay).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.QiTaBuTie).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.QuitFlag).HasMaxLength(50);

                entity.Property(e => e.RealWages).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Reissue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Rent).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ReservationWage).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SalaryIncrease).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SalaryVest).HasMaxLength(200);

                entity.Property(e => e.SheBaoGuiShu).HasMaxLength(100);

                entity.Property(e => e.SheBaoHeJi).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ShiFaGongZi).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ShuiHouKouKuan).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SpecialAllowance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SpecialDebit).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TotalDebit).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TransportSubsidies).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.UnemploymentInsurance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.UserName).HasMaxLength(200);

                entity.Property(e => e.WageIncomTaxPable).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.WageIncomTaxPableTotal)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("WageIncomTaxPable_total");

                entity.Property(e => e.WageIncomTaxPableTotalNoDeduct)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("WageIncomTaxPable_total_NoDeduct");

                entity.Property(e => e.WagePersonalTax).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.WagePersonalTaxTotal)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("WagePersonalTax_total");

                entity.Property(e => e.WagesShould).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.WaiFuDanWei).HasMaxLength(50);

                entity.Property(e => e.WorkingMeals).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.YingFaGongZi).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ZaiGangBuTie).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ZhunYuKouChu).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<TccWagePaymentHistroy20191224>(entity =>
            {
                entity.ToTable("TCC_WagePaymentHistroy20191224");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Annuity).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.AnnuityPreTax).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.BankAccount).HasMaxLength(200);

                entity.Property(e => e.BeiYongJin).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Cardholder).HasMaxLength(200);

                entity.Property(e => e.ChildDeptCode).HasMaxLength(50);

                entity.Property(e => e.ChildDeptName).HasMaxLength(100);

                entity.Property(e => e.CommunicationSubsidies).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CompanyAllowance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CompanyIncomTaxPable).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CompanyPersonalTax).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Dept).HasMaxLength(200);

                entity.Property(e => e.DeptCode).HasMaxLength(200);

                entity.Property(e => e.DisPatchUnit).HasMaxLength(50);

                entity.Property(e => e.Editor).HasMaxLength(100);

                entity.Property(e => e.FengXianJin).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FixWages).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ForthAwardMoney).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FuLi).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.GongJiJinGuiShu).HasMaxLength(100);

                entity.Property(e => e.HolidaySubsidies).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.HrshuiHouKouKuan)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("HRShuiHouKouKuan");

                entity.Property(e => e.HuiFei).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.IdentityId).HasMaxLength(200);

                entity.Property(e => e.JiXiaoGongZi).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.JiaBanFei).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.KouKuan).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.LargeMedicalal).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Leaves).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.MedicalInsurance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.MeritPay).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.NaShuiTiaoZheng).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.NewProvidentFund).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.NewSalaryVest).HasMaxLength(100);

                entity.Property(e => e.OtherAllowance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PensionInsurance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PostAllowance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ProcessName).HasMaxLength(200);

                entity.Property(e => e.ProvidentFund).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ProvidentFundRate).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ProvidentFundRepay).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.QiTaBuTie).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.QuitFlag).HasMaxLength(50);

                entity.Property(e => e.RealWages).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Reissue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Rent).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ReservationWage).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SalaryIncrease).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SalaryVest).HasMaxLength(200);

                entity.Property(e => e.SheBaoGuiShu).HasMaxLength(100);

                entity.Property(e => e.SheBaoHeJi).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ShiFaGongZi).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ShuiHouKouKuan).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SpecialAllowance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SpecialDebit).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TotalDebit).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TransportSubsidies).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.UnemploymentInsurance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.UserName).HasMaxLength(200);

                entity.Property(e => e.WageIncomTaxPable).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.WageIncomTaxPableTotal)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("WageIncomTaxPable_total");

                entity.Property(e => e.WageIncomTaxPableTotalNoDeduct)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("WageIncomTaxPable_total_NoDeduct");

                entity.Property(e => e.WagePersonalTax).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.WagePersonalTaxTotal)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("WagePersonalTax_total");

                entity.Property(e => e.WagesShould).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.WaiFuDanWei).HasMaxLength(50);

                entity.Property(e => e.WorkingMeals).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.YingFaGongZi).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ZaiGangBuTie).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ZhunYuKouChu).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<TccWagePaymentProcess>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_WagePaymentProcess");

                entity.Property(e => e.ApplyCategory).HasMaxLength(10);

                entity.Property(e => e.ApplyDate).HasColumnType("datetime");

                entity.Property(e => e.ApplyDeptCode).HasMaxLength(100);

                entity.Property(e => e.ApplyDeptName).HasMaxLength(200);

                entity.Property(e => e.ApplyUserLoginName).HasMaxLength(100);

                entity.Property(e => e.ApplyUserName).HasMaxLength(100);

                entity.Property(e => e.AssignUserIdentity).HasMaxLength(50);

                entity.Property(e => e.AssignUserLoginName).HasMaxLength(50);

                entity.Property(e => e.AssignUserRealName).HasMaxLength(100);

                entity.Property(e => e.AwardAlreadyPay).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.AwardBudget).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.AwardCategory).HasMaxLength(50);

                entity.Property(e => e.AwardRemaining).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.AwardsContentSummary).HasMaxLength(500);

                entity.Property(e => e.FormNumber).HasMaxLength(20);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdentityId).HasMaxLength(200);

                entity.Property(e => e.IncludeOvertime).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ProcessFinishDate).HasColumnType("datetime");

                entity.Property(e => e.ProcessName).HasMaxLength(200);

                entity.Property(e => e.WealCode).HasMaxLength(50);

                entity.Property(e => e.WealName).HasMaxLength(100);

                entity.Property(e => e.WealSummary).HasMaxLength(4000);

                entity.Property(e => e.Year).HasColumnName("YEAR");
            });

            modelBuilder.Entity<TccWagePaymentProcess20191210>(entity =>
            {
                entity.ToTable("TCC_WagePaymentProcess20191210");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.ApplyCategory)
                    .HasMaxLength(10)
                    .HasComment("管理人员奖时用到此字段  用于表示是为人申请的还是为部门申请的");

                entity.Property(e => e.ApplyDate)
                    .HasColumnType("datetime")
                    .HasComment("申请日期");

                entity.Property(e => e.ApplyDeptCode)
                    .HasMaxLength(100)
                    .HasComment("主管部门编号");

                entity.Property(e => e.ApplyDeptName)
                    .HasMaxLength(200)
                    .HasComment("主管部门");

                entity.Property(e => e.ApplyUserLoginName)
                    .HasMaxLength(100)
                    .HasComment("申请人帐号");

                entity.Property(e => e.ApplyUserName)
                    .HasMaxLength(100)
                    .HasComment("申请人姓名");

                entity.Property(e => e.AssignUserIdentity)
                    .HasMaxLength(50)
                    .HasComment("发放人身份证号（目前只有其它中的其它奖用到）");

                entity.Property(e => e.AssignUserLoginName)
                    .HasMaxLength(50)
                    .HasComment("发放人登录账号（目前只有其它中的其它奖用到）");

                entity.Property(e => e.AssignUserRealName)
                    .HasMaxLength(100)
                    .HasComment("发放人真实姓名（目前只有其它中的其它奖用到）");

                entity.Property(e => e.AwardAlreadyPay)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("已发放奖金");

                entity.Property(e => e.AwardBudget)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("奖金预算");

                entity.Property(e => e.AwardCategory)
                    .HasMaxLength(50)
                    .HasComment("奖项编号");

                entity.Property(e => e.AwardRemaining)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("剩余奖金");

                entity.Property(e => e.AwardsContentSummary)
                    .HasMaxLength(500)
                    .HasComment("奖项内容摘要 （目前只有其它中的其它奖用到）");

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(20)
                    .HasComment("表单编号");

                entity.Property(e => e.IdentityId)
                    .HasMaxLength(200)
                    .HasComment("身份证号");

                entity.Property(e => e.IncidentNo)
                    .HasDefaultValueSql("((0))")
                    .HasComment("实例号");

                entity.Property(e => e.IncludeOvertime)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("其中加班工时奖（目前只有管理人员奖使用）");

                entity.Property(e => e.Month).HasComment("发放月份");

                entity.Property(e => e.PaymentType).HasComment("类型选择");

                entity.Property(e => e.ProcessFinishDate)
                    .HasColumnType("datetime")
                    .HasComment("流程归档时间");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(200)
                    .HasComment("流程名");

                entity.Property(e => e.Status)
                    .HasDefaultValueSql("((0))")
                    .HasComment("流程状态");

                entity.Property(e => e.WealCode)
                    .HasMaxLength(50)
                    .HasComment("福利名称 编号");

                entity.Property(e => e.WealName)
                    .HasMaxLength(50)
                    .HasComment("福利名称 编号");

                entity.Property(e => e.WealSummary)
                    .HasMaxLength(4000)
                    .HasComment("福利 摘要");
            });

            modelBuilder.Entity<TccWagePaymentProcessDeptAssign>(entity =>
            {
                entity.ToTable("TCC_WagePaymentProcess_DeptAssign");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Adjustment)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("调整系数");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("奖金额");

                entity.Property(e => e.AnnualAssessmentFactor)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("年度考核系数");

                entity.Property(e => e.AssignFromDept)
                    .HasMaxLength(50)
                    .HasComment("是由哪个部门分配(部门编号)");

                entity.Property(e => e.AssignFromDeptName)
                    .HasMaxLength(200)
                    .HasComment("是由哪个部门分配(部门名称)");

                entity.Property(e => e.AssignFromUser)
                    .HasMaxLength(50)
                    .HasComment("是由哪个人分配的(登录名称)");

                entity.Property(e => e.AssignFromUserIdentity)
                    .HasMaxLength(50)
                    .HasComment("是由哪个人分配的(身份证号)");

                entity.Property(e => e.AssignFromUserRealName)
                    .HasMaxLength(50)
                    .HasComment("是由哪个人分配的(真实姓名)");

                entity.Property(e => e.AwardBase)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("奖金基数");

                entity.Property(e => e.AwardCategory)
                    .HasMaxLength(50)
                    .HasComment("奖项编号");

                entity.Property(e => e.CanAssign)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("(N'N')")
                    .HasComment("此行奖金是否可以进行分配 （默认值为N）   Y=可以分配   N=不可以分配   在此表中 Y表示已分配完成 N表示已保存但还未提交");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .HasComment("接收人所在主管部门编号");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(200)
                    .HasComment("接收人所在主管部门名称");

                entity.Property(e => e.IncidentNo).HasComment("实例号");

                entity.Property(e => e.IsFanPin)
                    .HasMaxLength(10)
                    .HasComment("是否返聘  Y=是 N=否");

                entity.Property(e => e.LoadFactor)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("负荷系数");

                entity.Property(e => e.PersonLoginName)
                    .HasMaxLength(50)
                    .HasComment("接收人登录名");

                entity.Property(e => e.PersonRealName)
                    .HasMaxLength(50)
                    .HasComment("接收人姓名");

                entity.Property(e => e.PostFactor)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("岗位系数");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(500)
                    .HasComment("流程名");

                entity.Property(e => e.ReceiverDate)
                    .HasColumnType("datetime")
                    .HasComment("奖金接收时间");

                entity.Property(e => e.UserIdentity)
                    .HasMaxLength(50)
                    .HasComment("接收人身份证号");
            });

            modelBuilder.Entity<TccWagePaymentProcessDeptLine>(entity =>
            {
                entity.ToTable("TCC_WagePaymentProcess_DeptLines");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Adjustment)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("调整系数");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("奖金额");

                entity.Property(e => e.AnnualAssessmentFactor)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("年度考核系数");

                entity.Property(e => e.AssignDate)
                    .HasColumnType("datetime")
                    .HasComment("分配时间");

                entity.Property(e => e.AssignStatus)
                    .HasDefaultValueSql("((1))")
                    .HasComment("分配状态 1=未分配 2=已分配");

                entity.Property(e => e.AwardBase)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("奖金基数");

                entity.Property(e => e.AwardCategory).HasMaxLength(50);

                entity.Property(e => e.CanAssign)
                    .HasMaxLength(10)
                    .HasComment("此项奖金是否可以进行分配 （默认值为N）   Y=可以分配   N=不可以分配 ");

                entity.Property(e => e.CurrentQcompletedWork)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("CurrentQCompletedWork")
                    .HasComment("本季度完成工作量");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .HasComment("主管部门编号");

                entity.Property(e => e.DeptManagerIdentity)
                    .HasMaxLength(50)
                    .HasComment("部门负责人 身份证号");

                entity.Property(e => e.DeptManagerLoginName)
                    .HasMaxLength(50)
                    .HasComment("部门负责人登录账号");

                entity.Property(e => e.DeptManagerRealName)
                    .HasMaxLength(50)
                    .HasComment("部门负责人 姓名");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(200)
                    .HasComment("主管部门名称");

                entity.Property(e => e.LoadFactor)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("负荷系数");

                entity.Property(e => e.PersonCount).HasComment("人数");

                entity.Property(e => e.PostFactor)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("岗位系数");

                entity.Property(e => e.ProcessName).HasMaxLength(200);

                entity.Property(e => e.ReceiverDate)
                    .HasColumnType("datetime")
                    .HasComment("奖金接收时间");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName");
            });

            modelBuilder.Entity<TccWagePaymentProcessPersonLine>(entity =>
            {
                entity.ToTable("TCC_WagePaymentProcess_PersonLines");

                entity.HasIndex(e => new { e.AwardCategory, e.CanAssign, e.Post }, "IX_AutoGen_20140724_2746");

                entity.HasIndex(e => new { e.ProcessName, e.IncidentNo, e.CanAssign, e.AwardCategory, e.ReceiverDate }, "IX_AutoGen_20140724_3794");

                entity.HasIndex(e => new { e.ProcessName, e.IncidentNo, e.AwardCategory, e.CanAssign, e.ReceiverDate }, "IX_AutoGen_20140724_3796");

                entity.HasIndex(e => new { e.ProcessName, e.IncidentNo, e.RequestLoginName, e.AwardCategory }, "IX_AutoGen_20140724_402");

                entity.HasIndex(e => new { e.AwardCategory, e.CanAssign, e.ReceiverDate }, "IX_AutoGen_20140724_5398");

                entity.HasIndex(e => new { e.AwardCategory, e.CanAssign, e.ReceiverDate }, "IX_AutoGen_20140724_5401");

                entity.HasIndex(e => new { e.AwardCategory, e.Post }, "IX_AutoGen_20140724_6411");

                entity.HasIndex(e => new { e.IncidentNo, e.AwardCategory, e.UserIdentity, e.Post }, "IX_AutoGen_20140724_6418");

                entity.HasIndex(e => new { e.CanAssign, e.AwardCategory, e.ReceiverDate }, "IX_AutoGen_20140724_8735");

                entity.HasIndex(e => new { e.AwardCategory, e.CanAssign, e.ReceiverDate }, "IX_AutoGen_20140724_8737");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Adjustment)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("调整系数");

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AnnualAssessment)
                    .HasMaxLength(10)
                    .HasComment("年度考核   只有三个值 （优、优良、良）");

                entity.Property(e => e.AnnualAssessmentFactor)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("年度考核 系数");

                entity.Property(e => e.AssessmentFactor)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("考核系数（年终嘉奖选择员工时用到）");

                entity.Property(e => e.AwardAssignFlag)
                    .HasMaxLength(50)
                    .HasComment("奖金发放标识");

                entity.Property(e => e.AwardBase)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("奖金基数");

                entity.Property(e => e.AwardCategory)
                    .HasMaxLength(50)
                    .HasComment("奖项编号");

                entity.Property(e => e.CanAssign)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("(N'N')")
                    .HasComment("是否可以分配  Y=是  N=否 ");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .HasComment("主管部门编号");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(200)
                    .HasComment("主管部门名称");

                entity.Property(e => e.FixWages)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("固定工资");

                entity.Property(e => e.IsFanPin)
                    .HasMaxLength(10)
                    .HasComment("是否为返聘  Y=是  N=否");

                entity.Property(e => e.LoadFactor)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("负荷 系数");

                entity.Property(e => e.OverTimeDescription).HasComment("描述");

                entity.Property(e => e.OverTimeHours)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("加班工时");

                entity.Property(e => e.OverTimeReasons).HasComment("加班事由");

                entity.Property(e => e.PersonCategory)
                    .HasMaxLength(50)
                    .HasComment("人员类型  （中层或员工） 目前只有年终嘉奖 用到此字段");

                entity.Property(e => e.PersonLoginName)
                    .HasMaxLength(50)
                    .HasComment("人员登录名");

                entity.Property(e => e.PersonRealName)
                    .HasMaxLength(50)
                    .HasComment("人员真实姓名");

                entity.Property(e => e.Post)
                    .HasMaxLength(50)
                    .HasComment("岗位");

                entity.Property(e => e.PostAllowance)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("岗位津贴");

                entity.Property(e => e.PostFactor)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("岗位系数");

                entity.Property(e => e.PostLevelCode)
                    .HasMaxLength(50)
                    .HasComment("岗位级别编号  目前只有年终嘉奖用到");

                entity.Property(e => e.PostLevelName)
                    .HasMaxLength(50)
                    .HasComment("岗位级别名称");

                entity.Property(e => e.ProcessName).HasMaxLength(200);

                entity.Property(e => e.ReceiverDate)
                    .HasColumnType("datetime")
                    .HasComment("个人接收奖金时间（申请人奖金明细确认节点审批完成时间）");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName")
                    .HasComment("流程申请人登录账号");

                entity.Property(e => e.UserIdentity)
                    .HasMaxLength(50)
                    .HasComment("身份证号");
            });

            modelBuilder.Entity<TccWagePaymentQscore>(entity =>
            {
                entity.ToTable("TCC_WagePaymentQScore");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.DeptCode).HasMaxLength(100);

                entity.Property(e => e.DeptName).HasMaxLength(100);

                entity.Property(e => e.ProcessName).HasMaxLength(100);

                entity.Property(e => e.Q1).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Q2).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Q3).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Q4).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

                entity.Property(e => e.UserLoginName).HasMaxLength(100);

                entity.Property(e => e.UserName).HasMaxLength(100);
            });

            modelBuilder.Entity<TccWagePaymentReportMonthVoucher>(entity =>
            {
                entity.ToTable("TCC_WagePaymentReport_MonthVoucher");

                entity.HasIndex(e => new { e.Year, e.Month, e.NewSalaryVest, e.Flag, e.Type }, "IX_AutoGen_20140724_7402");

                entity.Property(e => e.Id).HasComment("主键");

                entity.Property(e => e.Annuity)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("企业年金（个人）");

                entity.Property(e => e.Auditor)
                    .HasMaxLength(50)
                    .HasComment("审核人");

                entity.Property(e => e.Checker)
                    .HasMaxLength(50)
                    .HasComment("复核人");

                entity.Property(e => e.CompanyAllowance)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("企工补");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasComment("创建时间");

                entity.Property(e => e.Creatior)
                    .HasMaxLength(50)
                    .HasComment("创建人");

                entity.Property(e => e.Dept)
                    .HasMaxLength(200)
                    .HasComment("主管部门");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(200)
                    .HasComment("主管部门编号");

                entity.Property(e => e.FixWages)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("固定工资");

                entity.Property(e => e.Flag).HasComment("1:个人;2:单位");

                entity.Property(e => e.IdentityId)
                    .HasMaxLength(200)
                    .HasComment("身份证");

                entity.Property(e => e.Insurance)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("社保（个人）");

                entity.Property(e => e.JiXiaoGongZi)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("绩效工资");

                entity.Property(e => e.Leaves)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("病事假");

                entity.Property(e => e.Lister)
                    .HasMaxLength(50)
                    .HasComment("制表人");

                entity.Property(e => e.Month).HasComment("月份");

                entity.Property(e => e.NewSalaryVest)
                    .HasMaxLength(100)
                    .HasComment("薪资发放编码　");

                entity.Property(e => e.NewSalaryVestOld)
                    .HasMaxLength(100)
                    .HasComment("薪资发放原编号");

                entity.Property(e => e.NewSalaryVestText)
                    .HasMaxLength(100)
                    .HasComment("薪资发放");

                entity.Property(e => e.OtherAllowance)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("其他补贴");

                entity.Property(e => e.PostAllowance)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("岗位津贴");

                entity.Property(e => e.ProvidentFund)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("公积金（个人）");

                entity.Property(e => e.RealWages)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("实发工资");

                entity.Property(e => e.Reissue)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("补发");

                entity.Property(e => e.ReservationWage)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("保留工资");

                entity.Property(e => e.SalaryIncrease)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("年度加薪");

                entity.Property(e => e.SpecialAllowance)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("特殊津贴");

                entity.Property(e => e.SpecialDebit)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("特殊扣款");

                entity.Property(e => e.Type).HasComment("1:合计;2:记录");

                entity.Property(e => e.UserName)
                    .HasMaxLength(200)
                    .HasComment("用户名称");

                entity.Property(e => e.VoucherNumber)
                    .HasMaxLength(100)
                    .HasComment("凭证号");

                entity.Property(e => e.WagesShould)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("应发工资");

                entity.Property(e => e.Year).HasComment("年份");

                entity.Property(e => e.ZaiGangBuTie)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("在岗补贴");
            });

            modelBuilder.Entity<TccWageRecordPackage>(entity =>
            {
                entity.ToTable("TCC_WageRecordPackage");

                entity.HasIndex(e => new { e.Month, e.Year }, "IX_AutoGen_20140724_21292");

                entity.HasIndex(e => new { e.Month, e.Year, e.NewSalaryVest }, "IX_AutoGen_20140724_4429");

                entity.HasIndex(e => new { e.Month, e.Year }, "IX_AutoGen_20140724_566");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Money)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Month).HasComment("月份");

                entity.Property(e => e.NewSalaryVest).HasMaxLength(100);

                entity.Property(e => e.UserIdentityId)
                    .HasMaxLength(100)
                    .HasComment("身份证");

                entity.Property(e => e.Year).HasComment("年度");
            });

            modelBuilder.Entity<TccWarningMessageAuto>(entity =>
            {
                entity.ToTable("TCC_WarningMessage_Auto");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.GrtLtCode).HasMaxLength(200);

                entity.Property(e => e.IsSend)
                    .HasDefaultValueSql("((2))")
                    .HasComment("是否已发送  2 未发送   1  已发送");

                entity.Property(e => e.MessageName).HasMaxLength(200);

                entity.Property(e => e.MsgTitle).HasMaxLength(2000);

                entity.Property(e => e.ReceiveUser).HasMaxLength(50);

                entity.Property(e => e.SendDate).HasColumnType("datetime");

                entity.Property(e => e.Thirdpartyid)
                    .HasMaxLength(500)
                    .HasColumnName("thirdpartyid");

                entity.Property(e => e.Title)
                    .HasMaxLength(2000)
                    .HasColumnName("title");
            });

            modelBuilder.Entity<TccWealPaymentHistroy>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TCC_WealPaymentHistroy");

                entity.Property(e => e.Amount).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ApplyUserLoginName).HasMaxLength(50);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.DeptCode).HasMaxLength(50);

                entity.Property(e => e.DeptName).HasMaxLength(200);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IsFanPin).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(200);

                entity.Property(e => e.UserIdentity).HasMaxLength(200);

                entity.Property(e => e.UserLoginName).HasMaxLength(50);

                entity.Property(e => e.UserRealName).HasMaxLength(200);
            });

            modelBuilder.Entity<TccWealPaymentHistroy20191210>(entity =>
            {
                entity.ToTable("TCC_WealPaymentHistroy20191210");

                entity.HasComment("用于工资发放流程中福利发放部分");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasComment("主键");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("金额");

                entity.Property(e => e.ApplyUserLoginName)
                    .HasMaxLength(50)
                    .HasComment("流程申请人");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("产生日期  数据上传的时间");

                entity.Property(e => e.DeptCode).HasMaxLength(50);

                entity.Property(e => e.DeptName)
                    .HasMaxLength(200)
                    .HasComment("主管部门");

                entity.Property(e => e.IncidentNo)
                    .HasDefaultValueSql("((0))")
                    .HasComment("实例号");

                entity.Property(e => e.IsFanPin)
                    .HasMaxLength(50)
                    .HasComment("N=在职库人员   Y=离退库人咒");

                entity.Property(e => e.IsGrant)
                    .HasDefaultValueSql("((0))")
                    .HasComment("发放状态     \r\n0 = 未发放  \r\n1 = 已发放\r\n2 = 已入账\r\n3 = 已结转");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(200)
                    .HasComment("流程名");

                entity.Property(e => e.SendedMonth)
                    .HasDefaultValueSql("((0))")
                    .HasComment("随哪个月工资发放");

                entity.Property(e => e.SendedYear).HasDefaultValueSql("((0))");

                entity.Property(e => e.Status)
                    .HasDefaultValueSql("((0))")
                    .HasComment("状态  ");

                entity.Property(e => e.UserIdentity)
                    .HasMaxLength(200)
                    .HasComment("身份证号");

                entity.Property(e => e.UserLoginName).HasMaxLength(50);

                entity.Property(e => e.UserRealName)
                    .HasMaxLength(200)
                    .HasComment("姓名");

                entity.Property(e => e.WealFlag).HasComment("工资发放标识");
            });

            modelBuilder.Entity<TccWinBiddingBonusDeptAssign>(entity =>
            {
                entity.ToTable("TCC_WinBiddingBonus_DeptAssign");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("奖金额");

                entity.Property(e => e.AssignFromDept)
                    .HasMaxLength(50)
                    .HasComment("分配部门编号");

                entity.Property(e => e.AssignFromDeptName)
                    .HasMaxLength(50)
                    .HasComment("分配部门名称");

                entity.Property(e => e.AssignFromUser)
                    .HasMaxLength(50)
                    .HasComment("分配人");

                entity.Property(e => e.AssignFromUserIdentity)
                    .HasMaxLength(50)
                    .HasComment("分配人身份证号");

                entity.Property(e => e.AssignFromUserRealName)
                    .HasMaxLength(50)
                    .HasComment("分配人真实姓名");

                entity.Property(e => e.AwardCategory)
                    .HasMaxLength(50)
                    .HasComment("奖项编号");

                entity.Property(e => e.CanAssign)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("(N'N')")
                    .HasComment("是否可分配  Y = 是  N = 否 (Y表示部门负责人已经分配完成且已提交 )");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .HasComment("接收人所在主管部门编号");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(200)
                    .HasComment("接收人所在主管部门名称");

                entity.Property(e => e.Incident).HasComment("实例号");

                entity.Property(e => e.IsFanPin)
                    .HasMaxLength(10)
                    .HasComment("是否为返聘人员 （Y=是 N=否）");

                entity.Property(e => e.PersonLoginName)
                    .HasMaxLength(50)
                    .HasComment("接收人登录名");

                entity.Property(e => e.PersonRealName)
                    .HasMaxLength(50)
                    .HasComment("接收人真实姓名");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(500)
                    .HasComment("流程名");

                entity.Property(e => e.ReceiverDate)
                    .HasColumnType("datetime")
                    .HasComment("接收时间");

                entity.Property(e => e.UserIdentity)
                    .HasMaxLength(50)
                    .HasComment("接收人身份证号");
            });

            modelBuilder.Entity<TccWinBiddingBonusHeader>(entity =>
            {
                entity.ToTable("TCC_WinBiddingBonus_header");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Adjustment)
                    .HasColumnType("decimal(18, 7)")
                    .HasComment("调整系数");

                entity.Property(e => e.AuditAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("核定金额");

                entity.Property(e => e.AwardAlreadyPay)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("已发放奖金额 ");

                entity.Property(e => e.AwardBudget)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("奖金预算");

                entity.Property(e => e.AwardCategory)
                    .HasMaxLength(50)
                    .HasComment("奖项编号");

                entity.Property(e => e.AwardRemaining)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("剩余奖金额 ");

                entity.Property(e => e.BidDeptAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("报价部门奖金");

                entity.Property(e => e.BidDeptAssignDate)
                    .HasColumnType("datetime")
                    .HasComment("报价部分配时间");

                entity.Property(e => e.BidDeptAssignStatus)
                    .HasDefaultValueSql("((1))")
                    .HasComment("报价部分配状态  1=未分配   2=已分配");

                entity.Property(e => e.BidDeptManager)
                    .HasMaxLength(50)
                    .HasComment("报价部部门负责人登录账号");

                entity.Property(e => e.BidDeptManagerIdentity)
                    .HasMaxLength(50)
                    .HasComment("报价部部门负责人身份证号");

                entity.Property(e => e.BidDeptManagerRealName)
                    .HasMaxLength(50)
                    .HasComment("报价部部门负责人真实姓名");

                entity.Property(e => e.BidForeignUnitAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("报价部 其中外单位金额");

                entity.Property(e => e.BidManagerAssignDate)
                    .HasColumnType("datetime")
                    .HasComment("报价项目经理分配时间");

                entity.Property(e => e.BidManagerAssignStatus).HasComment("[报价项目经理分配状态  1=未分配   2=已分配]");

                entity.Property(e => e.BidProjectCode)
                    .HasMaxLength(100)
                    .HasComment("报价项目编号  如果第四位是 R则为海外经营部 Q是国内经营部");

                entity.Property(e => e.BidProjectManager)
                    .HasMaxLength(100)
                    .HasComment("报价项目经理 登录名");

                entity.Property(e => e.BidProjectManagerIdentity)
                    .HasMaxLength(100)
                    .HasComment("报价经理身份证号");

                entity.Property(e => e.BidProjectManagerRealName)
                    .HasMaxLength(100)
                    .HasComment("报价经理真实姓名");

                entity.Property(e => e.BidProjectName)
                    .HasMaxLength(100)
                    .HasComment("报价项目名称");

                entity.Property(e => e.CanAssign).HasMaxLength(10);

                entity.Property(e => e.ChargeAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("负责人奖金");

                entity.Property(e => e.ChargingCoefficient)
                    .HasColumnType("decimal(18, 7)")
                    .HasComment("取费系数（此处数据为%格式，若要用此字段进行计算需要先除以100）");

                entity.Property(e => e.ContractPrice)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("合同额");

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(20)
                    .HasComment("表单编号");

                entity.Property(e => e.Incident).HasComment("实例号");

                entity.Property(e => e.OpDeptAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("经营部门奖金");

                entity.Property(e => e.OpDeptAssignDate)
                    .HasColumnType("datetime")
                    .HasComment("经营部分配时间");

                entity.Property(e => e.OpDeptAssignStatus)
                    .HasDefaultValueSql("((1))")
                    .HasComment("经营部分配状态   1=未分配   2=已分配");

                entity.Property(e => e.OpDeptManager)
                    .HasMaxLength(50)
                    .HasComment("经营部部门负责人登录账号");

                entity.Property(e => e.OpDeptManagerIdentity)
                    .HasMaxLength(50)
                    .HasComment("经营部部门负责人身份证号");

                entity.Property(e => e.OpDeptManagerRealName)
                    .HasMaxLength(50)
                    .HasComment("经营部部门负责人真实姓名");

                entity.Property(e => e.OpForeignUnitAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("经营部 其中外单位金额");

                entity.Property(e => e.ProcessFinishDate)
                    .HasColumnType("datetime")
                    .HasComment("流程结束时间");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(500)
                    .HasComment("流程名");

                entity.Property(e => e.ProcessStatus)
                    .HasDefaultValueSql("((0))")
                    .HasComment("流程状态  0=未完成 1= 已完成 2=已撤消");

                entity.Property(e => e.ProjectAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("项目分配额");

                entity.Property(e => e.ProjectCategory)
                    .HasMaxLength(200)
                    .HasComment("项目类型");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(100)
                    .HasComment("项目编号");

                entity.Property(e => e.ProjectForeignUnitAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("项目外单位金额");

                entity.Property(e => e.ProjectManager)
                    .HasMaxLength(100)
                    .HasComment("项目经理登录名");

                entity.Property(e => e.ProjectManagerIdentity)
                    .HasMaxLength(100)
                    .HasComment("项目经理身份证号");

                entity.Property(e => e.ProjectManagerRealName)
                    .HasMaxLength(200)
                    .HasComment("项目经理真实姓名");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(100)
                    .HasComment("项目名称");

                entity.Property(e => e.ReceiveMoney)
                    .HasColumnType("decimal(18, 4)")
                    .HasComment("已收预付款");

                entity.Property(e => e.ReceiverDate).HasColumnType("datetime");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date")
                    .HasComment("流程申请日期");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptCode")
                    .HasComment("申请人所在主管部门编号");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(200)
                    .HasColumnName("Request_DeptName")
                    .HasComment("申请人所在主管部门名称");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName")
                    .HasComment("申请人登录账号");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName")
                    .HasComment("申请人真实姓名");

                entity.Property(e => e.UserIdentity)
                    .HasMaxLength(50)
                    .HasComment("申请人身份证号");
            });

            modelBuilder.Entity<TccWinBiddingBonusLine>(entity =>
            {
                entity.ToTable("TCC_WinBiddingBonus_Lines");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Adjustment)
                    .HasColumnType("decimal(18, 7)")
                    .HasComment("调整系数");

                entity.Property(e => e.AuditAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("核定金额");

                entity.Property(e => e.AwardCategory)
                    .HasMaxLength(50)
                    .HasComment("奖项编号");

                entity.Property(e => e.BidDeptAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("报价部门奖金");

                entity.Property(e => e.BidDeptAssignDate)
                    .HasColumnType("datetime")
                    .HasComment("报价部分配时间");

                entity.Property(e => e.BidDeptAssignStatus)
                    .HasDefaultValueSql("((1))")
                    .HasComment("报价部分配状态  1=未分配   2=已分配");

                entity.Property(e => e.BidDeptManager)
                    .HasMaxLength(50)
                    .HasComment("报价部部门负责人登录账号");

                entity.Property(e => e.BidDeptManagerIdentity)
                    .HasMaxLength(50)
                    .HasComment("报价部部门负责人身份证号");

                entity.Property(e => e.BidDeptManagerRealName)
                    .HasMaxLength(50)
                    .HasComment("报价部部门负责人真实姓名");

                entity.Property(e => e.BidManagerAssignDate)
                    .HasColumnType("datetime")
                    .HasComment("报价项目经理分配时间");

                entity.Property(e => e.BidManagerAssignStatus)
                    .HasDefaultValueSql("((1))")
                    .HasComment("报价项目经理分配状态  1=未分配   2=已分配");

                entity.Property(e => e.BidProjectCode)
                    .HasMaxLength(200)
                    .HasComment("报价项目编号  如果第四位是 R则为海外经营部 Q是国内经营部");

                entity.Property(e => e.BidProjectManager)
                    .HasMaxLength(50)
                    .HasComment("报价项目经理 登录名");

                entity.Property(e => e.BidProjectManagerIdentity)
                    .HasMaxLength(50)
                    .HasComment("报价经理身份证号");

                entity.Property(e => e.BidProjectManagerRealName)
                    .HasMaxLength(50)
                    .HasComment("报价经理真实姓名");

                entity.Property(e => e.BidProjectName)
                    .HasMaxLength(500)
                    .HasComment("报价项目编号");

                entity.Property(e => e.CanAssign)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("(N'N')")
                    .HasComment("是否可分配");

                entity.Property(e => e.ChargeAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("负责人奖金");

                entity.Property(e => e.ChargingCoefficient)
                    .HasColumnType("decimal(18, 7)")
                    .HasComment("取费系数");

                entity.Property(e => e.ContractPrice)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("合同额");

                entity.Property(e => e.Incident).HasComment("实例号");

                entity.Property(e => e.OpDeptAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("经营部门奖金");

                entity.Property(e => e.OpDeptAssignDate)
                    .HasColumnType("datetime")
                    .HasComment("经营部分配时间");

                entity.Property(e => e.OpDeptAssignStatus)
                    .HasDefaultValueSql("((1))")
                    .HasComment("经营部分配状态   1=未分配   2=已分配");

                entity.Property(e => e.OpDeptManager)
                    .HasMaxLength(50)
                    .HasComment("经营部部门负责人登录账号");

                entity.Property(e => e.OpDeptManagerIdentity)
                    .HasMaxLength(50)
                    .HasComment("经营部部门负责人身份证号");

                entity.Property(e => e.OpDeptManagerRealName)
                    .HasMaxLength(50)
                    .HasComment("经营部部门负责人真实姓名");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(500)
                    .HasComment("流程名");

                entity.Property(e => e.ProjectAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("项目分配额");

                entity.Property(e => e.ProjectCategory)
                    .HasMaxLength(200)
                    .HasComment("项目类型");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(200)
                    .HasComment("项目编号");

                entity.Property(e => e.ProjectManager)
                    .HasMaxLength(50)
                    .HasComment("项目经理登录名");

                entity.Property(e => e.ProjectManagerIdentity)
                    .HasMaxLength(50)
                    .HasComment("项目经理身份证号");

                entity.Property(e => e.ProjectManagerRealName)
                    .HasMaxLength(50)
                    .HasComment("项目经理真实姓名");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(200)
                    .HasComment("项目名称");

                entity.Property(e => e.ReceiverDate)
                    .HasColumnType("datetime")
                    .HasComment("奖金接收时间 即奖金可以分配的时间");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName")
                    .HasComment("申请人登录名");

                entity.Property(e => e.RequestUserIdentity)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserIdentity")
                    .HasComment("申请人 身份证号");
            });

            modelBuilder.Entity<TccWinBiddingBonusPersonLine>(entity =>
            {
                entity.ToTable("TCC_WinBiddingBonus_PersonLines");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AuditAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("金额");

                entity.Property(e => e.AwardCategory)
                    .HasMaxLength(50)
                    .HasComment("奖项编号");

                entity.Property(e => e.CanAssign)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("(N'N')")
                    .HasComment("此行奖金是否可以进行分配 （默认值为N）   Y=可以分配   N=不可以分配 ");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .HasComment("主管部门编号");

                entity.Property(e => e.DeptManagerIdentity)
                    .HasMaxLength(50)
                    .HasComment("部门负责人 身份证号");

                entity.Property(e => e.DeptManagerLoginName)
                    .HasMaxLength(50)
                    .HasComment("部门负责人登录账号");

                entity.Property(e => e.DeptManagerRealName)
                    .HasMaxLength(50)
                    .HasComment("部门负责人真实姓名");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(200)
                    .HasComment("主管部门名称");

                entity.Property(e => e.Incident).HasComment("实例号");

                entity.Property(e => e.IsFanPin)
                    .HasMaxLength(10)
                    .HasComment("是否返聘  Y=是 N=否");

                entity.Property(e => e.PersonLoginName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("人员登录名");

                entity.Property(e => e.PersonRealName)
                    .HasMaxLength(50)
                    .HasComment("人员真实姓名");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(500)
                    .HasComment("流程名");

                entity.Property(e => e.ReceiverDate)
                    .HasColumnType("datetime")
                    .HasComment("个人接收奖金时间（主管经理节点审批完成时间）");

                entity.Property(e => e.Remark).HasComment("备注");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName")
                    .HasComment("流程申请人登录名");

                entity.Property(e => e.RequestUserIdentity)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserIdentity")
                    .HasComment("申请人 身份证号");

                entity.Property(e => e.ResponsibilityScopeRemark).HasComment("责任范围描述");

                entity.Property(e => e.UserIdentity)
                    .HasMaxLength(50)
                    .HasComment("身份证号");
            });

            modelBuilder.Entity<TccWinBiddingBonusProjectAssign>(entity =>
            {
                entity.ToTable("TCC_WinBiddingBonus_ProjectAssign");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment("奖金额");

                entity.Property(e => e.AssignDate)
                    .HasColumnType("datetime")
                    .HasComment("分配时间");

                entity.Property(e => e.AssignFrom).HasComment("分配人角色   0=由项目经理分配的  1=由设计经理分配的 2=由专业经理分配的 3=由专业负责人分配的");

                entity.Property(e => e.AssignFromUser)
                    .HasMaxLength(50)
                    .HasComment("分配人登录名");

                entity.Property(e => e.AssignFromUserIdentity)
                    .HasMaxLength(50)
                    .HasComment("分配人身份证号");

                entity.Property(e => e.AssignFromUserRealName)
                    .HasMaxLength(50)
                    .HasComment("分配人真实姓名");

                entity.Property(e => e.AssignStatus)
                    .HasDefaultValueSql("((1))")
                    .HasComment("分析状态 （1=未分配  2=已分配）");

                entity.Property(e => e.AwardCategory)
                    .HasMaxLength(50)
                    .HasComment("奖项编号");

                entity.Property(e => e.CanAssign)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'N')")
                    .HasComment("是分可分配(Y=是 N=否)");

                entity.Property(e => e.Incident).HasComment("实例号");

                entity.Property(e => e.IsFanPin)
                    .HasMaxLength(10)
                    .HasComment("是否返聘人员（Y=是  N = 否）");

                entity.Property(e => e.ParentId).HasComment("父ID  即数据源来的主键ID");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(500)
                    .HasComment("流程名");

                entity.Property(e => e.Professional)
                    .HasMaxLength(100)
                    .HasComment("专业");

                entity.Property(e => e.ProjectCategory)
                    .HasMaxLength(200)
                    .HasComment("项目类型");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(200)
                    .HasComment("项目编号");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(200)
                    .HasComment("项目名称");

                entity.Property(e => e.ReceiverDate)
                    .HasColumnType("datetime")
                    .HasComment("奖金接收时间");

                entity.Property(e => e.ReceiverLoginName)
                    .HasMaxLength(50)
                    .HasComment("接收人登录名");

                entity.Property(e => e.ReceiverRealName)
                    .HasMaxLength(50)
                    .HasComment("接收人真实姓名");

                entity.Property(e => e.ReceiverType).HasComment("接收人类型\r\n   1 = 设计经理\r\n   2 = 专业经理\r\n   3 = 专业负责人\r\n   4 = 具体人员");

                entity.Property(e => e.RejectTimes)
                    .HasDefaultValueSql("((0))")
                    .HasComment("报价经理明细审批时被退回的次数");

                entity.Property(e => e.Role)
                    .HasMaxLength(100)
                    .HasComment("角色");

                entity.Property(e => e.UserIdentity)
                    .HasMaxLength(50)
                    .HasComment("接收人身份证号");
            });

            modelBuilder.Entity<TccYearAwardsAdjust>(entity =>
            {
                entity.ToTable("TCC_YearAwardsAdjust");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AuditLevel)
                    .HasMaxLength(10)
                    .HasComment("考核等级  目前只有三种状态 （优、优良、良）");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasComment("创建日期");

                entity.Property(e => e.PersonLevel).HasComment("人员级别     \r\n      1=普通人员\r\n      2=中层人员");

                entity.Property(e => e.PostLevel).HasComment("岗位级别");

                entity.Property(e => e.RatioOrAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasComment(" PersonLevel=1时 此字段表示 系数   PersonLevel=2时此字段表示 奖金额");

                entity.Property(e => e.Sort).HasComment("排序字段");

                entity.Property(e => e.UpdateDate)
                    .HasColumnType("datetime")
                    .HasComment("更新日期");
            });

            modelBuilder.Entity<Tempinfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TEMPInfo");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("amount");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<Test1102>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("test1102");

                entity.Property(e => e.Administrator)
                    .HasColumnType("text")
                    .HasColumnName("administrator");

                entity.Property(e => e.GuestUser)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("guest_user");

                entity.Property(e => e.Id)
                    .HasMaxLength(10)
                    .HasColumnName("id")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<TestAward>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("testAward");

                entity.Property(e => e.F5).HasMaxLength(255);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.姓名).HasMaxLength(255);

                entity.Property(e => e.薪资归属).HasMaxLength(255);

                entity.Property(e => e.部门).HasMaxLength(255);
            });

            modelBuilder.Entity<TestAward2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("testAward2");

                entity.Property(e => e.F1).HasMaxLength(255);

                entity.Property(e => e.F2).HasMaxLength(255);

                entity.Property(e => e.F3).HasMaxLength(255);

                entity.Property(e => e.F4).HasMaxLength(255);

                entity.Property(e => e.F5).HasMaxLength(255);

                entity.Property(e => e.F6).HasMaxLength(255);

                entity.Property(e => e.F7).HasMaxLength(255);

                entity.Property(e => e.F8).HasMaxLength(255);

                entity.Property(e => e.F9).HasMaxLength(255);
            });

            modelBuilder.Entity<Testtb>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("testtb");

                entity.Property(e => e.Desca)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("desca");

                entity.Property(e => e.Namea)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("namea");
            });

            modelBuilder.Entity<TmpFinanceTaskBusinessTable>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMP_FinanceTask_BusinessTable");

                entity.HasIndex(e => new { e.ProcessName, e.Incident }, "IX_TMP_FinanceTask_BusinessTable");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("amount");

                entity.Property(e => e.AuditName).HasMaxLength(50);

                entity.Property(e => e.CasierClaim).HasMaxLength(50);

                entity.Property(e => e.CompanyCode).HasMaxLength(500);

                entity.Property(e => e.CompanyName).HasMaxLength(500);

                entity.Property(e => e.Currency).HasColumnName("currency");

                entity.Property(e => e.FormCode).HasMaxLength(50);

                entity.Property(e => e.IDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("iDeptCode");

                entity.Property(e => e.IDeptName)
                    .HasMaxLength(500)
                    .HasColumnName("iDeptName");

                entity.Property(e => e.ITypeCode).HasColumnName("iTypeCode");

                entity.Property(e => e.ITypeName)
                    .HasMaxLength(100)
                    .HasColumnName("iTypeName");

                entity.Property(e => e.PMethodCode).HasColumnName("pMethodCode");

                entity.Property(e => e.PMethodName).HasColumnName("pMethodName");

                entity.Property(e => e.ProCode).HasColumnName("proCode");

                entity.Property(e => e.ProName)
                    .HasMaxLength(2000)
                    .HasColumnName("proName");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.VoucherId).HasColumnName("VoucherID");
            });

            modelBuilder.Entity<TmpRExcel>(entity =>
            {
                entity.ToTable("tmpR_Excel");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.业主代扣额)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.付款单位名称)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.代扣税金)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.发票票据编号)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.合同名称)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.合同编号)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.实收金额)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.客户名称)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.客户编号)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.已收其他金额)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.已收汇票金额)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.已收电汇金额)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.开出发票金额)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.开出收据金额)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.收据票据编号)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.申请人)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.申请人帐号)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.申请付款币种)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.申请收款金额)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.申请类型)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.类型)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.类型名称)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.项目名称)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.项目类型)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.项目编号)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.预计到账时间)
                    .HasMaxLength(4000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TmpTmpDraftinto>(entity =>
            {
                entity.ToTable("tmp_tmp_draftinto");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Draftcode)
                    .HasMaxLength(50)
                    .HasColumnName("draftcode");

                entity.Property(e => e.Draftsource)
                    .HasMaxLength(50)
                    .HasColumnName("draftsource");

                entity.Property(e => e.Draftsourceid)
                    .HasMaxLength(50)
                    .HasColumnName("draftsourceid");

                entity.Property(e => e.Statusname)
                    .HasMaxLength(50)
                    .HasColumnName("statusname");
            });

            modelBuilder.Entity<UbscPlanItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UBSC_PlanItems");

                entity.Property(e => e.AnnualStatus)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovalStatus).HasColumnName("approvalStatus");

                entity.Property(e => e.AssistDepartment)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.AssistDepartmentOid)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("AssistDepartmentOID");

                entity.Property(e => e.AssistPerson)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.AssistPersonOid)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("AssistPersonOID");

                entity.Property(e => e.Complete).HasColumnName("complete");

                entity.Property(e => e.FirstPeople)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.FirstPeopleOid)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("FirstPeopleOID");

                entity.Property(e => e.FormationPerson)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.FormationPersonOid)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("FormationPersonOID");

                entity.Property(e => e.IcompletionStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LevelCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.MleaderCheck)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MLeaderCheck");

                entity.Property(e => e.OrderNo).HasColumnName("orderNo");

                entity.Property(e => e.PichangeState).HasColumnName("PIChangeState");

                entity.Property(e => e.PlanBeginTime).HasColumnType("datetime");

                entity.Property(e => e.PlanEndTime).HasColumnType("datetime");

                entity.Property(e => e.PlanFromType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PlanItemContent)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.PlanItemsType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectFk).HasColumnName("project_FK");

                entity.Property(e => e.ProjectItemsFk).HasColumnName("projectItems_FK");

                entity.Property(e => e.ReferencePlanItemContent)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.RelevantDepartments)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.RelevantDepartmentsOid)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("RelevantDepartmentsOID");

                entity.Property(e => e.Remark)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ResponPerson)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.ResponPersonOid)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("ResponPersonOID");

                entity.Property(e => e.SourceConten)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.SourceOids)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("SourceOIDs");

                entity.Property(e => e.TrueBeginTime).HasColumnType("datetime");

                entity.Property(e => e.TrueEndTime).HasColumnType("datetime");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UbscPlanItemsFk).HasColumnName("UBSC_PlanItems_FK");

                entity.Property(e => e.UbscPlanItemsOid).HasColumnName("UBSC_PlanItemsOID");

                entity.Property(e => e.UbscSmDimensionsFk).HasColumnName("UBSC_SM_Dimensions_FK");

                entity.Property(e => e.UbscSmIndicatorsFk).HasColumnName("UBSC_SM_Indicators_FK");

                entity.Property(e => e.UbscSmTargetFk).HasColumnName("UBSC_SM_Target_FK");

                entity.Property(e => e.UbscSmThemeLibraryFk).HasColumnName("UBSC_SM_ThemeLibrary_FK");

                entity.Property(e => e.UbscWorkPlanDepartmentFk).HasColumnName("UBSC_WorkPlanDepartment_FK");

                entity.Property(e => e.UbscWorkPlanInfoFk).HasColumnName("UBSC_WorkPlanInfo_FK");

                entity.Property(e => e.UcmlContactFk).HasColumnName("UCML_CONTACT_FK");

                entity.Property(e => e.WorkPlanModeListFk).HasColumnName("WorkPlanModeList_FK");

                entity.Property(e => e.WorkPlanModeTypeFk).HasColumnName("WorkPlanModeType_FK");

                entity.Property(e => e.Xh)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("XH");
            });

            modelBuilder.Entity<UbscPlanItemsSource>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UBSC_PlanItemsSource");

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.SourceName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UbscPlanItemsSourceOid).HasColumnName("UBSC_PlanItemsSourceOID");
            });

            modelBuilder.Entity<UbscWorkPlanDepartment>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UBSC_WorkPlanDepartment");

                entity.Property(e => e.AuditorsPersonName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("auditors_PersonName");

                entity.Property(e => e.BelongDpt)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.BelongDptId)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CompilePersonId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("compile_PersonId");

                entity.Property(e => e.CompilePersonName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("compile_PersonName");

                entity.Property(e => e.Description)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.EditPerson)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EditPersonId)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EditTime)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FlowId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FlowID");

                entity.Property(e => e.FormNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InputPerson)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.InputPersonOid)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("InputPersonOID");

                entity.Property(e => e.InputTime)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InstanceId).HasColumnName("InstanceID");

                entity.Property(e => e.LastVerityPersonOid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LastVerityPersonOID");

                entity.Property(e => e.PlanBeginTime).HasColumnType("datetime");

                entity.Property(e => e.PlanEndTime).HasColumnType("datetime");

                entity.Property(e => e.PostNames)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.PostOids)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("PostOIDs");

                entity.Property(e => e.ResponPersons)
                    .HasMaxLength(800)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("state");

                entity.Property(e => e.Status)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TaskId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("taskId");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("type");

                entity.Property(e => e.UbscWorkPlanDepartmentOid).HasColumnName("UBSC_WorkPlanDepartmentOID");

                entity.Property(e => e.UbscWorkPlanInfoFk).HasColumnName("UBSC_WorkPlanInfo_FK");

                entity.Property(e => e.UcmlOrganizeFk).HasColumnName("UCML_Organize_FK");

                entity.Property(e => e.UcmlUserFk).HasColumnName("UCML_User_FK");

                entity.Property(e => e.UpdatePerson)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateTime)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VerityPostOid).HasColumnName("VerityPostOID");

                entity.Property(e => e.Xh).HasColumnName("XH");
            });

            modelBuilder.Entity<UbscWorkPlanInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UBSC_WorkPlanInfo");

                entity.Property(e => e.FlowId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FlowID");

                entity.Property(e => e.FormNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InstanceId).HasColumnName("InstanceID");

                entity.Property(e => e.PlanContent)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.PlanNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PlanTitle)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PlanYear)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SysCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("SYS_Created");

                entity.Property(e => e.SysCreatedBy).HasColumnName("SYS_CreatedBy");

                entity.Property(e => e.SysDeleted).HasColumnName("SYS_Deleted");

                entity.Property(e => e.SysDivision).HasColumnName("SYS_DIVISION");

                entity.Property(e => e.SysLastUpd)
                    .HasColumnType("datetime")
                    .HasColumnName("SYS_LAST_UPD");

                entity.Property(e => e.SysLastUpdBy).HasColumnName("SYS_LAST_UPD_BY");

                entity.Property(e => e.SysOrg).HasColumnName("SYS_ORG");

                entity.Property(e => e.SysPostn).HasColumnName("SYS_POSTN");

                entity.Property(e => e.SysReplacement).HasColumnName("SYS_REPLACEMENT");

                entity.Property(e => e.UbscWorkPlanInfoOid).HasColumnName("UBSC_WorkPlanInfoOID");

                entity.Property(e => e.UbscWorkPlanTypeFk).HasColumnName("UBSC_WorkPlanType_FK");

                entity.Property(e => e.YearlyPlanEndTime)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.YearlyPlanStartTime)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UbscWorkPlanInfoEmpower>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UBSC_WorkPlanInfo_Empower");

                entity.Property(e => e.EmpowerName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Empower_Name");

                entity.Property(e => e.UbscWorkPlanDepartmentFk).HasColumnName("UBSC_WorkPlanDepartment_FK");

                entity.Property(e => e.UbscWorkPlanInfoEmpowerOid).HasColumnName("UBSC_WorkPlanInfo_EmpowerOID");

                entity.Property(e => e.UbscWorkPlanInfoFk).HasColumnName("UBSC_WorkPlanInfo_FK");

                entity.Property(e => e.UcmlUserFk).HasColumnName("UCML_User_FK");
            });

            modelBuilder.Entity<UbscWorkPlanSource>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UBSC_WorkPlanSources");

                entity.Property(e => e.FileName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FileType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FileUrl)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.SysCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("SYS_Created");

                entity.Property(e => e.SysCreatedBy).HasColumnName("SYS_CreatedBy");

                entity.Property(e => e.SysDeleted).HasColumnName("SYS_Deleted");

                entity.Property(e => e.SysDivision).HasColumnName("SYS_DIVISION");

                entity.Property(e => e.SysLastUpd)
                    .HasColumnType("datetime")
                    .HasColumnName("SYS_LAST_UPD");

                entity.Property(e => e.SysLastUpdBy).HasColumnName("SYS_LAST_UPD_BY");

                entity.Property(e => e.SysOrg).HasColumnName("SYS_ORG");

                entity.Property(e => e.SysPostn).HasColumnName("SYS_POSTN");

                entity.Property(e => e.SysReplacement).HasColumnName("SYS_REPLACEMENT");

                entity.Property(e => e.UbscWorkPlanSourcesOid).HasColumnName("UBSC_WorkPlanSourcesOID");

                entity.Property(e => e.WorkPlanSourcesFk).HasColumnName("WorkPlanSources_Fk");
            });

            modelBuilder.Entity<UbscWorkPlanType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UBSC_WorkPlanType");

                entity.Property(e => e.CycleType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PlanType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PlanTypeDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PlanTypeNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UbscWorkPlanTypeOid).HasColumnName("UBSC_WorkPlanTypeOID");
            });

            modelBuilder.Entity<UbscWorkPlanVerifyDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UBSC_WorkPlanVerifyDetails");

                entity.Property(e => e.Status)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SysCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("SYS_Created");

                entity.Property(e => e.SysCreatedBy).HasColumnName("SYS_CreatedBy");

                entity.Property(e => e.SysDeleted).HasColumnName("SYS_Deleted");

                entity.Property(e => e.SysDivision).HasColumnName("SYS_DIVISION");

                entity.Property(e => e.SysLastUpd)
                    .HasColumnType("datetime")
                    .HasColumnName("SYS_LAST_UPD");

                entity.Property(e => e.SysLastUpdBy).HasColumnName("SYS_LAST_UPD_BY");

                entity.Property(e => e.SysOrg).HasColumnName("SYS_ORG");

                entity.Property(e => e.SysPostn).HasColumnName("SYS_POSTN");

                entity.Property(e => e.SysReplacement).HasColumnName("SYS_REPLACEMENT");

                entity.Property(e => e.UbscWorkPlanDepartmentFk).HasColumnName("UBSC_WorkPlanDepartment_FK");

                entity.Property(e => e.UbscWorkPlanInfoFk).HasColumnName("UBSC_WorkPlanInfo_FK");

                entity.Property(e => e.UbscWorkPlanVerifyDetailsOid).HasColumnName("UBSC_WorkPlanVerifyDetailsOID");

                entity.Property(e => e.VerifyOpinion)
                    .HasMaxLength(300)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UbscYearPlanChange>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UBSC_YearPlanChange");

                entity.Property(e => e.FlowId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FlowID");

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InstanceId).HasColumnName("InstanceID");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SysCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("SYS_Created");

                entity.Property(e => e.SysCreatedBy).HasColumnName("SYS_CreatedBy");

                entity.Property(e => e.SysDeleted).HasColumnName("SYS_Deleted");

                entity.Property(e => e.SysDivision).HasColumnName("SYS_DIVISION");

                entity.Property(e => e.SysLastUpd)
                    .HasColumnType("datetime")
                    .HasColumnName("SYS_LAST_UPD");

                entity.Property(e => e.SysLastUpdBy).HasColumnName("SYS_LAST_UPD_BY");

                entity.Property(e => e.SysOrg).HasColumnName("SYS_ORG");

                entity.Property(e => e.SysPostn).HasColumnName("SYS_POSTN");

                entity.Property(e => e.SysReplacement).HasColumnName("SYS_REPLACEMENT");

                entity.Property(e => e.UbscWorkPlanInfoFk).HasColumnName("UBSC_WorkPlanInfo_FK");

                entity.Property(e => e.UbscYearPlanChangeOid).HasColumnName("UBSC_YearPlanChangeOID");
            });

            modelBuilder.Entity<UserTable>(entity =>
            {
                entity.ToTable("userTable");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyType).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.ModifySpecific).HasMaxLength(50);

                entity.Property(e => e.ModifyType).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProcessStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptCode");

                entity.Property(e => e.RequestDeptName).HasColumnName("Request_DeptName");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName");

                entity.Property(e => e.RequestTelPhone)
                    .HasMaxLength(50)
                    .HasColumnName("Request_TelPhone");

                entity.Property(e => e.RequestUserName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserName");
            });

            modelBuilder.Entity<UserTableInfo>(entity =>
            {
                entity.ToTable("userTable_Info");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.FareTypeText).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.ModifyType).HasMaxLength(50);

                entity.Property(e => e.NdeptName).HasColumnName("NDeptName");

                entity.Property(e => e.NdeptNo)
                    .HasMaxLength(50)
                    .HasColumnName("NDeptNo");

                entity.Property(e => e.Nettype).HasMaxLength(50);

                entity.Property(e => e.NewNettype).HasMaxLength(50);

                entity.Property(e => e.NphoneName)
                    .HasMaxLength(50)
                    .HasColumnName("NPhoneName");

                entity.Property(e => e.NphoneUserKey)
                    .HasMaxLength(50)
                    .HasColumnName("NPhoneUserKey");

                entity.Property(e => e.NroomNo)
                    .HasMaxLength(50)
                    .HasColumnName("NRoomNo");

                entity.Property(e => e.NseatNo)
                    .HasMaxLength(50)
                    .HasColumnName("NSeatNo");

                entity.Property(e => e.PhoneNo).HasMaxLength(50);

                entity.Property(e => e.PhoneType).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(50);

                entity.Property(e => e.SphoneName)
                    .HasMaxLength(50)
                    .HasColumnName("SPhoneName");

                entity.Property(e => e.SphoneUserKey)
                    .HasMaxLength(50)
                    .HasColumnName("SPhoneUserKey");
            });

            modelBuilder.Entity<View106Calendar>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_106_calendar");

                entity.Property(e => e.日期).HasColumnType("datetime");

                entity.Property(e => e.状态)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewAbroadUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Abroad_User");

                entity.Property(e => e.BeginDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.ProjectName).IsRequired();

                entity.Property(e => e.ProjectNo)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.Tvcountry).HasColumnName("TVCountry");

                entity.Property(e => e.UserKey).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewAbroadUserInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Abroad_UserInfo");

                entity.Property(e => e.BornDate).HasColumnType("datetime");

                entity.Property(e => e.BornPlace)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.C012o)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("C012O");

                entity.Property(e => e.Codeitemdesc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("codeitemdesc");

                entity.Property(e => e.CompName).IsRequired();

                entity.Property(e => e.Company)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DepartmentType)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DeptName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DeptNo).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PassportCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PostGrade).HasColumnType("numeric(10, 2)");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UserKey)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewAnuualUserList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_AnuualUserList");

                entity.Property(e => e.BusinessCard)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CardNo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FaFangD)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.IsFanPin)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.PostName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ReimbursementStandard).HasColumnType("numeric(10, 2)");

                entity.Property(e => e.ReimbursementStandard2).HasColumnType("numeric(10, 2)");

                entity.Property(e => e.Salary)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SelectDeptCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SelectDeptName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SelectLoginName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SelectRealName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SelectUserIdentity)
                    .HasMaxLength(18)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewApprovedRecordDistinct>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ApprovedRecordDistinct");

                entity.Property(e => e.ApproveDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Approve_Date");

                entity.Property(e => e.ApproveUserLoginName)
                    .HasMaxLength(200)
                    .HasColumnName("Approve_UserLoginName");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ProcessName).HasMaxLength(200);

                entity.Property(e => e.Rn).HasColumnName("rn");

                entity.Property(e => e.StepName).HasMaxLength(200);
            });

            modelBuilder.Entity<ViewApprovedRecordFinanceRequestProcessForPrintHeader>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ApprovedRecord_FinanceRequestProcessForPrintHeader");

                entity.Property(e => e.ApproveDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Approve_Date");

                entity.Property(e => e.ApproveDateStr)
                    .HasColumnType("datetime")
                    .HasColumnName("Approve_DateStr");

                entity.Property(e => e.ApproveRemark).HasColumnName("Approve_Remark");

                entity.Property(e => e.ApproveResult)
                    .HasMaxLength(200)
                    .HasColumnName("Approve_Result");

                entity.Property(e => e.ApproveResultCode).HasColumnName("Approve_ResultCode");

                entity.Property(e => e.ApproveUserLoginName)
                    .HasMaxLength(200)
                    .HasColumnName("Approve_UserLoginName");

                entity.Property(e => e.ApproveUserName)
                    .HasMaxLength(200)
                    .HasColumnName("Approve_UserName");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.ProcessName).HasMaxLength(200);

                entity.Property(e => e.StepName).HasMaxLength(200);
            });

            modelBuilder.Entity<ViewAskForLeave>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_AskForLeave");

                entity.Property(e => e.FinishDate).HasColumnType("datetime");

                entity.Property(e => e.PersonLoginName).HasMaxLength(50);

                entity.Property(e => e.PersonName).HasMaxLength(100);

                entity.Property(e => e.RequestDate).HasColumnType("datetime");

                entity.Property(e => e.TravelBeginDate).HasColumnType("datetime");

                entity.Property(e => e.TravelEndDate).HasColumnType("datetime");

                entity.Property(e => e.TravelPlace).HasMaxLength(100);

                entity.Property(e => e.TravelType).HasMaxLength(100);

                entity.Property(e => e.UserIdentity).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewAskForLeaveInfomation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_AskForLeaveInfomation");

                entity.Property(e => e.Enddate).HasColumnType("datetime");

                entity.Property(e => e.IdcardDno)
                    .HasMaxLength(50)
                    .HasColumnName("IDCardDNo");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewAskForLeaveList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_AskForLeaveList");

                entity.Property(e => e.BeginDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.FromCity).HasMaxLength(100);

                entity.Property(e => e.MainIncident).HasColumnName("mainIncident");

                entity.Property(e => e.MainProcessName)
                    .HasMaxLength(50)
                    .HasColumnName("mainProcessName");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.RequestDate).HasColumnType("datetime");

                entity.Property(e => e.ToCity).HasMaxLength(500);

                entity.Property(e => e.ToCountry).HasMaxLength(500);

                entity.Property(e => e.ToDomesticOversea)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.TotalDays).HasColumnType("numeric(18, 1)");

                entity.Property(e => e.TravelTypeText).HasMaxLength(100);

                entity.Property(e => e.UserIdentity).HasMaxLength(50);

                entity.Property(e => e.UserLoginName).HasMaxLength(50);

                entity.Property(e => e.UserRealName).HasMaxLength(50);

                entity.Property(e => e.VisaIdentity)
                    .HasMaxLength(50)
                    .HasColumnName("visaIdentity");

                entity.Property(e => e.VisaLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("visaLoginName");

                entity.Property(e => e.VisaRealName)
                    .HasMaxLength(50)
                    .HasColumnName("visaRealName");
            });

            modelBuilder.Entity<ViewAssetInfoRelation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_AssetInfo_Relation");

                entity.Property(e => e.CclassCode)
                    .HasMaxLength(50)
                    .HasColumnName("CClassCode");

                entity.Property(e => e.CclassName)
                    .HasMaxLength(50)
                    .HasColumnName("CClassName");

                entity.Property(e => e.DeptRange).HasMaxLength(50);

                entity.Property(e => e.GclassCode)
                    .HasMaxLength(50)
                    .HasColumnName("GClassCode");

                entity.Property(e => e.GclassName)
                    .HasMaxLength(50)
                    .HasColumnName("GClassName");

                entity.Property(e => e.ManageDept).HasMaxLength(50);

                entity.Property(e => e.ManageDeptName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PclassCode)
                    .HasMaxLength(50)
                    .HasColumnName("PClassCode");

                entity.Property(e => e.PclassName)
                    .HasMaxLength(50)
                    .HasColumnName("PClassName");
            });

            modelBuilder.Entity<ViewAssign2AwardDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Assign2AwardDetails");

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AssignFromUser).HasMaxLength(50);

                entity.Property(e => e.AssignFromUserIdentity).HasMaxLength(50);

                entity.Property(e => e.AssignFromUserRealName).HasMaxLength(50);

                entity.Property(e => e.AwardCategory).HasMaxLength(50);

                entity.Property(e => e.AwardComposed).HasMaxLength(200);

                entity.Property(e => e.CanAssign).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(500);

                entity.Property(e => e.Professional).HasMaxLength(100);

                entity.Property(e => e.ProjectCode).HasMaxLength(200);

                entity.Property(e => e.ReceiverLoginName).HasMaxLength(50);

                entity.Property(e => e.ReceiverRealName).HasMaxLength(50);

                entity.Property(e => e.Role).HasMaxLength(100);

                entity.Property(e => e.UserIdentity).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewAward3019MasterDept>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_Award3019MasterDept");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(200)
                    .HasColumnName("Request_DeptName");
            });

            modelBuilder.Entity<ViewAwardCategoryMasterDept>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_AwardCategoryMasterDept");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(200)
                    .HasColumnName("Request_DeptName");
            });

            modelBuilder.Entity<ViewAwardMasterDept>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_AwardMasterDept");

                entity.Property(e => e.ProDept).HasMaxLength(200);
            });

            modelBuilder.Entity<ViewAwardSender>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_AwardSender");

                entity.Property(e => e.AwardCode).HasMaxLength(100);

                entity.Property(e => e.ProcessName).HasMaxLength(500);

                entity.Property(e => e.ReceiverIdCardNo)
                    .HasMaxLength(100)
                    .HasColumnName("Receiver_IdCardNo");

                entity.Property(e => e.SenderIdCardNo)
                    .HasMaxLength(200)
                    .HasColumnName("Sender_IdCardNo");

                entity.Property(e => e.SenderLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Sender_LoginName");

                entity.Property(e => e.SenderRealName)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("Sender_RealName");
            });

            modelBuilder.Entity<ViewB11005PaymentTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_B11005_Payment_Temp");

                entity.Property(e => e.AccountPaid).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.Flag).HasColumnName("flag");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.MainExchange).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.OtherBuy).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Ppid).HasColumnName("ppid");

                entity.Property(e => e.RequestAmount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Rss).HasColumnName("rss");

                entity.Property(e => e.Tax).HasColumnName("tax");

                entity.Property(e => e.付增值税).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.付款币种)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.付款操作人).HasMaxLength(50);

                entity.Property(e => e.付款方式).HasMaxLength(50);

                entity.Property(e => e.付款节点).HasMaxLength(50);

                entity.Property(e => e.代扣其他税).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.代扣农民工工资).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.代扣增值税).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.代扣水电费).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.代购主合同币种)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.单据编号)
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.实际付款金额).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.应付工程款).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.扣款金额).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.扣税金额).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.折主合同金额).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.折人民币金额).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.收款单位名称).HasMaxLength(1000);

                entity.Property(e => e.申请人).HasMaxLength(50);

                entity.Property(e => e.申请日期).HasMaxLength(15);

                entity.Property(e => e.申请金额).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.票据金额).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.罚款金额).HasColumnType("decimal(38, 2)");
            });

            modelBuilder.Entity<ViewBalanceBasic>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_Balance_Basic");

                entity.Property(e => e.Amounted).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.Amounting).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.ProjectCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewBaseTable>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_baseTable");

                entity.Property(e => e.Cdate)
                    .HasColumnType("datetime")
                    .HasColumnName("cdate");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .HasColumnName("id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(36)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<ViewBasicPersonDeptInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_Basic_PersonDeptInfo");

                entity.Property(e => e.A0177)
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasColumnName("a0177");

                entity.Property(e => e.Codeitemdesc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("codeitemdesc");

                entity.Property(e => e.Codeitemid)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("codeitemid");
            });

            modelBuilder.Entity<ViewBillsInfoReceived>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_BillsInfo_Received");

                entity.Property(e => e.BillCode).HasMaxLength(500);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.InvoiceCategoryText).HasMaxLength(50);

                entity.Property(e => e.InvoiceCode).HasMaxLength(200);

                entity.Property(e => e.InvoiceDate).HasColumnType("datetime");

                entity.Property(e => e.ProcessName).HasMaxLength(200);
            });

            modelBuilder.Entity<ViewBillsInfoRendered>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_BillsInfo_Rendered");

                entity.Property(e => e.BillCode).HasMaxLength(50);

                entity.Property(e => e.InvoiceCategoryText).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(200);
            });

            modelBuilder.Entity<ViewBorrowMoneyInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_BorrowMoneyInfo");

                entity.Property(e => e.BorrowMoneySmall)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BorrowMoney_Small");

                entity.Property(e => e.BorrowTypeText).HasMaxLength(20);

                entity.Property(e => e.ConfirmDate).HasColumnType("datetime");

                entity.Property(e => e.ConfirmStatus).HasMaxLength(50);

                entity.Property(e => e.CurrencyAb)
                    .HasMaxLength(20)
                    .HasColumnName("CurrencyAB");

                entity.Property(e => e.MoneyYb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MONEY_YB");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(200);

                entity.Property(e => e.ProjectName).HasMaxLength(2000);

                entity.Property(e => e.Rate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptCode");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(200)
                    .HasColumnName("Request_DeptName");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(100)
                    .HasColumnName("Request_RealName");

                entity.Property(e => e.RequestUserIdentity)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserIdentity");
            });

            modelBuilder.Entity<ViewBorrowMoneyInfoInitWarning>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_BorrowMoneyInfoInit_Warning");

                entity.Property(e => e.Currency).HasMaxLength(50);

                entity.Property(e => e.Damount)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("DAmount");

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.DueDateStr)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.LoginName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(200)
                    .HasColumnName("Request_RealName");

                entity.Property(e => e.RequestUserIdentity)
                    .HasMaxLength(100)
                    .HasColumnName("Request_UserIdentity");
            });

            modelBuilder.Entity<ViewBorrowMoneyInfoWarning>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_BorrowMoneyInfo_Warning");

                entity.Property(e => e.Currency).HasMaxLength(50);

                entity.Property(e => e.Damount)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("DAmount");

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.DueDateStr)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.LoginName).HasMaxLength(50);

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(200)
                    .HasColumnName("Request_RealName");

                entity.Property(e => e.RequestUserIdentity)
                    .HasMaxLength(100)
                    .HasColumnName("Request_UserIdentity");
            });

            modelBuilder.Entity<ViewBreakSubsidyUserInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_BreakSubsidyUserInfo");

                entity.Property(e => e.C0119)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.CardNo)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.ContractType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DeptNo)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nbase)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("nbase");

                entity.Property(e => e.SubsidyMoney).HasColumnName("subsidyMoney");

                entity.Property(e => e.UserKey)
                    .HasMaxLength(18)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewBudget>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Budget");
            });

            modelBuilder.Entity<ViewBudgetAwardUse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Budget_AwardUse");

                entity.Property(e => e.AwardComposedCode).HasMaxLength(4);

                entity.Property(e => e.AwardMoney).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.Deptcode)
                    .HasMaxLength(50)
                    .HasColumnName("deptcode");

                entity.Property(e => e.Year).HasColumnName("year");
            });

            modelBuilder.Entity<ViewBudgetDeparment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Budget_Deparment");

                entity.Property(e => e.Balance).HasColumnType("numeric(38, 2)");

                entity.Property(e => e.Budget).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.DeptCode).HasMaxLength(50);

                entity.Property(e => e.DeptName).HasMaxLength(500);

                entity.Property(e => e.Happened).HasColumnType("numeric(38, 2)");

                entity.Property(e => e.Happenning).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Item2).HasMaxLength(500);

                entity.Property(e => e.Year).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewBudgetDepartment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Budget_Department");

                entity.Property(e => e.AcountLocation)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DepartmentCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DepartmentName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DepartmentType)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewBudgetDeptBudgetRunningCost>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Budget_DeptBudgetRunningCost");

                entity.Property(e => e.Budget).HasColumnType("numeric(38, 2)");

                entity.Property(e => e.DeptCode).HasMaxLength(50);

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HappenedAmount).HasColumnType("numeric(38, 2)");

                entity.Property(e => e.HappeningAmount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.RemainAmount).HasColumnType("numeric(38, 2)");

                entity.Property(e => e.SubjectType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Year).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewBudgetDeptBudgetSpecialCost>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Budget_DeptBudgetSpecialCost");

                entity.Property(e => e.Budget).HasColumnType("numeric(38, 2)");

                entity.Property(e => e.CbyGroup).HasColumnName("CByGroup");

                entity.Property(e => e.DeptCode).HasMaxLength(50);

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HappenedAmount).HasColumnType("numeric(38, 2)");

                entity.Property(e => e.HappeningAmount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Item1).HasMaxLength(500);

                entity.Property(e => e.Item2).HasMaxLength(500);

                entity.Property(e => e.Item3).HasMaxLength(500);

                entity.Property(e => e.RemainAmount).HasColumnType("numeric(38, 2)");

                entity.Property(e => e.SubjectType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Year).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewBudgetDeptHappenedRunningCost>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Budget_DeptHappenedRunningCost");

                entity.Property(e => e.Amount).HasColumnType("numeric(38, 2)");

                entity.Property(e => e.Deptcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DEPTCODE");

                entity.Property(e => e.Nd).HasColumnName("ND");
            });

            modelBuilder.Entity<ViewBudgetDeptHappenedRunningCostDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Budget_DeptHappenedRunningCost_Details");

                entity.Property(e => e.Deptcode)
                    .HasMaxLength(255)
                    .HasColumnName("DEPTCODE");

                entity.Property(e => e.Nd).HasColumnName("ND");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewBudgetDeptHappenedSpecialCost>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Budget_DeptHappenedSpecialCost");

                entity.Property(e => e.Amount).HasColumnType("numeric(38, 2)");

                entity.Property(e => e.CbyGroup).HasColumnName("CByGroup");

                entity.Property(e => e.Deptcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DEPTCODE");

                entity.Property(e => e.Item2).HasMaxLength(250);

                entity.Property(e => e.Item3).HasMaxLength(250);

                entity.Property(e => e.Nd).HasColumnName("ND");
            });

            modelBuilder.Entity<ViewBudgetDeptHappenedSpecialCostDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Budget_DeptHappenedSpecialCost_Details");

                entity.Property(e => e.Amount).HasColumnType("numeric(38, 2)");

                entity.Property(e => e.CbyGroup).HasColumnName("CByGroup");

                entity.Property(e => e.Deptcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DEPTCODE");

                entity.Property(e => e.Item2).HasMaxLength(250);

                entity.Property(e => e.Item3).HasMaxLength(250);

                entity.Property(e => e.Nd).HasColumnName("ND");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewBudgetDeptHappeningRunningCost>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Budget_DeptHappeningRunningCost");

                entity.Property(e => e.Amount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Deptcode)
                    .HasMaxLength(50)
                    .HasColumnName("DEPTCODE");

                entity.Property(e => e.Nd).HasColumnName("ND");
            });

            modelBuilder.Entity<ViewBudgetDeptHappeningRunningCostDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Budget_DeptHappeningRunningCost_Details");

                entity.Property(e => e.Amount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.CbyGroup).HasColumnName("CByGroup");

                entity.Property(e => e.Deptcode)
                    .HasMaxLength(50)
                    .HasColumnName("DEPTCODE");

                entity.Property(e => e.Nd).HasColumnName("nd");

                entity.Property(e => e.ProcessName).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewBudgetDeptHappeningRunningCostDetails2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Budget_DeptHappeningRunningCost_Details2");

                entity.Property(e => e.Amount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.CbyGroup).HasColumnName("CByGroup");

                entity.Property(e => e.DepartmentCode).HasMaxLength(50);

                entity.Property(e => e.DepartmentName).HasMaxLength(50);

                entity.Property(e => e.Item2).HasMaxLength(50);

                entity.Property(e => e.Item3).HasMaxLength(50);

                entity.Property(e => e.Nd)
                    .HasColumnType("datetime")
                    .HasColumnName("nd");

                entity.Property(e => e.ProcessName).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewBudgetDeptHappeningRunningCostDetailsTest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Budget_DeptHappeningRunningCost_Details_Test");

                entity.Property(e => e.Amount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.CbyGroup).HasColumnName("CByGroup");

                entity.Property(e => e.Deptcode)
                    .HasMaxLength(50)
                    .HasColumnName("DEPTCODE");

                entity.Property(e => e.Nd).HasColumnName("nd");

                entity.Property(e => e.ProcessName).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewBudgetDeptHappeningSpecialCost>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Budget_DeptHappeningSpecialCost");

                entity.Property(e => e.Amount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.CbyGroup).HasColumnName("CByGroup");

                entity.Property(e => e.Deptcode)
                    .HasMaxLength(50)
                    .HasColumnName("DEPTCODE");

                entity.Property(e => e.Item2).HasMaxLength(50);

                entity.Property(e => e.Item3).HasMaxLength(50);

                entity.Property(e => e.Nd).HasColumnName("ND");
            });

            modelBuilder.Entity<ViewBudgetDeptHappeningSpecialCostDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Budget_DeptHappeningSpecialCost_Details");

                entity.Property(e => e.Amount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.CbyGroup).HasColumnName("CByGroup");

                entity.Property(e => e.Deptcode)
                    .HasMaxLength(50)
                    .HasColumnName("DEPTCODE");

                entity.Property(e => e.Item2).HasMaxLength(50);

                entity.Property(e => e.Item3).HasMaxLength(50);

                entity.Property(e => e.Nd).HasColumnName("nd");

                entity.Property(e => e.ProcessName).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewBudgetDeptHappeningSpecialCostDetailsTest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Budget_DeptHappeningSpecialCost_Details_Test");

                entity.Property(e => e.Amount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.CbyGroup).HasColumnName("CByGroup");

                entity.Property(e => e.Deptcode)
                    .HasMaxLength(50)
                    .HasColumnName("DEPTCODE");

                entity.Property(e => e.Item2).HasMaxLength(50);

                entity.Property(e => e.Item3).HasMaxLength(50);

                entity.Property(e => e.Nd).HasColumnName("nd");

                entity.Property(e => e.ProcessName).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewBudgetFinishProcess>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Budget_FinishProcess");

                entity.Property(e => e.BatchNumber)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.BdgTitle).HasMaxLength(50);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ProcessFinishDate).HasColumnType("datetime");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.RequestDate).HasColumnType("datetime");

                entity.Property(e => e.RequestDeptCode).HasMaxLength(50);

                entity.Property(e => e.RequestDeptName).HasMaxLength(200);

                entity.Property(e => e.RequestFormNumber).HasMaxLength(20);

                entity.Property(e => e.RequestLoginName).HasMaxLength(50);

                entity.Property(e => e.RequestRealName).HasMaxLength(50);

                entity.Property(e => e.RequestSfzh).HasMaxLength(30);

                entity.Property(e => e.Year)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("year");
            });

            modelBuilder.Entity<ViewBudgetProjectBudgetRunningCost>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Budget_ProjectBudgetRunningCost");

                entity.Property(e => e.Budget).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.HappeningAmount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.ProjTypeDesc)
                    .HasMaxLength(50)
                    .HasColumnName("proj_type_desc");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectName).HasMaxLength(200);
            });

            modelBuilder.Entity<ViewBudgetProjectBudgetSpecialCost>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Budget_ProjectBudgetSpecialCost");

                entity.Property(e => e.CbyGroup).HasColumnName("CByGroup");

                entity.Property(e => e.CostChanged).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.DemainAmount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.ExpenseName).HasMaxLength(50);

                entity.Property(e => e.HappenedAmount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.HappeningAmount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.ProjTypeDesc)
                    .HasMaxLength(50)
                    .HasColumnName("Proj_Type_Desc");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectName).HasMaxLength(200);
            });

            modelBuilder.Entity<ViewBudgetProjectHappenedRunningCost>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Budget_ProjectHappenedRunningCost");

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(50)
                    .HasColumnName("Project_id");
            });

            modelBuilder.Entity<ViewBudgetProjectHappenedRunningCostDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Budget_ProjectHappenedRunningCost_Details");

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PaymentDate).HasColumnType("datetime");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(50)
                    .HasColumnName("Project_id");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(500)
                    .HasColumnName("Project_Name");

                entity.Property(e => e.SubjectId).HasColumnName("SubjectID");

                entity.Property(e => e.SubjectName).HasMaxLength(100);
            });

            modelBuilder.Entity<ViewBudgetProjectHappenedSpecialCostFyf>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Budget_ProjectHappenedSpecialCost_FYF");

                entity.Property(e => e.Amount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.CbyGroup).HasColumnName("CByGroup");

                entity.Property(e => e.Expensename).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewBudgetProjectHappenedSpecialCostFyfDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Budget_ProjectHappenedSpecialCost_FYF_Details");

                entity.Property(e => e.AccountDate).HasColumnType("datetime");

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CbyGroup).HasColumnName("CByGroup");

                entity.Property(e => e.Expensename).HasMaxLength(50);

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .HasColumnName("NAME");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewBudgetProjectHappenedSpecialCostYf>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Budget_ProjectHappenedSpecialCost_YF");

                entity.Property(e => e.Amount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.CbyGroup).HasColumnName("CByGroup");

                entity.Property(e => e.Expensename).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewBudgetProjectHappenedSpecialCostYfDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Budget_ProjectHappenedSpecialCost_YF_Details");

                entity.Property(e => e.AccountDate).HasColumnType("datetime");

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CbyGroup).HasColumnName("CByGroup");

                entity.Property(e => e.Expensename).HasMaxLength(50);

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .HasColumnName("NAME");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewBudgetProjectHappeningRunningCost>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Budget_ProjectHappeningRunningCost");

                entity.Property(e => e.Amount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.ProjectCode).HasMaxLength(200);
            });

            modelBuilder.Entity<ViewBudgetProjectHappeningRunningCostDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Budget_ProjectHappeningRunningCost_Details");

                entity.Property(e => e.Amount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.ApplicationName).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(200);

                entity.Property(e => e.ProjectName).HasMaxLength(2000);
            });

            modelBuilder.Entity<ViewBudgetProjectHappeningSpecialCostFyf>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Budget_ProjectHappeningSpecialCost_FYF");

                entity.Property(e => e.Amount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.CbyGroup).HasColumnName("CByGroup");

                entity.Property(e => e.ExpenseName).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(200);
            });

            modelBuilder.Entity<ViewBudgetProjectHappeningSpecialCostFyfDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Budget_ProjectHappeningSpecialCost_FYF_Details");

                entity.Property(e => e.Amount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.ApplicationName).HasMaxLength(50);

                entity.Property(e => e.CbyGroup).HasColumnName("CByGroup");

                entity.Property(e => e.ExpenseName).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(200);

                entity.Property(e => e.ProjectName).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewBudgetProjectHappeningSpecialCostYf>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Budget_ProjectHappeningSpecialCost_YF");

                entity.Property(e => e.Amount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.CbyGroup).HasColumnName("CByGroup");

                entity.Property(e => e.ExpenseName).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(200);
            });

            modelBuilder.Entity<ViewBudgetProjectHappeningSpecialCostYfDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Budget_ProjectHappeningSpecialCost_YF_Details");

                entity.Property(e => e.Amount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.ApplicationName).HasMaxLength(50);

                entity.Property(e => e.CbyGroup).HasColumnName("CByGroup");

                entity.Property(e => e.ExpenseName).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(200);

                entity.Property(e => e.ProjectName).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewBudgetTelephoneSubsidy>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Budget_TelephoneSubsidy");

                entity.Property(e => e.Budget).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DeptCode).HasMaxLength(50);

                entity.Property(e => e.DeptName).HasMaxLength(500);

                entity.Property(e => e.HasBudget).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.RemainBudget).HasColumnType("decimal(38, 2)");
            });

            modelBuilder.Entity<ViewBudgetTypeRole>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_BudgetType_Role");

                entity.Property(e => e.RoleId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("RoleID");
            });

            modelBuilder.Entity<ViewBusinessTripAbortList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_BusinessTripAbortList");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptCode");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(200)
                    .HasColumnName("Request_DeptName");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName");

                entity.Property(e => e.RequestUserIdentity)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserIdentity");

                entity.Property(e => e.ToCity).HasMaxLength(500);

                entity.Property(e => e.ToCountry).HasMaxLength(500);

                entity.Property(e => e.TravelBeginDate).HasColumnType("datetime");

                entity.Property(e => e.TravelEndDate).HasColumnType("datetime");

                entity.Property(e => e.TravelTypeName).HasMaxLength(100);
            });

            modelBuilder.Entity<ViewBusinessTripInfomation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_BusinessTripInfomation");

                entity.Property(e => e.Enddate).HasColumnType("datetime");

                entity.Property(e => e.IdcardDno)
                    .HasMaxLength(50)
                    .HasColumnName("IDCardDNo");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.TravelAdress).HasMaxLength(1001);
            });

            modelBuilder.Entity<ViewBusinessTripOfairInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_BusinessTripOfairInfo");

                entity.Property(e => e.AccountDept).HasMaxLength(50);

                entity.Property(e => e.AccountProject).HasMaxLength(200);

                entity.Property(e => e.AccountProjectName).HasMaxLength(2000);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(200);

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptCode");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(200)
                    .HasColumnName("Request_DeptName");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName");

                entity.Property(e => e.RequestUserIdentity)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserIdentity");

                entity.Property(e => e.Toplace)
                    .HasMaxLength(1001)
                    .HasColumnName("toplace");

                entity.Property(e => e.TravelDate).HasMaxLength(21);
            });

            modelBuilder.Entity<ViewBussinessCard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_BussinessCard");

                entity.Property(e => e.BusinessCardcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Idnum)
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasColumnName("IDnum");

                entity.Property(e => e.UserRealName)
                    .HasMaxLength(12)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCarryoverCompany>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_CarryoverCompany");

                entity.Property(e => e.Dept).HasMaxLength(200);

                entity.Property(e => e.DeptCode).HasMaxLength(200);

                entity.Property(e => e.Gongjijin)
                    .HasColumnType("numeric(19, 6)")
                    .HasColumnName("gongjijin");

                entity.Property(e => e.Gongshang)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("gongshang");

                entity.Property(e => e.NewSalaryVest).HasMaxLength(100);

                entity.Property(e => e.Qiyenianjin)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("qiyenianjin");

                entity.Property(e => e.SalaryVest).HasMaxLength(200);

                entity.Property(e => e.Shengyu)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("shengyu");

                entity.Property(e => e.Shiye)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("shiye");

                entity.Property(e => e.Yanglao)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("yanglao");

                entity.Property(e => e.Yiliao)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("yiliao");
            });

            modelBuilder.Entity<ViewCashierBusinessTable>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Cashier_BusinessTable");

                entity.Property(e => e.AccountReceiveCmpName).HasMaxLength(200);

                entity.Property(e => e.Amount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.AuditName).HasMaxLength(50);

                entity.Property(e => e.BankCode).HasMaxLength(500);

                entity.Property(e => e.BillAmount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.BillNumber).HasMaxLength(50);

                entity.Property(e => e.Billcontent).HasColumnName("billcontent");

                entity.Property(e => e.Billtype)
                    .HasMaxLength(50)
                    .HasColumnName("billtype");

                entity.Property(e => e.CasierClaim).HasMaxLength(50);

                entity.Property(e => e.CompanyCode).HasMaxLength(50);

                entity.Property(e => e.CompanyName).HasMaxLength(2000);

                entity.Property(e => e.Currency).HasColumnName("currency");

                entity.Property(e => e.FormCode).HasMaxLength(50);

                entity.Property(e => e.IDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("iDeptCode");

                entity.Property(e => e.IDeptName)
                    .HasMaxLength(500)
                    .HasColumnName("iDeptName");

                entity.Property(e => e.ITypeCode).HasColumnName("iTypeCode");

                entity.Property(e => e.ITypeName)
                    .HasMaxLength(100)
                    .HasColumnName("iTypeName");

                entity.Property(e => e.InvoiceNumber).HasMaxLength(50);

                entity.Property(e => e.PMethodCode).HasColumnName("pMethodCode");

                entity.Property(e => e.PMethodName).HasColumnName("pMethodName");

                entity.Property(e => e.PlanInAcctDate).HasColumnType("datetime");

                entity.Property(e => e.ProCode).HasColumnName("proCode");

                entity.Property(e => e.ProName)
                    .HasMaxLength(500)
                    .HasColumnName("proName");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.Rate).HasMaxLength(50);

                entity.Property(e => e.ReceiptAmount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Requestdate)
                    .HasColumnType("datetime")
                    .HasColumnName("requestdate");

                entity.Property(e => e.Tobilltype).HasMaxLength(50);

                entity.Property(e => e.VoucherId).HasColumnName("VoucherID");
            });

            modelBuilder.Entity<ViewCashierConfirmExportAnnual>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_CashierConfirm_Export_Annual");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Je)
                    .HasColumnType("decimal(20, 4)")
                    .HasColumnName("je");

                entity.Property(e => e.Location).HasColumnName("location");

                entity.Property(e => e.Xm)
                    .HasMaxLength(50)
                    .HasColumnName("xm");

                entity.Property(e => e.Zh)
                    .HasMaxLength(50)
                    .HasColumnName("zh");
            });

            modelBuilder.Entity<ViewCashierConfirmExportCash>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_CashierConfirm_Export_Cash");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.公务卡号).HasMaxLength(200);

                entity.Property(e => e.收款人).HasMaxLength(50);

                entity.Property(e => e.金额).HasColumnType("decimal(38, 2)");
            });

            modelBuilder.Entity<ViewCashierConfirmExportCheque>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_CashierConfirm_Export_Cheque");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.收款单位名称).HasMaxLength(500);

                entity.Property(e => e.用途).HasMaxLength(100);

                entity.Property(e => e.金额).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ViewCashierConfirmExportTelegraphicTransfer>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_CashierConfirm_Export_TelegraphicTransfer");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.付款方式)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.付款账号).HasMaxLength(200);

                entity.Property(e => e.付款金额).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.会计凭证号)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.地域标志)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.市)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.开户行).HasMaxLength(500);

                entity.Property(e => e.开户行行号).HasMaxLength(500);

                entity.Property(e => e.接口代码)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.收款人).HasMaxLength(1200);

                entity.Property(e => e.收款账号).HasMaxLength(50);

                entity.Property(e => e.是否加急)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.是否对私付款)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.期望支付日期)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.用途).HasMaxLength(56);

                entity.Property(e => e.省)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.联行行号).HasMaxLength(500);

                entity.Property(e => e.行别)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.证件名称及号码)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.跨行标志)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.附言)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.领用人)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewCheckFundPaymentInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Check_FundPaymentInfo");

                entity.Property(e => e.RequestFormNumber).HasMaxLength(20);
            });

            modelBuilder.Entity<ViewContractPaymentInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Contract_PaymentInfo");

                entity.Property(e => e.剩余可用信用证金额).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.合同号).HasMaxLength(100);

                entity.Property(e => e.已付款金额).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.已开信用证金额).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.已支付信用证金额).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.申请信用证付款金额).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.申请开立信用证金额).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.申请非信用证付款金额).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.项目号).HasMaxLength(100);
            });

            modelBuilder.Entity<ViewContractPaymentInfo1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ContractPaymentInfo");

                entity.Property(e => e.Bz)
                    .HasMaxLength(200)
                    .HasColumnName("bz");

                entity.Property(e => e.ContanctCategory).HasMaxLength(100);

                entity.Property(e => e.ContractAmountCny).HasColumnName("ContractAmount_CNY");

                entity.Property(e => e.ContractAmountOc).HasColumnName("ContractAmount_OC");

                entity.Property(e => e.ContractCode).HasMaxLength(100);

                entity.Property(e => e.PaymentAmountCny)
                    .HasColumnType("decimal(38, 4)")
                    .HasColumnName("PaymentAmount_CNY");

                entity.Property(e => e.PaymentAmountOc)
                    .HasColumnType("decimal(38, 4)")
                    .HasColumnName("PaymentAmount_OC");

                entity.Property(e => e.PperCny).HasColumnName("PPer_CNY");

                entity.Property(e => e.PperOc).HasColumnName("PPer_OC");

                entity.Property(e => e.ProjectCode).HasMaxLength(200);
            });

            modelBuilder.Entity<ViewContractPaymentInfoNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Contract_PaymentInfo_New");

                entity.Property(e => e.剩余可用信用证金额).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.合同号).HasMaxLength(100);

                entity.Property(e => e.已付款金额).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.已开信用证金额).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.已支付信用证金额).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.申请信用证付款金额).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.申请开立信用证金额).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.申请非信用证付款金额).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.项目号).HasMaxLength(100);
            });

            modelBuilder.Entity<ViewDepartment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Department");

                entity.Property(e => e.AcountLocation)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DepartmentCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DepartmentName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DepartmentType)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewDepartmentAccount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Department_Account");

                entity.Property(e => e.DeptId)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("DeptID");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SubjectName).HasMaxLength(50);

                entity.Property(e => e.SubjectType)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewDepartmentManager>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Department_Manager");

                entity.Property(e => e.Account)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("account");

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DepartmentCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DepartmentName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DepartmentType)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdcardNo)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("IDCardNo");

                entity.Property(e => e.Username)
                    .HasMaxLength(12)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewDepositOfTransactionInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_DepositOfTransactionInfo");

                entity.Property(e => e.ChangeLocalCurrencyAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Currency).HasMaxLength(50);

                entity.Property(e => e.Flag).HasColumnName("FLAG");

                entity.Property(e => e.ProjectCode).HasMaxLength(200);

                entity.Property(e => e.ProjectName).HasMaxLength(200);

                entity.Property(e => e.ReceiveAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RequestRealName).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewDepositReceived>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_DepositReceived");

                entity.Property(e => e.CmpCode).HasMaxLength(30);

                entity.Property(e => e.CmpName).HasMaxLength(500);

                entity.Property(e => e.ProName).HasMaxLength(50);

                entity.Property(e => e.Projid).HasMaxLength(20);
            });

            modelBuilder.Entity<ViewDeptBudgetInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_DeptBudgetInfo");

                entity.Property(e => e.剩余预算).HasColumnType("numeric(38, 2)");

                entity.Property(e => e.已花费金额).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.年份).HasMaxLength(50);

                entity.Property(e => e.提交时验证金额).HasColumnType("numeric(38, 2)");

                entity.Property(e => e.流程中金额).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.费用类型).HasMaxLength(500);

                entity.Property(e => e.部门名称).HasMaxLength(500);

                entity.Property(e => e.部门编号).HasMaxLength(50);

                entity.Property(e => e.预算金额).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<ViewDeptBudgetInfoTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_DeptBudgetInfo_TEMP");

                entity.Property(e => e.剩余预算).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.已花费金额).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.年份).HasMaxLength(50);

                entity.Property(e => e.提交时验证金额).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.流程中金额).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.费用类型).HasMaxLength(500);

                entity.Property(e => e.部门名称).HasMaxLength(500);

                entity.Property(e => e.部门编号).HasMaxLength(50);

                entity.Property(e => e.预算金额).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ViewDeptInfomation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_DeptInfomation");

                entity.Property(e => e.Codeitemdesc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("codeitemdesc");

                entity.Property(e => e.Codeitemid)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("codeitemid");

                entity.Property(e => e.UserIdentity)
                    .HasMaxLength(18)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewDeptsLeader>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Depts_Leader");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DeptNo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserKey)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewDeptsManagement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Depts_Management");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("dept_code");

                entity.Property(e => e.DeptId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("dept_id");

                entity.Property(e => e.DeptIdentityId).HasColumnName("dept_identityID");

                entity.Property(e => e.DeptMasterPositionId)
                    .HasMaxLength(50)
                    .HasColumnName("dept_masterPositionId");

                entity.Property(e => e.DeptName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("dept_name");

                entity.Property(e => e.DeptRemark)
                    .HasMaxLength(100)
                    .HasColumnName("dept_remark");

                entity.Property(e => e.DeptSort).HasColumnName("dept_sort");

                entity.Property(e => e.DeptThirdPartId)
                    .HasMaxLength(50)
                    .HasColumnName("dept_thirdPartId");
            });

            modelBuilder.Entity<ViewDeptsOperateQuote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Depts_OperateQuote");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("dept_code");

                entity.Property(e => e.DeptId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("dept_id");

                entity.Property(e => e.DeptIdentityId).HasColumnName("dept_identityID");

                entity.Property(e => e.DeptMasterPositionId)
                    .HasMaxLength(50)
                    .HasColumnName("dept_masterPositionId");

                entity.Property(e => e.DeptName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("dept_name");

                entity.Property(e => e.DeptRemark)
                    .HasMaxLength(100)
                    .HasColumnName("dept_remark");

                entity.Property(e => e.DeptSort).HasColumnName("dept_sort");

                entity.Property(e => e.DeptThirdPartId)
                    .HasMaxLength(50)
                    .HasColumnName("dept_thirdPartId");
            });

            modelBuilder.Entity<ViewDeptsProduction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Depts_Production");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("dept_code");

                entity.Property(e => e.DeptId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("dept_id");

                entity.Property(e => e.DeptIdentityId).HasColumnName("dept_identityID");

                entity.Property(e => e.DeptMasterPositionId)
                    .HasMaxLength(50)
                    .HasColumnName("dept_masterPositionId");

                entity.Property(e => e.DeptName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("dept_name");

                entity.Property(e => e.DeptRemark)
                    .HasMaxLength(100)
                    .HasColumnName("dept_remark");

                entity.Property(e => e.DeptSort).HasColumnName("dept_sort");

                entity.Property(e => e.DeptThirdPartId)
                    .HasMaxLength(50)
                    .HasColumnName("dept_thirdPartId");
            });

            modelBuilder.Entity<ViewDeptsService>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Depts_Services");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("dept_code");

                entity.Property(e => e.DeptId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("dept_id");

                entity.Property(e => e.DeptIdentityId).HasColumnName("dept_identityID");

                entity.Property(e => e.DeptMasterPositionId)
                    .HasMaxLength(50)
                    .HasColumnName("dept_masterPositionId");

                entity.Property(e => e.DeptName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("dept_name");

                entity.Property(e => e.DeptRemark)
                    .HasMaxLength(100)
                    .HasColumnName("dept_remark");

                entity.Property(e => e.DeptSort).HasColumnName("dept_sort");

                entity.Property(e => e.DeptThirdPartId)
                    .HasMaxLength(50)
                    .HasColumnName("dept_thirdPartId");
            });

            modelBuilder.Entity<ViewDraftInfoDraftCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_DraftInfo_DraftCode");

                entity.Property(e => e.DraftCode).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.SignCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewDraftInfoWarning>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_DraftInfo_Warning");

                entity.Property(e => e.Damount)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("DAmount");

                entity.Property(e => e.DraftCode).HasMaxLength(50);

                entity.Property(e => e.DraftType).HasMaxLength(50);

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.DueDateStr)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.StatusName)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewEmployeeBasicInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Employee_BasicInfo");

                entity.Property(e => e.A0100)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.College)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ContactDegree)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ContactDegree1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ContactNum)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ContactValid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Degree)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EnterDate).HasColumnType("datetime");

                entity.Property(e => e.EnterJob).HasColumnType("datetime");

                entity.Property(e => e.GraduateDate).HasColumnType("datetime");

                entity.Property(e => e.Major)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.姓名)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.学历)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.身份证号)
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.部门)
                    .HasMaxLength(40)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewExamAbroadUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Exam_AbroadUser");

                entity.Property(e => e.BeginDate)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DeptName).HasMaxLength(50);

                entity.Property(e => e.EndDate)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.Mobile).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");

                entity.Property(e => e.RequestRealName).HasMaxLength(30);

                entity.Property(e => e.RequestTelephone).HasMaxLength(20);

                entity.Property(e => e.SId).HasColumnName("sID");

                entity.Property(e => e.Tvcountry).HasColumnName("TVCountry");

                entity.Property(e => e.UserKey).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewExpenseClaimAbroadInfomation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_ExpenseClaimAbroadInfomation");

                entity.Property(e => e.Enddate).HasColumnType("datetime");

                entity.Property(e => e.LoginName).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.RealName).HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UserIdentity).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewExpenseClaimByTripInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_ExpenseClaimByTripInfo");

                entity.Property(e => e.BeginDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.PersonLogin).HasMaxLength(50);

                entity.Property(e => e.PersonRealName).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.UserIdentity)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewExpenseClaimCashierConfirmDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ExpenseClaim_CashierConfirm_Details");

                entity.Property(e => e.BusinessCardcode).HasMaxLength(200);

                entity.Property(e => e.C012c)
                    .HasMaxLength(50)
                    .HasColumnName("C012C");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.MoneyActual).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.ProcessName).HasMaxLength(500);

                entity.Property(e => e.RequestIdNum)
                    .HasMaxLength(50)
                    .HasColumnName("Request_IdNum");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName");

                entity.Property(e => e.RequestUserIdentity)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserIdentity");

                entity.Property(e => e.TravelClaimCategory)
                    .HasMaxLength(20)
                    .HasColumnName("Travel_ClaimCategory");
            });

            modelBuilder.Entity<ViewExpenseClaimInfomation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_ExpenseClaimInfomation");

                entity.Property(e => e.Enddate).HasColumnType("datetime");

                entity.Property(e => e.LoginName).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(500);

                entity.Property(e => e.RealName).HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UserIdentity)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewExpensingInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_ExpensingInfo");

                entity.Property(e => e.ClaimsDepartmentCode).HasMaxLength(50);

                entity.Property(e => e.ClaimsDepartmentName).HasMaxLength(200);

                entity.Property(e => e.Currency).HasMaxLength(50);

                entity.Property(e => e.MoneyRmb)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("Money_RMB");

                entity.Property(e => e.MoneyYb)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("MONEY_YB");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(200);

                entity.Property(e => e.ProjectName).HasMaxLength(2000);

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName");

                entity.Property(e => e.RequestUserIdentity)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserIdentity");
            });

            modelBuilder.Entity<ViewExpensingInfoAll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_ExpensingInfoAll");

                entity.Property(e => e.ClaimsDepartmentCode).HasMaxLength(50);

                entity.Property(e => e.ClaimsDepartmentName).HasMaxLength(200);

                entity.Property(e => e.Currency).HasMaxLength(50);

                entity.Property(e => e.MoneyRmb)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("Money_RMB");

                entity.Property(e => e.MoneyYb)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("MONEY_YB");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(200);

                entity.Property(e => e.ProjectName).HasMaxLength(500);

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName");

                entity.Property(e => e.RequestUserIdentity)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserIdentity");
            });

            modelBuilder.Entity<ViewFinanceForProjectBalanceAward>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Finance_ForProjectBalanceAward");

                entity.Property(e => e.PayCategoryName).HasMaxLength(50);

                entity.Property(e => e.PaymentAmount).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.PaymentNodeName).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(200);

                entity.Property(e => e.ProjectName).HasMaxLength(200);
            });

            modelBuilder.Entity<ViewFinanceForProjectBalanceAwardBak>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Finance_ForProjectBalanceAward_bak");

                entity.Property(e => e.ApproveMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Incident).HasColumnName("incident");

                entity.Property(e => e.ProcessName)
                    .HasMaxLength(500)
                    .HasColumnName("processName");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(200)
                    .HasColumnName("projectCode");

                entity.Property(e => e.SubjectCode)
                    .HasMaxLength(50)
                    .HasColumnName("subjectCode");
            });

            modelBuilder.Entity<ViewFinanceInfoForReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_FinanceInfo_ForReport");

                entity.Property(e => e.AccountingAuditLoginUserName).HasMaxLength(50);

                entity.Property(e => e.AccountingAuditUserName).HasMaxLength(50);

                entity.Property(e => e.CasierClaimLoginUserName).HasMaxLength(50);

                entity.Property(e => e.CasierClaimUserName).HasMaxLength(50);

                entity.Property(e => e.Currency).HasMaxLength(100);

                entity.Property(e => e.ExchangeToRmb)
                    .HasColumnType("decimal(30, 6)")
                    .HasColumnName("ExchangeToRMB");

                entity.Property(e => e.ForCustomer).HasMaxLength(500);

                entity.Property(e => e.ForDeptName).HasMaxLength(2053);

                entity.Property(e => e.FormNumber).HasMaxLength(70);

                entity.Property(e => e.FormType).HasMaxLength(63);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.PaymentAmount).HasColumnType("decimal(30, 6)");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(200);

                entity.Property(e => e.ProjectName).HasMaxLength(2000);

                entity.Property(e => e.RequestDate).HasColumnType("datetime");

                entity.Property(e => e.RequestLoginName).HasMaxLength(50);

                entity.Property(e => e.RequestRealName).HasMaxLength(100);

                entity.Property(e => e.VoucherCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewFinanceInfoPayment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_FinanceInfo_Payment");

                entity.Property(e => e.AccountingAuditLoginUserName).HasMaxLength(50);

                entity.Property(e => e.AccountingAuditUserName).HasMaxLength(50);

                entity.Property(e => e.AppDate01).HasColumnType("datetime");

                entity.Property(e => e.AppDate02).HasColumnType("datetime");

                entity.Property(e => e.ApproveResult01)
                    .HasMaxLength(200)
                    .HasColumnName("Approve_Result01");

                entity.Property(e => e.ApproveResult02)
                    .HasMaxLength(200)
                    .HasColumnName("Approve_Result02");

                entity.Property(e => e.CasierClaimLoginUserName).HasMaxLength(50);

                entity.Property(e => e.CasierClaimUserName).HasMaxLength(50);

                entity.Property(e => e.Currency).HasMaxLength(50);

                entity.Property(e => e.CustomerProvider).HasMaxLength(500);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.FormType).HasMaxLength(50);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.OperateUserName).HasMaxLength(50);

                entity.Property(e => e.PayStatusName)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentAmount).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.ProDept).HasMaxLength(403);

                entity.Property(e => e.ProcessName).HasMaxLength(500);

                entity.Property(e => e.RequestDate).HasColumnType("datetime");

                entity.Property(e => e.RequestRealName).HasMaxLength(100);

                entity.Property(e => e.StepName01).HasMaxLength(200);

                entity.Property(e => e.StepName02).HasMaxLength(200);

                entity.Property(e => e.Vchrnum).HasMaxLength(50);

                entity.Property(e => e.VoucherCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewFinanceInfoVoucherId>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_FinanceInfo_VoucherID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Voucherid).HasColumnName("VOUCHERID");
            });

            modelBuilder.Entity<ViewFinanceInvoicesInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_Finance_InvoicesInfo");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.OwnerCode).HasMaxLength(50);

                entity.Property(e => e.OwnerName).HasMaxLength(500);

                entity.Property(e => e.ProcessName).HasMaxLength(200);

                entity.Property(e => e.ProjectCode).HasMaxLength(50);

                entity.Property(e => e.ProjectName).HasMaxLength(500);

                entity.Property(e => e.RenInvoicesAmount).HasColumnType("decimal(38, 2)");
            });

            modelBuilder.Entity<ViewFinancePayHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Finance_Pay_History");

                entity.Property(e => e.Bz)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("bz");

                entity.Property(e => e.ContType)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("cont_type");

                entity.Property(e => e.Czr)
                    .HasMaxLength(50)
                    .HasColumnName("czr");

                entity.Property(e => e.Dzsj)
                    .HasColumnType("datetime")
                    .HasColumnName("dzsj");

                entity.Property(e => e.Fkjd)
                    .HasMaxLength(50)
                    .HasColumnName("fkjd");

                entity.Property(e => e.Fkje)
                    .HasColumnType("decimal(20, 4)")
                    .HasColumnName("fkje");

                entity.Property(e => e.Fksj)
                    .HasColumnType("datetime")
                    .HasColumnName("fksj");

                entity.Property(e => e.Htbh)
                    .HasMaxLength(200)
                    .HasColumnName("htbh");

                entity.Property(e => e.Htlx).HasColumnName("htlx");

                entity.Property(e => e.Htlxname)
                    .HasMaxLength(50)
                    .HasColumnName("htlxname");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Jbr)
                    .HasMaxLength(50)
                    .HasColumnName("jbr");

                entity.Property(e => e.PaymentNodeName).HasMaxLength(50);

                entity.Property(e => e.ReceiveBillAmount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.RequestPayCategoryName).HasMaxLength(50);

                entity.Property(e => e.Rmb)
                    .HasColumnType("decimal(20, 4)")
                    .HasColumnName("rmb");

                entity.Property(e => e.Xmbh)
                    .HasMaxLength(200)
                    .HasColumnName("xmbh");
            });

            modelBuilder.Entity<ViewFinancePayProcessing>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Finance_Pay_Processing");

                entity.Property(e => e.Bz)
                    .HasMaxLength(200)
                    .HasColumnName("bz");

                entity.Property(e => e.ContType)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("cont_type");

                entity.Property(e => e.Czr).HasColumnName("czr");

                entity.Property(e => e.Dzsj).HasColumnName("dzsj");

                entity.Property(e => e.Fkjd)
                    .HasMaxLength(50)
                    .HasColumnName("fkjd");

                entity.Property(e => e.Fkje)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("fkje");

                entity.Property(e => e.Fksj)
                    .HasColumnType("datetime")
                    .HasColumnName("fksj");

                entity.Property(e => e.Htbh)
                    .HasMaxLength(50)
                    .HasColumnName("htbh");

                entity.Property(e => e.Htlx).HasColumnName("htlx");

                entity.Property(e => e.Htlxname)
                    .HasMaxLength(50)
                    .HasColumnName("htlxname");

                entity.Property(e => e.ID).HasColumnName("iD");

                entity.Property(e => e.Jbr)
                    .HasMaxLength(50)
                    .HasColumnName("jbr");

                entity.Property(e => e.PaymentNodeName).HasMaxLength(50);

                entity.Property(e => e.RequestPayCategoryName).HasMaxLength(50);

                entity.Property(e => e.Rmb)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("rmb");

                entity.Property(e => e.Xmbh)
                    .HasMaxLength(200)
                    .HasColumnName("xmbh");
            });

            modelBuilder.Entity<ViewFinanceProjectAward>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Finance_ProjectAward");

                entity.Property(e => e.Amount).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.ProjectCode).HasMaxLength(200);
            });

            modelBuilder.Entity<ViewFinanceProjectOperationCost>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Finance_ProjectOperationCost");

                entity.Property(e => e.Amount).HasColumnType("numeric(38, 2)");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewFinanceRecInvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Finance_RecInvoices");

                entity.Property(e => e.AmountCnt)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("AmountCNT");

                entity.Property(e => e.ContractCode).HasMaxLength(500);

                entity.Property(e => e.ContractName).HasMaxLength(1500);

                entity.Property(e => e.PayActualAmount).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.PayAmount).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.PayFormNumber).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(200);

                entity.Property(e => e.ProjectName).HasMaxLength(500);

                entity.Property(e => e.RecBankAccount).HasMaxLength(50);

                entity.Property(e => e.RecBillsAmount).HasColumnType("decimal(21, 4)");

                entity.Property(e => e.RecCompanyCode).HasMaxLength(50);

                entity.Property(e => e.RecCompanyName).HasMaxLength(2000);

                entity.Property(e => e.RecInvoiceDate).HasColumnType("datetime");

                entity.Property(e => e.RecInvoicesAmount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.RequestIdentity).HasMaxLength(50);

                entity.Property(e => e.RequestLoginName).HasMaxLength(50);

                entity.Property(e => e.RequestRealName).HasMaxLength(50);

                entity.Property(e => e.SupplierCode).HasMaxLength(50);

                entity.Property(e => e.SupplierName).HasMaxLength(2000);

                entity.Property(e => e.TransactorIdentity).HasMaxLength(50);

                entity.Property(e => e.TransactorLoginName).HasMaxLength(50);

                entity.Property(e => e.TransactorRealName).HasMaxLength(50);

                entity.Property(e => e.WithholdingTax).HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<ViewFinanceReceiveAmountInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_FinanceReceiveAmountInfo");

                entity.Property(e => e.Dfamount)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("DFAmount");

                entity.Property(e => e.DfconfimStatus).HasColumnName("DFconfimStatus");

                entity.Property(e => e.PayCmpCode).HasMaxLength(30);

                entity.Property(e => e.PayCmpName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.PaymentAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ProcessFinish).HasColumnType("datetime");

                entity.Property(e => e.ProcessName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProjectCategory).HasMaxLength(50);

                entity.Property(e => e.ProjectCategorySub)
                    .HasMaxLength(50)
                    .HasColumnName("ProjectCategory_Sub");

                entity.Property(e => e.ProjectCode).HasMaxLength(50);

                entity.Property(e => e.ProjectJnw)
                    .HasMaxLength(50)
                    .HasColumnName("ProjectJNW");

                entity.Property(e => e.ProjectName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.RequestFormNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Request_FormNumber");

                entity.Property(e => e.RequestLoginName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName");

                entity.Property(e => e.RequestRealName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Telamount)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("TELAmount");
            });

            modelBuilder.Entity<ViewFinanceReceiveHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Finance_Receive_History");

                entity.Property(e => e.Bz)
                    .HasMaxLength(100)
                    .HasColumnName("bz");

                entity.Property(e => e.ContType)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("cont_type");

                entity.Property(e => e.Czr)
                    .HasMaxLength(50)
                    .HasColumnName("czr");

                entity.Property(e => e.Dzsj)
                    .HasColumnType("datetime")
                    .HasColumnName("dzsj");

                entity.Property(e => e.Htbh)
                    .HasMaxLength(100)
                    .HasColumnName("htbh");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Jbr)
                    .HasMaxLength(50)
                    .HasColumnName("jbr");

                entity.Property(e => e.RequestNodeName).HasMaxLength(100);

                entity.Property(e => e.RequestPayCategoryName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Rmb)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("rmb");

                entity.Property(e => e.Skjd)
                    .HasMaxLength(100)
                    .HasColumnName("skjd");

                entity.Property(e => e.Skje)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("skje");

                entity.Property(e => e.SkjeOcForPer)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("skje_oc_ForPer");

                entity.Property(e => e.Sksj)
                    .HasColumnType("datetime")
                    .HasColumnName("sksj");

                entity.Property(e => e.TcpOperate).HasColumnName("Tcp_Operate");

                entity.Property(e => e.Xmbh)
                    .HasMaxLength(100)
                    .HasColumnName("xmbh");

                entity.Property(e => e.ZsHv).HasColumnType("decimal(18, 4)");
            });

            modelBuilder.Entity<ViewFinanceReceiveofTaxHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Finance_ReceiveofTax_History");

                entity.Property(e => e.Bz)
                    .HasMaxLength(100)
                    .HasColumnName("bz");

                entity.Property(e => e.ContType)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("cont_type");

                entity.Property(e => e.Czr)
                    .HasMaxLength(50)
                    .HasColumnName("czr");

                entity.Property(e => e.Dzsj)
                    .HasColumnType("datetime")
                    .HasColumnName("dzsj");

                entity.Property(e => e.Htbh)
                    .HasMaxLength(100)
                    .HasColumnName("htbh");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Jbr)
                    .HasMaxLength(50)
                    .HasColumnName("jbr");

                entity.Property(e => e.RequestNodeName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RequestPayCategoryName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Rmb)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("rmb");

                entity.Property(e => e.Skjd)
                    .HasMaxLength(100)
                    .HasColumnName("skjd");

                entity.Property(e => e.Skje)
                    .HasColumnType("decimal(19, 2)")
                    .HasColumnName("skje");

                entity.Property(e => e.Sksj)
                    .HasColumnType("datetime")
                    .HasColumnName("sksj");

                entity.Property(e => e.Xmbh)
                    .HasMaxLength(100)
                    .HasColumnName("xmbh");
            });

            modelBuilder.Entity<ViewFinanceRenInvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Finance_RenInvoices");

                entity.Property(e => e.ConstructionParagraph).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.ContractCode)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ContractName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DesignParagraph).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.EquipmentParagraph).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.InvoiceCategoryText).HasMaxLength(50);

                entity.Property(e => e.OwnerCode).HasMaxLength(50);

                entity.Property(e => e.OwnerName).HasMaxLength(500);

                entity.Property(e => e.PayBankAccount).HasMaxLength(500);

                entity.Property(e => e.PayCompanyCode).HasMaxLength(50);

                entity.Property(e => e.PayCompanyName).HasMaxLength(500);

                entity.Property(e => e.ProjectCode).HasMaxLength(50);

                entity.Property(e => e.ProjectName).HasMaxLength(500);

                entity.Property(e => e.RecActualAmount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.RecAmount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.RecFormNumber).HasMaxLength(50);

                entity.Property(e => e.RenBillsAmount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.RenInvoiceDate).HasColumnType("datetime");

                entity.Property(e => e.RenInvoicesAmount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.RequestIdentity).HasMaxLength(50);

                entity.Property(e => e.RequestLoginName).HasMaxLength(50);

                entity.Property(e => e.RequestRealName).HasMaxLength(50);

                entity.Property(e => e.ServicesParagraph).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Taxrate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("taxrate");

                entity.Property(e => e.TransactorIdentity).HasMaxLength(50);

                entity.Property(e => e.TransactorLoginName).HasMaxLength(50);

                entity.Property(e => e.TransactorRealName).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewFinanceRenInvoices20160930bak>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Finance_RenInvoices_20160930bak");

                entity.Property(e => e.ContractCode)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ContractName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InvoiceCategoryText).HasMaxLength(50);

                entity.Property(e => e.OwnerCode).HasMaxLength(50);

                entity.Property(e => e.OwnerName).HasMaxLength(500);

                entity.Property(e => e.PayBankAccount).HasMaxLength(500);

                entity.Property(e => e.PayCompanyCode).HasMaxLength(50);

                entity.Property(e => e.PayCompanyName).HasMaxLength(500);

                entity.Property(e => e.ProjectCode).HasMaxLength(50);

                entity.Property(e => e.ProjectName).HasMaxLength(500);

                entity.Property(e => e.RecActualAmount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.RecAmount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.RecFormNumber).HasMaxLength(50);

                entity.Property(e => e.RenBillsAmount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.RenInvoiceDate).HasColumnType("datetime");

                entity.Property(e => e.RenInvoicesAmount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.RequestIdentity).HasMaxLength(50);

                entity.Property(e => e.RequestLoginName).HasMaxLength(50);

                entity.Property(e => e.RequestRealName).HasMaxLength(50);

                entity.Property(e => e.TransactorIdentity).HasMaxLength(50);

                entity.Property(e => e.TransactorLoginName).HasMaxLength(50);

                entity.Property(e => e.TransactorRealName).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewFinanceRequestInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_FinanceRequestInfo");

                entity.Property(e => e.AccountReceiveCmpCode).HasMaxLength(50);

                entity.Property(e => e.BankNoticeNo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.BillAmount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.BuckleWaElecAmount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Currency).HasMaxLength(50);

                entity.Property(e => e.DbankCharges).HasColumnName("DBankCharges");

                entity.Property(e => e.DigestDescribition).HasMaxLength(500);

                entity.Property(e => e.DraftAmount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.DtaxWithholding)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("DTaxWithholding");

                entity.Property(e => e.DwithholdingAmount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.FId).HasColumnName("F_ID");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.OtherAmount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.OwnerForfeit).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.OwnersDealWithSubject)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.PaidAmount)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.PayCmpCode).HasMaxLength(30);

                entity.Property(e => e.PayCmpName).HasMaxLength(500);

                entity.Property(e => e.PayInfoAmount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.PaymentAmount).HasColumnType("decimal(19, 2)");

                entity.Property(e => e.PlanInAcctDate).HasColumnType("datetime");

                entity.Property(e => e.ProcessName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProjectCategory).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(50);

                entity.Property(e => e.ProjectName).HasMaxLength(500);

                entity.Property(e => e.ProjectPayment).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Ramount)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("RAmount");

                entity.Property(e => e.ReceiptAmount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.ReceiveAmountTotal).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.ReceivedType).HasMaxLength(100);

                entity.Property(e => e.ReceivingAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RequestRealName).HasMaxLength(50);

                entity.Property(e => e.StandardExchangeRate).HasColumnType("decimal(26, 10)");

                entity.Property(e => e.SubjectCode)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.SubjectName)
                    .HasMaxLength(23)
                    .IsUnicode(false);

                entity.Property(e => e.TelegraphicTransferAmount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.ValueAddedTax).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.WaElecAmount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.WithholdingOfVat)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("WithholdingOfVAT");
            });

            modelBuilder.Entity<ViewFinanceTaskBusinessTable>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_FinanceTask_BusinessTable");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("amount");

                entity.Property(e => e.AmountBj)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("amount_bj");

                entity.Property(e => e.AuditName).HasMaxLength(50);

                entity.Property(e => e.AuditNameBj)
                    .HasMaxLength(50)
                    .HasColumnName("AuditName_bj");

                entity.Property(e => e.CasierClaim).HasMaxLength(50);

                entity.Property(e => e.CasierClaimBj)
                    .HasMaxLength(50)
                    .HasColumnName("CasierClaim_bj");

                entity.Property(e => e.CompanyCode).HasMaxLength(500);

                entity.Property(e => e.CompanyName).HasMaxLength(500);

                entity.Property(e => e.ContractUnitCode).HasMaxLength(50);

                entity.Property(e => e.ContractUnitName).HasMaxLength(500);

                entity.Property(e => e.Currency).HasColumnName("currency");

                entity.Property(e => e.FormCode).HasMaxLength(50);

                entity.Property(e => e.IDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("iDeptCode");

                entity.Property(e => e.IDeptName)
                    .HasMaxLength(500)
                    .HasColumnName("iDeptName");

                entity.Property(e => e.ITypeCode).HasColumnName("iTypeCode");

                entity.Property(e => e.ITypeName)
                    .HasMaxLength(100)
                    .HasColumnName("iTypeName");

                entity.Property(e => e.PMethodCode).HasColumnName("pMethodCode");

                entity.Property(e => e.PMethodName).HasColumnName("pMethodName");

                entity.Property(e => e.ProCode).HasColumnName("proCode");

                entity.Property(e => e.ProName).HasColumnName("proName");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.VoucherId).HasColumnName("VoucherID");

                entity.Property(e => e.Zbbt).HasColumnName("zbbt");
            });

            modelBuilder.Entity<ViewFinanceTaskBusinessTableBak2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_FinanceTask_BusinessTable_Bak2");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("amount");

                entity.Property(e => e.AuditName).HasMaxLength(50);

                entity.Property(e => e.CasierClaim).HasMaxLength(50);

                entity.Property(e => e.CompanyCode).HasMaxLength(500);

                entity.Property(e => e.CompanyName).HasMaxLength(500);

                entity.Property(e => e.Currency).HasColumnName("currency");

                entity.Property(e => e.FormCode).HasMaxLength(50);

                entity.Property(e => e.IDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("iDeptCode");

                entity.Property(e => e.IDeptName)
                    .HasMaxLength(500)
                    .HasColumnName("iDeptName");

                entity.Property(e => e.ITypeCode).HasColumnName("iTypeCode");

                entity.Property(e => e.ITypeName)
                    .HasMaxLength(100)
                    .HasColumnName("iTypeName");

                entity.Property(e => e.PMethodCode).HasColumnName("pMethodCode");

                entity.Property(e => e.PMethodName).HasColumnName("pMethodName");

                entity.Property(e => e.ProCode).HasColumnName("proCode");

                entity.Property(e => e.ProName)
                    .HasMaxLength(2000)
                    .HasColumnName("proName");

                entity.Property(e => e.ProcessName).HasMaxLength(500);

                entity.Property(e => e.VoucherId).HasColumnName("VoucherID");
            });

            modelBuilder.Entity<ViewFinanceTaskBusinessTableCompelete>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_FinanceTask_BusinessTable_Compelete");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("amount");

                entity.Property(e => e.AmountBj)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("amount_bj");

                entity.Property(e => e.AuditName).HasMaxLength(50);

                entity.Property(e => e.AuditNameBj)
                    .HasMaxLength(50)
                    .HasColumnName("AuditName_bj");

                entity.Property(e => e.CasierClaim).HasMaxLength(50);

                entity.Property(e => e.CasierClaimBj)
                    .HasMaxLength(50)
                    .HasColumnName("CasierClaim_bj");

                entity.Property(e => e.CompanyCode).HasMaxLength(500);

                entity.Property(e => e.CompanyName).HasMaxLength(500);

                entity.Property(e => e.ContractUnitCode).HasMaxLength(50);

                entity.Property(e => e.ContractUnitName).HasMaxLength(500);

                entity.Property(e => e.Currency).HasColumnName("currency");

                entity.Property(e => e.FormCode).HasMaxLength(50);

                entity.Property(e => e.IDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("iDeptCode");

                entity.Property(e => e.IDeptName)
                    .HasMaxLength(500)
                    .HasColumnName("iDeptName");

                entity.Property(e => e.ITypeCode).HasColumnName("iTypeCode");

                entity.Property(e => e.ITypeName)
                    .HasMaxLength(100)
                    .HasColumnName("iTypeName");

                entity.Property(e => e.PMethodCode).HasColumnName("pMethodCode");

                entity.Property(e => e.PMethodName).HasColumnName("pMethodName");

                entity.Property(e => e.ProCode).HasColumnName("proCode");

                entity.Property(e => e.ProName).HasColumnName("proName");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.VoucherId).HasColumnName("VoucherID");
            });

            modelBuilder.Entity<ViewFinanceTaskBusinessTableOfFp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_FinanceTask_BusinessTable_OfFP");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.AuditName).HasMaxLength(50);

                entity.Property(e => e.CasierClaim).HasMaxLength(50);

                entity.Property(e => e.CompanyCode).HasMaxLength(50);

                entity.Property(e => e.CompanyName).HasMaxLength(500);

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("currency");

                entity.Property(e => e.FormCode).HasMaxLength(50);

                entity.Property(e => e.IDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("iDeptCode");

                entity.Property(e => e.IDeptName)
                    .HasMaxLength(500)
                    .HasColumnName("iDeptName");

                entity.Property(e => e.ITypeCode).HasColumnName("iTypeCode");

                entity.Property(e => e.ITypeName).HasColumnName("iTypeName");

                entity.Property(e => e.PMethodCode).HasColumnName("pMethodCode");

                entity.Property(e => e.PMethodName).HasColumnName("pMethodName");

                entity.Property(e => e.ProCode)
                    .HasMaxLength(50)
                    .HasColumnName("proCode");

                entity.Property(e => e.ProName)
                    .HasMaxLength(500)
                    .HasColumnName("proName");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.VoucherId).HasColumnName("VoucherID");
            });

            modelBuilder.Entity<ViewFinanceTaskBusinessTableOutSide>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_FinanceTask_BusinessTable_OutSide");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("amount");

                entity.Property(e => e.AuditBusinessName).HasMaxLength(20);

                entity.Property(e => e.CasierClaim).HasMaxLength(20);

                entity.Property(e => e.Currency).HasColumnName("currency");

                entity.Property(e => e.FormCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.IDeptCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("iDeptCode");

                entity.Property(e => e.IDeptName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("iDeptName");

                entity.Property(e => e.ITypeCode).HasColumnName("iTypeCode");

                entity.Property(e => e.ITypeName)
                    .HasMaxLength(100)
                    .HasColumnName("iTypeName");

                entity.Property(e => e.PMethodCode)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("pMethodCode");

                entity.Property(e => e.PMethodName).HasColumnName("pMethodName");

                entity.Property(e => e.PayCmpCode).HasMaxLength(30);

                entity.Property(e => e.PayCmpName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ProCode)
                    .HasMaxLength(50)
                    .HasColumnName("proCode");

                entity.Property(e => e.ProName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("proName");

                entity.Property(e => e.ProcessName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Voucherid).HasColumnName("VOUCHERID");
            });

            modelBuilder.Entity<ViewFinanceTaskBusinessTableReceivable>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_FinanceTask_BusinessTable_Receivables");

                entity.Property(e => e.AccountReceiveCmpCode).HasMaxLength(50);

                entity.Property(e => e.AccountReceiveCmpName).HasMaxLength(200);

                entity.Property(e => e.BillAmount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.BillNumber).HasMaxLength(50);

                entity.Property(e => e.InvoiceNumber).HasMaxLength(50);

                entity.Property(e => e.OffSingleNumber).HasMaxLength(50);

                entity.Property(e => e.PayCmpBankAcct)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.PayCmpName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.PlanInAcctDate).HasColumnType("datetime");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(50);

                entity.Property(e => e.ProjectName).HasMaxLength(500);

                entity.Property(e => e.ReceiptAmount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Taxwithholding).HasColumnType("decimal(38, 2)");
            });

            modelBuilder.Entity<ViewFinanceTaskBusinessTableTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_FinanceTask_BusinessTable_TEMP");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("amount");

                entity.Property(e => e.AmountBj)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("amount_bj");

                entity.Property(e => e.AuditName).HasMaxLength(50);

                entity.Property(e => e.AuditNameBj)
                    .HasMaxLength(50)
                    .HasColumnName("AuditName_bj");

                entity.Property(e => e.CasierClaim).HasMaxLength(50);

                entity.Property(e => e.CasierClaimBj)
                    .HasMaxLength(50)
                    .HasColumnName("CasierClaim_bj");

                entity.Property(e => e.CompanyCode).HasMaxLength(50);

                entity.Property(e => e.CompanyName).HasMaxLength(500);

                entity.Property(e => e.Currency)
                    .HasMaxLength(50)
                    .HasColumnName("currency");

                entity.Property(e => e.FormCode).HasMaxLength(50);

                entity.Property(e => e.IDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("iDeptCode");

                entity.Property(e => e.IDeptName)
                    .HasMaxLength(200)
                    .HasColumnName("iDeptName");

                entity.Property(e => e.ITypeCode).HasColumnName("iTypeCode");

                entity.Property(e => e.ITypeName)
                    .HasMaxLength(50)
                    .HasColumnName("iTypeName");

                entity.Property(e => e.PMethodCode).HasColumnName("pMethodCode");

                entity.Property(e => e.PMethodName)
                    .HasMaxLength(50)
                    .HasColumnName("pMethodName");

                entity.Property(e => e.ProCode)
                    .HasMaxLength(200)
                    .HasColumnName("proCode");

                entity.Property(e => e.ProName)
                    .HasMaxLength(500)
                    .HasColumnName("proName");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.RequestLoginName).HasMaxLength(50);

                entity.Property(e => e.RequestRealName).HasMaxLength(50);

                entity.Property(e => e.VoucherId).HasColumnName("VoucherID");

                entity.Property(e => e.Zbbt).HasColumnName("zbbt");
            });

            modelBuilder.Entity<ViewGeneralExpensesCashierConfirmDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_GeneralExpenses_CashierConfirm_Details");

                entity.Property(e => e.Bxr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("bxr");

                entity.Property(e => e.Bxrcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("bxrcode");

                entity.Property(e => e.Bxridnumber)
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasColumnName("bxridnumber");

                entity.Property(e => e.Jbr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("jbr");

                entity.Property(e => e.Jbrcode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("jbrcode");

                entity.Property(e => e.Jbridnumber)
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasColumnName("jbridnumber");

                entity.Property(e => e.ProcessName).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewGeneralExpensesPayInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_GeneralExpensesPayInfo");

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AmountRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AmountRMB");

                entity.Property(e => e.ApplyLoginName).HasMaxLength(50);

                entity.Property(e => e.ApplyRealName).HasMaxLength(50);

                entity.Property(e => e.ApplyUseridentity).HasMaxLength(50);

                entity.Property(e => e.Beyond).HasMaxLength(50);

                entity.Property(e => e.BillAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BillCode).HasMaxLength(50);

                entity.Property(e => e.BillTaxAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ExpenseTypeName).HasMaxLength(50);

                entity.Property(e => e.FinanceChangeLocalCurrencyAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FinancePaymentTotal).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InvoiceCategoryText).HasMaxLength(50);

                entity.Property(e => e.InvoiceCode).HasMaxLength(50);

                entity.Property(e => e.InvoiceDate).HasColumnType("datetime");

                entity.Property(e => e.IsTaxVoucher).HasMaxLength(50);

                entity.Property(e => e.PayInfoFormNumber)
                    .HasMaxLength(50)
                    .HasColumnName("PayInfo_FormNumber");

                entity.Property(e => e.PayInfoReceiveCpmpany)
                    .HasMaxLength(200)
                    .HasColumnName("PayInfo_ReceiveCpmpany");

                entity.Property(e => e.PaymentReceivingCompanyCode).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.Rate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.TaxRate).HasMaxLength(50);

                entity.Property(e => e.TaxRateName).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewGetPerson>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_GetPersons");

                entity.Property(e => e.Dept)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Personcount).HasColumnName("personcount");
            });

            modelBuilder.Entity<ViewGrtLtChangeInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_GrtLtChangeInfo");

                entity.Property(e => e.ClaimAmt).HasColumnType("decimal(30, 2)");

                entity.Property(e => e.DelayEdDt).HasColumnType("date");

                entity.Property(e => e.HdId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .HasColumnName("HdID");

                entity.Property(e => e.IsDelayStr)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.IsSueForPayStr)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.IsSueStr)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.OrigIsSetBackStr)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewGrtLtForCheck>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_GrtLtForCheck");

                entity.Property(e => e.ContractCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EndDate).HasColumnType("date");

                entity.Property(e => e.GuaranteeName).HasMaxLength(50);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewGrtLtForCheckForPayment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_GrtLtForCheck_ForPayment");

                entity.Property(e => e.ContractCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EndDate).HasColumnType("date");

                entity.Property(e => e.GuaranteeName).HasMaxLength(50);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewHDispathUserInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_H_Dispath_UserInfo");

                entity.Property(e => e.DeptNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MainDeptNo)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserKey)
                    .HasMaxLength(18)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewHappenedCostOfOccurrence>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_HappenedCostOfOccurrence");

                entity.Property(e => e.Amount).HasColumnType("numeric(38, 2)");

                entity.Property(e => e.Deptcode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DEPTCODE");

                entity.Property(e => e.Nd).HasColumnName("ND");

                entity.Property(e => e.ProcessName).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewHappeningCostOfOccurrence>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_HappeningCostOfOccurrence");

                entity.Property(e => e.AmountIng).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.ProName).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewHasHappenedBorrowMoneyInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_HasHappened_BorrowMoneyInfo");

                entity.Property(e => e.BorrowMoneySmall)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("BorrowMoney_Small");

                entity.Property(e => e.BorrowTypeText).HasMaxLength(50);

                entity.Property(e => e.ConfirmDate).HasColumnType("datetime");

                entity.Property(e => e.CurrencyAbbreviation).HasMaxLength(50);

                entity.Property(e => e.MoneyYb)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("MONEY_YB");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(400);

                entity.Property(e => e.ProjectName).HasMaxLength(2000);

                entity.Property(e => e.Rate).HasColumnType("decimal(20, 6)");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(100)
                    .HasColumnName("Request_DeptCode");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(200)
                    .HasColumnName("Request_DeptName");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(200)
                    .HasColumnName("Request_RealName");

                entity.Property(e => e.RequestUserIdentity)
                    .HasMaxLength(100)
                    .HasColumnName("Request_UserIdentity");

                entity.Property(e => e.RequstLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Requst_LoginName");
            });

            modelBuilder.Entity<ViewHasHappenedBorrowMoneyInfoCheck>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_HasHappened_BorrowMoneyInfo_Check");

                entity.Property(e => e.BorrowMoneySmall)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("BorrowMoney_Small");

                entity.Property(e => e.BorrowTypeText).HasMaxLength(50);

                entity.Property(e => e.ConfirmDate).HasColumnType("datetime");

                entity.Property(e => e.CurrencyAbbreviation).HasMaxLength(50);

                entity.Property(e => e.MoneyYb)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("MONEY_YB");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(400);

                entity.Property(e => e.ProjectName).HasMaxLength(2000);

                entity.Property(e => e.Rate).HasColumnType("decimal(20, 6)");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(100)
                    .HasColumnName("Request_DeptCode");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(200)
                    .HasColumnName("Request_DeptName");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(200)
                    .HasColumnName("Request_RealName");

                entity.Property(e => e.RequestUserIdentity)
                    .HasMaxLength(100)
                    .HasColumnName("Request_UserIdentity");

                entity.Property(e => e.RequstLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Requst_LoginName");
            });

            modelBuilder.Entity<ViewHasHappeningBorrowMoneyInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_HasHappening_BorrowMoneyInfo");

                entity.Property(e => e.BorrowMoneySmall)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BorrowMoney_Small");

                entity.Property(e => e.BorrowTypeText).HasMaxLength(20);

                entity.Property(e => e.CurrencyAb)
                    .HasMaxLength(20)
                    .HasColumnName("CurrencyAB");

                entity.Property(e => e.MoneyYb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MONEY_YB");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(200);

                entity.Property(e => e.ProjectName).HasMaxLength(2000);

                entity.Property(e => e.Rate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptCode");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(200)
                    .HasColumnName("Request_DeptName");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(100)
                    .HasColumnName("Request_RealName");

                entity.Property(e => e.RequestUserIdentity)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserIdentity");
            });

            modelBuilder.Entity<ViewHasIncurredExpensesInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_HasIncurredExpensesInfo");

                entity.Property(e => e.Amount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.ExpensesName)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectCode).HasMaxLength(200);
            });

            modelBuilder.Entity<ViewHousingsubsidyInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_HousingsubsidyInfo");

                entity.Property(e => e.AdmissionDate).HasColumnType("datetime");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EducationLevel)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.PayCategory)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.SalaryLocation)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Useridentity)
                    .HasMaxLength(18)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewHousingsubsidyList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_HousingsubsidyList");

                entity.Property(e => e.AdmissionDate).HasColumnType("datetime");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EducationLevel)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.PayCategory)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.SalaryLocation)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Standard).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Useridentity)
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.Year).HasColumnName("YEAR");
            });

            modelBuilder.Entity<ViewHousingsubsidySalaryAttribution>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_HousingsubsidySalaryAttribution");

                entity.Property(e => e.A0177)
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasColumnName("a0177");

                entity.Property(e => e.C58ad)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("c58ad");
            });

            modelBuilder.Entity<ViewHousingsubsidyStandardofMonth>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_HousingsubsidyStandardofMonth");

                entity.Property(e => e.AdmissionDate).HasColumnType("datetime");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EducationLevel)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.PayCategory)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.SalaryLocation)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Standard).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Useridentity)
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.Year).HasColumnName("YEAR");
            });

            modelBuilder.Entity<ViewHrpAbroadUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Hrp_Abroad_User");

                entity.Property(e => e.BornDate).HasColumnType("datetime");

                entity.Property(e => e.C012p)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("c012p");

                entity.Property(e => e.CompId)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("CompID");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DeptNo)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.HrpId)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("HrpID");

                entity.Property(e => e.Name)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Post)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Sex)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserKey)
                    .HasMaxLength(18)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewHrpAllCurrentUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_HRP_AllCurrentUsers");

                entity.Property(e => e.CompanyFlag)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DeptCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DeptName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HrpPersonStatus)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.NewSalaryVest)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Rindex).HasColumnName("rindex");

                entity.Property(e => e.TableStatus)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("tableStatus");

                entity.Property(e => e.UserIdentityId)
                    .IsRequired()
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WagePaymentFlag)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewHrpAllDepartment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_HRP_AllDepartments");

                entity.Property(e => e.ChildDept)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DeptCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ParentDeptCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewHrpBaoBeiUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_HrpBaoBeiUser");

                entity.Property(e => e.BornDate)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.GroupInfo)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.HrpId)
                    .HasMaxLength(50)
                    .HasColumnName("HrpID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.Phealth)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("PHealth");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.Pstatus)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PStatus");

                entity.Property(e => e.Sex)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.UserKey).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewHrpHumanBasic>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_HRP_HumanBasic");

                entity.Property(e => e.A0100)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("a0100");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Idnumber)
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasColumnName("IDNumber");

                entity.Property(e => e.Name)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Zt)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("zt");

                entity.Property(e => e.Zw)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("ZW");

                entity.Property(e => e.Zwdm)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("ZWDM");
            });

            modelBuilder.Entity<ViewHrpPassportInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_HrpPassportInfo");

                entity.Property(e => e.A0100)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.BornDate).HasColumnType("datetime");

                entity.Property(e => e.BornPlace)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.E0122)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Expr1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Expr2)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FileCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Nationality)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("nationality");

                entity.Property(e => e.OrganInfo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PassportCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PassportSign).HasColumnType("datetime");

                entity.Property(e => e.PassportStatus)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.PassportTypeNo)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.PassportValid).HasColumnType("datetime");

                entity.Property(e => e.SignSite)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserKey)
                    .IsRequired()
                    .HasMaxLength(18)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewHrpUserInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Hrp_User_Info");

                entity.Property(e => e.A0100)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.BornDate).HasColumnType("datetime");

                entity.Property(e => e.BornPlace)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CompId)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("CompID");

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DeptNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.E1701)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.E1714)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.HrpId)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("HrpID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Post)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PostGrade).HasColumnType("numeric(10, 2)");

                entity.Property(e => e.PostName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PostType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Sex)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserKey)
                    .HasMaxLength(18)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewHrpUserRelativeInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_HrpUserRelativeInfo");

                entity.Property(e => e.C7905)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.C7906)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.HomeAddress)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.HrpId)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("HrpID");

                entity.Property(e => e.Name)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Pstatus)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PStatus");

                entity.Property(e => e.Relation)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserKey)
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.WorkInfo)
                    .IsRequired()
                    .HasMaxLength(303)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewIndependentAccountingAre>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_IndependentAccountingAre");

                entity.Property(e => e.B0110)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.D010c)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("d010c");

                entity.Property(e => e.DepartmentName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DepartmentType)
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewItopTicket>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Itop_Ticket");

                entity.Property(e => e.AgentId).HasColumnName("agent_id");

                entity.Property(e => e.AgentUser)
                    .HasMaxLength(255)
                    .HasColumnName("agent_user");

                entity.Property(e => e.CallerId).HasColumnName("caller_id");

                entity.Property(e => e.CallerUser)
                    .HasMaxLength(255)
                    .HasColumnName("caller_user");

                entity.Property(e => e.CloseDate).HasColumnName("close_date");

                entity.Property(e => e.EndDate).HasColumnName("end_date");

                entity.Property(e => e.Finalclass)
                    .HasMaxLength(255)
                    .HasColumnName("finalclass");

                entity.Property(e => e.OperationalStatus)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("operational_status");

                entity.Property(e => e.Ref)
                    .HasMaxLength(255)
                    .HasColumnName("ref");

                entity.Property(e => e.StartDate).HasColumnName("start_date");

                entity.Property(e => e.Title)
                    .HasMaxLength(255)
                    .HasColumnName("title");
            });

            modelBuilder.Entity<ViewMeetCostFare>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_MeetCostFare");

                entity.Property(e => e.DeptManagerName).HasMaxLength(50);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MeetCost).HasColumnType("money");

                entity.Property(e => e.ProjectManagerName).HasMaxLength(50);

                entity.Property(e => e.ProjectNo).HasMaxLength(50);

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");

                entity.Property(e => e.UseDeptId)
                    .HasMaxLength(50)
                    .HasColumnName("UseDeptID");
            });

            modelBuilder.Entity<ViewMeetUserInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_MeetUserInfo");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FormNumber).HasMaxLength(20);

                entity.Property(e => e.Mobile)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserKey)
                    .HasMaxLength(18)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewMergeAbroadApproveInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_MergeAbroad_ApproveInfo");

                entity.Property(e => e.AbroadType)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.ApproveDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Approve_Date");

                entity.Property(e => e.ApproveId).HasColumnName("ApproveID");

                entity.Property(e => e.ApproveRemark).HasColumnName("Approve_Remark");

                entity.Property(e => e.ApproveResult)
                    .HasMaxLength(200)
                    .HasColumnName("Approve_Result");

                entity.Property(e => e.ApproveResultCode).HasColumnName("Approve_ResultCode");

                entity.Property(e => e.ApproveUserLoginName)
                    .HasMaxLength(200)
                    .HasColumnName("Approve_UserLoginName");

                entity.Property(e => e.ApproveUserName)
                    .HasMaxLength(200)
                    .HasColumnName("Approve_UserName");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.MainFormNumber).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.StepName).HasMaxLength(200);
            });

            modelBuilder.Entity<ViewMonthlyPaymentPaidDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_MonthlyPaymentPaid_Details");

                entity.Property(e => e.CreateDate)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FinanceChangeLocalCurrencyAmount).HasColumnType("decimal(38, 9)");

                entity.Property(e => e.PaymentNodeName).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(200);

                entity.Property(e => e.RequestPayCategoryName).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewMonthlyPaymentPlanDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_MonthlyPaymentPlan_Details");

                entity.Property(e => e.FinanceChangeLocalCurrencyAmount).HasColumnType("decimal(38, 7)");

                entity.Property(e => e.PaymentNodeName).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(200);

                entity.Property(e => e.RequestPayCategoryName).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewOtherCustomer>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_OtherCustomer");

                entity.Property(e => e.AbaCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Address).HasMaxLength(2000);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Khh)
                    .HasMaxLength(200)
                    .HasColumnName("KHH");

                entity.Property(e => e.Khhdz)
                    .HasMaxLength(2000)
                    .HasColumnName("KHHDZ");

                entity.Property(e => e.Khhzh)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("KHHZH");

                entity.Property(e => e.LbanCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Lhhh)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("LHHH");

                entity.Property(e => e.SupplierCode).HasMaxLength(50);

                entity.Property(e => e.SupplierName).HasMaxLength(1000);

                entity.Property(e => e.SwiftCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewOtherSupplier>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_OtherSupplier");

                entity.Property(e => e.AbaCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Address).HasMaxLength(2000);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Khh)
                    .HasMaxLength(200)
                    .HasColumnName("KHH");

                entity.Property(e => e.Khhdz)
                    .HasMaxLength(2000)
                    .HasColumnName("KHHDZ");

                entity.Property(e => e.Khhzh)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("KHHZH");

                entity.Property(e => e.LbanCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Lhhh)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("LHHH");

                entity.Property(e => e.SupplierCode).HasMaxLength(50);

                entity.Property(e => e.SupplierName).HasMaxLength(1000);

                entity.Property(e => e.SwiftCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ViewOuterUnitInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_OuterUnitInfo");

                entity.Property(e => e.Amount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.AwardCode).HasMaxLength(100);

                entity.Property(e => e.AwardName).HasMaxLength(100);

                entity.Property(e => e.ForeignUnitAmount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.FormNumber).HasMaxLength(200);

                entity.Property(e => e.ProcessName).HasMaxLength(500);

                entity.Property(e => e.RequestDate).HasColumnType("datetime");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(200)
                    .HasColumnName("Request_DeptCode");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(200)
                    .HasColumnName("Request_DeptName");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(200)
                    .HasColumnName("Request_RealName");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Summary).HasMaxLength(401);
            });

            modelBuilder.Entity<ViewPaymentHistory5NotVoucherInfoInbox>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PaymentHistory_5_NotVoucherInfo_Inbox");

                entity.Property(e => e.ContractCode).HasMaxLength(50);

                entity.Property(e => e.FinanceChangeLocalCurrencyAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FinanceCurrency).HasMaxLength(50);

                entity.Property(e => e.FinanceExchange).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.FinancePaymentTotal).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InvoicesUnitName).HasMaxLength(1200);

                entity.Property(e => e.PaymentApplicationName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PaymentDescription).HasMaxLength(4000);

                entity.Property(e => e.PaymentReceivingCompanyCode).HasMaxLength(50);

                entity.Property(e => e.PaymentReceivingCompanyName).HasMaxLength(500);

                entity.Property(e => e.PaymentVoucherDeptCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PaymentVoucherDeptName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(200);

                entity.Property(e => e.ProjectName).HasMaxLength(200);

                entity.Property(e => e.RequestDate).HasColumnType("datetime");

                entity.Property(e => e.RequestDeptCode).HasMaxLength(50);

                entity.Property(e => e.RequestDeptName).HasMaxLength(200);

                entity.Property(e => e.RequestFormNumber).HasMaxLength(20);

                entity.Property(e => e.RequestLoginName).HasMaxLength(50);

                entity.Property(e => e.RequestPayCategoryName).HasMaxLength(50);

                entity.Property(e => e.RequestRealName).HasMaxLength(50);

                entity.Property(e => e.SignSupplierCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SignSupplierName).HasMaxLength(1200);
            });

            modelBuilder.Entity<ViewPaymentHistoryDepartmentContractNotVoucherInfoInbox>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PaymentHistory_Department_Contract_NotVoucherInfo_Inbox");

                entity.Property(e => e.ContractCode).HasMaxLength(50);

                entity.Property(e => e.FinanceChangeLocalCurrencyAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FinanceCurrency).HasMaxLength(50);

                entity.Property(e => e.FinanceExchange).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.FinancePaymentTotal).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InvoicesUnitName).HasMaxLength(1200);

                entity.Property(e => e.PaymentApplicationName).HasMaxLength(50);

                entity.Property(e => e.PaymentDescription).HasMaxLength(4000);

                entity.Property(e => e.PaymentReceivingCompanyCode).HasMaxLength(50);

                entity.Property(e => e.PaymentReceivingCompanyName).HasMaxLength(500);

                entity.Property(e => e.PaymentVoucherDeptCode).HasMaxLength(50);

                entity.Property(e => e.PaymentVoucherDeptName).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(200);

                entity.Property(e => e.ProjectName).HasMaxLength(200);

                entity.Property(e => e.RequestDate).HasColumnType("datetime");

                entity.Property(e => e.RequestFormNumber).HasMaxLength(20);

                entity.Property(e => e.RequestLoginName).HasMaxLength(50);

                entity.Property(e => e.RequestPayCategoryName).HasMaxLength(50);

                entity.Property(e => e.RequestRealName).HasMaxLength(50);

                entity.Property(e => e.SignSupplierCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SignSupplierName).HasMaxLength(1200);
            });

            modelBuilder.Entity<ViewPaymentHistoryDepartmentContractNotVoucherInfoInboxDepartmentList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PaymentHistory_Department_Contract_NotVoucherInfo_Inbox_DepartmentList");

                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DepartmentName).HasMaxLength(50);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.PaymentAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PaymentApplicationName).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.RequestFormNumber).HasMaxLength(20);

                entity.Property(e => e.RequestPayCategoryName).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewPaymentHistoryDepartmentNotVoucherInfoInbox>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PaymentHistory_Department_NotVoucherInfo_Inbox");

                entity.Property(e => e.FinanceChangeLocalCurrencyAmount).HasColumnType("decimal(37, 10)");

                entity.Property(e => e.FinanceCurrency).HasMaxLength(50);

                entity.Property(e => e.FinanceExchange).HasColumnType("decimal(20, 8)");

                entity.Property(e => e.FinancePaymentTotal).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.PaymentApplicationName).HasMaxLength(50);

                entity.Property(e => e.PaymentDescription).HasMaxLength(4000);

                entity.Property(e => e.PaymentReceivingCompanyCode).HasMaxLength(50);

                entity.Property(e => e.PaymentReceivingCompanyName).HasMaxLength(500);

                entity.Property(e => e.PaymentVoucherDeptCode).HasMaxLength(50);

                entity.Property(e => e.PaymentVoucherDeptName).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.RequestDate).HasColumnType("datetime");

                entity.Property(e => e.RequestFormNumber).HasMaxLength(50);

                entity.Property(e => e.RequestLoginName).HasMaxLength(50);

                entity.Property(e => e.RequestRealName).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewPaymentHistoryDepartmentNotVoucherInfoInboxDepartmentList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PaymentHistory_Department_NotVoucherInfo_Inbox_DepartmentList");

                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DepartmentName).HasMaxLength(500);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.PaymentAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PaymentApplicationName).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.RequestFormNumber).HasMaxLength(20);
            });

            modelBuilder.Entity<ViewPaymentHistoryDepositInbox>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PaymentHistory_Deposit_Inbox");

                entity.Property(e => e.AccountingTime).HasColumnType("datetime");

                entity.Property(e => e.ChangeLocalCurrencyAmount).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.CompanyCode).HasMaxLength(50);

                entity.Property(e => e.CompanyName).HasMaxLength(1000);

                entity.Property(e => e.Currency)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DepartCode).HasMaxLength(50);

                entity.Property(e => e.DepartName).HasMaxLength(50);

                entity.Property(e => e.Exchange).HasColumnType("decimal(20, 6)");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.PaymentAbacode)
                    .HasMaxLength(50)
                    .HasColumnName("PaymentABACode");

                entity.Property(e => e.PaymentAmount).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.PaymentBankAccount).HasMaxLength(50);

                entity.Property(e => e.PaymentBankAddress).HasMaxLength(500);

                entity.Property(e => e.PaymentBankName).HasMaxLength(500);

                entity.Property(e => e.PaymentCodes)
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentIbanCode).HasMaxLength(50);

                entity.Property(e => e.PaymentLineNumbers).HasMaxLength(500);

                entity.Property(e => e.PaymentMethodName).HasMaxLength(50);

                entity.Property(e => e.PaymentReceivingCompanyAddress).HasMaxLength(500);

                entity.Property(e => e.PaymentSwiftCode).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(200);

                entity.Property(e => e.ProjectName).HasMaxLength(500);

                entity.Property(e => e.RequestDate).HasColumnType("datetime");

                entity.Property(e => e.RequestDepartCode).HasMaxLength(50);

                entity.Property(e => e.RequestDepartName).HasMaxLength(50);

                entity.Property(e => e.RequestFormNumber).HasMaxLength(50);

                entity.Property(e => e.RequestLoginName).HasMaxLength(50);

                entity.Property(e => e.RequestPayCategoryName).HasMaxLength(50);

                entity.Property(e => e.RequestRealName).HasMaxLength(50);

                entity.Property(e => e.RequsetSfzh).HasMaxLength(50);

                entity.Property(e => e.SignSupplierCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SignSupplierName).HasMaxLength(1200);
            });

            modelBuilder.Entity<ViewPaymentHistoryProjectContractNotVoucherInfoInbox>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PaymentHistory_Project_Contract_NotVoucherInfo_Inbox");

                entity.Property(e => e.ContractCode).HasMaxLength(50);

                entity.Property(e => e.FinanceChangeLocalCurrencyAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FinanceCurrency).HasMaxLength(50);

                entity.Property(e => e.FinanceExchange).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.FinancePaymentTotal).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InvoicesUnitName).HasMaxLength(1200);

                entity.Property(e => e.PaymentApplicationName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PaymentDescription).HasMaxLength(4000);

                entity.Property(e => e.PaymentReceivingCompanyCode).HasMaxLength(50);

                entity.Property(e => e.PaymentReceivingCompanyName).HasMaxLength(500);

                entity.Property(e => e.PaymentVoucherDeptCode)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentVoucherDeptName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(200);

                entity.Property(e => e.ProjectName).HasMaxLength(200);

                entity.Property(e => e.RequestDate).HasColumnType("datetime");

                entity.Property(e => e.RequestFormNumber).HasMaxLength(20);

                entity.Property(e => e.RequestLoginName).HasMaxLength(50);

                entity.Property(e => e.RequestPayCategoryName).HasMaxLength(50);

                entity.Property(e => e.RequestRealName).HasMaxLength(50);

                entity.Property(e => e.SignSupplierCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SignSupplierName).HasMaxLength(1200);
            });

            modelBuilder.Entity<ViewPaymentHistoryProjectNotVoucherInfoInbox>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PaymentHistory_Project_NotVoucherInfo_Inbox");

                entity.Property(e => e.FinanceChangeLocalCurrencyAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FinanceCurrency).HasMaxLength(50);

                entity.Property(e => e.FinanceExchange).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.FinancePaymentTotal).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.PaymentApplicationName).HasMaxLength(50);

                entity.Property(e => e.PaymentDescription).HasMaxLength(4000);

                entity.Property(e => e.PaymentReceivingCompanyCode).HasMaxLength(50);

                entity.Property(e => e.PaymentReceivingCompanyName).HasMaxLength(500);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(200);

                entity.Property(e => e.ProjectName).HasMaxLength(200);

                entity.Property(e => e.RequestDate).HasColumnType("datetime");

                entity.Property(e => e.RequestFormNumber).HasMaxLength(20);

                entity.Property(e => e.RequestLoginName).HasMaxLength(50);

                entity.Property(e => e.RequestRealName).HasMaxLength(50);

                entity.Property(e => e.SubjectCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewPaymentHistorySheJiFenBaoFei>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PaymentHistory_SheJiFenBaoFei");

                entity.Property(e => e.DeptCode).HasMaxLength(50);

                entity.Property(e => e.DeptName).HasMaxLength(1000);

                entity.Property(e => e.Flag).HasColumnName("flag");

                entity.Property(e => e.Fy)
                    .HasMaxLength(50)
                    .HasColumnName("FY");

                entity.Property(e => e.IQuarter).HasColumnName("iQuarter");

                entity.Property(e => e.IYear).HasColumnName("iYear");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.PaymentCurrency).HasMaxLength(50);

                entity.Property(e => e.PaymentDate).HasColumnType("datetime");

                entity.Property(e => e.PaymentFlag)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentReceivingCompanyCode).HasMaxLength(50);

                entity.Property(e => e.PaymentReceivingCompanyName).HasMaxLength(1000);

                entity.Property(e => e.ProjectCode).HasMaxLength(200);

                entity.Property(e => e.ProjectName).HasMaxLength(600);

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");

                entity.Property(e => e.RequestFormNumber).HasMaxLength(50);

                entity.Property(e => e.RequestLoginName).HasMaxLength(50);

                entity.Property(e => e.RequestPayCategoryName).HasMaxLength(50);

                entity.Property(e => e.RequestRealName).HasMaxLength(50);

                entity.Property(e => e.RequestTypeName).HasMaxLength(50);

                entity.Property(e => e.SignSupplierCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SignSupplierName).HasMaxLength(1200);

                entity.Property(e => e.Xmgs)
                    .HasMaxLength(100)
                    .HasColumnName("xmgs");
            });

            modelBuilder.Entity<ViewPaymentHistoryTotal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PaymentHistory_Total");

                entity.Property(e => e.AccountPaid).HasColumnType("decimal(24, 4)");

                entity.Property(e => e.AccountingTime).HasColumnType("datetime");

                entity.Property(e => e.ApplicationName).HasMaxLength(50);

                entity.Property(e => e.BillAmount).HasColumnType("decimal(22, 4)");

                entity.Property(e => e.ChangeLocalCurrencyAmount).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.CompanyName).HasMaxLength(1000);

                entity.Property(e => e.ContractCode).HasMaxLength(200);

                entity.Property(e => e.Currency)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FineAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.InputVat)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("InputVAT");

                entity.Property(e => e.MainContractCurrency)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.MainExchange).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.MainRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MainRMB");

                entity.Property(e => e.Operater).HasMaxLength(50);

                entity.Property(e => e.OtherBuy).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OtherCost).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PaymentActualPayments).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PaymentAmount).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.PaymentCodes)
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentContractAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PaymentDescription).HasMaxLength(500);

                entity.Property(e => e.PaymentMethodName).HasMaxLength(50);

                entity.Property(e => e.PaymentNodeName).HasMaxLength(50);

                entity.Property(e => e.PaymentOtherPaymentTotal).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PaymentPayableAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PaymentWithholdingAmount).HasColumnType("decimal(21, 4)");

                entity.Property(e => e.Phidnumber)
                    .HasMaxLength(50)
                    .HasColumnName("PHIDNumber");

                entity.Property(e => e.Poidnumber)
                    .HasMaxLength(50)
                    .HasColumnName("POIDNumber");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.Pppid).HasColumnName("pppid");

                entity.Property(e => e.ProjectCode).HasMaxLength(200);

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(200)
                    .HasColumnName("project_id");

                entity.Property(e => e.RequestDate).HasColumnType("datetime");

                entity.Property(e => e.RequestPayCategoryName).HasMaxLength(50);

                entity.Property(e => e.RequestRealName).HasMaxLength(50);

                entity.Property(e => e.Rowss).HasColumnName("rowss");

                entity.Property(e => e.Rss).HasColumnName("rss");

                entity.Property(e => e.Sheamount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("SHEAmount");

                entity.Property(e => e.TotalPayment).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.Tsid).HasColumnName("tsid");

                entity.Property(e => e.WithholdingTax).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.WithoutInputVat)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("WithoutInputVAT");

                entity.Property(e => e.WithoutOtherTax).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ViewPaymentHistoryTotalNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PaymentHistory_Total_new");

                entity.Property(e => e.AccountPaid).HasColumnType("decimal(24, 4)");

                entity.Property(e => e.AccountingTime).HasColumnType("datetime");

                entity.Property(e => e.ApplicationName).HasMaxLength(50);

                entity.Property(e => e.BillAmount).HasColumnType("decimal(22, 4)");

                entity.Property(e => e.ChangeLocalCurrencyAmount).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.CompanyName).HasMaxLength(1000);

                entity.Property(e => e.ContractCode).HasMaxLength(200);

                entity.Property(e => e.ContractCurrencyType).HasMaxLength(50);

                entity.Property(e => e.Currency)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FineAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.InputVat)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("InputVAT");

                entity.Property(e => e.MainContractCurrency)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.MainExchange).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.MainRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MainRMB");

                entity.Property(e => e.Operater).HasMaxLength(50);

                entity.Property(e => e.OtherBuy).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OtherCost).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PaymentActualPayments).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PaymentAmount).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.PaymentCodes)
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentContractAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PaymentDescription).HasMaxLength(500);

                entity.Property(e => e.PaymentMethodName).HasMaxLength(50);

                entity.Property(e => e.PaymentNodeName).HasMaxLength(50);

                entity.Property(e => e.PaymentOtherPaymentTotal).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PaymentPayableAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PaymentWithholdingAmount).HasColumnType("decimal(21, 4)");

                entity.Property(e => e.Ppid).HasColumnName("PPID");

                entity.Property(e => e.Pppid).HasColumnName("pppid");

                entity.Property(e => e.ProjectCode).HasMaxLength(200);

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(200)
                    .HasColumnName("project_id");

                entity.Property(e => e.RequestDate).HasColumnType("datetime");

                entity.Property(e => e.RequestPayCategoryName).HasMaxLength(50);

                entity.Property(e => e.RequestRealName).HasMaxLength(50);

                entity.Property(e => e.Rowss).HasColumnName("rowss");

                entity.Property(e => e.Rss).HasColumnName("rss");

                entity.Property(e => e.Sheamount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("SHEAmount");

                entity.Property(e => e.TotalPayment).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.Tsid).HasColumnName("tsid");

                entity.Property(e => e.WithholdingTax).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.WithoutInputVat)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("WithoutInputVAT");

                entity.Property(e => e.WithoutOtherTax).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ViewPaymentProcessMultipleRelation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PaymentProcessMultiple_Relation");

                entity.Property(e => e.FlowId).HasColumnName("FlowID");

                entity.Property(e => e.RflowId).HasColumnName("RFlowID");
            });

            modelBuilder.Entity<ViewPeptjBudgetProcessInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Peptj_BudgetProcessInfo");

                entity.Property(e => e.Incident).HasColumnName("incident");

                entity.Property(e => e.Iyear).HasColumnName("iyear");

                entity.Property(e => e.MSid).HasColumnName("m_sid");

                entity.Property(e => e.Pbpformsid).HasColumnName("pbpformsid");

                entity.Property(e => e.Processname)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("processname");

                entity.Property(e => e.ReqDept)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("req_dept");

                entity.Property(e => e.ReqHuman)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("req_human");

                entity.Property(e => e.Sid).HasColumnName("sid");

                entity.Property(e => e.Ver)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ver")
                    .IsFixedLength(true);

                entity.Property(e => e.VerDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ver_date");
            });

            modelBuilder.Entity<ViewPeptjContractLawsuit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Peptj_Contract_Lawsuit");

                entity.Property(e => e.Account)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("account");

                entity.Property(e => e.ContRegHumSid).HasColumnName("Cont_RegHumSid");

                entity.Property(e => e.ContType)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("cont_type");

                entity.Property(e => e.Ddate)
                    .HasColumnType("datetime")
                    .HasColumnName("ddate");

                entity.Property(e => e.Htbh)
                    .HasMaxLength(100)
                    .HasColumnName("htbh");

                entity.Property(e => e.ProjId)
                    .HasMaxLength(200)
                    .HasColumnName("proj_id");

                entity.Property(e => e.Skdwmc)
                    .HasMaxLength(400)
                    .HasColumnName("skdwmc");
            });

            modelBuilder.Entity<ViewPeptjCustomerInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Peptj_CustomerInfo");

                entity.Property(e => e.Addorupdatedate)
                    .HasColumnType("datetime")
                    .HasColumnName("addorupdatedate");

                entity.Property(e => e.BankLinkNumber)
                    .HasMaxLength(100)
                    .HasColumnName("bank_link_number");

                entity.Property(e => e.BankName)
                    .HasMaxLength(250)
                    .HasColumnName("bank_name");

                entity.Property(e => e.BankNumber)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("bank_number");

                entity.Property(e => e.CompanyCode)
                    .HasMaxLength(50)
                    .HasColumnName("company_code");

                entity.Property(e => e.CompanyName)
                    .HasMaxLength(400)
                    .HasColumnName("company_name");

                entity.Property(e => e.CompanyNameEx)
                    .HasMaxLength(400)
                    .HasColumnName("company_name_ex");

                entity.Property(e => e.Domain)
                    .HasMaxLength(100)
                    .HasColumnName("domain");

                entity.Property(e => e.Registerdate)
                    .HasColumnType("datetime")
                    .HasColumnName("registerdate");

                entity.Property(e => e.Sid).HasColumnName("sid");

                entity.Property(e => e.TaxNumber)
                    .HasMaxLength(80)
                    .HasColumnName("tax_number");
            });

            modelBuilder.Entity<ViewPeptjPayContract>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Peptj_PayContract");

                entity.Property(e => e.Abacode)
                    .HasMaxLength(500)
                    .HasColumnName("abacode");

                entity.Property(e => e.BNotInit).HasColumnName("bNotInit");

                entity.Property(e => e.Bgje).HasColumnName("bgje");

                entity.Property(e => e.BgjeOc).HasColumnName("bgje_oc");

                entity.Property(e => e.Bz)
                    .HasMaxLength(200)
                    .HasColumnName("bz");

                entity.Property(e => e.Cgfkfs)
                    .HasMaxLength(200)
                    .HasColumnName("cgfkfs");

                entity.Property(e => e.ContCate)
                    .HasMaxLength(100)
                    .HasColumnName("cont_cate");

                entity.Property(e => e.ContSid)
                    .HasMaxLength(100)
                    .HasColumnName("cont_sid");

                entity.Property(e => e.ContType)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("cont_type");

                entity.Property(e => e.ContType1).HasColumnName("cont_type1");

                entity.Property(e => e.ContractLawsuit)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DSid).HasColumnName("d_sid");

                entity.Property(e => e.DdZt)
                    .HasMaxLength(100)
                    .HasColumnName("DD_ZT");

                entity.Property(e => e.DeptId)
                    .HasMaxLength(200)
                    .HasColumnName("dept_id");

                entity.Property(e => e.Htbh)
                    .HasMaxLength(100)
                    .HasColumnName("htbh");

                entity.Property(e => e.Hthl)
                    .HasColumnType("numeric(20, 4)")
                    .HasColumnName("hthl");

                entity.Property(e => e.Htmc)
                    .HasMaxLength(1500)
                    .HasColumnName("htmc");

                entity.Property(e => e.Htqyje).HasColumnName("htqyje");

                entity.Property(e => e.HtqyjeOc).HasColumnName("htqyje_oc");

                entity.Property(e => e.Htxs)
                    .HasMaxLength(100)
                    .HasColumnName("htxs");

                entity.Property(e => e.Htze).HasColumnName("htze");

                entity.Property(e => e.HtzeOc).HasColumnName("htze_oc");

                entity.Property(e => e.IncludeTax).HasColumnName("include_tax");

                entity.Property(e => e.IsBh).HasColumnName("is_bh");

                entity.Property(e => e.JbrIdent)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("jbr_ident");

                entity.Property(e => e.JbrName)
                    .HasMaxLength(300)
                    .HasColumnName("jbr_name");

                entity.Property(e => e.Khh)
                    .HasMaxLength(500)
                    .HasColumnName("khh");

                entity.Property(e => e.Khhzh)
                    .HasMaxLength(500)
                    .HasColumnName("khhzh");

                entity.Property(e => e.Khhzi)
                    .HasMaxLength(500)
                    .HasColumnName("khhzi");

                entity.Property(e => e.Kpdwmc)
                    .HasMaxLength(500)
                    .HasColumnName("kpdwmc");

                entity.Property(e => e.Lbancode)
                    .HasMaxLength(500)
                    .HasColumnName("lbancode");

                entity.Property(e => e.Lhhh)
                    .HasMaxLength(500)
                    .HasColumnName("lhhh");

                entity.Property(e => e.Money)
                    .HasColumnType("numeric(24, 6)")
                    .HasColumnName("money");

                entity.Property(e => e.Myfs)
                    .HasMaxLength(200)
                    .HasColumnName("myfs");

                entity.Property(e => e.PartAId)
                    .HasMaxLength(100)
                    .HasColumnName("part_a_id");

                entity.Property(e => e.PartAName)
                    .HasMaxLength(550)
                    .HasColumnName("part_a_name");

                entity.Property(e => e.PartBId)
                    .HasMaxLength(500)
                    .HasColumnName("part_b_id");

                entity.Property(e => e.PartBName)
                    .HasMaxLength(1000)
                    .HasColumnName("part_b_name");

                entity.Property(e => e.PmName)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("pm_name");

                entity.Property(e => e.ProjId)
                    .HasMaxLength(200)
                    .HasColumnName("proj_id");

                entity.Property(e => e.ProjName)
                    .HasMaxLength(600)
                    .HasColumnName("proj_name");

                entity.Property(e => e.Sid).HasColumnName("sid");

                entity.Property(e => e.SignDate)
                    .HasColumnType("datetime")
                    .HasColumnName("sign_date");

                entity.Property(e => e.SignHuman)
                    .HasMaxLength(100)
                    .HasColumnName("sign_human");

                entity.Property(e => e.Skdwbh)
                    .HasMaxLength(500)
                    .HasColumnName("skdwbh");

                entity.Property(e => e.Skdwdz)
                    .HasMaxLength(500)
                    .HasColumnName("skdwdz");

                entity.Property(e => e.Skdwmc)
                    .HasMaxLength(500)
                    .HasColumnName("skdwmc");

                entity.Property(e => e.Swiftcode)
                    .HasMaxLength(500)
                    .HasColumnName("swiftcode");

                entity.Property(e => e.Tax)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("tax");

                entity.Property(e => e.UnitJnw)
                    .HasMaxLength(100)
                    .HasColumnName("unit_jnw");

                entity.Property(e => e.Ysfs)
                    .HasMaxLength(200)
                    .HasColumnName("ysfs");
            });

            modelBuilder.Entity<ViewPeptjPayContractLawsuit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Peptj_PayContract_Lawsuit");

                entity.Property(e => e.ConfirmDate).HasColumnType("datetime");

                entity.Property(e => e.ContractCode).HasMaxLength(50);

                entity.Property(e => e.LawsuitDSid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Lawsuit_d_sid");

                entity.Property(e => e.LawsuitSid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Lawsuit_sid");
            });

            modelBuilder.Entity<ViewPeptjPayContractLawsuitWithStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Peptj_PayContract_Lawsuit_WithStatus");

                entity.Property(e => e.ConfirmDate).HasColumnType("datetime");

                entity.Property(e => e.ContractCode).HasMaxLength(500);

                entity.Property(e => e.LawsuitDSid).HasColumnName("Lawsuit_d_sid");

                entity.Property(e => e.LawsuitSid).HasColumnName("Lawsuit_sid");
            });

            modelBuilder.Entity<ViewPeptjProjectInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Peptj_ProjectInfo");

                entity.Property(e => e.Accounttype).HasColumnName("accounttype");

                entity.Property(e => e.BeginDate)
                    .HasColumnType("datetime")
                    .HasColumnName("begin_date");

                entity.Property(e => e.BuildDate)
                    .HasColumnType("datetime")
                    .HasColumnName("build_date");

                entity.Property(e => e.ContractType)
                    .HasMaxLength(50)
                    .HasColumnName("contract_type");

                entity.Property(e => e.CountryCode)
                    .HasMaxLength(10)
                    .HasColumnName("country_code");

                entity.Property(e => e.CountryName)
                    .HasMaxLength(200)
                    .HasColumnName("country_name");

                entity.Property(e => e.EndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("end_date");

                entity.Property(e => e.Finishdate)
                    .HasColumnType("datetime")
                    .HasColumnName("finishdate");

                entity.Property(e => e.IsCost).HasColumnName("is_cost");

                entity.Property(e => e.Isfinish)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("isfinish");

                entity.Property(e => e.Jnw)
                    .HasMaxLength(100)
                    .HasColumnName("jnw");

                entity.Property(e => e.ProjStatus)
                    .HasMaxLength(100)
                    .HasColumnName("proj_status");

                entity.Property(e => e.ProjSubTypeDesc)
                    .HasMaxLength(50)
                    .HasColumnName("proj_sub_type_desc");

                entity.Property(e => e.ProjTypeDesc)
                    .HasMaxLength(20)
                    .HasColumnName("proj_type_desc");

                entity.Property(e => e.ProjectCategory)
                    .HasMaxLength(20)
                    .HasColumnName("project_category");

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("project_id");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("project_name");

                entity.Property(e => e.ProjectType)
                    .HasMaxLength(50)
                    .HasColumnName("project_type");

                entity.Property(e => e.Qqflag).HasColumnName("qqflag");

                entity.Property(e => e.Qqlevel).HasColumnName("qqlevel");

                entity.Property(e => e.RunningMode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("running_mode");

                entity.Property(e => e.Xmgs)
                    .HasMaxLength(100)
                    .HasColumnName("xmgs");

                entity.Property(e => e.Xmjl)
                    .HasMaxLength(50)
                    .HasColumnName("xmjl");
            });

            modelBuilder.Entity<ViewPeptjProjectInfoHuman>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Peptj_ProjectInfo_Human");

                entity.Property(e => e.BeginDate)
                    .HasColumnType("datetime")
                    .HasColumnName("begin_date");

                entity.Property(e => e.ContractType)
                    .HasMaxLength(50)
                    .HasColumnName("contract_type");

                entity.Property(e => e.CswbsMName)
                    .HasMaxLength(50)
                    .HasColumnName("cswbs_m_name");

                entity.Property(e => e.EndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("end_date");

                entity.Property(e => e.Finishdate)
                    .HasColumnType("datetime")
                    .HasColumnName("finishdate");

                entity.Property(e => e.HumanName)
                    .HasMaxLength(300)
                    .HasColumnName("human_name");

                entity.Property(e => e.HumanSid).HasColumnName("human_sid");

                entity.Property(e => e.IsCost).HasColumnName("is_cost");

                entity.Property(e => e.Isfinish)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("isfinish");

                entity.Property(e => e.Jnw)
                    .HasMaxLength(100)
                    .HasColumnName("jnw");

                entity.Property(e => e.ManagerType)
                    .HasMaxLength(5)
                    .HasColumnName("manager_type");

                entity.Property(e => e.ProjStatus)
                    .HasMaxLength(100)
                    .HasColumnName("proj_status");

                entity.Property(e => e.ProjSubTypeDesc)
                    .HasMaxLength(50)
                    .HasColumnName("proj_sub_type_desc");

                entity.Property(e => e.ProjTypeDesc)
                    .HasMaxLength(20)
                    .HasColumnName("proj_type_desc");

                entity.Property(e => e.ProjectCategory)
                    .HasMaxLength(20)
                    .HasColumnName("project_category");

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("project_id");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("project_name");

                entity.Property(e => e.ProjectType)
                    .HasMaxLength(50)
                    .HasColumnName("project_type");

                entity.Property(e => e.Sfzh)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("sfzh");

                entity.Property(e => e.Xmgs)
                    .HasMaxLength(100)
                    .HasColumnName("xmgs");

                entity.Property(e => e.Xmjl)
                    .HasMaxLength(50)
                    .HasColumnName("xmjl");

                entity.Property(e => e.Zy)
                    .HasMaxLength(50)
                    .HasColumnName("zy");
            });

            modelBuilder.Entity<ViewPeptjProjectInfoLocation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Peptj_ProjectInfo_Location");

                entity.Property(e => e.AllowanceAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BeginDate)
                    .HasColumnType("datetime")
                    .HasColumnName("begin_date");

                entity.Property(e => e.BuildDate)
                    .HasColumnType("datetime")
                    .HasColumnName("build_date");

                entity.Property(e => e.ContractType)
                    .HasMaxLength(50)
                    .HasColumnName("contract_type");

                entity.Property(e => e.EndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("end_date");

                entity.Property(e => e.Finishdate)
                    .HasColumnType("datetime")
                    .HasColumnName("finishdate");

                entity.Property(e => e.Isfinish)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("isfinish");

                entity.Property(e => e.Jnw)
                    .HasMaxLength(10)
                    .HasColumnName("jnw");

                entity.Property(e => e.ProjStatus)
                    .HasMaxLength(20)
                    .HasColumnName("proj_status");

                entity.Property(e => e.ProjSubTypeDesc)
                    .HasMaxLength(50)
                    .HasColumnName("proj_sub_type_desc");

                entity.Property(e => e.ProjSubTypeDescLocation)
                    .HasMaxLength(50)
                    .HasColumnName("proj_sub_type_desc_Location");

                entity.Property(e => e.ProjTypeDesc)
                    .HasMaxLength(50)
                    .HasColumnName("proj_type_desc");

                entity.Property(e => e.ProjTypeDescLocation)
                    .HasMaxLength(50)
                    .HasColumnName("proj_type_desc_Location");

                entity.Property(e => e.ProjectCategory)
                    .HasMaxLength(50)
                    .HasColumnName("project_category");

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("project_id");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(500)
                    .HasColumnName("project_name");

                entity.Property(e => e.ProjectType)
                    .HasMaxLength(50)
                    .HasColumnName("project_type");

                entity.Property(e => e.RunningMode)
                    .HasMaxLength(50)
                    .HasColumnName("running_mode");

                entity.Property(e => e.Xmgs)
                    .HasMaxLength(50)
                    .HasColumnName("xmgs");

                entity.Property(e => e.Xmjl)
                    .HasMaxLength(50)
                    .HasColumnName("xmjl");
            });

            modelBuilder.Entity<ViewPeptjProjectInfoSubjectType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Peptj_ProjectInfo_SubjectType");

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(202)
                    .IsUnicode(false)
                    .HasColumnName("project_id");

                entity.Property(e => e.SubjectType)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewPeptjResearchProject>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Peptj_ResearchProject");

                entity.Property(e => e.PProjId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("p_proj_id");

                entity.Property(e => e.PProjName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("p_proj_name");

                entity.Property(e => e.ProjId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("proj_id");

                entity.Property(e => e.ProjName)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("proj_name");

                entity.Property(e => e.Sid).HasColumnName("sid");

                entity.Property(e => e.TopicStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("topic_status");
            });

            modelBuilder.Entity<ViewPeptjSupplyInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Peptj_SupplyInfo");

                entity.Property(e => e.Abacode)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("abacode");

                entity.Property(e => e.Addorupdatedate)
                    .HasColumnType("datetime")
                    .HasColumnName("addorupdatedate");

                entity.Property(e => e.BankAddress)
                    .HasMaxLength(300)
                    .HasColumnName("bank_address");

                entity.Property(e => e.BankLinkNumber)
                    .HasMaxLength(100)
                    .HasColumnName("bank_link_number");

                entity.Property(e => e.BankName)
                    .HasMaxLength(250)
                    .HasColumnName("bank_name");

                entity.Property(e => e.BankNumber)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("bank_number");

                entity.Property(e => e.CompanyAddress)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("company_address");

                entity.Property(e => e.CompanyCode)
                    .HasMaxLength(80)
                    .HasColumnName("company_code");

                entity.Property(e => e.CompanyName)
                    .HasMaxLength(400)
                    .HasColumnName("company_name");

                entity.Property(e => e.HasContract).HasColumnName("has_contract");

                entity.Property(e => e.HasLegaldispute).HasColumnName("has_legaldispute");

                entity.Property(e => e.Ibancode)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ibancode");

                entity.Property(e => e.RegisterArea)
                    .HasMaxLength(50)
                    .HasColumnName("register_area");

                entity.Property(e => e.Registerdate)
                    .HasColumnType("datetime")
                    .HasColumnName("registerdate");

                entity.Property(e => e.Sid).HasColumnName("sid");

                entity.Property(e => e.Swiftcode)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("swiftcode");
            });

            modelBuilder.Entity<ViewPersonInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Person_info");

                entity.Property(e => e.A0177)
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasColumnName("a0177");

                entity.Property(e => e.Codeitemdesc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("codeitemdesc");

                entity.Property(e => e.Codeitemid)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("codeitemid");
            });

            modelBuilder.Entity<ViewPersonInfoDepartmentalCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VIEW_PersonInfo_DepartmentalCategory");

                entity.Property(e => e.A0177)
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasColumnName("a0177");

                entity.Property(e => e.Codeitemdesc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("codeitemdesc");

                entity.Property(e => e.Codeitemid)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("codeitemid");
            });

            modelBuilder.Entity<ViewPrintCostDeptSumMonth>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PrintCost_dept_sum_month");

                entity.Property(e => e.Deptid)
                    .HasMaxLength(255)
                    .HasColumnName("deptid");

                entity.Property(e => e.JsYm)
                    .HasMaxLength(50)
                    .HasColumnName("js_ym");

                entity.Property(e => e.Lxtype)
                    .HasMaxLength(50)
                    .HasColumnName("lxtype");

                entity.Property(e => e.Totalcost).HasColumnName("totalcost");
            });

            modelBuilder.Entity<ViewPrintCostProjSumMonth>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_PrintCost_proj_sum_month");

                entity.Property(e => e.JsYm)
                    .HasMaxLength(50)
                    .HasColumnName("js_ym");

                entity.Property(e => e.Lxtype)
                    .HasMaxLength(50)
                    .HasColumnName("lxtype");

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(50)
                    .HasColumnName("project_id");

                entity.Property(e => e.Totalcost).HasColumnName("totalcost");
            });

            modelBuilder.Entity<ViewProbasicinfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_probasicinfo");

                entity.Property(e => e.BillCode).HasMaxLength(50);

                entity.Property(e => e.ProcessName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewProcessVoucherList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ProcessVoucherList");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(500);

                entity.Property(e => e.VoucherCode).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewProjectApprovedCost>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Project_ApprovedCost");

                entity.Property(e => e.ContCost).HasColumnName("cont_cost");

                entity.Property(e => e.CostApply).HasColumnName("cost_apply");

                entity.Property(e => e.CostApprove).HasColumnName("cost_approve");

                entity.Property(e => e.CostChanged).HasColumnName("cost_changed");

                entity.Property(e => e.HourApply).HasColumnName("hour_apply");

                entity.Property(e => e.HourApprove).HasColumnName("hour_approve");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.ProjId)
                    .HasMaxLength(52)
                    .IsUnicode(false)
                    .HasColumnName("proj_id");

                entity.Property(e => e.ProjName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("proj_name");
            });

            modelBuilder.Entity<ViewProjectAwardSendCheckTree>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ProjectAwardSendCheckTree");

                entity.Property(e => e.AwardDesc).HasMaxLength(100);

                entity.Property(e => e.AwardReceiver).HasMaxLength(50);

                entity.Property(e => e.NodeId).HasMaxLength(150);

                entity.Property(e => e.ParentId).HasMaxLength(150);

                entity.Property(e => e.PaymentMoney).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.PlanMoney).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Professional).HasMaxLength(50);

                entity.Property(e => e.Role).HasMaxLength(50);

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("state");
            });

            modelBuilder.Entity<ViewProjectAwardTree>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ProjectAwardTree");

                entity.Property(e => e.AssignStatus)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AwardDesc).HasMaxLength(100);

                entity.Property(e => e.AwardReceiver).HasMaxLength(100);

                entity.Property(e => e.NodeId).HasMaxLength(250);

                entity.Property(e => e.ParentId).HasMaxLength(200);

                entity.Property(e => e.PaymentMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Professional)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ReceiverType)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Role).HasMaxLength(200);

                entity.Property(e => e.State)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("state");
            });

            modelBuilder.Entity<ViewProjectBudgetInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ProjectBudgetInfo");

                entity.Property(e => e.剩余预算).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.已发生金额).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.提交时验证金额).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.流程中金额).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.费用类型)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.项目号)
                    .HasMaxLength(52)
                    .IsUnicode(false);

                entity.Property(e => e.项目名称)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.预算金额).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ViewProjectBudgetInfoTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ProjectBudgetInfo_temp");

                entity.Property(e => e.剩余预算).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.已发生金额).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.提交时验证金额).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.流程中金额).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.费用类型)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.项目号)
                    .HasMaxLength(52)
                    .IsUnicode(false);

                entity.Property(e => e.项目名称)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.预算金额).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ViewProjectInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ProjectInfo");

                entity.Property(e => e.BeginDate)
                    .HasColumnType("datetime")
                    .HasColumnName("begin_date");

                entity.Property(e => e.CheckValue).HasColumnName("check_value");

                entity.Property(e => e.ContMoney)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("cont_money");

                entity.Property(e => e.EndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("end_date");

                entity.Property(e => e.Isfinish)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("isfinish");

                entity.Property(e => e.ManagementCost).HasColumnType("numeric(38, 2)");

                entity.Property(e => e.PayMoney).HasColumnName("pay_money");

                entity.Property(e => e.PaymentAmount).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.Pper).HasColumnName("PPer");

                entity.Property(e => e.ProjTypeDesc)
                    .HasMaxLength(20)
                    .HasColumnName("proj_type_desc");

                entity.Property(e => e.ProjectCategory)
                    .HasMaxLength(20)
                    .HasColumnName("project_category");

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("project_id");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("project_name");

                entity.Property(e => e.ProjectType)
                    .HasMaxLength(50)
                    .HasColumnName("project_type");

                entity.Property(e => e.RamountCny)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("RAmount_CNY");

                entity.Property(e => e.RperCny).HasColumnName("RPer_CNY");

                entity.Property(e => e.Xmjl)
                    .HasMaxLength(50)
                    .HasColumnName("xmjl");
            });

            modelBuilder.Entity<ViewProjectInfoBudgetByPeptj>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ProjectInfo_Budget_ByPeptj");

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(52)
                    .IsUnicode(false)
                    .HasColumnName("ProjectID");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectType).HasMaxLength(20);

                entity.Property(e => e.SubjectId).HasColumnName("SubjectID");

                entity.Property(e => e.SubjectName)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewProjectInfoBudgetByPeptjLocation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ProjectInfo_Budget_ByPeptj_Location");

                entity.Property(e => e.CostApprove).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.CostChange).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.CostChanged).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ProjectID");

                entity.Property(e => e.ProjectName).HasMaxLength(200);

                entity.Property(e => e.ProjectType).HasMaxLength(50);

                entity.Property(e => e.SubjectId).HasColumnName("SubjectID");

                entity.Property(e => e.SubjectName).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewProjectInfoByUserId>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_ProjectInfoByUserID");

                entity.Property(e => e.BeginDate)
                    .HasColumnType("datetime")
                    .HasColumnName("begin_date");

                entity.Property(e => e.CswbsMName)
                    .HasMaxLength(50)
                    .HasColumnName("cswbs_m_name");

                entity.Property(e => e.EndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("end_date");

                entity.Property(e => e.HumanName)
                    .HasMaxLength(300)
                    .HasColumnName("human_name");

                entity.Property(e => e.HumanSid).HasColumnName("human_sid");

                entity.Property(e => e.IsCost).HasColumnName("IS_COST");

                entity.Property(e => e.Isfinish)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("isfinish");

                entity.Property(e => e.ManagerType)
                    .HasMaxLength(5)
                    .HasColumnName("manager_type");

                entity.Property(e => e.ProjStatus)
                    .HasMaxLength(100)
                    .HasColumnName("proj_status");

                entity.Property(e => e.ProjSubTypeDesc)
                    .HasMaxLength(50)
                    .HasColumnName("proj_sub_type_desc");

                entity.Property(e => e.ProjTypeDesc)
                    .HasMaxLength(20)
                    .HasColumnName("proj_type_desc");

                entity.Property(e => e.ProjectCategory)
                    .HasMaxLength(20)
                    .HasColumnName("project_category");

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("project_id");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("project_name");

                entity.Property(e => e.Sfzh)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("sfzh");

                entity.Property(e => e.Wgsj)
                    .HasColumnType("datetime")
                    .HasColumnName("wgsj");

                entity.Property(e => e.Xmjl)
                    .HasMaxLength(50)
                    .HasColumnName("xmjl");

                entity.Property(e => e.Zy)
                    .HasMaxLength(50)
                    .HasColumnName("zy");
            });

            modelBuilder.Entity<ViewProjectInfoCost>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ProjectInfo_Cost");

                entity.Property(e => e.ContCny).HasColumnName("cont_cny");

                entity.Property(e => e.ContCost).HasColumnName("cont_cost");

                entity.Property(e => e.CostApply).HasColumnName("cost_apply");

                entity.Property(e => e.CostChanged).HasColumnName("cost_changed");

                entity.Property(e => e.CostRate).HasColumnName("cost_rate");

                entity.Property(e => e.ProjId)
                    .HasMaxLength(52)
                    .IsUnicode(false)
                    .HasColumnName("proj_id");
            });

            modelBuilder.Entity<ViewProjectInfoFinanceReceivable>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ProjectInfo_Finance_Receivables");

                entity.Property(e => e.Bz)
                    .HasMaxLength(50)
                    .HasColumnName("BZ");

                entity.Property(e => e.Hthv)
                    .HasColumnType("numeric(28, 14)")
                    .HasColumnName("hthv");

                entity.Property(e => e.Proid)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("proid");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("project_name");

                entity.Property(e => e.Ramount)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("RAmount");

                entity.Property(e => e.RamountCny)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("RAmount_CNY");

                entity.Property(e => e.RamountCnyforPer)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("RAmount_CNYForPer");

                entity.Property(e => e.RamountOc)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("RAmount_OC");

                entity.Property(e => e.RperCny).HasColumnName("RPer_CNY");

                entity.Property(e => e.RperOc).HasColumnName("RPer_OC");

                entity.Property(e => e.TotalOc).HasColumnName("Total_OC");
            });

            modelBuilder.Entity<ViewProjectInfoFinanceReceivablesCny>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ProjectInfo_Finance_Receivables_CNY");

                entity.Property(e => e.Proid)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("proid");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("project_name");

                entity.Property(e => e.RamountCny)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("RAmount_CNY");

                entity.Property(e => e.RperCny).HasColumnName("RPer_CNY");
            });

            modelBuilder.Entity<ViewProjectInfoFinanceReceivablesContract>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ProjectInfo_Finance_Receivables_Contract");

                entity.Property(e => e.Bz)
                    .HasMaxLength(50)
                    .HasColumnName("BZ");

                entity.Property(e => e.Htbh)
                    .HasMaxLength(50)
                    .HasColumnName("htbh");

                entity.Property(e => e.Htmc)
                    .HasMaxLength(300)
                    .HasColumnName("htmc");

                entity.Property(e => e.Proid)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("proid");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("project_name");

                entity.Property(e => e.Ramount)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("RAmount");

                entity.Property(e => e.RamountCny)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("RAmount_CNY");

                entity.Property(e => e.RamountOc)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("RAmount_OC");

                entity.Property(e => e.RperCny).HasColumnName("RPer_CNY");

                entity.Property(e => e.RperCnyBz).HasColumnName("RPer_CNY_BZ");

                entity.Property(e => e.RperOc).HasColumnName("RPer_OC");

                entity.Property(e => e.TotalOc).HasColumnName("Total_OC");
            });

            modelBuilder.Entity<ViewProjectInfoFinanceReceivablesContract20181227OldBak>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ProjectInfo_Finance_Receivables_Contract_20181227_Old_Bak");

                entity.Property(e => e.Bz)
                    .HasMaxLength(50)
                    .HasColumnName("BZ");

                entity.Property(e => e.Htbh)
                    .HasMaxLength(50)
                    .HasColumnName("htbh");

                entity.Property(e => e.Htmc)
                    .HasMaxLength(300)
                    .HasColumnName("htmc");

                entity.Property(e => e.Proid)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("proid");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("project_name");

                entity.Property(e => e.Ramount)
                    .HasColumnType("decimal(38, 4)")
                    .HasColumnName("RAmount");

                entity.Property(e => e.RamountCny)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("RAmount_CNY");

                entity.Property(e => e.RamountOc)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("RAmount_OC");

                entity.Property(e => e.RperCny).HasColumnName("RPer_CNY");

                entity.Property(e => e.RperCnyBz).HasColumnName("RPer_CNY_BZ");

                entity.Property(e => e.RperOc).HasColumnName("RPer_OC");

                entity.Property(e => e.TotalOc).HasColumnName("Total_OC");
            });

            modelBuilder.Entity<ViewProjectInfoFinanceReceivablesofContract>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ProjectInfo_Finance_ReceivablesofContract");

                entity.Property(e => e.Amount).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.ContractCode).HasMaxLength(100);
            });

            modelBuilder.Entity<ViewProjectInfoFund>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ProjectInfo_Fund");

                entity.Property(e => e.Accounttype).HasColumnName("accounttype");

                entity.Property(e => e.AdjustProcess).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.BeginDate)
                    .HasColumnType("datetime")
                    .HasColumnName("begin_date");

                entity.Property(e => e.BuildDate)
                    .HasColumnType("datetime")
                    .HasColumnName("build_date");

                entity.Property(e => e.Bz)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("BZ");

                entity.Property(e => e.CheckValue).HasColumnName("check_value");

                entity.Property(e => e.Ckts)
                    .HasColumnType("decimal(38, 4)")
                    .HasColumnName("CKTS");

                entity.Property(e => e.ContractType)
                    .HasMaxLength(50)
                    .HasColumnName("contract_type");

                entity.Property(e => e.Description)
                    .HasMaxLength(1046)
                    .IsUnicode(false);

                entity.Property(e => e.EndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("end_date");

                entity.Property(e => e.Finishdate)
                    .HasColumnType("datetime")
                    .HasColumnName("finishdate");

                entity.Property(e => e.IsCost).HasColumnName("is_cost");

                entity.Property(e => e.Isfinish)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("isfinish");

                entity.Property(e => e.Jnw)
                    .HasMaxLength(100)
                    .HasColumnName("jnw");

                entity.Property(e => e.OtherFee).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.PaymentAmount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.ProjStatus)
                    .HasMaxLength(100)
                    .HasColumnName("proj_status");

                entity.Property(e => e.ProjSubTypeDesc)
                    .HasMaxLength(50)
                    .HasColumnName("proj_sub_type_desc");

                entity.Property(e => e.ProjTypeDesc)
                    .HasMaxLength(20)
                    .HasColumnName("proj_type_desc");

                entity.Property(e => e.ProjectCategory)
                    .HasMaxLength(20)
                    .HasColumnName("project_category");

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("project_id");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("project_name");

                entity.Property(e => e.ProjectType)
                    .HasMaxLength(50)
                    .HasColumnName("project_type");

                entity.Property(e => e.Qqflag).HasColumnName("qqflag");

                entity.Property(e => e.Qqlevel).HasColumnName("qqlevel");

                entity.Property(e => e.RamountCny)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("RAmount_CNY");

                entity.Property(e => e.RperCny).HasColumnName("RPer_CNY");

                entity.Property(e => e.RunningMode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("running_mode");

                entity.Property(e => e.TotalCny)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("Total_CNY");

                entity.Property(e => e.Xmgs)
                    .HasMaxLength(100)
                    .HasColumnName("xmgs");

                entity.Property(e => e.Xmjl)
                    .HasMaxLength(50)
                    .HasColumnName("xmjl");
            });

            modelBuilder.Entity<ViewProjectInfoFund2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ProjectInfo_Fund_2");

                entity.Property(e => e.Accounttype).HasColumnName("accounttype");

                entity.Property(e => e.BeginDate)
                    .HasColumnType("datetime")
                    .HasColumnName("begin_date");

                entity.Property(e => e.BuildDate)
                    .HasColumnType("datetime")
                    .HasColumnName("build_date");

                entity.Property(e => e.Bz)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("BZ");

                entity.Property(e => e.CheckValue).HasColumnName("check_value");

                entity.Property(e => e.ContractType)
                    .HasMaxLength(50)
                    .HasColumnName("contract_type");

                entity.Property(e => e.CountryCode)
                    .HasMaxLength(10)
                    .HasColumnName("country_code");

                entity.Property(e => e.CountryName)
                    .HasMaxLength(200)
                    .HasColumnName("country_name");

                entity.Property(e => e.Description)
                    .HasMaxLength(1046)
                    .IsUnicode(false);

                entity.Property(e => e.EndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("end_date");

                entity.Property(e => e.Finishdate)
                    .HasColumnType("datetime")
                    .HasColumnName("finishdate");

                entity.Property(e => e.IsCost).HasColumnName("is_cost");

                entity.Property(e => e.Isfinish)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("isfinish");

                entity.Property(e => e.Jnw)
                    .HasMaxLength(100)
                    .HasColumnName("jnw");

                entity.Property(e => e.PaymentAmount).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.ProjStatus)
                    .HasMaxLength(100)
                    .HasColumnName("proj_status");

                entity.Property(e => e.ProjSubTypeDesc)
                    .HasMaxLength(50)
                    .HasColumnName("proj_sub_type_desc");

                entity.Property(e => e.ProjTypeDesc)
                    .HasMaxLength(20)
                    .HasColumnName("proj_type_desc");

                entity.Property(e => e.ProjectCategory)
                    .HasMaxLength(20)
                    .HasColumnName("project_category");

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("project_id");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("project_name");

                entity.Property(e => e.ProjectType)
                    .HasMaxLength(50)
                    .HasColumnName("project_type");

                entity.Property(e => e.Qqflag).HasColumnName("qqflag");

                entity.Property(e => e.Qqlevel).HasColumnName("qqlevel");

                entity.Property(e => e.RamountCny)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("RAmount_CNY");

                entity.Property(e => e.RperCny).HasColumnName("RPer_CNY");

                entity.Property(e => e.RunningMode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("running_mode");

                entity.Property(e => e.TotalCny)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("Total_CNY");

                entity.Property(e => e.Xmgs)
                    .HasMaxLength(100)
                    .HasColumnName("xmgs");

                entity.Property(e => e.Xmjl)
                    .HasMaxLength(50)
                    .HasColumnName("xmjl");
            });

            modelBuilder.Entity<ViewProjectInfoFund3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ProjectInfo_Fund_3");

                entity.Property(e => e.Accounttype).HasColumnName("accounttype");

                entity.Property(e => e.BeginDate)
                    .HasColumnType("datetime")
                    .HasColumnName("begin_date");

                entity.Property(e => e.BuildDate)
                    .HasColumnType("datetime")
                    .HasColumnName("build_date");

                entity.Property(e => e.Bz)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("BZ");

                entity.Property(e => e.CheckValue).HasColumnName("check_value");

                entity.Property(e => e.ContractType)
                    .HasMaxLength(50)
                    .HasColumnName("contract_type");

                entity.Property(e => e.CountryCode)
                    .HasMaxLength(10)
                    .HasColumnName("country_code");

                entity.Property(e => e.CountryName)
                    .HasMaxLength(200)
                    .HasColumnName("country_name");

                entity.Property(e => e.Description)
                    .HasMaxLength(1046)
                    .IsUnicode(false);

                entity.Property(e => e.EndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("end_date");

                entity.Property(e => e.Finishdate)
                    .HasColumnType("datetime")
                    .HasColumnName("finishdate");

                entity.Property(e => e.IsCost).HasColumnName("is_cost");

                entity.Property(e => e.Isfinish)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("isfinish");

                entity.Property(e => e.Jnw)
                    .HasMaxLength(100)
                    .HasColumnName("jnw");

                entity.Property(e => e.ManageMoney).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.PaymentAmount).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.ProjStatus)
                    .HasMaxLength(100)
                    .HasColumnName("proj_status");

                entity.Property(e => e.ProjSubTypeDesc)
                    .HasMaxLength(50)
                    .HasColumnName("proj_sub_type_desc");

                entity.Property(e => e.ProjTypeDesc)
                    .HasMaxLength(20)
                    .HasColumnName("proj_type_desc");

                entity.Property(e => e.ProjectCategory)
                    .HasMaxLength(20)
                    .HasColumnName("project_category");

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("project_id");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("project_name");

                entity.Property(e => e.ProjectProfitMargin).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.ProjectType)
                    .HasMaxLength(50)
                    .HasColumnName("project_type");

                entity.Property(e => e.Qqflag).HasColumnName("qqflag");

                entity.Property(e => e.Qqlevel).HasColumnName("qqlevel");

                entity.Property(e => e.RamountCny)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("RAmount_CNY");

                entity.Property(e => e.RperCny).HasColumnName("RPer_CNY");

                entity.Property(e => e.RunningMode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("running_mode");

                entity.Property(e => e.TotalCny)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("Total_CNY");

                entity.Property(e => e.Xmgs)
                    .HasMaxLength(100)
                    .HasColumnName("xmgs");

                entity.Property(e => e.Xmjl)
                    .HasMaxLength(50)
                    .HasColumnName("xmjl");
            });

            modelBuilder.Entity<ViewProjectInfoHumanWorkPrice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ProjectInfo_HumanWorkPrice");

                entity.Property(e => e.ProjId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("proj_id");
            });

            modelBuilder.Entity<ViewProjectInfoHumanWorkPriceDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ProjectInfo_HumanWorkPrice_Detail");

                entity.Property(e => e.DeptName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ihours).HasColumnName("ihours");

                entity.Property(e => e.Iyear)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("iyear");

                entity.Property(e => e.ProjId)
                    .HasMaxLength(50)
                    .HasColumnName("proj_id");

                entity.Property(e => e.Unitprice).HasColumnName("unitprice");
            });

            modelBuilder.Entity<ViewProjectList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ProjectList");

                entity.Property(e => e.ApplyDate).HasColumnType("datetime");

                entity.Property(e => e.AwardComposeCode).HasMaxLength(100);

                entity.Property(e => e.CurrentMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DispensedAmount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.ProjectCode).HasMaxLength(100);

                entity.Property(e => e.ProjectManagerApproveMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Rn).HasColumnName("rn");
            });

            modelBuilder.Entity<ViewQueryAskforLeaveInfoMation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_QueryAskforLeaveInfoMation");

                entity.Property(e => e.BeginDate).HasColumnType("datetime");

                entity.Property(e => e.DeptId)
                    .HasMaxLength(50)
                    .HasColumnName("DeptID");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.FromCity).HasMaxLength(100);

                entity.Property(e => e.MainIncident).HasColumnName("mainIncident");

                entity.Property(e => e.MainProcessName)
                    .HasMaxLength(50)
                    .HasColumnName("mainProcessName");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(200);

                entity.Property(e => e.RequestDate).HasColumnType("datetime");

                entity.Property(e => e.ToCity).HasMaxLength(500);

                entity.Property(e => e.ToCountry).HasMaxLength(500);

                entity.Property(e => e.ToDomesticOversea)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.TotalDays).HasColumnType("decimal(18, 1)");

                entity.Property(e => e.TravelTypeText).HasMaxLength(105);

                entity.Property(e => e.UserIdentity).HasMaxLength(50);

                entity.Property(e => e.UserLoginName).HasMaxLength(50);

                entity.Property(e => e.UserRealName).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewQueryFinanceCashFlowList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_QueryFinanceCashFlowList");

                entity.Property(e => e.Ncf).HasColumnName("NCF");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReceiveSumByMonth).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.ReceiveSumTotal).HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<ViewQueryGrtLtInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_QueryGrtLtInfo");

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.ContractCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreateLoginName).HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("date");

                entity.Property(e => e.HdId)
                    .HasMaxLength(36)
                    .HasColumnName("HdID");

                entity.Property(e => e.MessageName)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.OpenEnt).HasMaxLength(200);

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectName).HasMaxLength(500);

                entity.Property(e => e.RequestDeptCode).HasMaxLength(50);

                entity.Property(e => e.UnitName).HasMaxLength(500);
            });

            modelBuilder.Entity<ViewQueryProcessStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_QueryProcessStatus");

                entity.Property(e => e.ConfirmPayment)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ViewReceivablesInbox>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Receivables_Inbox");

                entity.Property(e => e.AccountReceiveCmpCode).HasMaxLength(50);

                entity.Property(e => e.AccountReceiveCmpName).HasMaxLength(200);

                entity.Property(e => e.BankNoticeNo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.BillAmount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.FFormNumber)
                    .HasMaxLength(50)
                    .HasColumnName("F_FormNumber");

                entity.Property(e => e.FId).HasColumnName("F_ID");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.PaidAmount)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentAmount).HasColumnType("decimal(19, 2)");

                entity.Property(e => e.ProcessName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProjectCategory).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(50);

                entity.Property(e => e.ProjectManagerName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectName).HasMaxLength(500);

                entity.Property(e => e.ReceiptAmount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.ReceivingAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RequestLoginName).HasMaxLength(50);

                entity.Property(e => e.RequestRealName).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewReceivablesRaecordHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ReceivablesRaecord_History");

                entity.Property(e => e.AccountingTime).HasColumnType("datetime");

                entity.Property(e => e.AmountReceivable).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AmountReceivableRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AmountReceivableRMB");

                entity.Property(e => e.BuckleWaElecAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BuckleWaElecAmount1).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BusinessManager1).HasMaxLength(100);

                entity.Property(e => e.BusinessManager2).HasMaxLength(100);

                entity.Property(e => e.BusinessManagerId1)
                    .HasMaxLength(100)
                    .HasColumnName("BusinessManagerID1");

                entity.Property(e => e.BusinessManagerId2)
                    .HasMaxLength(100)
                    .HasColumnName("BusinessManagerID2");

                entity.Property(e => e.BusinessManagerLoginName1).HasMaxLength(100);

                entity.Property(e => e.BusinessManagerLoginName2).HasMaxLength(100);

                entity.Property(e => e.ChangeLocalCurrencyAmount).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.ContractCode).HasMaxLength(100);

                entity.Property(e => e.ContractDate).HasMaxLength(100);

                entity.Property(e => e.ContractName).HasMaxLength(1200);

                entity.Property(e => e.ContractType).HasMaxLength(100);

                entity.Property(e => e.CounterFee).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CounterFee1).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Currency).HasMaxLength(100);

                entity.Property(e => e.DeptCode).HasMaxLength(100);

                entity.Property(e => e.DeptName).HasMaxLength(100);

                entity.Property(e => e.Exchange).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Handing).HasMaxLength(50);

                entity.Property(e => e.HandingIdnumber)
                    .HasMaxLength(50)
                    .HasColumnName("HandingIDNumber");

                entity.Property(e => e.Operater).HasMaxLength(50);

                entity.Property(e => e.OperaterIdnumber)
                    .HasMaxLength(50)
                    .HasColumnName("OperaterIDNumber");

                entity.Property(e => e.OwnerForfeit).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PayInfoAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PayTheOtherAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ProName).HasMaxLength(50);

                entity.Property(e => e.ProcessFinishDate).HasColumnType("datetime");

                entity.Property(e => e.ProcessName).HasMaxLength(1000);

                entity.Property(e => e.ProjectCode).HasMaxLength(100);

                entity.Property(e => e.ProjectManager).HasMaxLength(100);

                entity.Property(e => e.ProjectManagerId)
                    .HasMaxLength(100)
                    .HasColumnName("ProjectManagerID");

                entity.Property(e => e.ProjectManagerLoginName).HasMaxLength(100);

                entity.Property(e => e.ProjectName).HasMaxLength(100);

                entity.Property(e => e.ProjectPayment).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ProjectType).HasMaxLength(100);

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.RateProfitAndLoss).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ReceivablesTime).HasColumnType("datetime");

                entity.Property(e => e.ReceiveAmount).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.ReceiveAmount1).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.ReceiveMethod).HasMaxLength(50);

                entity.Property(e => e.ReceiveType).HasMaxLength(100);

                entity.Property(e => e.ReceivedDate).HasColumnType("datetime");

                entity.Property(e => e.RefundAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Remark).HasMaxLength(200);

                entity.Property(e => e.RequestDate).HasColumnType("datetime");

                entity.Property(e => e.RequestFormNumber).HasMaxLength(50);

                entity.Property(e => e.RequestLoginName).HasMaxLength(50);

                entity.Property(e => e.RequestRealName).HasMaxLength(50);

                entity.Property(e => e.RequsetSfzh).HasMaxLength(50);

                entity.Property(e => e.Rpid).HasColumnName("RPID");

                entity.Property(e => e.ShouldAmount).HasColumnType("decimal(23, 4)");

                entity.Property(e => e.ShouldAmountRmb)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("ShouldAmountRMB");

                entity.Property(e => e.TaxWithholding).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TaxWithholding1).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ValueAddedTax).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.WaElecAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.WithholdingAmount).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ViewReceivablesRecord>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ReceivablesRecord");

                entity.Property(e => e.AccountingTime).HasColumnType("datetime");

                entity.Property(e => e.AmountReceivable).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AmountReceivableRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AmountReceivableRMB");

                entity.Property(e => e.BuckleWaElecAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BuckleWaElecAmount1).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BusinessManager1).HasMaxLength(100);

                entity.Property(e => e.BusinessManager2).HasMaxLength(100);

                entity.Property(e => e.BusinessManagerId1)
                    .HasMaxLength(100)
                    .HasColumnName("BusinessManagerID1");

                entity.Property(e => e.BusinessManagerId2)
                    .HasMaxLength(100)
                    .HasColumnName("BusinessManagerID2");

                entity.Property(e => e.BusinessManagerLoginName1).HasMaxLength(100);

                entity.Property(e => e.BusinessManagerLoginName2).HasMaxLength(100);

                entity.Property(e => e.ChangeLocalCurrencyAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ContractCode).HasMaxLength(100);

                entity.Property(e => e.ContractDate).HasMaxLength(100);

                entity.Property(e => e.ContractName).HasMaxLength(1000);

                entity.Property(e => e.ContractType).HasMaxLength(100);

                entity.Property(e => e.ConvertedRate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.CounterFee).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CounterFee1).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Currency).HasMaxLength(50);

                entity.Property(e => e.DeptCode).HasMaxLength(100);

                entity.Property(e => e.DeptName).HasMaxLength(100);

                entity.Property(e => e.Exchange).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Handing).HasMaxLength(50);

                entity.Property(e => e.HandingIdnumber)
                    .HasMaxLength(50)
                    .HasColumnName("HandingIDNumber");

                entity.Property(e => e.Operater).HasMaxLength(50);

                entity.Property(e => e.OperaterIdnumber)
                    .HasMaxLength(50)
                    .HasColumnName("OperaterIDNumber");

                entity.Property(e => e.OwnerForfeit).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PayInfoAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PayTheOtherAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ProName).HasMaxLength(50);

                entity.Property(e => e.ProcessFinishDate).HasColumnType("datetime");

                entity.Property(e => e.ProcessName).HasMaxLength(1000);

                entity.Property(e => e.ProjectCode).HasMaxLength(100);

                entity.Property(e => e.ProjectManager).HasMaxLength(100);

                entity.Property(e => e.ProjectManagerId)
                    .HasMaxLength(100)
                    .HasColumnName("ProjectManagerID");

                entity.Property(e => e.ProjectManagerLoginName).HasMaxLength(100);

                entity.Property(e => e.ProjectName).HasMaxLength(100);

                entity.Property(e => e.ProjectPayment).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ProjectType).HasMaxLength(100);

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.RateProfitAndLoss).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ReceivablesTime).HasColumnType("datetime");

                entity.Property(e => e.ReceiveAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ReceiveAmount1).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ReceiveMethod).HasMaxLength(50);

                entity.Property(e => e.ReceiveType).HasMaxLength(100);

                entity.Property(e => e.ReceivedDate).HasColumnType("datetime");

                entity.Property(e => e.RefundAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Remark).HasMaxLength(200);

                entity.Property(e => e.RequestDate).HasColumnType("datetime");

                entity.Property(e => e.RequestFormNumber).HasMaxLength(50);

                entity.Property(e => e.RequestLoginName).HasMaxLength(50);

                entity.Property(e => e.RequestRealName).HasMaxLength(50);

                entity.Property(e => e.RequsetSfzh).HasMaxLength(50);

                entity.Property(e => e.Rpid).HasColumnName("RPID");

                entity.Property(e => e.ShouldAmount).HasColumnType("decimal(25, 4)");

                entity.Property(e => e.ShouldAmountRmb)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("ShouldAmountRMB");

                entity.Property(e => e.TaxWithholding).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TaxWithholding1).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TcpOperate).HasColumnName("Tcp_Operate");

                entity.Property(e => e.ValueAddedTax).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.WaElecAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.WithholdingAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.WithholdingOfVat)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("WithholdingOfVAT");

                entity.Property(e => e.ZsHv).HasColumnType("decimal(18, 4)");
            });

            modelBuilder.Entity<ViewReceivablesRecordHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ReceivablesRecord_History");

                entity.Property(e => e.AccountingTime).HasColumnType("datetime");

                entity.Property(e => e.AmountReceivable).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AmountReceivableRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("AmountReceivableRMB");

                entity.Property(e => e.BuckleWaElecAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BuckleWaElecAmount1).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BusinessManager1).HasMaxLength(100);

                entity.Property(e => e.BusinessManager2).HasMaxLength(100);

                entity.Property(e => e.BusinessManagerId1)
                    .HasMaxLength(100)
                    .HasColumnName("BusinessManagerID1");

                entity.Property(e => e.BusinessManagerId2)
                    .HasMaxLength(100)
                    .HasColumnName("BusinessManagerID2");

                entity.Property(e => e.BusinessManagerLoginName1).HasMaxLength(100);

                entity.Property(e => e.BusinessManagerLoginName2).HasMaxLength(100);

                entity.Property(e => e.ChangeLocalCurrencyAmount).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.ContractCode).HasMaxLength(100);

                entity.Property(e => e.ContractDate).HasMaxLength(100);

                entity.Property(e => e.ContractName).HasMaxLength(1200);

                entity.Property(e => e.ContractType).HasMaxLength(100);

                entity.Property(e => e.CounterFee).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CounterFee1).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Currency).HasMaxLength(100);

                entity.Property(e => e.DeptCode).HasMaxLength(100);

                entity.Property(e => e.DeptName).HasMaxLength(100);

                entity.Property(e => e.Exchange).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Handing).HasMaxLength(50);

                entity.Property(e => e.HandingIdnumber)
                    .HasMaxLength(50)
                    .HasColumnName("HandingIDNumber");

                entity.Property(e => e.Operater).HasMaxLength(50);

                entity.Property(e => e.OperaterIdnumber)
                    .HasMaxLength(50)
                    .HasColumnName("OperaterIDNumber");

                entity.Property(e => e.OwnerForfeit).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PayInfoAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PayTheOtherAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ProName).HasMaxLength(50);

                entity.Property(e => e.ProcessFinishDate).HasColumnType("datetime");

                entity.Property(e => e.ProcessName).HasMaxLength(1000);

                entity.Property(e => e.ProjectCode).HasMaxLength(100);

                entity.Property(e => e.ProjectManager).HasMaxLength(100);

                entity.Property(e => e.ProjectManagerId)
                    .HasMaxLength(100)
                    .HasColumnName("ProjectManagerID");

                entity.Property(e => e.ProjectManagerLoginName).HasMaxLength(100);

                entity.Property(e => e.ProjectName).HasMaxLength(100);

                entity.Property(e => e.ProjectPayment).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ProjectType).HasMaxLength(100);

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.RateProfitAndLoss).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ReceivablesTime).HasColumnType("datetime");

                entity.Property(e => e.ReceiveAmount).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.ReceiveAmount1).HasColumnType("decimal(20, 4)");

                entity.Property(e => e.ReceiveMethod).HasMaxLength(50);

                entity.Property(e => e.ReceiveType).HasMaxLength(100);

                entity.Property(e => e.ReceivedDate).HasColumnType("datetime");

                entity.Property(e => e.RefundAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Remark).HasMaxLength(200);

                entity.Property(e => e.RequestDate).HasColumnType("datetime");

                entity.Property(e => e.RequestFormNumber).HasMaxLength(50);

                entity.Property(e => e.RequestLoginName).HasMaxLength(50);

                entity.Property(e => e.RequestRealName).HasMaxLength(50);

                entity.Property(e => e.RequsetSfzh).HasMaxLength(50);

                entity.Property(e => e.Rpid).HasColumnName("RPID");

                entity.Property(e => e.ShouldAmount).HasColumnType("decimal(25, 4)");

                entity.Property(e => e.ShouldAmountRmb)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("ShouldAmountRMB");

                entity.Property(e => e.TaxWithholding).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TaxWithholding1).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ValueAddedTax).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.WaElecAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.WithholdingAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.WithholdingOfVat)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("WithholdingOfVAT");
            });

            modelBuilder.Entity<ViewReceiveAccountByRed>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ReceiveAccountByRed");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ContanctType)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.IshaveTax)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ISHaveTax");

                entity.Property(e => e.PayCategory)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ReBilltype)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.ReRate)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.SubjectCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewReceiveHistoryDepositInbox>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_ReceiveHistory_Deposit_Inbox");

                entity.Property(e => e.AccountingTime).HasColumnType("datetime");

                entity.Property(e => e.BillCategoryName).HasMaxLength(50);

                entity.Property(e => e.ChangeLocalCurrencyAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ContCode).HasMaxLength(50);

                entity.Property(e => e.ContractCode).HasMaxLength(100);

                entity.Property(e => e.ContractName).HasMaxLength(1000);

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DeptCode).HasMaxLength(100);

                entity.Property(e => e.DeptName).HasMaxLength(100);

                entity.Property(e => e.Exchange).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.GrtLtType).HasMaxLength(50);

                entity.Property(e => e.PayCmpAddress).HasMaxLength(500);

                entity.Property(e => e.PayCmpBank).HasMaxLength(500);

                entity.Property(e => e.PayCmpBankAcct).HasMaxLength(500);

                entity.Property(e => e.PayCmpBankUnionAcct).HasMaxLength(500);

                entity.Property(e => e.PayCmpCode).HasMaxLength(30);

                entity.Property(e => e.PayCmpName).HasMaxLength(500);

                entity.Property(e => e.ProcessName).HasMaxLength(1000);

                entity.Property(e => e.ProjectCode).HasMaxLength(100);

                entity.Property(e => e.ProjectName).HasMaxLength(100);

                entity.Property(e => e.ReceiveAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ReceivedDate).HasColumnType("datetime");

                entity.Property(e => e.RequestDate).HasColumnType("datetime");

                entity.Property(e => e.RequestDeptCode).HasMaxLength(50);

                entity.Property(e => e.RequestDeptName).HasMaxLength(50);

                entity.Property(e => e.RequestFormNumber).HasMaxLength(50);

                entity.Property(e => e.RequestLoginName).HasMaxLength(50);

                entity.Property(e => e.RequestPayCategoryName).HasMaxLength(100);

                entity.Property(e => e.RequestRealName).HasMaxLength(50);

                entity.Property(e => e.RequestTypeName)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.WithholdingAmount).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ViewReceivedByPayMentInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ReceivedByPayMentInfo");

                entity.Property(e => e.Acccountdate).HasColumnType("datetime");

                entity.Property(e => e.Amount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.ApproverName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Currency).HasMaxLength(100);

                entity.Property(e => e.ExpenseName)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.OperaterName).HasMaxLength(20);

                entity.Property(e => e.PaymentMethodName)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(100);

                entity.Property(e => e.ReceiveUnitName)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName");

                entity.Property(e => e.Rmbamount)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("RMBAmount");
            });

            modelBuilder.Entity<ViewReportAboadAbroadUserRecord>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Report_Aboad_AbroadUserRecord");

                entity.Property(e => e.BeginDate).HasColumnType("datetime");

                entity.Property(e => e.DeptName).HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.Nationality).IsRequired();

                entity.Property(e => e.PassportType).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.Tvcountry).HasColumnName("TVCountry");

                entity.Property(e => e.VisaType).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewReportAbroadApplyRecord>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Report_AbroadApply_Record");

                entity.Property(e => e.AbroadSpecTypeInfo)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.AbrodDeptNo).HasMaxLength(20);

                entity.Property(e => e.AgentLoginUser).HasMaxLength(50);

                entity.Property(e => e.AgentName).HasMaxLength(50);

                entity.Property(e => e.BeginDate).HasColumnType("datetime");

                entity.Property(e => e.BorrowDate).HasColumnType("datetime");

                entity.Property(e => e.ContractLimit).HasMaxLength(20);

                entity.Property(e => e.ContractScope).HasMaxLength(50);

                entity.Property(e => e.ContractType).HasMaxLength(50);

                entity.Property(e => e.CoseSouce).HasMaxLength(30);

                entity.Property(e => e.DealType).HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InviteCname).HasColumnName("InviteCName");

                entity.Property(e => e.InviteEname).HasColumnName("InviteEName");

                entity.Property(e => e.PassportType).HasMaxLength(50);

                entity.Property(e => e.PassportTypeNo).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectGm)
                    .HasMaxLength(50)
                    .HasColumnName("ProjectGM");

                entity.Property(e => e.ProjectJd)
                    .HasMaxLength(50)
                    .HasColumnName("ProjectJD");

                entity.Property(e => e.ProjectJdinfo).HasColumnName("ProjectJDInfo");

                entity.Property(e => e.ProjectNo).HasMaxLength(20);

                entity.Property(e => e.ProjectPosition).HasMaxLength(50);

                entity.Property(e => e.ProjectType).HasMaxLength(20);

                entity.Property(e => e.Projector).HasMaxLength(50);

                entity.Property(e => e.ProjectorId)
                    .HasMaxLength(50)
                    .HasColumnName("ProjectorID");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");

                entity.Property(e => e.RequestDeptName).HasMaxLength(50);

                entity.Property(e => e.RequestDeptNo).HasMaxLength(50);

                entity.Property(e => e.RequestRealName).HasMaxLength(30);

                entity.Property(e => e.RequestTelephone).HasMaxLength(20);

                entity.Property(e => e.RequestUserName).HasMaxLength(20);

                entity.Property(e => e.ReturnPaperDate).HasColumnType("datetime");

                entity.Property(e => e.TaskType).HasMaxLength(50);

                entity.Property(e => e.TeamLeader).HasMaxLength(50);

                entity.Property(e => e.Tvcountry).HasColumnName("TVCountry");

                entity.Property(e => e.VisaNum).HasMaxLength(50);

                entity.Property(e => e.VisaSec).HasMaxLength(50);

                entity.Property(e => e.VisaType).HasMaxLength(50);

                entity.Property(e => e.VisaTypeNo).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewReportAttachment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Report_Attachments");

                entity.Property(e => e.FileName).HasMaxLength(100);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.StepName).HasMaxLength(100);

                entity.Property(e => e.UserName).HasMaxLength(100);
            });

            modelBuilder.Entity<ViewReportAwardByYear>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Report_AwardByYear");

                entity.Property(e => e.AdjustMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BdgCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DeptCode).HasMaxLength(20);

                entity.Property(e => e.DeptName).HasMaxLength(100);

                entity.Property(e => e.Money).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.Surplus).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.UseCode).HasMaxLength(255);

                entity.Property(e => e.UseName).HasMaxLength(100);
            });

            modelBuilder.Entity<ViewReportEntertainmentClaim>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Report_EntertainmentClaim");

                entity.Property(e => e.AccountSubject).HasMaxLength(50);

                entity.Property(e => e.Agency)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.AuditAccountLoginName).HasMaxLength(20);

                entity.Property(e => e.AuditAccountName).HasMaxLength(20);

                entity.Property(e => e.AuditAccountUserIdentity).HasMaxLength(30);

                entity.Property(e => e.BearUnitCode).HasMaxLength(50);

                entity.Property(e => e.BearUnitName).HasMaxLength(200);

                entity.Property(e => e.BorrowMoney)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.BorrowMoneyZzj)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("BorrowMoneyZZJ");

                entity.Property(e => e.BorrowMoneyofRmbproject)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BorrowMoneyofRMBproject");

                entity.Property(e => e.BorrowPerson).HasMaxLength(50);

                entity.Property(e => e.BorrowPersonIdentity).HasMaxLength(50);

                entity.Property(e => e.BorrowTypeName).HasMaxLength(50);

                entity.Property(e => e.BudgetMoney)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.BussinessCard).HasMaxLength(50);

                entity.Property(e => e.Cj)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.ClaimsDepartmentCode).HasMaxLength(20);

                entity.Property(e => e.ClaimsDepartmentName).HasMaxLength(20);

                entity.Property(e => e.CompanyBudgetMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CompanyRemainingBudget).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ConfirmFinaceDate).HasColumnType("datetime");

                entity.Property(e => e.ConfirmFinaceLoginName).HasMaxLength(20);

                entity.Property(e => e.ConfirmFinaceName).HasMaxLength(50);

                entity.Property(e => e.ConfirmFinaceUserIdentity).HasMaxLength(30);

                entity.Property(e => e.ConfirmStatus).HasMaxLength(50);

                entity.Property(e => e.Currency).HasMaxLength(50);

                entity.Property(e => e.CurrencyName).HasMaxLength(50);

                entity.Property(e => e.EntertainCategory)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.EntertainName).HasMaxLength(50);

                entity.Property(e => e.Exchange).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ForeignId).HasColumnName("ForeignID");

                entity.Property(e => e.ForeignText).HasMaxLength(50);

                entity.Property(e => e.Fps).HasColumnName("FPS");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LinkBorrowMoney)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.LinkBorrowMoneyOfForeign)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.LinkBorrowMoneyofproject)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.LoanCurrency).HasMaxLength(30);

                entity.Property(e => e.LoanCurrencyzzj).HasMaxLength(50);

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.MoneyActual).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MoneyOfForeignRmb)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("MoneyOfForeignRMB");

                entity.Property(e => e.MoneyShallBig).HasMaxLength(100);

                entity.Property(e => e.MoneyShallSmall)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.NumberOfVisitor).HasMaxLength(10);

                entity.Property(e => e.OfficialCard).HasMaxLength(200);

                entity.Property(e => e.PayBankCode).HasMaxLength(20);

                entity.Property(e => e.PayBankName).HasMaxLength(50);

                entity.Property(e => e.PayCheque).HasMaxLength(30);

                entity.Property(e => e.PaymentType)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentTypeText).HasMaxLength(50);

                entity.Property(e => e.PersonLevel).HasMaxLength(50);

                entity.Property(e => e.ProcessFinishDate).HasColumnType("datetime");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectCategory).HasMaxLength(20);

                entity.Property(e => e.ProjectCode).HasMaxLength(200);

                entity.Property(e => e.ProjectManagerName).HasMaxLength(20);

                entity.Property(e => e.ProjectName).HasMaxLength(200);

                entity.Property(e => e.RateOfForeign).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RemainMoneyOfForeign)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.RemainingBorrowMoney)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.RemainingBorrowMoneyofproject)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.RemainingBudget)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.RequestDate)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptCode");

                entity.Property(e => e.RequestDeptName).HasMaxLength(200);

                entity.Property(e => e.RequestFormNumber).HasMaxLength(20);

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName");

                entity.Property(e => e.RequestRealName).HasMaxLength(50);

                entity.Property(e => e.RequestUserIdentity)
                    .HasMaxLength(20)
                    .HasColumnName("Request_UserIdentity");

                entity.Property(e => e.SubjectName).HasMaxLength(50);

                entity.Property(e => e.Subjectcode).HasMaxLength(50);

                entity.Property(e => e.TheMaster).HasMaxLength(20);

                entity.Property(e => e.ToAccompany).HasMaxLength(10);

                entity.Property(e => e.Transactor)
                    .HasMaxLength(20)
                    .HasColumnName("transactor");

                entity.Property(e => e.VchrnumCode)
                    .HasMaxLength(306)
                    .IsUnicode(false);

                entity.Property(e => e.VisaDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_DeptCode");

                entity.Property(e => e.VisaDeptName)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_DeptName");

                entity.Property(e => e.VisaLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_LoginName");

                entity.Property(e => e.VisaRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_RealName");

                entity.Property(e => e.VisaUserIdentity)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_UserIdentity");

                entity.Property(e => e.VisitorUnitName).HasMaxLength(200);

                entity.Property(e => e.Voucherid).HasColumnName("VOUCHERID");
            });

            modelBuilder.Entity<ViewReportExpenseClaimDailyLine>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Report_ExpenseClaim_Daily_lines");

                entity.Property(e => e.AccountSubject).HasMaxLength(50);

                entity.Property(e => e.ExpenseDesc).HasMaxLength(50);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Money)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.MoneyRmb)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("MoneyRMB");

                entity.Property(e => e.ProcessName).HasMaxLength(500);

                entity.Property(e => e.Rate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.SubjectName).HasMaxLength(500);

                entity.Property(e => e.TheMasterWithNum).HasMaxLength(50);

                entity.Property(e => e.VisitorUnitNameWithNum).HasMaxLength(200);
            });

            modelBuilder.Entity<ViewReportExpenseClaimHeader>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Report_ExpenseClaim_Header");

                entity.Property(e => e.AccountStatus)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.AccountSubject).HasMaxLength(50);

                entity.Property(e => e.AccountSubjectCode).HasMaxLength(20);

                entity.Property(e => e.AccountSubjectName).HasMaxLength(50);

                entity.Property(e => e.Agency)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.BankAccount).HasMaxLength(50);

                entity.Property(e => e.BorrowMoney)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.BussinessCard).HasMaxLength(50);

                entity.Property(e => e.ClaimsDepartmentCode).HasMaxLength(20);

                entity.Property(e => e.ClaimsDepartmentCodeTravel).HasMaxLength(20);

                entity.Property(e => e.ClaimsDepartmentName).HasMaxLength(20);

                entity.Property(e => e.ClaimsDepartmentNameTravel).HasMaxLength(20);

                entity.Property(e => e.ConfirmAuditorDate)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ConfirmAuditorLoginName).HasMaxLength(50);

                entity.Property(e => e.ConfirmAuditorName).HasMaxLength(50);

                entity.Property(e => e.ConfirmAuditorUserIdentity).HasMaxLength(50);

                entity.Property(e => e.ConfirmFinaceDate)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ConfirmFinaceName).HasMaxLength(50);

                entity.Property(e => e.ConfirmLoginName).HasMaxLength(50);

                entity.Property(e => e.ConfirmStatus)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ConfirmUserIdentity).HasMaxLength(50);

                entity.Property(e => e.DailyBudgetMoney)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DailyRemainingBudget)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ExpenseCategory).HasMaxLength(20);

                entity.Property(e => e.ExpenseName).HasMaxLength(50);

                entity.Property(e => e.ForeignId).HasColumnName("ForeignID");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IfNotProject).HasMaxLength(20);

                entity.Property(e => e.IsBeyond)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.LinkBorrowMoney)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.LinkBorrowMoneyOfForeign)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.LinkBusinessTrip).HasMaxLength(50);

                entity.Property(e => e.LoanAccountingUnit).HasMaxLength(50);

                entity.Property(e => e.LoanAccountingUnitName).HasMaxLength(500);

                entity.Property(e => e.LoanCurrency).HasMaxLength(50);

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.MoneyActual)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.MoneyOfForeignRmb)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("MoneyOfForeignRMB");

                entity.Property(e => e.MoneyShallBig).HasMaxLength(100);

                entity.Property(e => e.MoneyShallSmall)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.OfficialCard).HasMaxLength(200);

                entity.Property(e => e.Payee)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentType)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.PayorBank).HasMaxLength(50);

                entity.Property(e => e.PayorBankCode).HasMaxLength(50);

                entity.Property(e => e.ProcessFinishDate)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectCategory).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(200);

                entity.Property(e => e.ProjectName).HasMaxLength(200);

                entity.Property(e => e.RateOfForeign)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.RemainMoneyOfForeign)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.RemainingBorrowMoney)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.RequestDate)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RequestDeptCode).HasMaxLength(50);

                entity.Property(e => e.RequestDeptName).HasMaxLength(200);

                entity.Property(e => e.RequestLoginName).HasMaxLength(50);

                entity.Property(e => e.RequestRealName).HasMaxLength(50);

                entity.Property(e => e.RequestUserIdentity).HasMaxLength(20);

                entity.Property(e => e.SpecialOptions)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.TelPhone).HasMaxLength(50);

                entity.Property(e => e.TotalExpense)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Transactor)
                    .HasMaxLength(50)
                    .HasColumnName("transactor");

                entity.Property(e => e.TravelCategory)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.TravelClaimCategory)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.TravelDomesticOversea)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.TravelToPlace).HasMaxLength(100);

                entity.Property(e => e.TravelTotalAirPlane)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.TravelTotalBooking)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.TravelTotalHotel)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.TravelTotalLongTrip)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.TravelTotalOther)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.TravelTotalSteamShip)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.TravelTotalTraffic)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.TravelTotalTrain)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.VchrnumCode).HasMaxLength(208);

                entity.Property(e => e.Voucherid).HasColumnName("VOUCHERID");
            });

            modelBuilder.Entity<ViewReportExpenseClaimHotel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Report_ExpenseClaim_Hotel");

                entity.Property(e => e.AdjustAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.AfterAdjustAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Beyond)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.BillType).HasMaxLength(20);

                entity.Property(e => e.BillTypeName).HasMaxLength(100);

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.CurrencyName).HasMaxLength(100);

                entity.Property(e => e.FromDate)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FromPlace).HasMaxLength(200);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Money)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.MoneyRmb)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("MoneyRMB");

                entity.Property(e => e.ProcessName).HasMaxLength(500);

                entity.Property(e => e.Rate).HasMaxLength(20);

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName");

                entity.Property(e => e.StrokeNumber).HasMaxLength(200);

                entity.Property(e => e.TicketingCompany).HasMaxLength(200);

                entity.Property(e => e.TicketingCompanyName).HasMaxLength(100);

                entity.Property(e => e.ToDate)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ToPlace).HasMaxLength(200);
            });

            modelBuilder.Entity<ViewReportExpenseClaimOther>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Report_ExpenseClaim_Other");

                entity.Property(e => e.AdjustAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.AfterAdjustAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Beyond)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.BillType).HasMaxLength(20);

                entity.Property(e => e.BillTypeName).HasMaxLength(100);

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.CurrencyName).HasMaxLength(100);

                entity.Property(e => e.FromDate)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FromPlace).HasMaxLength(200);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Money)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.MoneyRmb)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("MoneyRMB");

                entity.Property(e => e.ProcessName).HasMaxLength(500);

                entity.Property(e => e.Rate).HasMaxLength(20);

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName");

                entity.Property(e => e.StrokeNumber).HasMaxLength(200);

                entity.Property(e => e.TicketingCompany).HasMaxLength(200);

                entity.Property(e => e.TicketingCompanyName).HasMaxLength(100);

                entity.Property(e => e.ToDate)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ToPlace).HasMaxLength(200);
            });

            modelBuilder.Entity<ViewReportExpenseClaimSubsidyLine>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Report_ExpenseClaim_Subsidy_Lines");

                entity.Property(e => e.Allowance)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.BeginDate)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EndDate)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Extendedsubsidies)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.PersonDeptName).HasMaxLength(200);

                entity.Property(e => e.PersonPost).HasMaxLength(200);

                entity.Property(e => e.PersonRealName).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(500);

                entity.Property(e => e.StartLocation).HasMaxLength(2000);

                entity.Property(e => e.Subsidies)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.SubsidyFood)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.SubsidyLocale)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.SubsidySpecial)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.SubsidySundries)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.SubsidyTravel)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.UserIdentity)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewReportExpenseClaimTravel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Report_ExpenseClaim_Travel");

                entity.Property(e => e.AdjustAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.AfterAdjustAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Beyond)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.BillType).HasMaxLength(20);

                entity.Property(e => e.BillTypeName).HasMaxLength(100);

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.CurrencyName).HasMaxLength(100);

                entity.Property(e => e.FromDate)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FromPlace).HasMaxLength(200);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Money)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.MoneyRmb)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("MoneyRMB");

                entity.Property(e => e.ProcessName).HasMaxLength(500);

                entity.Property(e => e.Rate).HasMaxLength(20);

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName");

                entity.Property(e => e.StrokeNumber).HasMaxLength(200);

                entity.Property(e => e.TicketingCompany).HasMaxLength(200);

                entity.Property(e => e.TicketingCompanyName).HasMaxLength(100);

                entity.Property(e => e.ToDate)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ToPlace).HasMaxLength(200);
            });

            modelBuilder.Entity<ViewReportExpenseClaimWjryLine>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Report_ExpenseClaim_WJRY_Lines");

                entity.Property(e => e.Credential).HasMaxLength(50);

                entity.Property(e => e.CredentialName).HasMaxLength(50);

                entity.Property(e => e.CredentialTypeName).HasMaxLength(50);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Money)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.MoneyRmb)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("MoneyRMB");

                entity.Property(e => e.PayCurrencyName).HasMaxLength(50);

                entity.Property(e => e.PersonRealName).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(500);

                entity.Property(e => e.Rate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ReceiveAccount).HasMaxLength(200);

                entity.Property(e => e.ReceiveBankName).HasMaxLength(200);

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName");
            });

            modelBuilder.Entity<ViewReportFinanceRequestProcessExchangeInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Report_FinanceRequestProcessExchangeInfo");

                entity.Property(e => e.CustomsAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CustomsCode).HasMaxLength(100);

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .HasColumnName("ID");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ReInvoiceAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ReInvoiceCode).HasMaxLength(100);

                entity.Property(e => e.Zsfpamount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ZSFPAmount");

                entity.Property(e => e.Zsfpcode)
                    .HasMaxLength(100)
                    .HasColumnName("ZSFPCode");
            });

            modelBuilder.Entity<ViewReportFinanceRequestProcessForPrintHeader>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Report_FinanceRequestProcessForPrintHeader");

                entity.Property(e => e.Bpbjamount)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("bpbjamount");

                entity.Property(e => e.BpbjamountNotes)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("bpbjamountNotes");

                entity.Property(e => e.ContantCode).HasMaxLength(50);

                entity.Property(e => e.Currency).HasMaxLength(50);

                entity.Property(e => e.Cwbz)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cwbz");

                entity.Property(e => e.DycustCode)
                    .HasMaxLength(50)
                    .HasColumnName("DYCustCode");

                entity.Property(e => e.GdCode)
                    .HasMaxLength(50)
                    .HasColumnName("GD_Code");

                entity.Property(e => e.HwckAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("Hwck_Amount");

                entity.Property(e => e.HwckAmountNotes)
                    .IsRequired()
                    .HasMaxLength(160)
                    .IsUnicode(false)
                    .HasColumnName("Hwck_AmountNotes");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Jbr)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("jbr");

                entity.Property(e => e.Other1)
                    .HasMaxLength(50)
                    .HasColumnName("other_1");

                entity.Property(e => e.Other2)
                    .HasMaxLength(500)
                    .HasColumnName("other_2");

                entity.Property(e => e.OtherAmount1)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("Other_Amount1");

                entity.Property(e => e.OtherAmount2)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("Other_Amount2");

                entity.Property(e => e.PmCpmpany).HasMaxLength(500);

                entity.Property(e => e.ProcessName)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectCode).HasMaxLength(50);

                entity.Property(e => e.ProjectControler)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectManager)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectName).HasMaxLength(500);

                entity.Property(e => e.ProjectSaler)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.RaceiveAccount).HasMaxLength(100);

                entity.Property(e => e.ReceiveAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ReceiveBank).HasMaxLength(500);

                entity.Property(e => e.ReceiveDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Sg1Amount)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("SG1_Amount");

                entity.Property(e => e.Sg1AmountNotes)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("SG1_AmountNotes");

                entity.Property(e => e.SgAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("SG_Amount");

                entity.Property(e => e.SgAmountNotes)
                    .IsRequired()
                    .HasMaxLength(74)
                    .IsUnicode(false)
                    .HasColumnName("SG_AmountNotes");

                entity.Property(e => e.Thirdamount)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("thirdamount");

                entity.Property(e => e.ThirdamountNotes)
                    .IsRequired()
                    .HasMaxLength(112)
                    .IsUnicode(false)
                    .HasColumnName("thirdamountNotes");

                entity.Property(e => e.TotalAmountGd1)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TotalAmount_GD1");

                entity.Property(e => e.TotalAmountGd2)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("TotalAmount_GD2");

                entity.Property(e => e.Xmcgwlfzr)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("xmcgwlfzr");
            });

            modelBuilder.Entity<ViewReportGeneralExpensesDepartment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Report_GeneralExpensesDepartment");

                entity.Property(e => e.BankAccount).HasMaxLength(50);

                entity.Property(e => e.BearUnitCode).HasMaxLength(50);

                entity.Property(e => e.BearUnitName).HasMaxLength(200);

                entity.Property(e => e.BeyondReason).HasMaxLength(500);

                entity.Property(e => e.BorrowMoneyByj)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BorrowMoneyBYJ");

                entity.Property(e => e.BorrowMoneyZzj)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("BorrowMoneyZZJ");

                entity.Property(e => e.BorrowPerson).HasMaxLength(50);

                entity.Property(e => e.BorrowPersonIdentity).HasMaxLength(50);

                entity.Property(e => e.BorrowTypeName).HasMaxLength(50);

                entity.Property(e => e.BudgetMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BussinessCard).HasMaxLength(50);

                entity.Property(e => e.ClaimsDepartmentCode).HasMaxLength(50);

                entity.Property(e => e.ClaimsDepartmentName).HasMaxLength(50);

                entity.Property(e => e.ConfirmAuditLoginName).HasMaxLength(50);

                entity.Property(e => e.ConfirmAuditName).HasMaxLength(50);

                entity.Property(e => e.ConfirmAuditUserIdentity).HasMaxLength(50);

                entity.Property(e => e.ConfirmDate).HasColumnType("datetime");

                entity.Property(e => e.ConfirmFinaceLoginName).HasMaxLength(50);

                entity.Property(e => e.ConfirmFinaceName).HasMaxLength(50);

                entity.Property(e => e.ConfirmFinaceUserIdentity).HasMaxLength(50);

                entity.Property(e => e.Currency).HasMaxLength(50);

                entity.Property(e => e.CurrencyName).HasMaxLength(50);

                entity.Property(e => e.DataSourceText).HasMaxLength(50);

                entity.Property(e => e.DepartmentName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DprojectCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("DProjectCode");

                entity.Property(e => e.ExpenseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ExpenseTypeName).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LinkBorrowMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LoanCurrencybyj).HasMaxLength(50);

                entity.Property(e => e.LoanCurrencyzzj)
                    .HasMaxLength(10)
                    .IsFixedLength(true);

                entity.Property(e => e.MoneyActual).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MoneyOfForeignRmb)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MoneyOfForeignRMB");

                entity.Property(e => e.MoneyShallBig)
                    .HasMaxLength(50)
                    .HasColumnName("MoneyShall_big");

                entity.Property(e => e.MoneyShallSmall)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("MoneyShall_small");

                entity.Property(e => e.NeedDirector).HasMaxLength(50);

                entity.Property(e => e.PaymentAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentFormNumber).HasMaxLength(500);

                entity.Property(e => e.PaymentType).HasMaxLength(50);

                entity.Property(e => e.PayorBank).HasMaxLength(200);

                entity.Property(e => e.PayorBankCode).HasMaxLength(50);

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectCategory).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(50);

                entity.Property(e => e.ProjectJnw)
                    .HasMaxLength(50)
                    .HasColumnName("ProjectJNW");

                entity.Property(e => e.ProjectName).HasMaxLength(500);

                entity.Property(e => e.RateOfForeign).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ReimburseMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RemainBudget).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RemainingBorrowMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");

                entity.Property(e => e.RequestDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptCode");

                entity.Property(e => e.RequestDeptName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_DeptName");

                entity.Property(e => e.RequestFinishDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_FinishDate");

                entity.Property(e => e.RequestLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_LoginName");

                entity.Property(e => e.RequestRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Request_RealName");

                entity.Property(e => e.RequestTelPhone)
                    .HasMaxLength(200)
                    .HasColumnName("Request_TelPhone");

                entity.Property(e => e.RequestUserIdentity)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserIdentity");

                entity.Property(e => e.RequestUserPost)
                    .HasMaxLength(50)
                    .HasColumnName("Request_UserPost");

                entity.Property(e => e.Tractor).HasMaxLength(50);

                entity.Property(e => e.VisaDeptCode)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_DeptCode");

                entity.Property(e => e.VisaDeptName)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_DeptName");

                entity.Property(e => e.VisaLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_LoginName");

                entity.Property(e => e.VisaRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_RealName");

                entity.Property(e => e.VisaUserIdentity)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_UserIdentity");

                entity.Property(e => e.VisaUserPost)
                    .HasMaxLength(50)
                    .HasColumnName("Visa_UserPost");

                entity.Property(e => e.Voucherid).HasColumnName("VOUCHERID");
            });

            modelBuilder.Entity<ViewReportGeneralExpensesDeteail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Report_GeneralExpensesDeteails");

                entity.Property(e => e.Amount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.AmountRmb)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("AmountRMB");

                entity.Property(e => e.ApplyLoginName).HasMaxLength(50);

                entity.Property(e => e.ApplyRealName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ApplyUseridentity).HasMaxLength(50);

                entity.Property(e => e.Beyond).HasMaxLength(50);

                entity.Property(e => e.BillAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.BillCode).HasMaxLength(50);

                entity.Property(e => e.BillTaxAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.BudgetAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ExpenseTypeName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InvoiceCategoryText).HasMaxLength(50);

                entity.Property(e => e.Money)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.Rate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.TaxRate).HasMaxLength(50);

                entity.Property(e => e.TaxRateName).HasMaxLength(50);

                entity.Property(e => e.UnitCode).HasMaxLength(50);

                entity.Property(e => e.UnitName).HasMaxLength(50);

                entity.Property(e => e.Using).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewReportGeneralExpensesHeader>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Report_GeneralExpensesHeader");

                entity.Property(e => e.Agency)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.BankAccount).HasMaxLength(50);

                entity.Property(e => e.BearUnitCode).HasMaxLength(50);

                entity.Property(e => e.BearUnitName).HasMaxLength(200);

                entity.Property(e => e.BeyondReason).HasMaxLength(500);

                entity.Property(e => e.BorrowMoneyByj)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("BorrowMoneyBYJ");

                entity.Property(e => e.BorrowMoneyZzj)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("BorrowMoneyZZJ");

                entity.Property(e => e.BorrowPerson).HasMaxLength(50);

                entity.Property(e => e.BorrowPersonIdentity).HasMaxLength(50);

                entity.Property(e => e.BorrowTypeName).HasMaxLength(50);

                entity.Property(e => e.BudgetMoney)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.BussinessCard).HasMaxLength(50);

                entity.Property(e => e.Bz)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ClaimsDepartmentCode).HasMaxLength(50);

                entity.Property(e => e.ClaimsDepartmentName).HasMaxLength(50);

                entity.Property(e => e.ConfirmAuditLoginName).HasMaxLength(50);

                entity.Property(e => e.ConfirmAuditName).HasMaxLength(50);

                entity.Property(e => e.ConfirmAuditUserIdentity).HasMaxLength(50);

                entity.Property(e => e.ConfirmDate)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ConfirmFinaceLoginName).HasMaxLength(50);

                entity.Property(e => e.ConfirmFinaceName).HasMaxLength(50);

                entity.Property(e => e.ConfirmFinaceUserIdentity).HasMaxLength(50);

                entity.Property(e => e.ConfirmStatus)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Currency).HasMaxLength(50);

                entity.Property(e => e.CurrencyName).HasMaxLength(50);

                entity.Property(e => e.DataSourceText).HasMaxLength(50);

                entity.Property(e => e.ExpenseTypeName).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LinkBorrowMoney)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.LoanCurrencybyj)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.LoanCurrencyzzj)
                    .HasMaxLength(10)
                    .IsFixedLength(true);

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.MoneyActual)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.MoneyOfForeignRmb)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("MoneyOfForeignRMB");

                entity.Property(e => e.MoneyShallBig)
                    .HasMaxLength(50)
                    .HasColumnName("MoneyShall_big");

                entity.Property(e => e.MoneyShallSmall)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.NeedDirector).HasMaxLength(50);

                entity.Property(e => e.Payee)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentFormNumber).HasMaxLength(500);

                entity.Property(e => e.PaymentType).HasMaxLength(50);

                entity.Property(e => e.PayorBank).HasMaxLength(200);

                entity.Property(e => e.PayorBankCode).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectCategory).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(50);

                entity.Property(e => e.ProjectJnw)
                    .HasMaxLength(50)
                    .HasColumnName("ProjectJNW");

                entity.Property(e => e.ProjectName).HasMaxLength(500);

                entity.Property(e => e.RateOfForeign).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ReimburseMoney)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.RemainBudget)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.RemainingBorrowMoney)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.RequestDate)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RequestDeptCode).HasMaxLength(50);

                entity.Property(e => e.RequestDeptName).HasMaxLength(50);

                entity.Property(e => e.RequestFinishDate)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RequestLoginName).HasMaxLength(50);

                entity.Property(e => e.RequestRealName).HasMaxLength(50);

                entity.Property(e => e.RequestTelPhone).HasMaxLength(200);

                entity.Property(e => e.RequestUserIdentity).HasMaxLength(50);

                entity.Property(e => e.RequestUserPost).HasMaxLength(50);

                entity.Property(e => e.Tractor).HasMaxLength(50);

                entity.Property(e => e.VchrnumCode).HasMaxLength(208);

                entity.Property(e => e.VisaDeptCode).HasMaxLength(50);

                entity.Property(e => e.VisaDeptName).HasMaxLength(50);

                entity.Property(e => e.VisaLoginName).HasMaxLength(50);

                entity.Property(e => e.VisaRealName).HasMaxLength(50);

                entity.Property(e => e.VisaUserIdentity).HasMaxLength(50);

                entity.Property(e => e.VisaUserPost).HasMaxLength(50);

                entity.Property(e => e.Voucherid).HasColumnName("VOUCHERID");
            });

            modelBuilder.Entity<ViewReportGeneralExpensesPayInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Report_GeneralExpensesPayInfo");

                entity.Property(e => e.Amount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.AmountRmb)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("AmountRMB");

                entity.Property(e => e.ApplyLoginName).HasMaxLength(50);

                entity.Property(e => e.ApplyRealName).HasMaxLength(50);

                entity.Property(e => e.ApplyUseridentity).HasMaxLength(50);

                entity.Property(e => e.Beyond).HasMaxLength(50);

                entity.Property(e => e.BillAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.BillCode).HasMaxLength(50);

                entity.Property(e => e.BillTaxAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ExpenseTypeName).HasMaxLength(50);

                entity.Property(e => e.FinanceChangeLocalCurrencyAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.FinancePaymentTotal)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InvoiceCategoryText).HasMaxLength(50);

                entity.Property(e => e.PayInfoFormNumber)
                    .HasMaxLength(50)
                    .HasColumnName("PayInfo_FormNumber");

                entity.Property(e => e.PayInfoReceiveCpmpany)
                    .HasMaxLength(200)
                    .HasColumnName("PayInfo_ReceiveCpmpany");

                entity.Property(e => e.PaymentReceivingCompanyCode).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.Rate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Remark).HasMaxLength(500);

                entity.Property(e => e.TaxRate).HasMaxLength(50);

                entity.Property(e => e.TaxRateName).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewReportInvoiceRequestProcess>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Report_Invoice_RequestProcess");

                entity.Property(e => e.BillAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.BillContent).HasMaxLength(200);

                entity.Property(e => e.DesignOfIncome)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .HasColumnName("ID");

                entity.Property(e => e.NotesRemark).HasMaxLength(500);

                entity.Property(e => e.PayCmpAddress)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.PayCmpBank)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.PayCmpBankAcct)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.PayCmpBankUnionAcct)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.PayCmpName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.PayCmpPhone).HasMaxLength(30);

                entity.Property(e => e.PlanInAcctDate).HasColumnType("datetime");

                entity.Property(e => e.ProcessName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProjectCategory).HasMaxLength(50);

                entity.Property(e => e.ProjectCategorySub)
                    .HasMaxLength(50)
                    .HasColumnName("ProjectCategory_Sub");

                entity.Property(e => e.ProjectCode).HasMaxLength(50);

                entity.Property(e => e.ProjectCompletePct)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProjectContractAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ProjectReceivedAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectReceivedPct)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ReceiptAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.RequestDate).HasColumnType("datetime");

                entity.Property(e => e.RequestFormNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RequestPayCategoryName).HasMaxLength(100);

                entity.Property(e => e.RequestRealName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RequestType)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.SubMoneyOnVat)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.SumReceiveAmountSmall)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Tariff).HasMaxLength(50);

                entity.Property(e => e.TaxRate).HasMaxLength(20);

                entity.Property(e => e.Telphone).HasMaxLength(30);

                entity.Property(e => e.TheApplyCurcencyName).HasMaxLength(50);

                entity.Property(e => e.TheApplyRate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TheApplyReceivedAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.VoucherCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewReportInvoicesReceived>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Report_Invoices_Received");

                entity.Property(e => e.AccountingAuditDate).HasColumnType("datetime");

                entity.Property(e => e.AccountingAuditLoginUserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.AccountingAuditUserName).HasMaxLength(20);

                entity.Property(e => e.AggregateRecInvoiceAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.AggregateRecReceiptAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.AggregateWithholdingTax)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.CasierClaimDate).HasColumnType("datetime");

                entity.Property(e => e.CasierClaimLoginUserName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CasierClaimUserName).HasMaxLength(20);

                entity.Property(e => e.ConfirmDate).HasColumnType("datetime");

                entity.Property(e => e.ConfirmIdentity).HasMaxLength(50);

                entity.Property(e => e.ConfirmLoginName).HasMaxLength(50);

                entity.Property(e => e.ConfirmRealName).HasMaxLength(50);

                entity.Property(e => e.ContractAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ContractCategory).HasMaxLength(50);

                entity.Property(e => e.ContractCode).HasMaxLength(50);

                entity.Property(e => e.ContractCurrency)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ContractName).HasMaxLength(500);

                entity.Property(e => e.ContractPaymentAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ContractPaymentPercentage)
                    .HasMaxLength(31)
                    .IsUnicode(false);

                entity.Property(e => e.FinaceInvoiceNumber).HasColumnName("Finace_InvoiceNumber");

                entity.Property(e => e.FinaceTicketDate)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Finace_TicketDate");

                entity.Property(e => e.FinaceTicketUserIdentity)
                    .HasMaxLength(50)
                    .HasColumnName("Finace_TicketUserIdentity");

                entity.Property(e => e.FinaceTicketUserLoginName)
                    .HasMaxLength(50)
                    .HasColumnName("Finace_TicketUserLoginName");

                entity.Property(e => e.FinaceTicketUserRealName)
                    .HasMaxLength(50)
                    .HasColumnName("Finace_TicketUserRealName");

                entity.Property(e => e.FinaceTotalAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Finace_TotalAmount");

                entity.Property(e => e.FinaceTotalRefundedTax)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Finace_TotalRefundedTax");

                entity.Property(e => e.FinaceTotalTaxAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Finace_TotalTaxAmount");

                entity.Property(e => e.FinaceTotalWithholdingTax)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Finace_TotalWithholdingTax");

                entity.Property(e => e.FinancePaymentBank).HasMaxLength(100);

                entity.Property(e => e.FinancePaymentBankAccount)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.GoodClassName).HasMaxLength(100);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InvoiceCategoryText).HasMaxLength(50);

                entity.Property(e => e.InvoiceCategoryValue).HasMaxLength(20);

                entity.Property(e => e.InvoiceTotalAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.InvoiceTotalBillAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.InvoicesFormNumber).HasMaxLength(50);

                entity.Property(e => e.InvoicesUnitName).HasMaxLength(500);

                entity.Property(e => e.PaymentAbacode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PaymentABACode");

                entity.Property(e => e.PaymentApplyReturnTaxAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentBankAccount)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentBankAddress).HasMaxLength(500);

                entity.Property(e => e.PaymentBankName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentCanReturnTaxAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentCategory).HasMaxLength(50);

                entity.Property(e => e.PaymentChangeLocalCurrencyAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PaymentCurrency)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentExchange).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.PaymentIbanCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentLineNumbers)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentReceivingCompanyAddress)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentReceivingCompanyCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentReceivingCompanyName).HasMaxLength(1200);

                entity.Property(e => e.PaymentSwiftCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessFinishDate).HasColumnType("datetime");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectCategory).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(50);

                entity.Property(e => e.ProjectJnw).HasMaxLength(20);

                entity.Property(e => e.ProjectName).HasMaxLength(500);

                entity.Property(e => e.ProjectSchedule)
                    .HasMaxLength(31)
                    .IsUnicode(false);

                entity.Property(e => e.RelevanceInvoiceCategoryText).HasMaxLength(50);

                entity.Property(e => e.RelevanceInvoiceCategoryValue).HasMaxLength(20);

                entity.Property(e => e.RequestDate)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RequestDeptCode).HasMaxLength(50);

                entity.Property(e => e.RequestDeptName).HasMaxLength(500);

                entity.Property(e => e.RequestIdentity).HasMaxLength(50);

                entity.Property(e => e.RequestLoginName).HasMaxLength(50);

                entity.Property(e => e.RequestRealName).HasMaxLength(50);

                entity.Property(e => e.RequestTelephone).HasMaxLength(50);

                entity.Property(e => e.SignCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SignName).HasMaxLength(50);

                entity.Property(e => e.SubjectCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierCode).HasMaxLength(50);

                entity.Property(e => e.SupplierName).HasMaxLength(2000);

                entity.Property(e => e.SurplusReturnTax)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.TaxAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.TaxAmountRate)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.TaxVoucherCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TaxVoucherId).HasColumnName("TaxVoucherID");

                entity.Property(e => e.TotalTaxAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.TotelReturnTax)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.UnitCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UnitJnw).HasMaxLength(20);

                entity.Property(e => e.UnitName).HasMaxLength(200);

                entity.Property(e => e.VchrnumCode).HasMaxLength(208);

                entity.Property(e => e.VoucherCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VoucherId).HasColumnName("VoucherID");
            });

            modelBuilder.Entity<ViewReportInvoicesRendered>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Report_Invoices_Rendered");

                entity.Property(e => e.AggregateRenInvoiceAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.AggregateRenReceiptAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.BName)
                    .HasMaxLength(200)
                    .HasColumnName("b_name");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InvoiceCategoryText).HasMaxLength(50);

                entity.Property(e => e.InvoiceTotalAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.OwnerCategory).HasMaxLength(50);

                entity.Property(e => e.OwnerName).HasMaxLength(500);

                entity.Property(e => e.PayBankAccount).HasMaxLength(50);

                entity.Property(e => e.PayBankName).HasMaxLength(500);

                entity.Property(e => e.PayCompanyAddress).HasMaxLength(500);

                entity.Property(e => e.PayCompanyName).HasMaxLength(500);

                entity.Property(e => e.PayCompanyPhone).HasMaxLength(50);

                entity.Property(e => e.PayCompanyTaxId).HasMaxLength(50);

                entity.Property(e => e.PayUnitedBankNumber).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectCategory).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(50);

                entity.Property(e => e.ProjectContractTotalAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectName).HasMaxLength(500);

                entity.Property(e => e.ProjectSchedule)
                    .HasMaxLength(31)
                    .IsUnicode(false);

                entity.Property(e => e.ReceivedAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ReceivedPercentage)
                    .HasMaxLength(31)
                    .IsUnicode(false);

                entity.Property(e => e.RenderedCategoryText).HasMaxLength(50);

                entity.Property(e => e.RequestDate).HasColumnType("datetime");

                entity.Property(e => e.RequestRealName).HasMaxLength(50);

                entity.Property(e => e.RequestTelephone).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewReportPaymentProcessMultiple>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Report_PaymentProcessMultiple");

                entity.Property(e => e.AccountingAuditDate).HasColumnType("datetime");

                entity.Property(e => e.AccountingAuditLoginUserName).HasMaxLength(50);

                entity.Property(e => e.AccountingAuditUserName).HasMaxLength(50);

                entity.Property(e => e.Approver1).HasMaxLength(50);

                entity.Property(e => e.Approver1LoginName).HasMaxLength(50);

                entity.Property(e => e.Approver2).HasMaxLength(50);

                entity.Property(e => e.Approver2LoginName).HasMaxLength(50);

                entity.Property(e => e.BillFlag)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Budget)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.BudgetHappenedAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.BudgetHappeningAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.BudgetRemainAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.BuyForeignAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.BuyForeignCurrency)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.BuyForeignExchange)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BuyForeignHanderCharge)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.BuyForeignOperateLoginName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BuyForeignOperateName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BuyForeignOperateTime).HasColumnType("datetime");

                entity.Property(e => e.BuyForeignPostage)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.CardBank).HasMaxLength(50);

                entity.Property(e => e.CardName).HasMaxLength(50);

                entity.Property(e => e.CardNo)
                    .HasMaxLength(50)
                    .HasColumnName("CardNO");

                entity.Property(e => e.CasierClaimDate).HasColumnType("datetime");

                entity.Property(e => e.CasierClaimLoginUserName).HasMaxLength(50);

                entity.Property(e => e.CasierClaimUserName).HasMaxLength(50);

                entity.Property(e => e.ContractExchange)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ContractType)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ContractUnitCode).HasMaxLength(50);

                entity.Property(e => e.ContractUnitJnw).HasMaxLength(50);

                entity.Property(e => e.ContractUnitName).HasMaxLength(50);

                entity.Property(e => e.Currency).HasMaxLength(50);

                entity.Property(e => e.ExchangeRateDifference)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ExchangeVoucher)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FinanceChangeLocalCurrencyAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.FinanceCurrency).HasMaxLength(50);

                entity.Property(e => e.FinanceDecimalDigitForVat).HasColumnName("FinanceDecimalDigitForVAT");

                entity.Property(e => e.FinanceDraftAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.FinanceDraftEnabledAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.FinanceDraftMode)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.FinanceDraftSurplusAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.FinanceDraftTotal)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.FinanceExchange)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FinancePaymentAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.FinancePaymentBank).HasMaxLength(100);

                entity.Property(e => e.FinancePaymentBankAccount).HasMaxLength(50);

                entity.Property(e => e.FinancePaymentDraftValidAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.FinancePaymentItemSubjectCode).HasMaxLength(50);

                entity.Property(e => e.FinancePaymentItemSubjectName).HasMaxLength(1000);

                entity.Property(e => e.FinancePaymentItemSubjectNameAccount).HasMaxLength(50);

                entity.Property(e => e.FinancePaymentTotal)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.FinancePaymentTotalTotal)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.FinanceSubjectCode).HasMaxLength(50);

                entity.Property(e => e.FinanceSubjectName).HasMaxLength(500);

                entity.Property(e => e.FinanceWithHoldingInputVat)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("FinanceWithHoldingInputVAT");

                entity.Property(e => e.FinanceWithholdingTaxPercentage)
                    .HasMaxLength(31)
                    .IsUnicode(false);

                entity.Property(e => e.FineAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.FinnaceCalculateModeForVat).HasColumnName("FinnaceCalculateModeForVAT");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InvoiceBillAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.InvoiceCategoryText).HasMaxLength(50);

                entity.Property(e => e.InvoiceTaxAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.InvoiceTotalAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.InvoicesUnitName).HasMaxLength(1200);

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.LockLoginUserName).HasMaxLength(50);

                entity.Property(e => e.LockUserName).HasMaxLength(50);

                entity.Property(e => e.OtherCost)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.PayCmpName).HasMaxLength(500);

                entity.Property(e => e.PaymentAbacode)
                    .HasMaxLength(50)
                    .HasColumnName("PaymentABACode");

                entity.Property(e => e.PaymentAcutlCurrencyPaymentAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentAirlineTicketAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentAmountLowercase)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentAmountUppercase).HasMaxLength(500);

                entity.Property(e => e.PaymentApplicationName).HasMaxLength(50);

                entity.Property(e => e.PaymentBankAccount).HasMaxLength(50);

                entity.Property(e => e.PaymentBankAddress).HasMaxLength(500);

                entity.Property(e => e.PaymentBankName).HasMaxLength(500);

                entity.Property(e => e.PaymentBillAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentChangeLocalCurrencyAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentCommercialInvoiceCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentContractPaymentDate)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentCurrency).HasMaxLength(50);

                entity.Property(e => e.PaymentDescription).HasMaxLength(4000);

                entity.Property(e => e.PaymentExchange)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentFundModeName).HasMaxLength(50);

                entity.Property(e => e.PaymentGuanDanCode).HasMaxLength(50);

                entity.Property(e => e.PaymentGuanDanCurrency).HasMaxLength(50);

                entity.Property(e => e.PaymentGuanDanGoodsName).HasMaxLength(50);

                entity.Property(e => e.PaymentGuanDanTotal)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentIbanCode).HasMaxLength(50);

                entity.Property(e => e.PaymentInputVat)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("PaymentInputVAT");

                entity.Property(e => e.PaymentInputVatvoucher)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("PaymentInputVATVoucher");

                entity.Property(e => e.PaymentLineNumbers).HasMaxLength(500);

                entity.Property(e => e.PaymentLinkFormNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentMethodName).HasMaxLength(50);

                entity.Property(e => e.PaymentOtherAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentOtherExchange)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentOtherPaymentTotal)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentPayableAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentProjectIsEpc).HasColumnName("PaymentProjectIsEPC");

                entity.Property(e => e.PaymentReceiptCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentReceivingCompanyAddress).HasMaxLength(500);

                entity.Property(e => e.PaymentReceivingCompanyCode).HasMaxLength(50);

                entity.Property(e => e.PaymentReceivingCompanyName).HasMaxLength(500);

                entity.Property(e => e.PaymentSwiftCode).HasMaxLength(50);

                entity.Property(e => e.PaymentTotal)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentTotalContractAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentTransportationMode).HasMaxLength(50);

                entity.Property(e => e.PaymentTransportationModeName).HasMaxLength(50);

                entity.Property(e => e.PaymentVatcurrency)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PaymentVATCurrency");

                entity.Property(e => e.PaymentVoucherDeptCode).HasMaxLength(50);

                entity.Property(e => e.PaymentVoucherDeptName).HasMaxLength(50);

                entity.Property(e => e.PaymentWithholdingAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentWithoutInputVat)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("PaymentWithoutInputVAT");

                entity.Property(e => e.PaymentWithoutInputVatvoucher)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("PaymentWithoutInputVATVoucher");

                entity.Property(e => e.PaymentWithoutOtherTax)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentWithoutOtherTaxVoucher)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.PeptjSid).HasColumnName("PeptjSID");

                entity.Property(e => e.ProcessFinishDate).HasColumnType("datetime");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectAccountPayable)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectAdjustProcess).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ProjectCategory).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(200);

                entity.Property(e => e.ProjectCodeDev)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectContractAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectInfo)
                    .HasMaxLength(1047)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectInfoBasic)
                    .HasMaxLength(1047)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectJnw).HasMaxLength(10);

                entity.Property(e => e.ProjectManagementCost)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectManager).HasMaxLength(50);

                entity.Property(e => e.ProjectManagerIdentityId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectManagerLoginName).HasMaxLength(50);

                entity.Property(e => e.ProjectName).HasMaxLength(200);

                entity.Property(e => e.ProjectNeiBuRenGongFei)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectPaymentAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectPaymentContractTotalAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectPaymentInfo).HasMaxLength(200);

                entity.Property(e => e.ProjectPojectProgressPercentage)
                    .HasMaxLength(31)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectProfitMargin)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectReceivedAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectReceivedPercentage)
                    .HasMaxLength(31)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectTypeName).HasMaxLength(50);

                entity.Property(e => e.RequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Request_Date");

                entity.Property(e => e.RequestDate1)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("RequestDate");

                entity.Property(e => e.RequestDeptCode).HasMaxLength(50);

                entity.Property(e => e.RequestDeptName).HasMaxLength(200);

                entity.Property(e => e.RequestFormNumber).HasMaxLength(20);

                entity.Property(e => e.RequestLoginName).HasMaxLength(50);

                entity.Property(e => e.RequestPayCategoryName).HasMaxLength(50);

                entity.Property(e => e.RequestRealName).HasMaxLength(50);

                entity.Property(e => e.RequestSfzh).HasMaxLength(30);

                entity.Property(e => e.RequestTelephone)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RequestTypeName).HasMaxLength(50);

                entity.Property(e => e.Rmb)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.RunningCost)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.SignSupplierCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SignSupplierName).HasMaxLength(1200);

                entity.Property(e => e.Skje)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.TotalTaxBasic).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.VchrnumCode).HasMaxLength(208);

                entity.Property(e => e.VoucherCode).HasMaxLength(50);

                entity.Property(e => e.Voucherid).HasColumnName("VOUCHERID");

                entity.Property(e => e.WithholdingTax)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewReportPaymentProcessMultipleBillInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Report_PaymentProcessMultiple_BillInfo");

                entity.Property(e => e.Amount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.AmountRmb)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("AmountRMB");

                entity.Property(e => e.BillAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.BillAmountRmb)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("BillAmountRMB");

                entity.Property(e => e.BillCode).HasMaxLength(50);

                entity.Property(e => e.BillContent).HasMaxLength(1000);

                entity.Property(e => e.BillTaxAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.BillTaxAmountRmb)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("BillTaxAmountRMB");

                entity.Property(e => e.Currency)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Exchange)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.InvoiceDate)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.TaxRateText).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewReportPaymentProcessMultipleDepartmentCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Report_PaymentProcessMultiple_DepartmentCode");

                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DepartmentName).HasMaxLength(50);

                entity.Property(e => e.Flag).HasColumnName("flag");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.PaymentAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.ProcessName).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewReportPaymentProcessMultipleDraftInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Report_PaymentProcessMultiple_DraftInfo");

                entity.Property(e => e.DraftAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DraftAmountChineseNumeral).HasMaxLength(200);

                entity.Property(e => e.DraftCode).HasMaxLength(50);

                entity.Property(e => e.DraftType).HasMaxLength(50);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.PayingBankName).HasMaxLength(500);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ResponsiblePerson).HasMaxLength(50);

                entity.Property(e => e.ResponsibleSfzh)
                    .HasMaxLength(20)
                    .HasColumnName("ResponsibleSFZH");
            });

            modelBuilder.Entity<ViewReportPaymentProcessMultiplePaymentInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Report_PaymentProcessMultiple_PaymentInfo");

                entity.Property(e => e.ContractCode).HasMaxLength(50);

                entity.Property(e => e.ContractCurrency).HasMaxLength(50);

                entity.Property(e => e.FinanceWithoutInputVat)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("FinanceWithoutInputVAT");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.OtherCost)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.OtherPaymentAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.PayContractExchange)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentActualPayments).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PaymentActualPaymentsPercentage)
                    .HasMaxLength(31)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentAmountLowercase)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentAmountPercentage)
                    .HasMaxLength(31)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentAmountUppercase).HasMaxLength(500);

                entity.Property(e => e.PaymentCommercialInvoiceCode).HasMaxLength(50);

                entity.Property(e => e.PaymentContractAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentDescription).HasMaxLength(500);

                entity.Property(e => e.PaymentFineAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentInputVat)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("PaymentInputVAT");

                entity.Property(e => e.PaymentNodeName).HasMaxLength(50);

                entity.Property(e => e.PaymentNote).HasMaxLength(500);

                entity.Property(e => e.PaymentPayableAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PaymentPayableAmountPercentage)
                    .HasMaxLength(31)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentPayableTotalTime).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PaymentPayableTotalTimePercentage)
                    .HasMaxLength(31)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentReceiptCode).HasMaxLength(50);

                entity.Property(e => e.PaymentTotalTime)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentTotalTimePercentage)
                    .HasMaxLength(31)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentWithholdingAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PaymentWithholdingAmountPercentage)
                    .HasMaxLength(31)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentWithoutInputVat)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("PaymentWithoutInputVAT");

                entity.Property(e => e.PaymentWithoutOtherTax)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectName).HasMaxLength(1200);

                entity.Property(e => e.Sheamount)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("SHEAmount");

                entity.Property(e => e.WithholdingTax)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewReportPaymentProcessMultipleProcess>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Report_PaymentProcessMultiple_Process");

                entity.Property(e => e.FinancePaymentAmountFmt)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.FinancePaymentTotalFmt)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.PaymentAmountFmt)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentDraftAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PaymentDraftAmountFmt)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentMethodName).HasMaxLength(50);

                entity.Property(e => e.PaymentReceivingCompanyName).HasMaxLength(500);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ProjectCode).HasMaxLength(200);

                entity.Property(e => e.ProjectName).HasMaxLength(200);

                entity.Property(e => e.RequestFormNumber).HasMaxLength(20);

                entity.Property(e => e.RequestPayCategoryName).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewReportReceivedBillsInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Report_Received_BillsInfo");

                entity.Property(e => e.Amount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.BillAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.BillCode).HasMaxLength(50);

                entity.Property(e => e.BillContent).HasMaxLength(1000);

                entity.Property(e => e.BillTaxAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.InvoiceDate)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.Requestor).HasMaxLength(50);

                entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TaxRateCode).HasMaxLength(50);

                entity.Property(e => e.TaxRateText).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewReportRequestProcessContract>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Report_RequestProcess_Contract");

                entity.Property(e => e.AccountPayCmpName).HasMaxLength(200);

                entity.Property(e => e.AccountReceiveCmpName).HasMaxLength(200);

                entity.Property(e => e.AddupReceivedAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.AddupReceivedPct)
                    .HasMaxLength(31)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ContractRate).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .HasColumnName("ID");

                entity.Property(e => e.Mode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.RmbeqAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("RMBEqAmount");

                entity.Property(e => e.SignAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.TotalAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.UsdeqAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("USDEqAmount");
            });

            modelBuilder.Entity<ViewReportRequestProcessFormalBill>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Report_RequestProcess_FormalBill");

                entity.Property(e => e.BillAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.BillCode).HasMaxLength(50);

                entity.Property(e => e.BillContent).HasMaxLength(1000);

                entity.Property(e => e.BillType).HasMaxLength(20);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.InvoiceDate)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessName).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewReportRequestProcessOfficialBill>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Report_RequestProcess_OfficialBill");

                entity.Property(e => e.Amount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.BillAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.BillCode).HasMaxLength(50);

                entity.Property(e => e.BillContent).HasMaxLength(1000);

                entity.Property(e => e.BillTaxAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.BillType).HasMaxLength(20);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.InvoiceDate)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.TaxRate)
                    .HasMaxLength(31)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewReportRequestProcessPay>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Report_RequestProcess_Pay");

                entity.Property(e => e.AccountReCmpName).HasMaxLength(200);

                entity.Property(e => e.ContractCode).HasMaxLength(50);

                entity.Property(e => e.ContractCurrency).HasMaxLength(20);

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasMaxLength(36)
                    .HasColumnName("ID");

                entity.Property(e => e.InvoiceNumber).HasMaxLength(50);

                entity.Property(e => e.PayInfoType).HasMaxLength(20);

                entity.Property(e => e.PaymentAmountLowercase)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentAmountOfHse)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("PaymentAmountOfHSE");

                entity.Property(e => e.PaymentAmountPercentage)
                    .HasMaxLength(31)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentAmountUppercase).HasMaxLength(200);

                entity.Property(e => e.PaymentDescription).HasMaxLength(50);

                entity.Property(e => e.PaymentNodeName).HasMaxLength(50);

                entity.Property(e => e.PaymentTotalTime).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PaymentTotalTimePercentage)
                    .HasMaxLength(31)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.ReceiptNumber).HasMaxLength(50);

                entity.Property(e => e.WaElecAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewReportRequestProcessRequest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Report_RequestProcess_Request");

                entity.Property(e => e.CodeName).HasMaxLength(200);

                entity.Property(e => e.CurCurrency).HasMaxLength(10);

                entity.Property(e => e.CurRequestAmount)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.CurRequestAmountUpp)
                    .HasMaxLength(100)
                    .HasColumnName("CurRequestAmountUPP");

                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .HasColumnName("ID");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.RequestDesc).HasMaxLength(100);

                entity.Property(e => e.RequestMethod)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.RequestNode).HasMaxLength(100);
            });

            modelBuilder.Entity<ViewRiskMortgageInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_RiskMortgageInfo");

                entity.Property(e => e.AccountDate).HasColumnType("datetime");

                entity.Property(e => e.AlbowlAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AlreadyAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ApplyLoginName).HasMaxLength(50);

                entity.Property(e => e.ApplyRealName).HasMaxLength(50);

                entity.Property(e => e.ApplyUserIdentity).HasMaxLength(50);

                entity.Property(e => e.Balance).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BowlAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("bowlAmount");

                entity.Property(e => e.DutyArea).HasMaxLength(500);

                entity.Property(e => e.DutyCode).HasMaxLength(50);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Manage)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.Person).HasMaxLength(50);

                entity.Property(e => e.PredictsafetyHours)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("predictsafetyHours");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.RemissionAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TradeDate).HasColumnType("datetime");

                entity.Property(e => e.UserIdentity).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewRoleAuthorityRelation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_RoleAuthorityRelation");

                entity.Property(e => e.Flag)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdcardNo)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("IDCardNo");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.Roleid)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewRunningcost>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_runningcost");

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.PaymentDate).HasColumnType("datetime");

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(50)
                    .HasColumnName("Project_id");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(500)
                    .HasColumnName("Project_Name");
            });

            modelBuilder.Entity<ViewSalaryCard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_SalaryCard");

                entity.Property(e => e.Idnum)
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasColumnName("IDnum");

                entity.Property(e => e.SalaryCard)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserRealName)
                    .HasMaxLength(12)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewSalarySalaryVestMap>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Salary_SalaryVestMap");

                entity.Property(e => e.DeptCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.DeptCodeForRelation)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.GongJiJinGuiShu)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.NewSalaryVest)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.SheBaoGuiShu)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewSecurityFund>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_SecurityFund");

                entity.Property(e => e.DispenseDate).HasColumnType("datetime");

                entity.Property(e => e.EntAnnuityAmount).HasColumnType("numeric(10, 2)");

                entity.Property(e => e.IdentityId)
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.ProvidentfundAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SocialSecurityAmount).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ViewSenDocGroupUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_SenDocGroupUser");

                entity.Property(e => e.Deptid)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("deptid");

                entity.Property(e => e.Deptname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("deptname");

                entity.Property(e => e.Groupid).HasColumnName("groupid");

                entity.Property(e => e.Groupname)
                    .HasMaxLength(54)
                    .IsUnicode(false)
                    .HasColumnName("groupname");

                entity.Property(e => e.Userid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("userid");

                entity.Property(e => e.Username)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("username");
            });

            modelBuilder.Entity<ViewSenDocPartyGroupSelectList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_SenDoc_PartyGroupSelectList");

                entity.Property(e => e.Account)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("account");

                entity.Property(e => e.Humanid)
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasColumnName("humanid");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.党内职务)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.支部)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.支部id)
                    .HasMaxLength(4)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewSentBackProcess>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VIEW_SentBackProcess");

                entity.Property(e => e.ProcessName).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewSubsidyWarning>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_Subsidy_Warning");

                entity.Property(e => e.Damount).HasColumnName("DAmount");

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.DueDateStr)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.LoginName)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.RequestRealName)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("Request_RealName");

                entity.Property(e => e.RequestUserIdentity)
                    .IsRequired()
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasColumnName("Request_UserIdentity");
            });

            modelBuilder.Entity<ViewSurveyDepartInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Survey_DepartInfo");

                entity.Property(e => e.Account)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("account");

                entity.Property(e => e.DepartmentName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DepartmentType)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdcardNo)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("IDCardNo");

                entity.Property(e => e.Name)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RoleScopeId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Role_Scope_Id");
            });

            modelBuilder.Entity<ViewSurveyProjectInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Survey_ProjectInfo");

                entity.Property(e => e.ContractType)
                    .HasMaxLength(50)
                    .HasColumnName("contract_type");

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("project_id");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("project_name");

                entity.Property(e => e.Sfzh)
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasColumnName("sfzh");

                entity.Property(e => e.Xmjl)
                    .HasMaxLength(50)
                    .HasColumnName("xmjl");
            });

            modelBuilder.Entity<ViewTask>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Task");

                entity.Property(e => e.IBeginTime)
                    .HasColumnType("datetime")
                    .HasColumnName("iBeginTime");

                entity.Property(e => e.IUser)
                    .HasMaxLength(200)
                    .HasColumnName("iUser");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Incident).HasColumnName("incident");

                entity.Property(e => e.PName)
                    .HasMaxLength(500)
                    .HasColumnName("pName");

                entity.Property(e => e.Params)
                    .HasMaxLength(1000)
                    .HasColumnName("params");

                entity.Property(e => e.SName)
                    .HasMaxLength(100)
                    .HasColumnName("sName");

                entity.Property(e => e.Source)
                    .HasMaxLength(100)
                    .HasColumnName("source");

                entity.Property(e => e.Summary)
                    .HasMaxLength(402)
                    .HasColumnName("summary");

                entity.Property(e => e.TBeginTime)
                    .HasColumnType("datetime")
                    .HasColumnName("tBeginTime");

                entity.Property(e => e.TEndTime)
                    .HasColumnType("datetime")
                    .HasColumnName("tEndTime");

                entity.Property(e => e.TStatus).HasColumnName("tStatus");

                entity.Property(e => e.TUser)
                    .HasMaxLength(200)
                    .HasColumnName("tUser");

                entity.Property(e => e.TaskId)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("taskId");
            });

            modelBuilder.Entity<ViewTaskBak>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Task_bak");

                entity.Property(e => e.IBeginTime)
                    .HasColumnType("datetime")
                    .HasColumnName("iBeginTime");

                entity.Property(e => e.IUser)
                    .HasMaxLength(200)
                    .HasColumnName("iUser");

                entity.Property(e => e.Incident).HasColumnName("incident");

                entity.Property(e => e.PName)
                    .HasMaxLength(500)
                    .HasColumnName("pName");

                entity.Property(e => e.Params)
                    .HasMaxLength(1000)
                    .HasColumnName("params");

                entity.Property(e => e.SName)
                    .HasMaxLength(100)
                    .HasColumnName("sName");

                entity.Property(e => e.Source)
                    .HasMaxLength(100)
                    .HasColumnName("source");

                entity.Property(e => e.Summary)
                    .HasMaxLength(201)
                    .HasColumnName("summary");

                entity.Property(e => e.TBeginTime)
                    .HasColumnType("datetime")
                    .HasColumnName("tBeginTime");

                entity.Property(e => e.TEndTime)
                    .HasColumnType("datetime")
                    .HasColumnName("tEndTime");

                entity.Property(e => e.TStatus).HasColumnName("tStatus");

                entity.Property(e => e.TUser)
                    .HasMaxLength(100)
                    .HasColumnName("tUser");

                entity.Property(e => e.TaskId)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("taskId");
            });

            modelBuilder.Entity<ViewTaskCompleted>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Task_Completed");

                entity.Property(e => e.IBeginTime)
                    .HasColumnType("datetime")
                    .HasColumnName("iBeginTime");

                entity.Property(e => e.IUser)
                    .HasMaxLength(200)
                    .HasColumnName("iUser");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Incident).HasColumnName("incident");

                entity.Property(e => e.PName)
                    .HasMaxLength(500)
                    .HasColumnName("pName");

                entity.Property(e => e.Params)
                    .HasMaxLength(1000)
                    .HasColumnName("params");

                entity.Property(e => e.SName)
                    .HasMaxLength(100)
                    .HasColumnName("sName");

                entity.Property(e => e.Source)
                    .HasMaxLength(100)
                    .HasColumnName("source");

                entity.Property(e => e.Summary)
                    .HasMaxLength(402)
                    .HasColumnName("summary");

                entity.Property(e => e.TBeginTime)
                    .HasColumnType("datetime")
                    .HasColumnName("tBeginTime");

                entity.Property(e => e.TEndTime)
                    .HasColumnType("datetime")
                    .HasColumnName("tEndTime");

                entity.Property(e => e.TStatus).HasColumnName("tStatus");

                entity.Property(e => e.TUser)
                    .HasMaxLength(100)
                    .HasColumnName("tUser");

                entity.Property(e => e.TaskId)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("taskId");
            });

            modelBuilder.Entity<ViewTaskCompletedRecent>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Task_Completed_Recent");

                entity.Property(e => e.IBeginTime)
                    .HasColumnType("datetime")
                    .HasColumnName("iBeginTime");

                entity.Property(e => e.IUser)
                    .HasMaxLength(200)
                    .HasColumnName("iUser");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Incident).HasColumnName("incident");

                entity.Property(e => e.PName)
                    .HasMaxLength(500)
                    .HasColumnName("pName");

                entity.Property(e => e.Params)
                    .HasMaxLength(1000)
                    .HasColumnName("params");

                entity.Property(e => e.SName)
                    .HasMaxLength(100)
                    .HasColumnName("sName");

                entity.Property(e => e.Source)
                    .HasMaxLength(100)
                    .HasColumnName("source");

                entity.Property(e => e.Summary)
                    .HasMaxLength(402)
                    .HasColumnName("summary");

                entity.Property(e => e.TBeginTime)
                    .HasColumnType("datetime")
                    .HasColumnName("tBeginTime");

                entity.Property(e => e.TEndTime)
                    .HasColumnType("datetime")
                    .HasColumnName("tEndTime");

                entity.Property(e => e.TStatus).HasColumnName("tStatus");

                entity.Property(e => e.TUser)
                    .HasMaxLength(100)
                    .HasColumnName("tUser");

                entity.Property(e => e.TaskId)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("taskId");
            });

            modelBuilder.Entity<ViewTaskToDo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Task_ToDo");

                entity.Property(e => e.IBeginTime)
                    .HasColumnType("datetime")
                    .HasColumnName("iBeginTime");

                entity.Property(e => e.IUser)
                    .HasMaxLength(200)
                    .HasColumnName("iUser");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Incident).HasColumnName("incident");

                entity.Property(e => e.PName)
                    .HasMaxLength(500)
                    .HasColumnName("pName");

                entity.Property(e => e.Params)
                    .HasMaxLength(1000)
                    .HasColumnName("params");

                entity.Property(e => e.SName)
                    .HasMaxLength(100)
                    .HasColumnName("sName");

                entity.Property(e => e.Source)
                    .HasMaxLength(100)
                    .HasColumnName("source");

                entity.Property(e => e.Summary)
                    .HasMaxLength(402)
                    .HasColumnName("summary");

                entity.Property(e => e.TBeginTime)
                    .HasColumnType("datetime")
                    .HasColumnName("tBeginTime");

                entity.Property(e => e.TEndTime)
                    .HasColumnType("datetime")
                    .HasColumnName("tEndTime");

                entity.Property(e => e.TStatus).HasColumnName("tStatus");

                entity.Property(e => e.TUser)
                    .HasMaxLength(200)
                    .HasColumnName("tUser");

                entity.Property(e => e.TaskId)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("taskId");
            });

            modelBuilder.Entity<ViewTccAbroadAbroadRecord>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_TCC_Abroad_AbroadRecord");

                entity.Property(e => e.AimCountry).HasMaxLength(50);

                entity.Property(e => e.BeginDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.LeaveTime).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.ProjectName).IsRequired();

                entity.Property(e => e.ProjectNo)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.RleaveTime)
                    .HasColumnType("datetime")
                    .HasColumnName("RLeaveTime");

                entity.Property(e => e.UserKey).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewTccHrpUserPosition>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Tcc_HrpUser_Position");

                entity.Property(e => e.A0101)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.C012o)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("C012O");

                entity.Property(e => e.Codeitemdesc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("codeitemdesc");

                entity.Property(e => e.UserKey)
                    .HasMaxLength(18)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewTccHrpVoteAnswer>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_TCC_HrpVote_Answer");

                entity.Property(e => e.Answer).HasMaxLength(50);

                entity.Property(e => e.DeptName).HasMaxLength(200);

                entity.Property(e => e.Question).HasMaxLength(500);

                entity.Property(e => e.QuestionType).HasMaxLength(50);

                entity.Property(e => e.UserIp)
                    .HasMaxLength(50)
                    .HasColumnName("user_IP");

                entity.Property(e => e.UserType).HasMaxLength(50);

                entity.Property(e => e.WorkYear).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewTccRunningCost>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_TccRunningCost");

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.PaymentDate).HasColumnType("datetime");

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(50)
                    .HasColumnName("Project_id");

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(500)
                    .HasColumnName("Project_Name");
            });

            modelBuilder.Entity<ViewTccTest1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_tcc_test1");

                entity.Property(e => e.F1).HasMaxLength(255);

                entity.Property(e => e.F2).HasMaxLength(255);

                entity.Property(e => e.F3).HasMaxLength(255);

                entity.Property(e => e.F4).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewTccTravelItineraryInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_TccTravelItineraryInfo");

                entity.Property(e => e.ExpenseWhere).HasMaxLength(200);

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.StrokeNumber).HasMaxLength(200);

                entity.Property(e => e.TicketingCompany).HasMaxLength(200);

                entity.Property(e => e.出差单号).HasMaxLength(50);

                entity.Property(e => e.报销单号).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewTccTravelItineraryOfPersonInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_TccTravelItineraryOfPersonInfo");

                entity.Property(e => e.PersonDeptCode).HasMaxLength(50);

                entity.Property(e => e.PersonDeptName).HasMaxLength(200);

                entity.Property(e => e.PersonLogin).HasMaxLength(50);

                entity.Property(e => e.PersonRealName).HasMaxLength(50);

                entity.Property(e => e.UserIdentity)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.报销单号).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewTccUserAbroadInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_TccUserAbroadInfo");

                entity.Property(e => e.AimCountry).HasMaxLength(50);

                entity.Property(e => e.BeginDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LeaveCountry).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.PostGrade).HasColumnType("numeric(10, 2)");

                entity.Property(e => e.ProjectNo).HasMaxLength(20);

                entity.Property(e => e.RequestDeptNo).HasMaxLength(50);

                entity.Property(e => e.RequestRealName).HasMaxLength(30);

                entity.Property(e => e.TaskType).HasMaxLength(50);

                entity.Property(e => e.Tvcountry).HasColumnName("TVCountry");

                entity.Property(e => e.UserKey).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewTccUserType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Tcc_User_Type");

                entity.Property(e => e.IdcardNo)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("IDCardNo");

                entity.Property(e => e.RoleDesc)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("Role_Desc");
            });

            modelBuilder.Entity<ViewTccriskMortgageInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_TCCRiskMortgageInfo");

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DutyCode).HasMaxLength(50);

                entity.Property(e => e.Person).HasMaxLength(50);

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.UserIdentity).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewTelephoneSubsidyInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_TelephoneSubsidyInfo");

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DeptName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RealName).HasMaxLength(50);

                entity.Property(e => e.UserIdentify).HasMaxLength(50);
            });

            modelBuilder.Entity<ViewTelephoneSubsidyofHasHappened>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_TelephoneSubsidyofHasHappened");

                entity.Property(e => e.HasHappenAmount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.RealName).HasMaxLength(50);

                entity.Property(e => e.UserIdentify).HasMaxLength(50);

                entity.Property(e => e.Year).HasColumnName("YEAR");
            });

            modelBuilder.Entity<ViewTest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_Test");

                entity.Property(e => e.CheckScore)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("check_score");

                entity.Property(e => e.DutyArea)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("duty_area");

                entity.Property(e => e.DutyAreacode)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("duty_areacode");

                entity.Property(e => e.DutyHuman)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("duty_human");

                entity.Property(e => e.DutyHumanSid)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("duty_human_sid");

                entity.Property(e => e.RewardBase)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("reward_base");

                entity.Property(e => e.SafeHours)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("safe_hours");

                entity.Property(e => e.SafeMoney)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("safe_money");

                entity.Property(e => e.SafeYearhours)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("safe_yearhours");

                entity.Property(e => e.Suffix)
                    .IsRequired()
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasColumnName("suffix");
            });

            modelBuilder.Entity<ViewThirdPaymentMonthRecord>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_ThirdPayment_MonthRecord");

                entity.Property(e => e.Digest).HasMaxLength(1200);

                entity.Property(e => e.SFlag).HasColumnName("sFlag");

                entity.Property(e => e.SubjectCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SubjectName).HasMaxLength(300);

                entity.Property(e => e.VIncident).HasColumnName("vIncident");

                entity.Property(e => e.VProcessName)
                    .HasMaxLength(50)
                    .HasColumnName("vProcessName");
            });

            modelBuilder.Entity<ViewTrainSystemChiefEngineer>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_TrainSystem_ChiefEngineer");

                entity.Property(e => e.Account)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("account");

                entity.Property(e => e.DeptSid)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("dept_sid");

                entity.Property(e => e.姓名)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.部门)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewTrainingExpenseDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VIEW_TrainingExpenseDetails");

                entity.Property(e => e.Linkproname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("linkproname");

                entity.Property(e => e.ProcessName).HasMaxLength(50);

                entity.Property(e => e.主办单位).HasMaxLength(3000);

                entity.Property(e => e.主管部门审核).HasMaxLength(200);

                entity.Property(e => e.主管部门负责人).HasMaxLength(200);

                entity.Property(e => e.培训具体地点).HasMaxLength(1001);

                entity.Property(e => e.培训开始时间).HasColumnType("datetime");

                entity.Property(e => e.培训时间天).HasColumnName("培训时间(天)");

                entity.Property(e => e.培训时间小时).HasColumnName("培训时间(小时)");

                entity.Property(e => e.培训结束时间).HasColumnType("datetime");

                entity.Property(e => e.培训费用).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.姓名).HasMaxLength(50);

                entity.Property(e => e.差旅费).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.报销时间).HasColumnType("datetime");

                entity.Property(e => e.表单编号).HasMaxLength(50);

                entity.Property(e => e.部门).HasMaxLength(200);

                entity.Property(e => e.部门负责人).HasMaxLength(200);
            });

            modelBuilder.Entity<ViewTransportSubsidyPersonList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VIEW_TransportSubsidy_PersonList");

                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Idnumber)
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasColumnName("IDNumber");

                entity.Property(e => e.RealName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewTransportSubsidyofHasHappened>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("view_TransportSubsidyofHasHappened");

                entity.Property(e => e.HasHappenAmount).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.RealName).HasMaxLength(50);

                entity.Property(e => e.UserIdentify).HasMaxLength(50);

                entity.Property(e => e.Year).HasColumnName("YEAR");
            });

            modelBuilder.Entity<ViewTripStandard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VIEW_TripStandard");

                entity.Property(e => e.AirPlane).HasMaxLength(200);

                entity.Property(e => e.DomesticOverseaName)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.PostCategory).HasMaxLength(10);

                entity.Property(e => e.Regions).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SteamShip).HasMaxLength(200);

                entity.Property(e => e.Train).HasMaxLength(200);
            });

            modelBuilder.Entity<ViewUltiCompleteTaskList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Ulti_CompleteTaskList");

                entity.Property(e => e.ProcessName).HasMaxLength(256);

                entity.Property(e => e.ProcessStatus)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Requestor)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.RequestorName).HasMaxLength(255);

                entity.Property(e => e.TaskEndDate).HasColumnType("datetime");

                entity.Property(e => e.Transactor).HasMaxLength(200);

                entity.Property(e => e.TransactorName).HasMaxLength(200);
            });

            modelBuilder.Entity<ViewUltiInBoxTaskList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Ulti_InBoxTaskList");

                entity.Property(e => e.Incident).HasColumnName("INCIDENT");

                entity.Property(e => e.Level).HasColumnName("LEVEL");

                entity.Property(e => e.ProcessBeginDate).HasColumnType("datetime");

                entity.Property(e => e.ProcessName).HasMaxLength(256);

                entity.Property(e => e.Requestor).HasMaxLength(255);

                entity.Property(e => e.RequestorName).HasMaxLength(255);

                entity.Property(e => e.TaskId)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Transactor).HasMaxLength(200);

                entity.Property(e => e.TransactorName).HasMaxLength(200);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewUltiInitTaskList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Ulti_InitTaskList");

                entity.Property(e => e.ProcessBeginDate).HasColumnType("datetime");

                entity.Property(e => e.ProcessName).HasMaxLength(256);

                entity.Property(e => e.ProcessStatus)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Requestor)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.RequestorName).HasMaxLength(255);
            });

            modelBuilder.Entity<ViewUltiWarningTaskList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Ulti_WarningTaskList");

                entity.Property(e => e.ProcessBeginDate).HasColumnType("datetime");

                entity.Property(e => e.ProcessName)
                    .IsRequired()
                    .HasMaxLength(256)
                    .IsFixedLength(true);

                entity.Property(e => e.Requestor)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.RequestorName).HasMaxLength(255);

                entity.Property(e => e.TaskBeginDate).HasColumnType("datetime");

                entity.Property(e => e.Transactor).HasMaxLength(200);

                entity.Property(e => e.TransactorName).HasMaxLength(200);
            });

            modelBuilder.Entity<ViewUserDept>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_UserDept");

                entity.Property(e => e.Cardholder).HasMaxLength(200);

                entity.Property(e => e.Dept).HasMaxLength(200);

                entity.Property(e => e.DeptCode).HasMaxLength(200);

                entity.Property(e => e.IdentityId).HasMaxLength(200);

                entity.Property(e => e.ReceiverUserName).HasMaxLength(200);
            });

            modelBuilder.Entity<ViewUserLocation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VIEW_UserLocation");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.IdentityId).HasMaxLength(200);

                entity.Property(e => e.IsTj).HasColumnName("IsTJ");

                entity.Property(e => e.UserName).HasMaxLength(200);
            });

            modelBuilder.Entity<ViewVehicleDeptCostMonth>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Vehicle_Dept_Cost_Month");

                entity.Property(e => e.CompFare).HasColumnType("money");

                entity.Property(e => e.DeptName).HasMaxLength(50);

                entity.Property(e => e.UseDeptId)
                    .HasMaxLength(50)
                    .HasColumnName("UseDeptID");

                entity.Property(e => e.UseMonth)
                    .HasMaxLength(7)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViewVehicleProjectCostMonth>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_Vehicle_Project_Cost_Month");

                entity.Property(e => e.CompFare).HasColumnType("money");

                entity.Property(e => e.ProjectName).HasMaxLength(50);

                entity.Property(e => e.ProjectNo).HasMaxLength(50);

                entity.Property(e => e.UseMonth)
                    .HasMaxLength(7)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VmTmp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vm_tmp");

                entity.Property(e => e.ApplyUserName).HasMaxLength(200);

                entity.Property(e => e.ApproveMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AwardComposeCode).HasMaxLength(255);

                entity.Property(e => e.AwardComposed).HasMaxLength(200);

                entity.Property(e => e.CurrentMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.PaymentyMoney).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ProcessName).HasMaxLength(200);

                entity.Property(e => e.ProjectAward).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ProjectCode).HasMaxLength(100);

                entity.Property(e => e.ProjectName).HasMaxLength(100);

                entity.Property(e => e.StatusA)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.StatusB)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.StatusC)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.StatusD)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.TotalState)
                    .IsRequired()
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.Yffed)
                    .HasColumnType("decimal(38, 2)")
                    .HasColumnName("YFFED");
            });

            modelBuilder.Entity<We3>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("we3");

                entity.Property(e => e.UserIdentity)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserLoginName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<WorkPlanCheckList>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("WorkPlanCheckList");

                entity.Property(e => e.AnnualStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CheckPersonName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Complete)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("complete");

                entity.Property(e => e.CurrentSituation)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModelListName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PlanBeginTime)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PlanEndTime)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PlanItemContent)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Remark).HasColumnType("text");

                entity.Property(e => e.ResponPerson)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SysCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("SYS_Created");

                entity.Property(e => e.SysCreatedBy).HasColumnName("SYS_CreatedBy");

                entity.Property(e => e.SysDeleted).HasColumnName("SYS_Deleted");

                entity.Property(e => e.SysDivision).HasColumnName("SYS_DIVISION");

                entity.Property(e => e.SysLastUpd)
                    .HasColumnType("datetime")
                    .HasColumnName("SYS_LAST_UPD");

                entity.Property(e => e.SysLastUpdBy).HasColumnName("SYS_LAST_UPD_BY");

                entity.Property(e => e.SysOrg).HasColumnName("SYS_ORG");

                entity.Property(e => e.SysPostn).HasColumnName("SYS_POSTN");

                entity.Property(e => e.SysReplacement).HasColumnName("SYS_REPLACEMENT");

                entity.Property(e => e.TnormalHours)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TnormalWorkTime).HasColumnName("TNormalWorkTime");

                entity.Property(e => e.ToverWorkTime).HasColumnName("TOverWorkTime");

                entity.Property(e => e.TovertimeHours)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UbscPlanItemsFk).HasColumnName("UBSC_PlanItems_FK");

                entity.Property(e => e.UcmlUserFk).HasColumnName("UCML_User_FK");

                entity.Property(e => e.WorkPlanCheckListOid).HasColumnName("WorkPlanCheckListOID");

                entity.Property(e => e.WorkPlanModeListFk).HasColumnName("WorkPlanModeList_FK");
            });

            modelBuilder.Entity<WorkPlanModeList>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("WorkPlanModeList");

                entity.Property(e => e.ModeListName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SysCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("SYS_Created");

                entity.Property(e => e.SysCreatedBy).HasColumnName("SYS_CreatedBy");

                entity.Property(e => e.SysDeleted).HasColumnName("SYS_Deleted");

                entity.Property(e => e.SysDivision).HasColumnName("SYS_DIVISION");

                entity.Property(e => e.SysLastUpd)
                    .HasColumnType("datetime")
                    .HasColumnName("SYS_LAST_UPD");

                entity.Property(e => e.SysLastUpdBy).HasColumnName("SYS_LAST_UPD_BY");

                entity.Property(e => e.SysOrg).HasColumnName("SYS_ORG");

                entity.Property(e => e.SysPostn).HasColumnName("SYS_POSTN");

                entity.Property(e => e.SysReplacement).HasColumnName("SYS_REPLACEMENT");

                entity.Property(e => e.WorkPlanModeListOid).HasColumnName("WorkPlanModeListOID");

                entity.Property(e => e.WorkPlanModeTypeFk).HasColumnName("WorkPlanModeType_FK");
            });

            modelBuilder.Entity<WorkPlanModeType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("WorkPlanModeType");

                entity.Property(e => e.ModeName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SysCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("SYS_Created");

                entity.Property(e => e.SysCreatedBy).HasColumnName("SYS_CreatedBy");

                entity.Property(e => e.SysDeleted).HasColumnName("SYS_Deleted");

                entity.Property(e => e.SysDivision).HasColumnName("SYS_DIVISION");

                entity.Property(e => e.SysLastUpd)
                    .HasColumnType("datetime")
                    .HasColumnName("SYS_LAST_UPD");

                entity.Property(e => e.SysLastUpdBy).HasColumnName("SYS_LAST_UPD_BY");

                entity.Property(e => e.SysOrg).HasColumnName("SYS_ORG");

                entity.Property(e => e.SysPostn).HasColumnName("SYS_POSTN");

                entity.Property(e => e.SysReplacement).HasColumnName("SYS_REPLACEMENT");

                entity.Property(e => e.WorkPlanModeTypeOid).HasColumnName("WorkPlanModeTypeOID");
            });

            modelBuilder.Entity<WorkPlanSituation>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("WorkPlanSituation");

                entity.Property(e => e.Attachment)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Complete).HasColumnName("complete");

                entity.Property(e => e.FillType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Leadership)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Quarter)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SysCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("SYS_Created");

                entity.Property(e => e.SysCreatedBy).HasColumnName("SYS_CreatedBy");

                entity.Property(e => e.SysDeleted).HasColumnName("SYS_Deleted");

                entity.Property(e => e.SysDivision).HasColumnName("SYS_DIVISION");

                entity.Property(e => e.SysLastUpd)
                    .HasColumnType("datetime")
                    .HasColumnName("SYS_LAST_UPD");

                entity.Property(e => e.SysLastUpdBy).HasColumnName("SYS_LAST_UPD_BY");

                entity.Property(e => e.SysOrg).HasColumnName("SYS_ORG");

                entity.Property(e => e.SysPostn).HasColumnName("SYS_POSTN");

                entity.Property(e => e.SysReplacement).HasColumnName("SYS_REPLACEMENT");

                entity.Property(e => e.TrueBeginTime).HasColumnType("datetime");

                entity.Property(e => e.TrueEndTime).HasColumnType("datetime");

                entity.Property(e => e.UbscPlanItemsFk).HasColumnName("UBSC_PlanItems_FK");

                entity.Property(e => e.WorkPlanSituationOid).HasColumnName("WorkPlanSituationOID");

                entity.Property(e => e.WorkType)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<WorkVisaRecord>(entity =>
            {
                entity.ToTable("WorkVisaRecord");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ApplyDeptNo).HasMaxLength(50);

                entity.Property(e => e.ApplyLogin)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ApplyProjectInfo).HasComment("项目简介");

                entity.Property(e => e.ApplyProjectNo).HasMaxLength(50);

                entity.Property(e => e.Country).HasComment("国家信息");

                entity.Property(e => e.DeptNo).HasMaxLength(50);

                entity.Property(e => e.FormNumber).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NewWorkVisaValid)
                    .HasMaxLength(50)
                    .HasComment("变更后截止期");

                entity.Property(e => e.ProjectRole)
                    .HasMaxLength(50)
                    .HasComment("项目角色");

                entity.Property(e => e.UserKey).HasMaxLength(50);

                entity.Property(e => e.WorkVisaCode)
                    .HasMaxLength(50)
                    .HasComment("工作证编号");

                entity.Property(e => e.WorkVisaNum).HasComment("已延期次数");

                entity.Property(e => e.WorkVisaSign)
                    .HasColumnType("datetime")
                    .HasComment("原签发日期");

                entity.Property(e => e.WorkVisaStatus)
                    .HasMaxLength(50)
                    .HasComment("拟变更内容 撤销/延期");

                entity.Property(e => e.WorkVisaValid).HasColumnType("datetime");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
